{"_wp_admin_bar_init":{"doc":"\/**\n * Instantiate the admin bar object and set it up as a global for access elsewhere.\n *\n * To hide the admin bar, you're looking in the wrong place. Unhooking this function will not\n * properly remove the admin bar. For that, use show_admin_bar(false) or the show_admin_bar filter.\n *\n * @since 3.1.0\n * @access private\n * @return bool Whether the admin bar was successfully initialized.\n *\/","file":"admin-bar.php","line":18,"missingDoc":false,"filters":["'wp_admin_bar_class'"],"uses":{"is_admin_bar_showing":[21],"class_exists":[29],"initialize":[34],"add_menus":[35]},"used_by":[]},"is_admin_bar_showing":{"doc":"\/**\n * Determine whether the admin bar should be showing.\n *\n * @since 3.1.0\n *\n * @return bool Whether the admin bar should be showing.\n *\/","file":"admin-bar.php","line":729,"missingDoc":false,"filters":["'show_admin_bar'"],"uses":{"defined":[733,733,733],"is_admin":[737],"_get_admin_bar_pref":[744],"is_user_logged_in":[741]},"used_by":{"_wp_admin_bar_init":[21],"wp_admin_bar_render":[55],"get_body_class":[513]}},"__main":{"doc":"","file":"","line":0,"missingDoc":false,"filters":["'atom_ns'","'atom_comments_ns'","'comments_atom_head'","'the_title_rss'","'comment_atom_entry'","'atom_ns'","'atom_head'","'atom_author'","'atom_entry'","'rdf_ns'","'rss_update_period'","'rss_update_frequency'","'rdf_header'","'rdf_item'","'rss_head'","'rss_item'","'rss2_ns'","'rss2_comments_ns'","'rss_update_period'","'rss_update_frequency'","'commentsrss2_head'","'the_title_rss'","'commentrss2_item'","'rss2_ns'","'rss_update_period'","'rss_update_frequency'","'rss2_head'","'rss2_item'","'load_feed_engine'","'template_redirect'","'exit_on_http_head'","'do_robots'","'template_include'","'comment_form'","'comment_form'","'use_google_chrome_frame'"],"uses":{"add_action":[39,66,67,392,506,536,183,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,221,222,223,227,232,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,263,264,265,268,269,272,273,276,282,283,1201,1282,1283,1284,1285,1392,1393,1300,151,18,19,20,21,25,26,29,32,37,38,39,40,41,48,51,1777,165,1562,870,874,121,582,1420,1601,1638,1671,434,435,437,438,439,440,441,443,444,445,446,447,449],"class_exists":[3,836,2,2,8,6,182,10,13,19,11,105,145,185,200,12,230,11],"define":[62,67,72,77,82,87,92,108,113,119,124,130,135,141,147,153,159,165,171,177,182,187,192,197,202,207,212,217,222,227,232,237,242,247,252,257,262,267,272,277,282,287,292,297,302,307,312,317,322,327,332,337,342,347,352,357,362,368,373,378,383,388,393,398,403,408,413,418,423,428,433,438,443,448,453,458,463,10,11,12,13,14,15,16,17,18,19,20,22,23,24,11,12,13,14,15,45,11,12,116,123,130,137,144,151,158,165,172,179,186,193,200,207,214,26,27,28,15,20,25,30,35],"version_compare":[38],"function_exists":[648,32,10,16,35,64,77,122,37,60,33,18,39,56,73,98,115,136,9,43,60,111,125,148,177,460,492,504,565,592,639,688,718,736,794,822,852,881,900,928,979,1084,1167,1188,1225,1243,1275,1296,1384,1401,1428,1478,1507,1554,1578,1677,389,821,865,900,15],"spl_autoload_register":[41],"gmdate":[119,16,26,54,58],"_deprecated_file":[6,7,7,8,18,10,10,10,10,10],"basename":[6,7,7,8,18,10,10,10,10,13,10,10,10,10,10,10],"add_filter":[17,18,19,26,27,29,34,40,42,47,48,49,54,56,62,63,64,70,71,73,78,83,87,88,92,97,98,99,104,105,109,110,115,116,117,118,123,127,128,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,149,150,151,152,153,154,156,158,160,163,164,165,166,167,168,169,170,171,172,173,176,177,178,179,180,181,182,184,185,186,187,188,189,190,191,192,193,194,279,286,289,17,24,33,36,44,45,46,47,54,56,58,59,66,1836,1865,494,5449,5468,5482,5506,5522,871,872,875,335,29,71],"is_admin":[24,38,55,69,72,20,55],"defined":[231,3,44,55,57,17,84,83,95,117,6,25,431],"header":[8,8,8,8,8,8,13,14,15,16,17,18,19,10,24,25,26,27,32,41,43,47,50,56,57,58,91,98,56],"feed_content_type":[8,8,8,8,8,8],"get_option":[8,9,8,11,45,8,11,45,8,11,8,10,8,11,43,15,14,16,25,25,69,68,64],"bloginfo_rss":[13,25,30,34,38,38,39,40,57,75,80,15,16,19,20,24,24,39,50,21,22,23,24,14,15,16,19,29,30,24,26,27,29],"printf":[19,21,23,52,54,22,24,26,44,46,232,14,38,56,67,71,118,26,65,72,87,17,19,20,32,35,38,41,44,47],"ent2ncr":[19,21,23,52,54,22,24,26,44,46,54],"__":[19,21,23,52,54,22,24,26,44,46,54,232,35,121,122,7,7,10,10,14,38,56,67,71,118,10,10,58,58,65,72,87,10,10,17,19,19,19,20,10,10,10,10,32,35,35,38,38,41,44,47,55,63],"get_the_title_rss":[19,22],"is_search":[20,33,23,28,43,27],"get_bloginfo_rss":[21,23,24,26],"get_search_query":[21,34,24,44],"get_wp_title_rss":[23,26],"is_singular":[18,29,49,21,41,36],"mysql2date":[27,66,67,22,25,42,17,31,51,28,38],"get_lastcommentmodified":[27,31],"comments_link_feed":[30,37],"esc_url":[31,32,51,54,35],"get_post_comments_feed_link":[31,32,51,54,35],"home_url":[34,232,45],"get_search_comments_feed_link":[35,36],"have_comments":[44,44,36,36,25],"the_comment":[44,36],"get_post":[45,37,46],"get_the_title":[50,42,27],"get_comment_author_rss":[52,54,44,46,50],"comment_link":[57,69,71,49],"comment_author_rss":[60],"get_comment_author_url":[61,61],"comment_guid":[65,80,52],"get_comment_time":[66,67,51,56],"get_the_password_form":[69,55,48],"comment_text":[71,58,55],"post_password_required":[68,53,47,16],"the_guid":[75,40,42],"the_permalink_rss":[75,39,46,50,33,39,41,26,29,36],"get_comment":[77],"get_comment_link":[80],"wp_title_rss":[19,22,14,24],"get_lastpostmodified":[22,25,17,28],"bloginfo":[25,15,16,18,16,16,18,20,21,29,29,31,45,46],"self_link":[26,28,25],"have_posts":[29,32,38,22,33,31,30],"the_post":[29,32,38,22,33,31],"the_author":[32,43,39],"get_the_author_meta":[33],"the_author_meta":[34],"html_type_rss":[38,44,46],"the_title_rss":[38,40,24,35],"get_post_modified_time":[41],"get_post_time":[42,38],"the_category_rss":[43,44,40],"the_excerpt_rss":[44,46,48,25,44,46,51],"the_content_feed":[46,49],"atom_enclosure":[48],"get_comments_number":[50,51,52,55,26,27],"rewind_posts":[38],"is_single":[29,34,27],"comment_text_rss":[57],"get_the_content_feed":[47],"strlen":[48,63,66],"rss_enclosure":[56],"wp_mce_translation":[564],"error_reporting":[10,7,19],"dirname":[13,14,15,16,19,9,12,12,10,11,10,10,17,17,13,15,17],"getRequestParam":[25],"fopen":[38],"feof":[42,78],"fread":[43],"fclose":[45,81],"file_get_contents":[48],"parse_url":[57],"fsockopen":[71],"intval":[71],"fputs":[74],"fgets":[79],"explode":[84],"decode":[93],"call_user_func_array":[98],"encode":[110],"get_bloginfo":[10,17,19,19,35,35,38,38,41,41,44,44,47,47],"language_attributes":[13,13],"_e":[16,162,163,164,165,171,172,173,174,175,179,180,181,182,183,184,185,186,187,191,192,195,195,195,195,196,196,197,197,198,198,200,200,201,201,202,202,203,203,204,204,207,209,209,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,220,222,223,224,229,231,233,234,33,35,62,66,75,80,85,90,103,108,114,17,49,72,77,77,80,80,83,21,57,69,73,74],"wp_admin_css":[19],"is_rtl":[140],"esc_attr_e":[162,163,164,165,237,245,245,98,72,91,73,74,75],"esc_attr__":[232],"time":[26,58],"get_file":[35,36,30],"stripos":[30,53,54,61,76],"array_map":[450],"wp_kses_array_lc":[452,453],"add_shortcode":[609,610,658],"remove_filter":[62,63,33],"is_multisite":[14],"ms_file_constants":[17],"status_header":[22,28,77],"rtrim":[26,39],"str_replace":[26,47,45,89],"is_file":[27,72],"wp_check_filetype":[32],"mime_content_type":[34],"substr":[39,28,29,30,31,32,27,42,41,64,66,68,70,36],"strrpos":[39],"filesize":[43],"strpos":[42,26,64,68,67,70,69,63,65,65,67,67,69,71,71,51,87,87,93,93,99],"filemtime":[54],"md5":[55],"stripslashes":[61],"trim":[66,29],"strtotime":[68,71],"readfile":[82],"ms_subdomain_constants":[21],"addslashes":[25],"wp_load_translations_early":[34,120],"wp_die":[35,122],"preg_replace":[44,46,30],"wpmu_current_site":[48],"get_var":[50,62,121],"prepare":[50,60,62],"wp_cache_get":[53,74],"get_blog_details":[55,76,101],"wp_cache_set":[57,78],"get_row":[60],"htmlspecialchars":[66],"in_array":[72],"is_subdomain_install":[52,83],"is_object":[83],"ms_not_installed":[104],"get_current_site_name":[114],"set_prefix":[126],"set_blog_id":[127],"get_blog_prefix":[128],"wp_start_object_cache":[133],"ms_upload_constants":[136],"_deprecated_function":[95,112,133,169],"ini_set":[14],"is_feed":[17],"do_feed":[18],"is_trackback":[20],"is_robots":[14],"get_search_template":[28],"is_tax":[29],"get_taxonomy_template":[29],"is_front_page":[30],"get_front_page_template":[30],"is_home":[31,66],"get_home_template":[31],"is_attachment":[32],"get_attachment_template":[32],"get_single_template":[34],"is_page":[35,66],"get_page_template":[35],"is_category":[36,31,26],"get_category_template":[36],"is_tag":[37],"get_tag_template":[37],"is_author":[38],"get_author_template":[38],"is_date":[39],"get_date_template":[39],"is_archive":[40],"get_archive_template":[40],"is_comments_popup":[41],"get_comments_popup_template":[41],"is_paged":[42,27],"get_paged_template":[42],"get_index_template":[44],"is_404":[27,30,26],"get_404_template":[27],"sprintf":[10,10,10,10,10,10,10,10,10,10],"the_title":[14],"get_trackback_url":[38],"pings_open":[37],"wp_get_current_commenter":[43],"extract":[44],"get_approved_comments":[45],"comment_ID":[54],"comment_type":[56],"get_comment_author_link":[56],"get_comment_date":[56],"get_comment_ID":[56],"allowed_tags":[67,87],"get_edit_user_link":[71,72],"wp_logout_url":[71,72],"get_permalink":[71,65,72],"esc_attr":[74,79,84,97,76,79,82],"comments_open":[65,44,54],"timer_stop":[118,20],"_n":[26],"number_format_i18n":[27],"previous_comments_link":[30,39],"next_comments_link":[31,40],"wp_list_comments":[35],"comment_form_title":[58],"cancel_comment_reply_link":[61],"wp_login_url":[65],"is_user_logged_in":[70,64],"comment_id_fields":[92],"get_num_queries":[20],"wp_footer":[28],"wp_title":[18],"wp_enqueue_script":[36],"wp_head":[38],"body_class":[40],"get_search_form":[17],"single_cat_title":[32],"is_day":[34,26],"get_the_time":[35,38,41],"is_month":[37,26],"is_year":[40,27],"esc_html":[44],"wp_list_pages":[55],"wp_get_archives":[59],"wp_list_categories":[63],"wp_list_bookmarks":[67],"wp_register":[71],"wp_loginout":[72],"wp_meta":[76],"dynamic_sidebar":[15],"is_main_site":[431],"is_network_admin":[431,22],"preg_match":[23,25,27,34,40],"is_user_admin":[24],"strtolower":[35,41]},"used_by":[]},"add_action":{"doc":"\/**\n * Hooks a function on to a specific action.\n *\n * Actions are the hooks that the WordPress core launches at specific points\n * during execution, or when specific events occur. Plugins can specify that\n * one or more of its PHP functions are executed at these points, using the\n * Action API.\n *\n * @uses add_filter() Adds an action. Parameter list and functionality are the same.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 1.2\n *\n * @param string $tag The name of the action to which the $function_to_add is hooked.\n * @param callback $function_to_add The name of the function you wish to be called.\n * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action.\n * @param int $accepted_args optional. The number of arguments the function accept (default 1).\n *\/","file":"plugin.php","line":333,"missingDoc":false,"filters":[],"uses":{"add_filter":[334]},"used_by":{"__main":[39,66,67,392,506,536,183,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,221,222,223,227,232,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,263,264,265,268,269,272,273,276,282,283,1201,1282,1283,1284,1285,1392,1393,1300,151,18,19,20,21,25,26,29,32,37,38,39,40,41,48,51,1777,165,1562,870,874,121,582,1420,1601,1638,1671,434,435,437,438,439,440,441,443,444,445,446,447,449],"wp_admin_bar_appearance_menu":[595],"WP_Admin_Bar::initialize":[44,46,56],"WP_Admin_Bar::add_menus":[469,470,471,474,475,476,477,481,482,484,486],"WP_Customize_Image_Control::__construct":[488],"WP_Customize_Manager::__construct":[37,38,41,51,53,54,55],"WP_Customize_Manager::setup_theme":[128],"WP_Customize_Manager::customize_preview_init":[333,334,335,336],"_WP_Editors::editor_settings":[160,161,163,164],"WP_Embed::__construct":[29,32],"WP_Scripts::__construct":[35],"WP_Widget_Recent_Posts::__construct":[539,540,541],"WP_Widget_Recent_Comments::__construct":[640,642,643],"wp_maybe_load_widgets":[2698],"add_thickbox":[2121],"wp_print_media_templates":[71],"wp_enqueue_media":[1547,1548],"register_activation_hook":[624],"register_deactivation_hook":[649],"register_post_type":[1337,1344],"wp_get_post_autosave":[4997],"add_feed":[93],"_custom_header_background_just_in_time":[1399,1412],"WP_Widget_Factory::WP_Widget_Factory":[320]}},"wp_admin_bar_render":{"doc":"\/**\n * Render the admin bar to the page based on the $wp_admin_bar->menu member var.\n * This is called very late on the footer actions so that it will render after anything else being\n * added to the footer.\n *\n * It includes the action \"admin_bar_menu\" which should be used to hook in and\n * add new menus to the admin bar. That way you can be sure that you are adding at most optimal point,\n * right before the admin bar is rendered. This also gives you access to the $post global, among others.\n *\n * @since 3.1.0\n *\/","file":"admin-bar.php","line":52,"missingDoc":false,"filters":["'admin_bar_menu'","'wp_before_admin_bar_render'","'wp_after_admin_bar_render'"],"uses":{"is_admin_bar_showing":[55],"is_object":[55],"render":[62]},"used_by":[]},"wp_admin_bar_wp_menu":{"doc":"\/**\n * Add the WordPress logo menu.\n *\n * @since 3.3.0\n *\/","file":"admin-bar.php","line":74,"missingDoc":false,"filters":[],"uses":{"add_menu":[75,86,95,103,111,119],"self_admin_url":[78,90],"__":[80,89,98,99,106,107,114,115,122,123],"is_user_logged_in":[84]},"used_by":[]},"self_admin_url":{"doc":"\/**\n * Retrieve the url to the admin area for either the current blog or the network depending on context.\n *\n * @package WordPress\n * @since 3.1.0\n *\n * @param string $path Optional path relative to the admin url.\n * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Admin url link with optional path appended.\n*\/","file":"link-template.php","line":2207,"missingDoc":false,"filters":[],"uses":{"network_admin_url":[2209],"is_user_admin":[2210],"user_admin_url":[2211],"admin_url":[2213],"is_network_admin":[2208]},"used_by":{"wp_admin_bar_wp_menu":[78,90],"get_edit_user_link":[1077]}},"__":{"doc":"\/**\n * Retrieves the translation of $text. If there is no translation, or\n * the domain isn't loaded, the original text is returned.\n *\n * @see translate() An alias of translate()\n * @since 2.1.0\n *\n * @param string $text Text to translate\n * @param string $domain Optional. Domain to retrieve the translated text\n * @return string Translated text\n *\/","file":"l10n.php","line":96,"missingDoc":false,"filters":[],"uses":{"translate":[97]},"used_by":{"wp_admin_bar_wp_menu":[80,89,98,99,106,107,114,115,122,123],"wp_admin_bar_my_account_item":[141,151],"wp_admin_bar_my_account_menu":[192,198],"wp_admin_bar_site_menu":[225,227,247,255,265],"wp_admin_bar_my_sites_menu":[292,305,312,318,324,330,362,370,379,387],"wp_admin_bar_shortlink_menu":[411],"wp_admin_bar_appearance_menu":[580,589,598,601,604,607],"wp_admin_bar_search_menu":[646],"AtomParser::parse":[133],"the_author":[55],"get_the_author_link":[137],"the_author_posts_link":[204],"wp_list_authors":[318],"_walk_bookmarks":[81],"wp_list_bookmarks":[205],"WP_User::__isset":[590],"WP_User::__get":[610],"WP_User::__set":[636],"WP_User::has_cap":[920],"get_category_parents":[59],"get_the_category_list":[161,174,177,184,197,200,207],"wp_list_categories":[414,422],"Walker_Category::start_el":[830,845],"the_tags":[1017],"WP_Http::request":[122,125,145],"WP_Http::_dispatch_request":[244],"WP_Http_Fsockopen::request":[742,782],"WP_Http_Streams::request":[866,924,943,966],"WP_Http_Curl::request":[1123,1164,1183],"WP_Admin_Bar::add_node":[96],"WP_Customize_Control::render_content":[292],"WP_Customize_Color_Control::__construct":[344],"WP_Customize_Image_Control::__construct":[480,484,485],"WP_Customize_Background_Image_Control::__construct":[656,663],"WP_Customize_Header_Image_Control::__construct":[729,739,740,741,742],"WP_Customize_Header_Image_Control::prepare_control":[768],"WP_Customize_Manager::wp_die":[83],"WP_Customize_Manager::register_controls":[717,728,739,746,762,768,783,791,811,833,837,838,839,840,850,854,855,856,866,870,871,891,894,898,926,929,940,944,945,956,968],"_WP_Editors::editor":[115],"_WP_Editors::editor_settings":[295],"_WP_Editors::wp_fullscreen_html":[664,664,682,683,685,686,688,689,691,692,694,727,736],"_WP_Editors::wp_link_query":[788],"WP_Image_Editor_GD::load":[87,94,98],"WP_Image_Editor_GD::resize":[151],"WP_Image_Editor_GD::_resize":[157,169],"WP_Image_Editor_GD::crop":[249],"WP_Image_Editor_GD::rotate":[273],"WP_Image_Editor_GD::flip":[303],"WP_Image_Editor_GD::_save":[335,343,347,350],"WP_Image_Editor_Imagick::load":[120,129],"WP_Image_Editor_Imagick::update_size":[193],"WP_Image_Editor_Imagick::resize":[223],"WP_Theme::__construct":[208,210,214,218,236,255,267,271],"WP_Theme::markup_header":[656,663],"wp_xmlrpc_server::login":[181,188],"wp_xmlrpc_server::initialise_blog_option_info":[311,316,321,326,331,336,341,346,351,356,363,368,373,378,383,388,393,398,403,408,413,418,423,428,433],"wp_xmlrpc_server::minimum_args":[514],"wp_xmlrpc_server::_insert_post":[1003,1009,1011,1013,1016,1025,1030,1039,1044,1049,1082,1087,1100,1121,1124,1131,1144,1147,1166,1173,1217],"wp_xmlrpc_server::wp_editPost":[1258,1263],"wp_xmlrpc_server::wp_deletePost":[1318,1322,1327],"wp_xmlrpc_server::wp_getPost":[1400,1404],"wp_xmlrpc_server::wp_getPosts":[1459,1465],"wp_xmlrpc_server::wp_newTerm":[1545,1550,1559,1563,1572,1589],"wp_xmlrpc_server::wp_editTerm":[1633,1638,1651,1657,1662,1671,1688],"wp_xmlrpc_server::wp_deleteTerm":[1725,1730,1738,1746],"wp_xmlrpc_server::wp_getTerm":[1792,1797,1805],"wp_xmlrpc_server::wp_getTerms":[1845,1850],"wp_xmlrpc_server::wp_getTaxonomy":[1924,1929],"wp_xmlrpc_server::wp_getUser":[2037,2042],"wp_xmlrpc_server::wp_getUsers":[2090,2106],"wp_xmlrpc_server::wp_getProfile":[2157],"wp_xmlrpc_server::wp_editProfile":[2200,2234],"wp_xmlrpc_server::wp_getPage":[2265,2268,2278],"wp_xmlrpc_server::wp_getPages":[2306],"wp_xmlrpc_server::wp_deletePage":[2382,2386,2391],"wp_xmlrpc_server::wp_editPage":[2423,2427],"wp_xmlrpc_server::wp_getPageList":[2466],"wp_xmlrpc_server::wp_getAuthors":[2517],"wp_xmlrpc_server::wp_getTags":[2552],"wp_xmlrpc_server::wp_newCategory":[2597,2625,2627],"wp_xmlrpc_server::wp_deleteCategory":[2657],"wp_xmlrpc_server::wp_suggestCategories":[2688],"wp_xmlrpc_server::wp_getComment":[2724,2729],"wp_xmlrpc_server::wp_getComments":[2765],"wp_xmlrpc_server::wp_deleteComment":[2825,2828,2831],"wp_xmlrpc_server::wp_editComment":[2880,2883,2886,2895,2927],"wp_xmlrpc_server::wp_newComment":[2960,2973,2976,3002,3004],"wp_xmlrpc_server::wp_getCommentStatusList":[3040],"wp_xmlrpc_server::wp_getCommentCount":[3067],"wp_xmlrpc_server::wp_getPostStatusList":[3099],"wp_xmlrpc_server::wp_getPageStatusList":[3125],"wp_xmlrpc_server::wp_getPageTemplates":[3151],"wp_xmlrpc_server::wp_setOptions":[3229],"wp_xmlrpc_server::wp_getMediaItem":[3278,3283],"wp_xmlrpc_server::wp_getMediaLibrary":[3323],"wp_xmlrpc_server::wp_getPostFormats":[3364],"wp_xmlrpc_server::wp_getPostType":[3432,3437],"wp_xmlrpc_server::wp_getRevisions":[3532,3535,3539],"wp_xmlrpc_server::wp_restoreRevision":[3593,3596,3599,3602,3606],"wp_xmlrpc_server::blogger_getUserInfo":[3704],"wp_xmlrpc_server::blogger_getPost":[3740,3743],"wp_xmlrpc_server::blogger_getRecentPosts":[3792],"wp_xmlrpc_server::blogger_getTemplate":[3831],"wp_xmlrpc_server::blogger_setTemplate":[3841],"wp_xmlrpc_server::blogger_newPost":[3869,3889],"wp_xmlrpc_server::blogger_editPost":[3924,3929,3934,3945],"wp_xmlrpc_server::blogger_deletePost":[3978,3981,3986],"wp_xmlrpc_server::mw_newPost":[4055,4066,4070,4079,4084,4092,4121,4125,4128,4133,4275,4296],"wp_xmlrpc_server::mw_editPost":[4373,4376,4380,4384,4390,4425,4429,4432,4535,4537,4573,4592],"wp_xmlrpc_server::mw_getPost":[4634,4637,4733],"wp_xmlrpc_server::mw_getCategories":[4872],"wp_xmlrpc_server::mw_newMediaObject":[4925,4952,4961],"wp_xmlrpc_server::mt_getRecentPostTitles":[5019],"wp_xmlrpc_server::mt_getCategoryList":[5071],"wp_xmlrpc_server::mt_getPostCategories":[5109,5112],"wp_xmlrpc_server::mt_setPostCategories":[5155,5158],"wp_xmlrpc_server::mt_getTrackbackPings":[5221],"wp_xmlrpc_server::mt_publishPost":[5267,5270],"wp_xmlrpc_server::pingback_ping":[5315,5355,5362,5365,5369,5373,5381,5393,5429,5450],"wp_xmlrpc_server::pingback_extensions_getPingbacks":[5476,5483],"get_comment_author":[30],"comments_number":[580,582,584],"comment_type":[679,680],"trackback_url":[726],"comments_popup_link":[973,974,975,976,986,1013],"get_comment_reply_link":[1038,1039],"get_post_reply_link":[1099,1100],"get_cancel_comment_reply_link":[1139],"comment_form_title":[1196,1197],"Walker_Comment::start_el":[1354,1364,1364],"comment_form":[1524,1526,1528,1532,1536,1537,1538,1539,1542,1543,1544,1545],"get_comment_statuses":[420],"wp_allow_comment":[679,681],"check_comment_flood_db":[738,740],"wp_set_comment_status":[1462],"wp_clear_scheduled_hook":[159],"wp_get_schedules":[321,322,323],"WP_Widget_Pages::__construct":[17,18],"WP_Widget_Pages::widget":[24],"WP_Widget_Links::__construct":[93,94],"WP_Widget_Search::__construct":[193,194],"WP_Widget_Archives::__construct":[236,237],"WP_Widget_Archives::widget":[244,252],"WP_Widget_Meta::__construct":[301,302],"WP_Widget_Meta::widget":[307,316,317,318],"WP_Widget_Calendar::__construct":[352,353],"WP_Widget_Text::__construct":[393,395],"WP_Widget_Categories::__construct":[443,444],"WP_Widget_Categories::widget":[450,462],"WP_Widget_Recent_Posts::__construct":[535,536],"WP_Widget_Recent_Posts::widget":[561],"WP_Widget_Recent_Comments::__construct":[635,636],"WP_Widget_Recent_Comments::widget":[677],"WP_Widget_RSS::__construct":[739,741],"WP_Widget_RSS::widget":[777],"wp_widget_rss_output":[831,847,861],"wp_widget_rss_form":[939],"WP_Widget_Tag_Cloud::__construct":[1030,1031],"WP_Widget_Tag_Cloud::widget":[1041],"WP_Nav_Menu_Widget::__construct":[1097,1098],"WP_Nav_Menu_Widget::form":[1135],"start_wp":[62],"dropdown_cats":[707],"get_links":[987],"get_the_attachment_link":[1898],"get_boundary_post_rel_link":[2732,2732],"wp_admin_bar_dashboard_view_site_menu":[2847,2849,2851],"wp_explain_nonce":[3175],"wp_load_image":[3225,3228,3235],"__main":[19,21,23,52,54,22,24,26,44,46,54,232,35,121,122,7,7,10,10,14,38,56,67,71,118,10,10,58,58,65,72,87,10,10,17,19,19,19,20,10,10,10,10,32,35,35,38,38,41,44,47,55,63],"wp_trim_words":[2177],"sanitize_option":[2765,2852,2862,2903],"wp_sprintf_l":[3056,3058,3060],"do_feed":[1009],"is_blog_installed":[1153],"wp_upload_dir":[1623],"wp_upload_bits":[1720,1724,1746,1752],"wp_nonce_ays":[2019,2021,2022,2024,2026],"_default_wp_die_handler":[2100,2112],"wp_widgets_add_menu":[2713],"_deprecated_function":[2861,2863],"_deprecated_file":[2901,2903],"_deprecated_argument":[2945,2947],"_doing_it_wrong":[2979,2980,2981],"wp_timezone_choice":[3376,3425],"wp_print_scripts":[29],"wp_register_script":[56],"wp_localize_script":[90],"wp_deregister_script":[109],"wp_enqueue_script":[129],"wp_dequeue_script":[153],"wp_script_is":[179],"wp_print_styles":[30],"wp_add_inline_style":[57],"wp_register_style":[85],"wp_deregister_style":[106],"wp_enqueue_style":[137],"wp_dequeue_style":[159],"wp_style_is":[186],"get_search_form":[162],"wp_loginout":[189,191],"wp_login_form":[261,262,263,264],"wp_register":[341,345],"get_bloginfo":[410,410],"wp_title":[580,585],"wp_get_archives":[937],"get_calendar":[1172,1180],"feed_links":[1602,1604],"feed_links_extra":[1625,1627,1629,1631,1633,1635],"paginate_links":[1930,1931,1978],"wp_mce_translation":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,89,90,91,92,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,96,96,96,96,96,96,96,100,104,108,109,113,114,115,116,117,121,122,126,130,131,135,139,143,144,148,152,156,157,158,159,160,161,165,169,170,171,172,173,177,178,179,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,206,210,214,215,219,223,227,231,232,233,234,235,236,237,238,239,240,244,248,249,250,251,252,253,254,255,256,257,261,265,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,391,392,393,394,395,396,397,398,399,400,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,501,502,503,504,505,506,507,508,509,510,511,512,513,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549],"post_comments_feed_link":[514],"edit_term_link":[725],"edit_post_link":[932],"edit_comment_link":[1007],"edit_bookmark_link":[1048],"get_adjacent_post":[1149],"get_adjacent_post_rel_link":[1221,1221],"adjacent_post_link":[1389,1389],"get_next_posts_link":[1535],"get_previous_posts_link":[1606],"get_posts_nav_link":[1642,1643],"get_next_comments_link":[1744],"get_previous_comments_link":[1781],"the_shortlink":[2427],"wp_check_php_mysql_versions":[108,113],"wp_set_wpdb_vars":[370],"wp_not_installed":[428],"WP_Locale::init":[99,100,101,102,103,104,105,109,109,110,110,111,111,112,112,113,113,114,114,115,115,122,122,123,123,124,124,125,125,126,126,127,127,128,128,131,132,133,134,135,136,137,138,139,140,141,142,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,164,165,166,167,173,177],"wp_print_media_templates":[93,99,319,320,321,322],"wp_get_image_editor":[1187],"wp_plupload_default_settings":[1264],"wp_prepare_attachment_for_js":[1365,1366,1367,1368],"wp_enqueue_media":[1490,1491,1492,1493,1494,1499,1500,1503,1504,1507,1508,1509,1510,1511,1512,1513,1513,1514,1514,1515,1518,1521,1522,1525,1526,1527,1528,1529,1530,1531,1532],"ms_subdomain_constants":[126,128],"add_user_to_blog":[185],"remove_user_from_blog":[247],"create_empty_blog":[290,297],"wpmu_validate_user_signup":[439,446,454,457,460,463,469,472,478,483,487,499,502,512],"wpmu_validate_blog_signup":[562,565,568,571,574,578,584,591,602,606,617],"wpmu_signup_blog_notification":[740,750],"wpmu_signup_user_notification":[793,801],"wpmu_activate_signup":[837,841,843,859,867],"wpmu_create_blog":[968,974],"newblog_notify_siteadmin":[1027,1034],"newuser_notify_siteadmin":[1062,1068],"install_blog":[1142,1142],"wpmu_welcome_notification":[1222,1258],"wpmu_welcome_user_notification":[1306],"upload_is_file_too_big":[1610],"signup_nonce_check":[1641],"maybe_add_existing_user_to_blog":[1686,1688,1688],"welcome_user_msg_filter":[1849],"ms_site_check":[89,96,103],"wpmu_current_site":[219,221],"ms_not_installed":[237,241,242,244,246,247,248,249],"wp_update_nav_menu_object":[226,233],"wp_update_nav_menu_item":[275],"wp_setup_nav_menu_item":[612],"wp_protect_special_option":[109],"wp_authenticate":[479],"check_admin_referer":[808],"wp_notify_postauthor":[1019,1021,1022,1023,1024,1025,1026,1028,1030,1032,1033,1034,1035,1037,1039,1041,1042,1043,1044,1046,1049,1051,1053,1054],"wp_notify_moderator":[1118,1120,1121,1122,1125,1127,1128,1129,1132,1134,1135,1136,1137,1138,1142,1144,1146,1147,1153],"wp_password_change_notification":[1179,1183],"wp_new_user_notification":[1207,1208,1209,1211,1216,1217,1220],"register_uninstall_hook":[679],"get_the_title":[110,113],"get_the_content":[186],"get_the_excerpt":[267],"wp_link_pages":[633,635,636],"wp_list_pages":[818],"wp_page_menu":[899],"wp_get_attachment_link":[1166],"get_the_password_form":[1226,1227],"wp_post_revision_title":[1306,1308],"wp_list_post_revisions":[1401],"create_initial_post_types":[58,59,80,81,98,99],"set_post_format":[808],"get_post_statuses":[866,867,868,869],"get_page_statuses":[887,888,889],"register_post_type":[1238],"get_post_type_labels":[1499,1499,1500,1500,1501,1501,1502,1502,1503,1503,1504,1504,1505,1505,1506,1507,1507],"get_post_mime_types":[2194,2194,2195,2195,2196,2196],"wp_get_recent_posts":[2633],"wp_insert_post":[2731,2797,2872,2888,2935],"_wp_post_revision_fields":[4881,4882,4883],"_wp_put_post_revision":[5076],"_show_post_preview":[5251],"is_archive":[143],"is_post_type_archive":[164],"is_attachment":[184],"is_author":[208],"is_category":[232],"is_tag":[256],"is_tax":[285],"is_comments_popup":[305],"is_date":[325],"is_day":[345],"is_feed":[366],"is_comment_feed":[386],"is_front_page":[416],"is_home":[445],"is_month":[465],"is_page":[492],"is_paged":[512],"is_preview":[532],"is_robots":[552],"is_search":[572],"is_single":[601],"is_singular":[628],"is_time":[648],"is_trackback":[668],"is_year":[688],"is_404":[708],"WP_Query::get_posts":[1958],"wp_default_scripts":[71,78,79,80,81,82,83,84,85,86,87,88,89,100,101,106,186,187,188,189,190,191,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,274,275,276,279,280,291,292,293,294,295,318,319,320,321,322,323,326,348,349,356,357,366,367,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,402,416,417,418,424,429,430,438,439,440,441,452,457,458,459,460,467,468],"wp_just_in_time_script_localization":[579,580],"create_initial_taxonomies":[68,69,81,82,83,85,86,87,88,89],"register_taxonomy":[335],"get_taxonomy_labels":[429,429,430,431,431,432,433,434,434,435,435,436,436,437,437,438,438,439,440,441],"get_objects_in_term":[518],"get_term":[875,880],"get_term_children":[1009],"get_terms":[1197],"wp_get_object_terms":[1901],"wp_insert_term":[2045,2052,2055,2093,2097,2104,2108,2114],"wp_set_object_terms":[2176,2238],"wp_update_term":[2353,2379,2412],"get_term_link":[3002],"is_object_in_term":[3163],"wp_get_update_data":[357],"wp_authenticate_username_password":[79,82,90,95,101,110],"wp_authenticate_cookie":[135],"wp_insert_user":[1310,1313,1328],"wp_update_user":[1456],"_wp_get_user_contactmethods":[1540,1541,1542],"WP_Widget::form":[67],"register_sidebars":[488,490],"register_sidebar":[558],"wpdb::select":[846],"wpdb::print_error":[1029,1031],"wpdb::db_connect":[1145],"wpdb::check_database_version":[1652]}},"is_user_logged_in":{"doc":"\/**\n * Checks if the current visitor is a logged in user.\n *\n * @since 2.0.0\n *\n * @return bool True if user is logged in, false if not logged in.\n *\/","file":"pluggable.php","line":726,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[727],"exists":[729]},"used_by":{"wp_admin_bar_wp_menu":[84],"wp_admin_bar_site_menu":[212],"wp_admin_bar_my_sites_menu":[283],"is_admin_bar_showing":[741],"WP_Admin_Bar::initialize":[30],"WP_Customize_Manager::setup_theme":[114],"WP::send_headers":[324,329],"comment_form":[1561,1555],"wp_loginout":[188],"wp_register":[339],"user_can_richedit":[1757],"get_body_class":[510],"wp_count_posts":[2129],"get_posts_by_author_sql":[4501],"WP_Query::get_posts":[2203,2504,2704],"__main":[70,64]}},"wp_admin_bar_my_account_item":{"doc":"\/**\n * Add the \"My Account\" item.\n *\n * @since 3.3.0\n *\/","file":"admin-bar.php","line":132,"missingDoc":false,"filters":[],"uses":{"get_current_user_id":[133],"wp_get_current_user":[134],"get_edit_profile_url":[135],"get_avatar":[140],"sprintf":[141],"__":[141,151],"add_menu":[144]},"used_by":[]},"get_current_user_id":{"doc":"\/**\n * Get the current user's ID\n *\n * @since MU\n *\n * @uses wp_get_current_user\n *\n * @return int The current user's ID\n *\/","file":"user.php","line":208,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[209]},"used_by":{"wp_admin_bar_my_account_item":[133],"wp_admin_bar_my_account_menu":[162],"map_meta_cap":[1039,1089,1143],"is_super_admin":[1450],"WP_Admin_Bar::initialize":[32,34],"wp_admin_bar_dashboard_view_site_menu":[2843],"is_blog_user":[2869],"get_edit_user_link":[1064,1074],"is_site_admin":[47],"is_user_spammy":[1751],"wp_notify_postauthor":[1003],"wp_default_scripts":[65],"get_user_option":[240],"is_user_member_of_blog":[775],"setup_userdata":[964]}},"wp_get_current_user":{"doc":"\/**\n * Retrieve the current user object.\n *\n * @since 2.0.3\n *\n * @return WP_User Current user WP_User object\n *\/","file":"pluggable.php","line":51,"missingDoc":false,"filters":[],"uses":{"get_currentuserinfo":[54]},"used_by":{"wp_admin_bar_my_account_item":[134],"wp_admin_bar_my_account_menu":[163],"map_meta_cap":[1039,1089,1143],"current_user_can":[1281],"current_user_can_for_blog":[1305],"is_super_admin":[1451],"WP::init":[473],"comment_form":[1518],"wp_default_editor":[1781],"switch_to_blog":[546],"restore_current_blog":[607],"is_user_option_local":[1808],"wp_user_settings":[540],"get_all_user_settings":[667],"wp_set_all_user_settings":[702],"delete_all_user_settings":[733],"is_user_logged_in":[727],"wp_verify_nonce":[1257],"wp_create_nonce":[1285],"wp_count_posts":[2124],"get_current_user_id":[209],"wp_update_user":[1481]}},"get_edit_profile_url":{"doc":"\/**\n * Get the URL to the user's profile editor.\n *\n * @since 3.1.0\n *\n * @param int $user User ID\n * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Dashboard url link with optional path appended.\n *\/","file":"link-template.php","line":2293,"missingDoc":false,"filters":["'edit_profile_url'"],"uses":{"user_admin_url":[2297],"is_network_admin":[2298],"network_admin_url":[2299],"get_dashboard_url":[2301],"is_user_admin":[2296]},"used_by":{"wp_admin_bar_my_account_item":[135],"wp_admin_bar_my_account_menu":[164],"get_edit_user_link":[1075]}},"get_avatar":{"doc":"\/**\n * Retrieve the avatar for a user who provided a user ID or email address.\n *\n * @since 2.5\n * @param int|string|object $id_or_email A user ID,  email address, or comment object\n * @param int $size Size of the avatar image\n * @param string $default URL to a default image to use if no avatar is available\n * @param string $alt Alternative text to use in image tag. Defaults to blank\n * @return string <img> tag for the user's avatar\n*\/","file":"pluggable.php","line":1589,"missingDoc":false,"filters":["'get_avatar_comment_types'","'get_avatar'"],"uses":{"get_option":[1590,1626,1664],"esc_attr":[1596],"is_numeric":[1598,1602],"get_userdata":[1604,1615],"is_object":[1607],"in_array":[1610],"md5":[1634],"strtolower":[1634],"trim":[1634],"sprintf":[1640],"hexdec":[1640],"is_ssl":[1636],"includes_url":[1648],"strpos":[1655],"add_query_arg":[1656],"urlencode":[1662]},"used_by":{"wp_admin_bar_my_account_item":[140],"wp_admin_bar_my_account_menu":[174],"Walker_Comment::start_el":[1353]}},"wp_admin_bar_my_account_menu":{"doc":"\/**\n * Add the \"My Account\" submenu items.\n *\n * @since 3.1.0\n *\/","file":"admin-bar.php","line":161,"missingDoc":false,"filters":[],"uses":{"get_current_user_id":[162],"wp_get_current_user":[163],"get_edit_profile_url":[164],"add_group":[169],"get_avatar":[174],"add_menu":[180,189,195],"__":[192,198],"wp_logout_url":[199]},"used_by":[]},"wp_logout_url":{"doc":"\/**\n * Returns the Log Out URL.\n *\n * Returns the URL that allows the user to log out of the site\n *\n * @since 2.7.0\n * @uses wp_nonce_url() To protect against CSRF\n * @uses site_url() To generate the log in URL\n * @uses apply_filters() calls 'logout_url' hook on final logout url\n *\n * @param string $redirect Path to redirect to on logout.\n * @return string A log out URL.\n *\/","file":"general-template.php","line":212,"missingDoc":false,"filters":["'logout_url'"],"uses":{"urlencode":[215],"add_query_arg":[218],"site_url":[218],"wp_nonce_url":[219]},"used_by":{"wp_admin_bar_my_account_menu":[199],"WP_Admin_Bar::_render":[357],"comment_form":[1537],"wp_nonce_ays":[2022],"wp_loginout":[191],"__main":[71,72]}},"wp_admin_bar_site_menu":{"doc":"\/**\n * Add the \"Site Name\" menu.\n *\n * @since 3.3.0\n *\/","file":"admin-bar.php","line":208,"missingDoc":false,"filters":[],"uses":{"is_user_logged_in":[212],"is_user_member_of_blog":[216],"is_super_admin":[216],"get_bloginfo":[219],"preg_replace":[222],"get_home_url":[222],"sprintf":[225,227],"__":[225,227,247,255,265],"esc_html":[225,227],"is_user_admin":[226],"is_network_admin":[224],"wp_html_excerpt":[230],"trim":[232],"add_menu":[234,244,252,262],"is_admin":[237,242],"home_url":[237,248],"admin_url":[237,266],"network_admin_url":[256],"get_current_blog_id":[256],"is_blog_admin":[251],"is_multisite":[251],"current_user_can":[251],"wp_admin_bar_appearance_menu":[270]},"used_by":[]},"is_user_member_of_blog":{"doc":"\/**\n * Find out whether a user is a member of a given blog.\n *\n * @since MU 1.1\n * @uses get_blogs_of_user()\n *\n * @param int $user_id Optional. The unique ID of the user. Defaults to the current user.\n * @param int $blog_id Optional. ID of the blog to check. Defaults to the current site.\n * @return bool\n *\/","file":"user.php","line":770,"missingDoc":false,"filters":[],"uses":{"get_current_user_id":[775],"get_current_blog_id":[778],"get_blogs_of_user":[780],"array_key_exists":[781]},"used_by":{"wp_admin_bar_site_menu":[216],"is_blog_user":[2869],"wp_notify_postauthor":[995]}},"is_super_admin":{"doc":"\/**\n * Determine if user is a site admin.\n *\n * @since 3.0.0\n *\n * @param int $user_id (Optional) The ID of a user. Defaults to the current user.\n * @return bool True if the user is a site admin.\n *\/","file":"capabilities.php","line":1449,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[1451],"get_userdata":[1453],"get_current_user_id":[1450],"exists":[1455],"get_super_admins":[1459],"is_array":[1460],"in_array":[1460],"has_cap":[1463],"is_multisite":[1458]},"used_by":{"wp_admin_bar_site_menu":[216],"wp_admin_bar_my_sites_menu":[287,296,340],"WP_User::has_cap":[929],"map_meta_cap":[1010,1183,1192,1205,1221,1238,1246],"get_dashboard_url":[2270,2264],"is_site_admin":[57],"wpmu_validate_blog_signup":[570],"wpmu_create_blog":[992],"ms_site_check":[82],"wp_user_settings":[543],"wp_set_all_user_settings":[705],"wp_authenticate_username_password":[98]}},"get_bloginfo":{"doc":"\/**\n * Retrieve information about the blog.\n *\n * Some show parameter values are deprecated and will be removed in future\n * versions. These options will trigger the _deprecated_argument() function.\n * The deprecated blog info options are listed in the function contents.\n *\n * The possible values for the 'show' parameter are listed below.\n * <ol>\n * <li><strong>url<\/strong> - Blog URI to homepage.<\/li>\n * <li><strong>wpurl<\/strong> - Blog URI path to WordPress.<\/li>\n * <li><strong>description<\/strong> - Secondary title<\/li>\n * <\/ol>\n *\n * The feed URL options can be retrieved from 'rdf_url' (RSS 0.91),\n * 'rss_url' (RSS 1.0), 'rss2_url' (RSS 2.0), or 'atom_url' (Atom feed). The\n * comment feeds can be retrieved from the 'comments_atom_url' (Atom comment\n * feed) or 'comments_rss2_url' (RSS 2.0 comment feed).\n *\n * @since 0.71\n *\n * @param string $show Blog info to retrieve.\n * @param string $filter How to filter what is retrieved.\n * @return string Mostly string values, might be empty.\n *\/","file":"general-template.php","line":405,"missingDoc":false,"filters":["'bloginfo_url'","'bloginfo'"],"uses":{"_deprecated_argument":[410],"sprintf":[410,410],"__":[410,410],"home_url":[412],"site_url":[415],"get_option":[418,439,452,455,459,479],"get_feed_link":[421,424,427,430,433,436],"get_stylesheet_uri":[442],"get_stylesheet_directory_uri":[445],"get_template_directory_uri":[449],"get_locale":[466],"str_replace":[467],"is_rtl":[472],"function_exists":[471],"strpos":[484,485,486]},"used_by":{"wp_admin_bar_site_menu":[219],"WP_Http::request":[89,132],"WP::send_headers":[320],"weblog_ping":[1950],"get_index_rel_link":[2775,2775],"get_bloginfo_rss":[29],"get_the_category_rss":[327],"html_type_rss":[359],"cache_javascript_headers":[955],"wp_nonce_ays":[2021],"bloginfo":[377],"feed_links":[1609,1610],"feed_links_extra":[1645,1651,1656,1661,1664,1667],"rsd_link":[1682],"wlwmanifest_link":[1693],"language_attributes":[1864],"wp_admin_css_uri":[2059],"get_the_generator":[2190,2193,2205],"__main":[10,17,19,19,35,35,38,38,41,41,44,44,47,47],"get_pagenum_link":[1433,1455],"filter_SSL":[1899],"wp_mail":[422],"wp_default_scripts":[57],"wp_default_styles":[499],"wp_update_plugins":[202],"wp_update_themes":[307]}},"get_home_url":{"doc":"\/**\n * Retrieve the home url for a given site.\n *\n * Returns the 'home' option with the appropriate protocol, 'https' if\n * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is\n * overridden.\n *\n * @package WordPress\n * @since 3.0.0\n *\n * @param  int $blog_id   (optional) Blog ID. Defaults to current blog.\n * @param  string $path   (optional) Path relative to the home url.\n * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http', 'https', or 'relative'.\n * @return string Home url link with optional path appended.\n*\/","file":"link-template.php","line":1902,"missingDoc":false,"filters":["'home_url'"],"uses":{"get_option":[1906,1909],"switch_to_blog":[1908],"restore_current_blog":[1910],"is_multisite":[1905],"parse_url":[1917],"is_ssl":[1914],"is_admin":[1914],"in_array":[1913],"set_url_scheme":[1920],"ltrim":[1923],"is_string":[1922],"strpos":[1922]},"used_by":{"wp_admin_bar_site_menu":[222],"WP_Admin_Bar::initialize":[35],"home_url":[1884]}},"esc_html":{"doc":"\/**\n * Escaping for HTML blocks.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n *\/","file":"formatting.php","line":2671,"missingDoc":false,"filters":["'esc_html'"],"uses":{"wp_check_invalid_utf8":[2672],"_wp_specialchars":[2673]},"used_by":{"wp_admin_bar_site_menu":[225,227],"sanitize_bookmark_field":[358],"WP_oEmbed::data2html":[286],"WP_Customize_Control::render_content":[240,249,260,266,277],"WP_Customize_Color_Control::render_content":[385],"WP_Customize_Upload_Control::render_content":[442],"WP_Customize_Image_Control::render_content":[526,546],"WP_Customize_Section::render":[83],"_WP_Editors::wp_link_query":[794],"WP_Embed::maybe_make_link":[273],"wp_xmlrpc_server::wp_getTags":[2564,2565],"wp_xmlrpc_server::mw_getCategories":[4885,4886],"wp_xmlrpc_server::pingback_ping":[5433],"get_cancel_comment_reply_link":[1142],"WP_Widget_RSS::widget":[770],"wp_widget_rss_output":[872,894],"the_content_rss":[1714],"wp_specialchars":[2127],"sanitize_option":[2810],"wp_pre_kses_less_than_callback":[2965],"do_feed":[1009],"wp_nonce_url":[1177],"wp_timezone_choice":[3412,3445],"wp_login_form":[279,283,287],"feed_links_extra":[1645],"esc_html__":[129],"esc_html_e":[170],"esc_html_x":[213],"wp_print_media_templates":[93,93,330,365],"wpmu_admin_do_redirect":[244],"wpmu_signup_blog_notification":[736],"wpmu_signup_user_notification":[789],"wpmu_welcome_notification":[1251],"wpmu_welcome_user_notification":[1299],"wp_update_nav_menu_object":[226,233],"wp_protect_special_option":[109],"Walker_PageDropdown::start_el":[1119],"wp_rss":[889],"get_rss":[924],"sanitize_term_field":[1647],"__main":[44],"wp_version_check":[110],"wp_dropdown_users":[1063,1070],"sanitize_user_field":[1127],"wp_widget_description":[671],"wp_sidebar_description":[692]}},"is_user_admin":{"doc":"\/**\n * Whether the current request is for a user admin screen \/wp-admin\/user\/\n *\n * Does not inform on whether the user is an admin! Use capability checks to\n * tell if the user should be accessing a section or not.\n *\n * @since 3.1.0\n *\n * @return bool True if inside WordPress user administration pages.\n *\/","file":"load.php","line":642,"missingDoc":false,"filters":[],"uses":{"in_admin":[644],"defined":[645]},"used_by":{"wp_admin_bar_site_menu":[226],"WP_Admin_Bar::add_menus":[480],"self_admin_url":[2210],"get_edit_profile_url":[2296],"auth_redirect":[760],"__main":[24]}},"is_network_admin":{"doc":"\/**\n * Whether the current request is for a network admin screen \/wp-admin\/network\/\n *\n * Does not inform on whether the user is a network admin! Use capability checks to\n * tell if the user should be accessing a section or not.\n *\n * @since 3.1.0\n *\n * @return bool True if inside WordPress network administration pages.\n *\/","file":"load.php","line":623,"missingDoc":false,"filters":[],"uses":{"in_admin":[625],"defined":[626]},"used_by":{"wp_admin_bar_site_menu":[224],"WP_Admin_Bar::add_menus":[480],"add_thickbox":[2120],"load_default_textdomain":[398],"self_admin_url":[2208],"get_edit_profile_url":[2298],"get_currentuserinfo":[101],"__main":[431,22]}},"wp_html_excerpt":{"doc":"\/**\n * Safely extracts not more than the first $count characters from html string.\n *\n * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT*\n * be counted as one character. For example &amp; will be counted as 4, &lt; as\n * 3, etc.\n *\n * @since 2.5.0\n *\n * @param integer $str String to get the excerpt from.\n * @param integer $count Maximum number of characters to take.\n * @return string The excerpt.\n *\/","file":"formatting.php","line":3093,"missingDoc":false,"filters":[],"uses":{"wp_strip_all_tags":[3094],"mb_substr":[3095],"preg_replace":[3097]},"used_by":{"wp_admin_bar_site_menu":[230],"WP_Customize_Manager::register_controls":[900],"do_trackbacks":[1759],"wp_widget_rss_output":[864]}},"is_admin":{"doc":"\/**\n * Whether the current request is for a network or blog admin page\n *\n * Does not inform on whether the user is an admin! Use capability checks to\n * tell if the user should be accessing a section or not.\n *\n * @since 1.5.1\n *\n * @return bool True if inside WordPress administration pages.\n *\/","file":"load.php","line":585,"missingDoc":false,"filters":[],"uses":{"in_admin":[587],"defined":[588]},"used_by":{"wp_admin_bar_site_menu":[237,242],"wp_admin_bar_edit_menu":[425],"wp_admin_bar_search_menu":[641],"is_admin_bar_showing":[737],"redirect_canonical":[42],"WP_Customize_Manager::setup_theme":[112],"WP_Customize_Manager::wp_loaded":[280],"WP_Customize_Manager::wp_redirect_status":[296],"_WP_Editors::editor_settings":[159],"_WP_Editors::editor_js":[641],"WP_Theme::get_allowed_on_site":[1146],"WP::handle_404":[507],"__main":[24,38,55,69,72,20,55],"wp_widget_rss_output":[830],"wp_admin_bar_dashboard_view_site_menu":[2846],"load_default_textdomain":[395],"get_pagenum_link":[1432],"get_home_url":[1914],"network_home_url":[2143],"image_constrain_size_for_editor":[40],"ms_not_installed":[239],"wp_get_nav_menu_items":[531],"wp_user_settings":[534],"get_the_title":[108],"get_post_class":[325],"register_post_type":[1293],"_post_format_request":[5445],"WP_Query::parse_query":[1594],"wp_default_scripts":[344],"script_concat_settings":[853],"register_taxonomy":[345],"switch_theme":[694],"get_theme_mods":[753],"add_editor_style":[1211],"remove_editor_styles":[1236],"_custom_header_background_just_in_time":[1401,1414],"_wp_customize_include":[1630],"wp_get_sidebars_widgets":[1015],"wp_convert_widget_settings":[1091,1111,1116]}},"home_url":{"doc":"\/**\n * Retrieve the home url for the current site.\n *\n * Returns the 'home' option with the appropriate protocol, 'https' if\n * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is\n * overridden.\n *\n * @package WordPress\n * @since 3.0.0\n *\n * @uses get_home_url()\n *\n * @param  string $path   (optional) Path relative to the home url.\n * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http', 'https', or 'relative'.\n * @return string Home url link with optional path appended.\n*\/","file":"link-template.php","line":1883,"missingDoc":false,"filters":[],"uses":{"get_home_url":[1884]},"used_by":{"wp_admin_bar_site_menu":[237,248],"wp_admin_bar_my_sites_menu":[388],"wp_admin_bar_search_menu":[644],"get_author_posts_url":[223,232],"redirect_canonical":[125,314],"wp_redirect_admin_locations":[514,515,516,526,527],"wp_list_categories":[460],"WP_Admin_Bar::initialize":[39],"WP_Customize_Manager::customize_preview_base":[352],"wp_xmlrpc_server::wp_getUsersBlogs":[491],"WP::parse_request":[154],"comments_popup_link":[993],"weblog_ping":[1949],"WP_Widget_Categories::widget":[471],"WP_Widget_RSS::widget":[759],"wp_admin_bar_dashboard_view_site_menu":[2847],"__main":[34,232,45],"self_link":[490],"get_search_form":[161],"get_bloginfo":[412],"wp_get_archives":[1008],"get_allowed_http_origins":[250],"get_permalink":[160,163],"get_post_permalink":[200,206],"get_page_link":[244],"_get_page_link":[278,281],"get_attachment_link":[325],"get_year_link":[345,347],"get_month_link":[370,372],"get_day_link":[400,402],"get_feed_link":[442,450],"get_post_comments_feed_link":[487,489],"get_author_feed_link":[541],"get_term_feed_link":[603,606,609],"get_search_link":[754,759],"get_post_type_archive_link":[846,848],"get_pagenum_link":[1425],"network_home_url":[2138],"wp_get_shortlink":[2364],"maybe_add_existing_user_to_blog":[1686,1688],"_wp_menu_item_classes_by_context":[317,384,397],"wp_validate_redirect":[968],"wp_page_menu":[905],"is_local_attachment":[3854,3856],"url_to_postid":[309,313,322,325,320],"WP_Rewrite::rewrite_rules":[1525],"WP_Rewrite::mod_rewrite_rules":[1648],"get_term_link":[3021,3036],"preview_theme_ob_filter_callback":[638],"_wp_customize_loader_settings":[1649],"wp_customize_support_script":[1705],"wp_version_check":[64,82,85]}},"admin_url":{"doc":"\/**\n * Retrieve the url to the admin area for the current site.\n *\n * @package WordPress\n * @since 2.6.0\n *\n * @param string $path Optional path relative to the admin url.\n * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Admin url link with optional path appended.\n*\/","file":"link-template.php","line":1990,"missingDoc":false,"filters":[],"uses":{"get_admin_url":[1991]},"used_by":{"wp_admin_bar_site_menu":[237,266],"wp_admin_bar_my_sites_menu":[293,356,363,371,380],"wp_admin_bar_new_content_menu":[529,542],"wp_admin_bar_comments_menu":[566],"wp_admin_bar_appearance_menu":[580,598,601,604,607],"wp_redirect_admin_locations":[521],"_WP_Editors::editor_js":[642],"WP_Embed::maybe_run_ajax_cache":[82],"WP_Nav_Menu_Widget::form":[1135],"wp_admin_bar_dashboard_view_site_menu":[2851],"wp_register":[345],"register_admin_color_schemes":[2038,2040],"wp_admin_css_uri":[2057],"get_allowed_http_origins":[249],"get_edit_term_link":[699],"get_edit_post_link":[911],"get_delete_post_link":[967],"get_edit_comment_link":[986],"get_edit_bookmark_link":[1027],"get_shortcut_link":[1854],"network_admin_url":[2168],"self_admin_url":[2213],"get_dashboard_url":[2267,2271],"wp_print_media_templates":[97],"wp_plupload_default_settings":[1261],"wp_enqueue_media":[1460],"maybe_add_existing_user_to_blog":[1688],"check_admin_referer":[810],"wp_safe_redirect":[922],"wp_notify_postauthor":[1051,1053,1054],"wp_notify_moderator":[1142,1144,1146,1147,1151],"wp_default_scripts":[333],"_wp_customize_loader_settings":[1648,1658],"wp_customize_url":[1682],"wp_customize_support_script":[1704]}},"network_admin_url":{"doc":"\/**\n * Retrieve the url to the admin area for the network.\n *\n * @package WordPress\n * @since 3.0.0\n *\n * @param string $path Optional path relative to the admin url.\n * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Admin url link with optional path appended.\n*\/","file":"link-template.php","line":2166,"missingDoc":false,"filters":["'network_admin_url'"],"uses":{"admin_url":[2168],"is_multisite":[2167],"network_site_url":[2170],"ltrim":[2173],"is_string":[2172],"strpos":[2172]},"used_by":{"wp_admin_bar_site_menu":[256],"wp_admin_bar_my_sites_menu":[306,313,319,325],"wp_admin_bar_updates_menu":[628],"self_admin_url":[2209],"get_edit_profile_url":[2299],"newblog_notify_siteadmin":[1020],"newuser_notify_siteadmin":[1061]}},"get_current_blog_id":{"doc":"\/**\n * Retrieve the current blog id\n *\n * @since 3.1.0\n *\n * @return int Blog id\n *\/","file":"load.php","line":675,"missingDoc":false,"filters":[],"uses":{"absint":[677]},"used_by":{"wp_admin_bar_site_menu":[256],"WP_Admin_Bar::initialize":[38],"WP_Theme::get_allowed_on_site":[1108,1113],"wp_upload_dir":[1562,1564],"is_main_site":[3226],"get_dashboard_url":[2269],"get_blog_details":[170],"get_blog_option":[384,386],"add_blog_option":[419,421],"delete_blog_option":[444,446],"update_blog_option":[472],"wp_user_settings":[544],"wp_set_all_user_settings":[706],"get_blogs_of_user":[695],"is_user_member_of_blog":[778],"count_users":[878]}},"is_blog_admin":{"doc":"\/**\n * Whether the current request is for a blog admin screen \/wp-admin\/\n *\n * Does not inform on whether the user is a blog admin! Use capability checks to\n * tell if the user should be accessing a section or not.\n *\n * @since 3.1.0\n *\n * @return bool True if inside WordPress network administration pages.\n *\/","file":"load.php","line":604,"missingDoc":false,"filters":[],"uses":{"in_admin":[606],"defined":[607]},"used_by":{"wp_admin_bar_site_menu":[251],"get_currentuserinfo":[101]}},"is_multisite":{"doc":"\/**\n * Whether Multisite support is enabled\n *\n * @since 3.0.0\n *\n * @return bool True if multisite is enabled, false otherwise.\n *\/","file":"load.php","line":658,"missingDoc":false,"filters":[],"uses":{"defined":[659,662,662,662]},"used_by":{"wp_admin_bar_site_menu":[251],"wp_admin_bar_my_sites_menu":[283],"WP_Object_Cache::__construct":[630],"redirect_canonical":[284],"WP_User::has_cap":[929],"map_meta_cap":[1010,1183,1192,1205,1221,1228,1238,1244],"current_user_can_for_blog":[1302,1315],"is_super_admin":[1458],"WP_Admin_Bar::initialize":[33],"WP_Theme::is_allowed":[1048],"WP_Theme::get_allowed_on_site":[1107],"wp_xmlrpc_server::wp_getUsersBlogs":[460],"wp_xmlrpc_server::blogger_getUsersBlogs":[3628],"wp_initial_constants":[20],"wp_admin_bar_dashboard_view_site_menu":[2848],"wp_upload_dir":[1546,1552],"is_main_site":[3222],"global_terms_enabled":[3241],"get_locale":[39],"load_default_textdomain":[390],"get_home_url":[1905],"get_site_url":[1964],"network_site_url":[2106],"network_home_url":[2137],"network_admin_url":[2167],"get_dashboard_url":[2266],"wp_not_installed":[426],"wp_get_active_and_valid_plugins":[492],"wp_print_media_templates":[52],"wp_plupload_default_settings":[1290],"__main":[14],"get_active_blog_for_user":[76],"wp_load_alloptions":[138,152],"wp_load_core_site_options":[171],"get_site_option":[767],"add_site_option":[815],"delete_site_option":[862],"update_site_option":[910],"wp_delete_attachment":[4101],"WP_Rewrite::rewrite_rules":[1536],"wp_get_themes":[50],"wp_version_check":[54],"wp_authenticate_username_password":[92],"WP_User_Query::prepare_query":[497],"get_blogs_of_user":[694],"wpdb::init_charset":[620],"wpdb::set_prefix":[675,686],"wpdb::get_blog_prefix":[736],"wpdb::tables":[781,789],"wpdb::print_error":[1040]}},"current_user_can":{"doc":"\/**\n * Whether current user has capability or role.\n *\n * @since 2.0.0\n *\n * @param string $capability Capability or role name.\n * @return bool\n *\/","file":"capabilities.php","line":1280,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[1281],"array_slice":[1286],"func_get_args":[1286],"array_merge":[1287],"call_user_func_array":[1289]},"used_by":{"wp_admin_bar_site_menu":[251],"wp_admin_bar_my_sites_menu":[366,375],"wp_admin_bar_edit_menu":[432,470,460],"wp_admin_bar_new_content_menu":[492,495,498,501,508,518,518],"wp_admin_bar_comments_menu":[553],"wp_admin_bar_appearance_menu":[579,579,582],"WP_Customize_Manager::setup_theme":[119,130],"_WP_Editors::editor":[100],"wp_xmlrpc_server::get_custom_fields":[254],"wp_xmlrpc_server::set_custom_fields":[287,289,292],"wp_xmlrpc_server::wp_getUsersBlogs":[487],"wp_xmlrpc_server::_insert_post":[1010,1015,1015,1024,1029,1038,1043,1086,1123,1146,1172],"wp_xmlrpc_server::wp_deletePost":[1321],"wp_xmlrpc_server::wp_getPost":[1403],"wp_xmlrpc_server::wp_getPosts":[1464,1499],"wp_xmlrpc_server::wp_newTerm":[1549],"wp_xmlrpc_server::wp_editTerm":[1637],"wp_xmlrpc_server::wp_deleteTerm":[1729],"wp_xmlrpc_server::wp_getTerm":[1796],"wp_xmlrpc_server::wp_getTerms":[1849],"wp_xmlrpc_server::wp_getTaxonomy":[1928],"wp_xmlrpc_server::wp_getTaxonomies":[1974],"wp_xmlrpc_server::wp_getUser":[2036],"wp_xmlrpc_server::wp_getUsers":[2089,2119],"wp_xmlrpc_server::wp_getProfile":[2156],"wp_xmlrpc_server::wp_editProfile":[2199],"wp_xmlrpc_server::wp_getPage":[2267],"wp_xmlrpc_server::wp_getPages":[2305,2318],"wp_xmlrpc_server::wp_deletePage":[2385],"wp_xmlrpc_server::wp_editPage":[2426],"wp_xmlrpc_server::wp_getPageList":[2465],"wp_xmlrpc_server::wp_getAuthors":[2516],"wp_xmlrpc_server::wp_getTags":[2551],"wp_xmlrpc_server::wp_newCategory":[2596],"wp_xmlrpc_server::wp_deleteCategory":[2656],"wp_xmlrpc_server::wp_suggestCategories":[2687],"wp_xmlrpc_server::wp_getComment":[2723],"wp_xmlrpc_server::wp_getComments":[2764],"wp_xmlrpc_server::wp_deleteComment":[2824,2830],"wp_xmlrpc_server::wp_editComment":[2879,2885],"wp_xmlrpc_server::wp_getCommentStatusList":[3039],"wp_xmlrpc_server::wp_getCommentCount":[3066],"wp_xmlrpc_server::wp_getPostStatusList":[3098],"wp_xmlrpc_server::wp_getPageStatusList":[3124],"wp_xmlrpc_server::wp_getPageTemplates":[3150],"wp_xmlrpc_server::wp_setOptions":[3228],"wp_xmlrpc_server::wp_getMediaItem":[3277],"wp_xmlrpc_server::wp_getMediaLibrary":[3322],"wp_xmlrpc_server::wp_getPostFormats":[3363],"wp_xmlrpc_server::wp_getPostType":[3436],"wp_xmlrpc_server::wp_getPostTypes":[3482],"wp_xmlrpc_server::wp_getRevisions":[3534,3549],"wp_xmlrpc_server::wp_restoreRevision":[3601],"wp_xmlrpc_server::blogger_getUsersBlogs":[3641],"wp_xmlrpc_server::blogger_getUserInfo":[3703],"wp_xmlrpc_server::blogger_getPost":[3742],"wp_xmlrpc_server::blogger_getRecentPosts":[3797],"wp_xmlrpc_server::blogger_newPost":[3868,3868],"wp_xmlrpc_server::blogger_editPost":[3928,3933],"wp_xmlrpc_server::blogger_deletePost":[3980],"wp_xmlrpc_server::mw_newPost":[4083,4085,4120,4124],"wp_xmlrpc_server::mw_editPost":[4375,4424,4428,4536,4534],"wp_xmlrpc_server::mw_getPost":[4636],"wp_xmlrpc_server::mw_getRecentPosts":[4769],"wp_xmlrpc_server::mw_getCategories":[4871],"wp_xmlrpc_server::mw_newMediaObject":[4924,4960],"wp_xmlrpc_server::mt_getRecentPostTitles":[5026],"wp_xmlrpc_server::mt_getCategoryList":[5070],"wp_xmlrpc_server::mt_getPostCategories":[5111],"wp_xmlrpc_server::mt_setPostCategories":[5157],"wp_xmlrpc_server::mt_publishPost":[5269,5269],"wp_comment_form_unfiltered_html_nonce":[816],"check_comment_flood_db":[727],"WP_Widget_Text::update":[412],"wp_widget_rss_output":[830],"wp_upload_bits":[1723],"kses_init_filters":[1332],"kses_init":[1388],"get_edit_term_link":[685],"edit_term_link":[721],"get_edit_post_link":[908],"get_delete_post_link":[962],"get_edit_comment_link":[983],"edit_comment_link":[1003],"get_edit_bookmark_link":[1024],"edit_bookmark_link":[1044],"get_edit_user_link":[1066],"wp_prepare_attachment_for_js":[1354,1359],"wp_post_revision_title":[1311],"wp_list_post_revisions":[1381,1383],"wp_count_posts":[2131],"wp_insert_post":[2767,2915],"wp_insert_attachment":[4036],"get_posts_by_author_sql":[4498],"WP_Query::get_posts":[2468,2474,2508,2710,2718,2726],"preview_theme":[556],"wp_get_update_data":[336,342,350,348]}},"wp_admin_bar_appearance_menu":{"doc":"\/**\n * Add appearance submenu items to the \"Site Name\" menu.\n *\n * @since 3.1.0\n *\/","file":"admin-bar.php","line":576,"missingDoc":false,"filters":[],"uses":{"add_group":[577],"add_menu":[580,586,598,601,604,607],"__":[580,589,598,601,604,607],"admin_url":[580,598,601,604,607],"current_user_can":[579,579,582],"is_ssl":[585],"add_query_arg":[590],"urlencode":[590],"wp_customize_url":[590],"add_action":[595],"current_theme_supports":[597,600,600,603,606]},"used_by":{"wp_admin_bar_site_menu":[270]}},"wp_admin_bar_my_sites_menu":{"doc":"\/**\n * Add the \"My Sites\/[Site Name]\" menu and all submenus.\n *\n * @since 3.1.0\n *\/","file":"admin-bar.php","line":279,"missingDoc":false,"filters":[],"uses":{"is_user_logged_in":[283],"is_multisite":[283],"count":[287],"is_super_admin":[287,296,340],"add_menu":[290,302,309,315,321,327,352,359,367,376,384],"__":[292,305,312,318,324,330,362,370,379,387],"admin_url":[293,356,363,371,380],"add_group":[297,336],"network_admin_url":[306,313,319,325],"network_home_url":[331],"switch_to_blog":[345],"current_user_can":[366,375],"get_post_type_object":[366],"home_url":[388],"restore_current_blog":[391]},"used_by":[]},"network_home_url":{"doc":"\/**\n * Retrieve the home url for the current network.\n *\n * Returns the home url with the appropriate protocol, 'https' if\n * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is\n * overridden.\n *\n * @package WordPress\n * @since 3.0.0\n *\n * @param  string $path   (optional) Path relative to the home url.\n * @param  string $scheme (optional) Scheme to give the home url context. Currently 'http', 'https', or 'relative'.\n * @return string Home url link with optional path appended.\n*\/","file":"link-template.php","line":2134,"missingDoc":false,"filters":["'network_home_url'"],"uses":{"home_url":[2138],"is_multisite":[2137],"is_ssl":[2143],"is_admin":[2143],"in_array":[2142],"set_url_scheme":[2148],"ltrim":[2151],"is_string":[2150],"strpos":[2150]},"used_by":{"wp_admin_bar_my_sites_menu":[331],"get_blogaddress_by_name":[51,55],"maybe_redirect_404":[1655]}},"switch_to_blog":{"doc":"\/**\n * Switch the current blog.\n *\n * This function is useful if you need to pull posts, or other information,\n * from other blogs. You can switch back afterwards using restore_current_blog().\n *\n * Things that aren't switched:\n *  - autoloaded options. See #14992\n *  - plugins. See #14941\n *\n * @see restore_current_blog()\n * @since MU\n *\n * @param int $new_blog The id of the blog you want to switch to. Default: current blog\n * @param bool $deprecated Deprecated argument\n * @return bool True on success, false if the validation failed\n *\/","file":"ms-blogs.php","line":501,"missingDoc":false,"filters":["'switch_blog'","'switch_blog'"],"uses":{"set_blog_id":[518],"wp_cache_switch_to_blog":[524],"is_object":[528],"wp_cache_init":[533],"wp_cache_add_global_groups":[537,539],"is_array":[536],"wp_cache_add_non_persistent_groups":[540],"function_exists":[535,523],"reinit":[545],"wp_get_current_user":[546],"for_blog":[547],"did_action":[544]},"used_by":{"wp_admin_bar_my_sites_menu":[345],"wp_cache_switch_to_blog":[194],"current_user_can_for_blog":[1303],"WP_Theme::get_allowed_on_site":[1118,1129,1151],"wp_xmlrpc_server::wp_getUsersBlogs":[485],"get_home_url":[1908],"get_site_url":[1967],"get_blog_details":[231],"update_blog_details":[333],"get_blog_option":[389],"add_blog_option":[424],"delete_blog_option":[449],"update_blog_option":[475],"get_blog_post":[158],"add_user_to_blog":[179],"remove_user_from_blog":[220],"create_empty_blog":[299],"get_blog_permalink":[316],"wpmu_create_blog":[976],"newblog_notify_siteadmin":[1022]}},"get_post_type_object":{"doc":"\/**\n * Retrieve a post type object by name\n *\n * @package WordPress\n * @subpackage Post\n * @since 3.0.0\n * @uses $wp_post_types\n * @see register_post_type\n * @see get_post_types\n *\n * @param string $post_type The name of a registered post type\n * @return object A post type object\n *\/","file":"post.php","line":1094,"missingDoc":false,"filters":[],"uses":[],"used_by":{"wp_admin_bar_my_sites_menu":[366],"wp_admin_bar_edit_menu":[431,459],"redirect_canonical":[97],"map_meta_cap":[1023,1073,1121,1154,1162,1178],"wp_xmlrpc_server::_insert_post":[1001],"wp_xmlrpc_server::wp_deletePost":[1320],"wp_xmlrpc_server::wp_getPost":[1402],"wp_xmlrpc_server::wp_getPosts":[1457,1461,1498],"wp_xmlrpc_server::wp_getPostType":[3434],"wp_xmlrpc_server::blogger_newPost":[3868],"wp_xmlrpc_server::mw_newPost":[4083],"get_post_permalink":[192],"get_post_type_archive_link":[834],"get_post_type_archive_feed_link":[870],"get_edit_post_link":[904],"edit_post_link":[934],"get_delete_post_link":[958],"_update_blog_date_on_post_publish":[742],"_update_blog_date_on_post_delete":[764],"wp_setup_nav_menu_item":[580,632],"is_post_type_hierarchical":[1047],"post_type_exists":[1061],"_add_post_type_submenus":[1555],"wp_count_posts":[2130],"get_posts_by_author_sql":[4476],"WP_Query::parse_query":[1569],"WP_Query::get_posts":[2085,2113,2400,2413,2416,2419,2422],"WP_Query::get_queried_object":[3012],"register_taxonomy_for_object_type":[466]}},"restore_current_blog":{"doc":"\/**\n * Restore the current blog, after calling switch_to_blog()\n *\n * @see switch_to_blog()\n * @since MU\n *\n * @return bool True on success, false if we're already on the current blog\n *\/","file":"ms-blogs.php","line":564,"missingDoc":false,"filters":["'switch_blog'","'switch_blog'"],"uses":{"array_pop":[570],"set_blog_id":[579],"wp_cache_switch_to_blog":[585],"is_object":[589],"wp_cache_init":[594],"wp_cache_add_global_groups":[598,600],"is_array":[597],"wp_cache_add_non_persistent_groups":[601],"function_exists":[596,584],"reinit":[606],"wp_get_current_user":[607],"for_blog":[608],"did_action":[605]},"used_by":{"wp_admin_bar_my_sites_menu":[391],"current_user_can_for_blog":[1316],"WP_Theme::get_allowed_on_site":[1120,1131,1154],"wp_xmlrpc_server::wp_getUsersBlogs":[497],"get_home_url":[1910],"get_site_url":[1969],"get_blog_details":[235],"update_blog_details":[335],"get_blog_option":[391],"add_blog_option":[426],"delete_blog_option":[451],"update_blog_option":[477],"get_blog_post":[160],"add_user_to_blog":[184,198],"remove_user_from_blog":[246,264],"create_empty_blog":[301],"get_blog_permalink":[318],"wpmu_create_blog":[995],"newblog_notify_siteadmin":[1025]}},"wp_admin_bar_shortlink_menu":{"doc":"\/**\n * Provide a shortlink.\n *\n * @since 3.1.0\n *\/","file":"admin-bar.php","line":400,"missingDoc":false,"filters":[],"uses":{"wp_get_shortlink":[401],"esc_attr":[407],"add_menu":[409],"__":[411]},"used_by":[]},"wp_get_shortlink":{"doc":"\/**\n * Return a shortlink for a post, page, attachment, or blog.\n *\n * This function exists to provide a shortlink tag that all themes and plugins can target. A plugin must hook in to\n * provide the actual shortlinks. Default shortlink support is limited to providing ?p= style links for posts.\n * Plugins can short-circuit this function via the pre_get_shortlink filter or filter the output\n * via the get_shortlink filter.\n *\n * @since 3.0.0.\n *\n * @param int $id A post or blog id. Default is 0, which means the current post or blog.\n * @param string $context Whether the id is a 'blog' id, 'post' id, or 'media' id. If 'post', the post_type of the post is consulted. If 'query', the current query is consulted to determine the id and context. Default is 'post'.\n * @param bool $allow_slugs Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this.\n * @return string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks are not enabled.\n *\/","file":"link-template.php","line":2343,"missingDoc":false,"filters":["'pre_get_shortlink'","'get_shortlink'"],"uses":{"get_queried_object_id":[2352],"get_post":[2354,2362],"is_single":[2351],"home_url":[2364],"get_option":[2361]},"used_by":{"wp_admin_bar_shortlink_menu":[401],"wp_shortlink_wp_head":[2380],"wp_shortlink_header":[2401],"the_shortlink":[2432]}},"esc_attr":{"doc":"\/**\n * Escaping for HTML attributes.\n *\n * @since 2.8.0\n *\n * @param string $text\n * @return string\n *\/","file":"formatting.php","line":2685,"missingDoc":false,"filters":["'attribute_escape'"],"uses":{"wp_check_invalid_utf8":[2686],"_wp_specialchars":[2687]},"used_by":{"wp_admin_bar_shortlink_menu":[407],"wp_admin_bar_comments_menu":[558],"get_the_author_link":[137],"the_author_posts_link":[204],"wp_list_authors":[318,330,331],"_walk_bookmarks":[74,75,92],"sanitize_bookmark_field":[360,369],"get_category_parents":[59],"get_the_category_list":[174,177,184,197,200,207],"wp_dropdown_categories":[334,335,336],"wp_list_categories":[449],"wp_generate_tag_cloud":[674],"Walker_Category::start_el":[826,830,832],"WP_oEmbed::data2html":[275,275,275],"WP_Admin_Bar::add_node":[98],"WP_Admin_Bar::_render_container":[367],"WP_Admin_Bar::_render_group":[382,386],"WP_Admin_Bar::_render_item":[414,418,425,428,434],"WP_Customize_Control::render":[196,196],"WP_Customize_Control::get_link":[213],"WP_Customize_Control::render_content":[241,248,265,265,281],"WP_Customize_Color_Control::render_content":[380],"WP_Customize_Image_Control::render_content":[545,551],"WP_Customize_Header_Image_Control::print_header_image":[796],"WP_Customize_Section::render":[82,83],"WP_Embed::maybe_make_link":[273],"WP_Styles::do_item":[60,66],"comments_popup_link":[981,1013],"comment_form":[1525,1527,1529,1559,1577,1577],"sanitize_comment_cookies":[636,643],"WP_Widget_Pages::form":[63,64],"WP_Widget_Search::form":[215],"WP_Widget_Archives::widget":[252],"WP_Widget_Archives::form":[281],"WP_Widget_Meta::widget":[316,317,318],"WP_Widget_Meta::form":[339],"WP_Widget_Calendar::form":[380],"WP_Widget_Text::form":[426],"WP_Widget_Categories::form":[506],"WP_Widget_Recent_Posts::widget":[574],"WP_Widget_Recent_Posts::form":[611],"WP_Widget_Recent_Comments::form":[719],"WP_Widget_RSS::widget":[768],"wp_widget_rss_output":[859,863],"wp_widget_rss_form":[928,929],"WP_Widget_Tag_Cloud::form":[1068,1076],"get_links":[981,982],"get_the_attachment_link":[1903],"get_attachment_icon":[2003],"get_attachment_innerHTML":[2032],"attribute_escape":[2144],"get_boundary_post_rel_link":[2741],"get_index_rel_link":[2775],"get_parent_post_rel_link":[2816],"get_the_category_rss":[327,327],"translate_smiley":[1739],"_links_add_target":[3175],"wp_nonce_field":[1209],"wp_referer_field":[1235],"wp_original_referer_field":[1261],"wp_timezone_choice":[3392,3412,3425,3445],"wp_login_form":[279,280,280,283,284,287,289,289],"get_archives_link":[827],"get_calendar":[1160,1172,1180,1220,1234,1248,1259],"feed_links":[1609,1610],"feed_links_extra":[1672],"get_search_query":[1830],"the_search_query":[1844],"esc_attr__":[113],"esc_attr_e":[156],"esc_attr_x":[209],"edit_post_link":[935],"get_adjacent_post_rel_link":[1232],"wp_print_media_templates":[329,364],"get_image_tag":[233,235,235,238,238],"img_caption_shortcode":[652,654],"wp_embed_handler_googlevideo":[1100,1100,1100],"Walker_Nav_Menu::start_el":[76,79,83,84,85,86],"wp_nav_menu":[191,192,231,231],"form_option":[123],"get_avatar":[1596],"the_title_attribute":[82],"wp_dropdown_pages":[788,788,792],"wp_page_menu":[905,924],"wp_get_attachment_link":[1171],"wp_list_post_revisions":[1426],"sanitize_post_field":[2029,2048],"wp_rss":[888],"wp_default_scripts":[79,80,81,82,87,88,89,348],"_print_scripts":[709],"_print_styles":[828],"sanitize_term_field":[1649,1667],"get_the_taxonomies":[3122],"__main":[74,79,84,97,76,79,82],"preview_theme_ob_filter_callback":[649],"wp_get_update_data":[363],"wp_dropdown_users":[1040,1044],"sanitize_user_field":[1129,1148]}},"wp_admin_bar_edit_menu":{"doc":"\/**\n * Provide an edit link for posts and terms.\n *\n * @since 3.1.0\n *\/","file":"admin-bar.php","line":422,"missingDoc":false,"filters":[],"uses":{"get_current_screen":[426],"get_post":[427],"add_menu":[436,446,463,473],"get_permalink":[439],"is_object":[442],"get_taxonomy":[443,469],"get_term_link":[449],"get_post_type_object":[431,459],"current_user_can":[432,470,460],"get_queried_object":[453],"get_edit_post_link":[466],"get_edit_term_link":[476],"is_admin":[425]},"used_by":[]},"get_post":{"doc":"\/**\n * Retrieves post data given a post ID or post object.\n *\n * See {@link sanitize_post()} for optional $filter values. Also, the parameter\n * $post, must be given as a variable, since it is passed by reference.\n *\n * @since 1.5.1\n * @uses $wpdb\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/get_post\n *\n * @param int|object $post Post ID or post object. Optional, default is the current post from the loop.\n * @param string $output Optional, default is Object. Either OBJECT, ARRAY_A, or ARRAY_N.\n * @param string $filter Optional, default is raw.\n * @return WP_Post|null WP_Post on success or null on failure\n *\/","file":"post.php","line":386,"missingDoc":false,"filters":[],"uses":{"is_object":[392],"sanitize_post":[394],"is_a":[390],"filter":[408],"to_array":[411,413],"array_values":[413]},"used_by":{"wp_admin_bar_edit_menu":[427],"get_the_modified_author":[72],"get_the_author_posts":[166],"redirect_canonical":[96],"map_meta_cap":[1017,1020,1067,1070,1115,1118,1153,1161,1177],"author_can":[1331],"get_the_terms":[1062],"has_term":[1182],"_WP_Editors::editor_settings":[399],"_WP_Editors::wp_fullscreen_html":[659],"WP_Embed::maybe_run_ajax_cache":[73],"WP_Embed::shortcode":[138],"WP_Embed::cache_oembed":[220],"wp_xmlrpc_server::_prepare_post":[650],"wp_xmlrpc_server::_prepare_page":[786],"wp_xmlrpc_server::_insert_post":[1008,1099],"wp_xmlrpc_server::wp_editPost":[1255],"wp_xmlrpc_server::wp_deletePost":[1316],"wp_xmlrpc_server::wp_getPost":[1397],"wp_xmlrpc_server::wp_getPage":[2263],"wp_xmlrpc_server::wp_deletePage":[2380],"wp_xmlrpc_server::wp_editPage":[2421],"wp_xmlrpc_server::wp_newComment":[2975],"wp_xmlrpc_server::wp_getMediaItem":[3282],"wp_xmlrpc_server::wp_getRevisions":[3531],"wp_xmlrpc_server::wp_restoreRevision":[3598],"wp_xmlrpc_server::blogger_getPost":[3738],"wp_xmlrpc_server::blogger_editPost":[3921],"wp_xmlrpc_server::blogger_deletePost":[3975],"wp_xmlrpc_server::mw_editPost":[4367],"wp_xmlrpc_server::mw_getPost":[4632],"wp_xmlrpc_server::mt_getPostCategories":[5108],"wp_xmlrpc_server::mt_setPostCategories":[5154],"wp_xmlrpc_server::mt_getTrackbackPings":[5218],"wp_xmlrpc_server::mt_publishPost":[5265],"wp_xmlrpc_server::pingback_ping":[5359],"wp_xmlrpc_server::pingback_extensions_getPingbacks":[5479],"get_comment_class":[315],"get_comments_number":[553],"comments_open":[774],"pings_open":[791],"wp_comment_form_unfiltered_html_nonce":[813],"get_comment_reply_link":[1051],"get_post_reply_link":[1104],"wp_new_comment":[1408],"wp_update_comment_count_now":[1614],"do_trackbacks":[1746],"_close_comments_for_old_post":[2052],"get_postdata":[29],"start_wp":[67],"user_can_edit_post":[251],"get_the_attachment_link":[1895],"get_attachment_icon_src":[1924],"get_attachment_icon":[1969],"get_attachment_innerHTML":[2026],"get_parent_post_rel_link":[2804],"wp_get_single_post":[3301],"__main":[45,37,46],"wp_scheduled_delete":[3483],"the_date_xml":[1321],"get_the_date":[1376],"get_the_time":[1447],"get_post_time":[1468],"get_post_modified_time":[1518],"the_weekday":[1538],"the_weekday_date":[1559],"feed_links_extra":[1642],"permalink_anchor":[58],"get_permalink":[99],"get_post_permalink":[181],"get_page_link":[241],"_get_page_link":[267],"get_attachment_link":[303,306],"get_edit_post_link":[896],"edit_post_link":[925],"get_delete_post_link":[955],"get_adjacent_post":[1125,1182,1193],"get_adjacent_post_rel_link":[1213,1212],"get_boundary_post":[1306],"adjacent_post_link":[1379,1379],"wp_get_shortlink":[2354,2362],"the_shortlink":[2424],"wp_get_attachment_image":[553],"gallery_shortcode":[672],"adjacent_image_link":[830],"get_attachment_taxonomies":[859],"wp_prepare_attachment_for_js":[1312],"wp_enqueue_media":[1474],"_update_blog_date_on_post_delete":[762],"get_blog_post":[159],"wp_update_nav_menu_item":[325],"wp_setup_nav_menu_item":[590],"wp_notify_postauthor":[991],"wp_notify_moderator":[1101],"get_the_ID":[29],"get_the_title":[103],"get_the_guid":[151],"get_the_content":[183],"get_the_excerpt":[264],"has_excerpt":[282],"get_post_class":[317],"get_body_class":[491],"post_password_required":[572],"_wp_link_page":[696],"Walker_Page::start_el":[1038],"wp_get_attachment_link":[1163],"prepend_attachment":[1196],"get_the_password_form":[1223],"get_page_template_slug":[1274],"wp_post_revision_title":[1297],"wp_list_post_revisions":[1353],"update_attached_file":[209],"get_post_ancestors":[687,696],"get_post_field":[725],"get_post_mime_type":[748],"get_post_format":[766],"set_post_format":[805],"get_post_status":[833],"get_post_type":[1075],"wp_trash_post":[2401],"wp_untrash_post":[2433],"wp_trash_post_comments":[2470],"wp_untrash_post_comments":[2511],"wp_insert_post":[2763,2928,2946],"wp_update_post":[2976],"wp_publish_post":[3021],"check_and_publish_future_post":[3053],"trackback_url_list":[3380],"get_page":[3438],"get_page_by_path":[3491],"get_page_by_title":[3511],"get_page_uri":[3597,3602],"is_local_attachment":[3859],"wp_get_attachment_metadata":[4169],"wp_update_attachment_metadata":[4191],"wp_get_attachment_url":[4210],"wp_get_attachment_thumb_file":[4249],"wp_get_attachment_thumb_url":[4271],"wp_attachment_is_image":[4298],"wp_mime_type_icon":[4330],"clean_post_cache":[4646],"wp_save_post_revision":[4934],"wp_get_post_autosave":[4984],"_wp_put_post_revision":[5071],"wp_get_post_revision":[5106],"wp_get_post_revisions":[5214],"wp_get_post_parent_id":[5267],"set_post_thumbnail":[5377,5379],"delete_post_thumbnail":[5397],"WP_Query::get_posts":[2136,2727],"WP_Query::get_queried_object":[3015],"get_the_taxonomies":[3094],"get_post_taxonomies":[3140]}},"get_permalink":{"doc":"\/**\n * Retrieve full permalink for current post or post ID.\n *\n * @since 1.0.0\n *\n * @param int $id Optional. Post ID.\n * @param bool $leavename Optional, defaults to false. Whether to keep post name or page name.\n * @return string\n *\/","file":"link-template.php","line":80,"missingDoc":false,"filters":["'pre_post_link'","'post_link_category'","'post_link'"],"uses":{"get_post":[99],"is_object":[95],"get_page_link":[107],"get_attachment_link":[109],"in_array":[110,117],"get_post_types":[110],"get_post_permalink":[111],"get_option":[113,134],"strtotime":[118],"get_the_category":[122],"usort":[124],"get_term":[126],"get_category_parents":[129],"get_category":[134],"is_wp_error":[135],"strpos":[121,140],"get_userdata":[141],"explode":[145],"date":[145],"home_url":[160,163],"str_replace":[160],"user_trailingslashit":[161]},"used_by":{"wp_admin_bar_edit_menu":[439],"redirect_canonical":[86,99,116,119,122,127,210,216],"redirect_guess_404_permalink":[498,500],"wp_list_categories":[460],"_WP_Editors::wp_link_query":[795],"get_comment_link":[500,502,504],"get_comments_link":[519],"get_trackback_url":[708],"comments_popup_link":[1000],"get_comment_reply_link":[1059],"get_post_reply_link":[1110,1112],"comment_form":[1536,1537],"pingback":[1859],"trackback":[1913],"WP_Widget_RSS::widget":[771],"wp_widget_rss_process":[1010],"previous_post":[150],"next_post":[186],"get_boundary_post_rel_link":[2742],"get_parent_post_rel_link":[2817],"the_permalink_rss":[191],"wp_get_archives":[1031],"the_permalink":[16],"post_permalink":[225],"get_attachment_link":[310],"get_post_comments_feed_link":[478],"get_adjacent_post_rel_link":[1233],"adjacent_post_link":[1395],"get_comments_pagenum_link":[1692],"paginate_comments_links":[1825],"rel_canonical":[2320],"get_blog_permalink":[317],"wp_setup_nav_menu_item":[588,637],"wp_notify_postauthor":[1048,1049],"wp_notify_moderator":[1119,1126,1133],"get_the_content":[219],"_wp_link_page":[699,702,704,706],"Walker_Page::start_el":[1051],"wp_insert_post":[2924],"_transition_post_status":[4797],"wp_old_slug_redirect":[3606],"SimplePie_Item::get_id":[241,252,250],"__main":[71,65,72]}},"get_taxonomy":{"doc":"\/**\n * Retrieves the taxonomy object of $taxonomy.\n *\n * The get_taxonomy function will first check that the parameter string given\n * is a taxonomy object and if it is, it will return it.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wp_taxonomies\n * @uses taxonomy_exists() Checks whether taxonomy exists\n *\n * @param string $taxonomy Name of taxonomy object to return\n * @return object|bool The Taxonomy Object or false if $taxonomy doesn't exist\n *\/","file":"taxonomy.php","line":205,"missingDoc":false,"filters":[],"uses":{"taxonomy_exists":[208]},"used_by":{"wp_admin_bar_edit_menu":[443,469],"redirect_canonical":[178],"wp_xmlrpc_server::wp_newTerm":[1547],"wp_xmlrpc_server::wp_editTerm":[1635],"wp_xmlrpc_server::wp_deleteTerm":[1727],"wp_xmlrpc_server::wp_getTerm":[1794],"wp_xmlrpc_server::wp_getTerms":[1847],"wp_xmlrpc_server::wp_getTaxonomy":[1926],"WP_Widget_Tag_Cloud::widget":[1043],"WP_Widget_Tag_Cloud::form":[1072],"wp_title":[546],"get_term_feed_link":[608],"get_edit_term_link":[684],"edit_term_link":[720],"wp_setup_nav_menu_item":[595,653],"wp_insert_post":[2912],"wp_insert_attachment":[4033],"_post_format_request":[5444],"is_taxonomy_hierarchical":[256],"wp_delete_term":[1821],"wp_get_object_terms":[1914,1921],"wp_set_object_terms":[2228],"wp_update_term_count_now":[2519],"_pad_term_counts":[2873],"get_term_link":[3012],"get_the_taxonomies":[3107]}},"get_term_link":{"doc":"\/**\n * Generates a permalink for a taxonomy term archive.\n *\n * @since 2.5.0\n *\n * @uses apply_filters() Calls 'term_link' with term link and term object, and taxonomy parameters.\n * @uses apply_filters() For the post_tag Taxonomy, Calls 'tag_link' with tag link and tag ID as parameters.\n * @uses apply_filters() For the category Taxonomy, Calls 'category_link' filter on category link and category ID.\n *\n * @param object|int|string $term\n * @param string $taxonomy (optional if $term is object)\n * @return string|WP_Error HTML link to taxonomy term archive on success, WP_Error if term does not exist.\n *\/","file":"taxonomy.php","line":2990,"missingDoc":false,"filters":["'tag_link'","'category_link'","'term_link'"],"uses":{"get_term":[2995,3027],"get_term_by":[2997],"is_int":[2994],"is_object":[2993,3001],"__":[3002],"is_wp_error":[3004],"get_extra_permastruct":[3009],"get_taxonomy":[3012],"home_url":[3021,3036],"get_ancestors":[3025],"array_reverse":[3030],"str_replace":[3032,3034],"implode":[3032],"user_trailingslashit":[3036]},"used_by":{"wp_admin_bar_edit_menu":[449],"redirect_canonical":[167],"get_category_link":[22],"wp_tag_cloud":[538],"Walker_Category::start_el":[828],"get_tag_link":[968],"get_the_term_list":[1101],"get_term_feed_link":[612],"wp_setup_nav_menu_item":[603,658],"get_post_format_link":[5415],"get_the_taxonomies":[3122]}},"get_queried_object":{"doc":"\/**\n * Retrieve the currently-queried object. Wrapper for $wp_query->get_queried_object()\n *\n * @uses WP_Query::get_queried_object\n *\n * @since 3.1.0\n * @access public\n *\n * @return object\n *\/","file":"query.php","line":40,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[42]},"used_by":{"wp_admin_bar_edit_menu":[453],"redirect_canonical":[166],"wp_list_categories":[469],"term_description":[1044],"WP::handle_404":[516],"wp_title":[545,552],"single_post_title":[629],"post_type_archive_title":[657],"single_term_title":[726],"feed_links_extra":[1649,1654,1668],"edit_term_link":[717],"_wp_menu_item_classes_by_context":[256],"get_body_class":[429,458,465,472,479],"get_queried_object":[42],"WP_Query::get_queried_object_id":[3037],"WP_Query::is_post_type_archive":[3088],"WP_Query::is_author":[3122],"WP_Query::is_category":[3154],"WP_Query::is_tag":[3186],"WP_Query::is_tax":[3221],"WP_Query::is_page":[3381],"WP_Query::is_single":[3462],"WP_Query::is_singular":[3494],"get_author_template":[83],"get_category_template":[109],"get_tag_template":[135],"get_taxonomy_template":[166],"get_page_template":[243],"get_single_template":[289]}},"get_edit_post_link":{"doc":"\/**\n * Retrieve edit posts link for post.\n *\n * Can be used within the WordPress loop or outside of it. Can be used with\n * pages, posts, attachments, and revisions.\n *\n * @since 2.3.0\n *\n * @param int $id Optional. Post ID.\n * @param string $context Optional, defaults to display. How to write the '&', defaults to '&amp;'.\n * @return string\n *\/","file":"link-template.php","line":895,"missingDoc":false,"filters":["'get_edit_post_link'"],"uses":{"get_post":[896],"get_post_type_object":[904],"current_user_can":[908],"admin_url":[911],"sprintf":[911]},"used_by":{"wp_admin_bar_edit_menu":[466],"edit_post_link":[928],"wp_prepare_attachment_for_js":[1356],"wp_post_revision_title":[1311]}},"get_edit_term_link":{"doc":"\/**\n * Retrieve edit term url.\n *\n * @since 3.1.0\n *\n * @param int $term_id Term ID\n * @param string $taxonomy Taxonomy\n * @param string $object_type The object type\n * @return string\n *\/","file":"link-template.php","line":683,"missingDoc":false,"filters":["'get_edit_term_link'"],"uses":{"get_taxonomy":[684],"current_user_can":[685],"get_term":[688],"add_query_arg":[699],"admin_url":[699]},"used_by":{"wp_admin_bar_edit_menu":[476],"get_edit_tag_link":[654],"edit_term_link":[727]}},"wp_admin_bar_new_content_menu":{"doc":"\/**\n * Add \"Add New\" menu.\n *\n * @since 3.1.0\n *\/","file":"admin-bar.php","line":487,"missingDoc":false,"filters":[],"uses":{"get_post_types":[490],"current_user_can":[492,495,498,501,508,518,518],"_x":[499,519,524,531],"add_menu":[526,538],"admin_url":[529,542],"current":[529],"array_keys":[529]},"used_by":[]},"get_post_types":{"doc":"\/**\n * Get a list of all registered post type objects.\n *\n * @package WordPress\n * @subpackage Post\n * @since 2.9.0\n * @uses $wp_post_types\n * @see register_post_type\n *\n * @param array|string $args An array of key => value arguments to match against the post type objects.\n * @param string $output The type of output to return, either post type 'names' or 'objects'. 'names' is the default.\n * @param string $operator The logical operation to perform. 'or' means only one element\n *  from the array needs to match; 'and' means all elements must match. The default is 'and'.\n * @return array A list of post type names or objects\n *\/","file":"post.php","line":1118,"missingDoc":false,"filters":[],"uses":{"wp_filter_object_list":[1123]},"used_by":{"wp_admin_bar_new_content_menu":[490],"redirect_guess_404_permalink":[483],"_WP_Editors::wp_link_query":[756],"wp_xmlrpc_server::wp_getPostTypes":[3477],"WP::parse_request":[289],"get_permalink":[110],"_add_post_type_submenus":[1554],"wp_unique_post_slug":[3098],"get_pages":[3642],"_get_last_post_time":[4583],"WP_Query::get_posts":[2226,2406],"WP_Rewrite::generate_rewrite_rules":[1394]}},"_x":{"doc":"\/**\n * Retrieve translated string with gettext context\n *\n * Quite a few times, there will be collisions with similar translatable text\n * found in more than two places but with different translated context.\n *\n * By including the context in the pot file translators can translate the two\n * strings differently.\n *\n * @since 2.8.0\n *\n * @param string $text Text to translate\n * @param string $context Context information for the translators\n * @param string $domain Optional. Domain to retrieve the translated text\n * @return string Translated context string without pipe\n *\/","file":"l10n.php","line":189,"missingDoc":false,"filters":[],"uses":{"translate_with_gettext_context":[190]},"used_by":{"wp_admin_bar_new_content_menu":[499,519,524,531],"_WP_Editors::editor":[114],"comment_type":[678],"comment_form":[1535],"get_comment_statuses":[422,424],"WP_Widget_Recent_Comments::widget":[694],"wptexturize":[37,39,42,45,47,50,52,55,57],"wp_trim_words":[2182],"capital_P_dangit":[3272],"get_calendar":[1146],"feed_links":[1600],"feed_links_extra":[1623],"register_admin_color_schemes":[2038,2040],"wp_mce_translation":[357,401],"_ex":[205],"WP_Locale::init":[184],"wp_post_revision_title":[1304],"wp_list_post_revisions":[1374],"create_initial_post_types":[22,38,55,56,57,110,117,124,131,138,145],"get_post_type_labels":[1496,1496,1497,1497,1498,1498],"wp_set_post_terms":[3203],"get_post_format_strings":[5325,5326,5327,5328,5329,5330,5331,5332,5333,5334],"wp_default_scripts":[278,306,394,419,466],"create_initial_taxonomies":[111,112],"get_taxonomy_labels":[427,427,428,428],"wp_insert_user":[1347]}},"wp_admin_bar_comments_menu":{"doc":"\/**\n * Add edit comments link with awaiting moderation count bubble.\n *\n * @since 3.1.0\n *\/","file":"admin-bar.php","line":552,"missingDoc":false,"filters":[],"uses":{"current_user_can":[553],"wp_count_comments":[556],"esc_attr":[558],"sprintf":[558],"_n":[558],"number_format_i18n":[558,561],"add_menu":[563],"admin_url":[566]},"used_by":[]},"wp_count_comments":{"doc":"\/**\n * Retrieve total comments for blog or single post.\n *\n * The properties of the returned object contain the 'moderated', 'approved',\n * and spam comments for either the entire blog or single post. Those properties\n * contain the amount of comments that match the status. The 'total_comments'\n * property contains the integer of total comments.\n *\n * The comment stats are cached and then retrieved, if they already exist in the\n * cache.\n *\n * @since 2.5.0\n *\n * @param int $post_id Optional. Post ID.\n * @return object Comment stats.\n *\/","file":"comment.php","line":935,"missingDoc":false,"filters":["'wp_count_comments'"],"uses":{"wp_cache_get":[944],"prepare":[951],"get_results":[953],"wp_cache_set":[972]},"used_by":{"wp_admin_bar_comments_menu":[556],"wp_xmlrpc_server::wp_getCommentCount":[3071]}},"_n":{"doc":"\/**\n * Retrieve the plural or single form based on the amount.\n *\n * If the domain is not set in the $l10n list, then a comparison will be made\n * and either $plural or $single parameters returned.\n *\n * If the domain does exist, then the parameters $single, $plural, and $number\n * will first be passed to the domain's ngettext method. Then it will be passed\n * to the 'ngettext' filter hook along with the same parameters. The expected\n * type will be a string.\n *\n * @since 2.8.0\n * @uses $l10n Gets list of domain translated string (gettext_reader) objects\n * @uses apply_filters() Calls 'ngettext' hook on domains text returned,\n *\t\talong with $single, $plural, and $number parameters. Expected to return string.\n *\n * @param string $single The text that will be used if $number is 1\n * @param string $plural The text that will be used if $number is not 1\n * @param int $number The number to compare against to use either $single or $plural\n * @param string $domain Optional. The domain identifier the text should be retrieved in\n * @return string Either $single or $plural translated text\n *\/","file":"l10n.php","line":238,"missingDoc":false,"filters":["'ngettext'"],"uses":{"get_translations_for_domain":[239],"translate_plural":[240]},"used_by":{"wp_admin_bar_comments_menu":[558],"default_topic_count_text":[563],"WP_Customize_Manager::register_controls":[894],"_nc":[1831],"human_time_diff":[2113,2119,2125],"translate_nooped_plural":[307],"wp_notify_moderator":[1149],"__main":[26],"wp_get_update_data":[359,361]}},"number_format_i18n":{"doc":"\/**\n * Convert integer number to format based on the locale.\n *\n * @since 2.3.0\n *\n * @param int $number The number to convert based on locale.\n * @param int $decimals Precision of the number of decimal places.\n * @return string Converted number in string format.\n *\/","file":"functions.php","line":153,"missingDoc":false,"filters":["'number_format_i18n'"],"uses":{"number_format":[155],"absint":[155]},"used_by":{"wp_admin_bar_comments_menu":[558,561],"wp_admin_bar_updates_menu":[622],"default_topic_count_text":[563],"WP_Customize_Manager::register_controls":[894],"comments_number":[580],"size_format":[191],"paginate_links":[1964],"timer_stop":[227],"wp_notify_moderator":[1150],"__main":[27]}},"is_ssl":{"doc":"\/**\n * Determine if SSL is used.\n *\n * @since 2.6.0\n *\n * @return bool True if SSL, false if not used.\n *\/","file":"functions.php","line":3092,"missingDoc":false,"filters":[],"uses":{"strtolower":[3094]},"used_by":{"wp_admin_bar_appearance_menu":[585],"redirect_canonical":[47],"WP_Admin_Bar::__get":[18],"wp_guess_url":[3158],"wp_login_form":[259],"get_home_url":[1914],"network_home_url":[2143],"set_url_scheme":[2235],"filter_SSL":[1901],"wp_parse_auth_cookie":[615],"wp_set_auth_cookie":[661],"auth_redirect":[745,750],"get_avatar":[1636],"wp_signon":[44]}},"add_query_arg":{"doc":"\/**\n * Retrieve a modified URL query string.\n *\n * You can rebuild the URL and append a new query variable to the URL query by\n * using this function. You can also retrieve the full URL with query data.\n *\n * Adding a single key & value or an associative array. Setting a key value to\n * an empty string removes the key. Omitting oldquery_or_uri uses the $_SERVER\n * value. Additional values provided are expected to be encoded appropriately\n * with urlencode() or rawurlencode().\n *\n * @since 1.5.0\n *\n * @param mixed $param1 Either newkey or an associative_array\n * @param mixed $param2 Either newvalue or oldquery or uri\n * @param mixed $param3 Optional. Old query or uri\n * @return string New URL query string.\n *\/","file":"functions.php","line":638,"missingDoc":false,"filters":[],"uses":{"func_get_args":[640],"count":[642,647,670],"is_array":[641,687],"substr":[654,660,663],"strlen":[654],"strstr":[653],"stripos":[661,658],"explode":[669],"strpos":[677,668],"wp_parse_str":[685],"urlencode_deep":[686],"array_merge":[689],"build_query":[699],"trim":[700],"preg_replace":[701],"rtrim":[703]},"used_by":{"wp_admin_bar_appearance_menu":[590],"redirect_canonical":[192,266,307],"WP_oEmbed::fetch":[167,168,169],"WP_oEmbed::_fetch_with_format":[192],"WP_Scripts::do_item":[118],"WP_Styles::_css_href":[143],"get_comment_link":[502],"get_comment_reply_link":[1061],"spawn_cron":[233],"dropdown_cats":[711],"wp_get_links":[899],"remove_query_arg":[719,722],"wp_nonce_url":[1177],"wp_logout_url":[218],"wp_login_url":[241,244],"wp_lostpassword_url":[319],"paginate_links":[1959,1973,1987],"wp_admin_css_uri":[2059],"get_post_permalink":[203,205],"get_post_comments_feed_link":[487,489],"get_edit_term_link":[699],"get_search_feed_link":[784],"get_search_comments_feed_link":[815,817],"get_post_type_archive_feed_link":[877],"get_delete_post_link":[967],"get_edit_user_link":[1077],"get_pagenum_link":[1436],"get_comments_pagenum_link":[1699,1705],"paginate_comments_links":[1817],"wp_enqueue_media":[1460],"get_avatar":[1656],"_wp_link_page":[702],"wp_list_post_revisions":[1401],"_post_format_link":[5465],"wp_style_loader_src":[625],"preview_theme_ob_filter_callback":[646]}},"wp_customize_url":{"doc":"\/**\n * Returns a URL to load the theme customizer.\n *\n * @since 3.4.0\n *\n * @param string $stylesheet Optional. Theme to customize. Defaults to current theme.\n * \tThe theme's stylesheet will be urlencoded if necessary.\n *\/","file":"theme.php","line":1681,"missingDoc":false,"filters":[],"uses":{"admin_url":[1682],"urlencode":[1684],"esc_url":[1685]},"used_by":{"wp_admin_bar_appearance_menu":[590]}},"current_theme_supports":{"doc":"\/**\n * Checks a theme's support for a given feature\n *\n * @since 2.9.0\n * @param string $feature the feature being checked\n * @return boolean\n *\/","file":"theme.php","line":1522,"missingDoc":false,"filters":["'current_theme_supports-' . $feature"],"uses":{"current_theme_supports":[1526],"func_num_args":[1532],"array_slice":[1535],"func_get_args":[1535],"in_array":[1545,1552]},"used_by":{"wp_admin_bar_appearance_menu":[597,600,600,603,606],"WP_Admin_Bar::initialize":[48],"wp_xmlrpc_server::initialise_blog_option_info":[358],"wp_xmlrpc_server::_prepare_post":[649],"wp_xmlrpc_server::wp_getPostFormats":[3373],"WP_Widget_Recent_Comments::recent_comments_style":[647],"wp_widgets_add_menu":[2710],"feed_links":[1595],"wp_enqueue_media":[1480],"create_initial_taxonomies":[118],"display_header_text":[874],"_get_random_header_data":[924],"get_custom_header":[1037],"remove_editor_styles":[1233],"_custom_header_background_just_in_time":[1393,1407],"current_theme_supports":[1526],"require_if_theme_supports":[1575]}},"wp_admin_bar_updates_menu":{"doc":"\/**\n * Provide an update link if theme\/plugin\/core updates are available.\n *\n * @since 3.1.0\n *\/","file":"admin-bar.php","line":615,"missingDoc":false,"filters":[],"uses":{"wp_get_update_data":[617],"number_format_i18n":[622],"add_menu":[625],"network_admin_url":[628]},"used_by":[]},"wp_get_update_data":{"doc":"","file":"update.php","line":333,"missingDoc":true,"filters":["'wp_get_update_data'"],"uses":{"get_site_transient":[337,343],"count":[339,345],"current_user_can":[336,342,350,348],"get_core_updates":[349],"in_array":[350],"function_exists":[348],"sprintf":[357,359,361],"__":[357],"_n":[359,361],"esc_attr":[363],"implode":[363]},"used_by":{"wp_admin_bar_updates_menu":[617]}},"wp_admin_bar_search_menu":{"doc":"\/**\n * Add search form.\n *\n * @since 3.3.0\n *\/","file":"admin-bar.php","line":640,"missingDoc":false,"filters":[],"uses":{"is_admin":[641],"esc_url":[644],"home_url":[644],"__":[646],"add_menu":[649]},"used_by":[]},"esc_url":{"doc":"\/**\n * Checks and cleans a URL.\n *\n * A number of characters are removed from the URL. If the URL is for displaying\n * (the default behaviour) ampersands are also replaced. The 'clean_url' filter\n * is applied to the returned cleaned URL.\n *\n * @since 2.8.0\n * @uses wp_kses_bad_protocol() To only permit protocols in the URL set\n *\t\tvia $protocols or the common ones set in the function.\n *\n * @param string $url The URL to be cleaned.\n * @param array $protocols Optional. An array of acceptable protocols.\n *\t\tDefaults to 'http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn' if not set.\n * @param string $_context Private. Use esc_url_raw() for database usage.\n * @return string The cleaned $url after the 'clean_url' filter is applied.\n *\/","file":"formatting.php","line":2580,"missingDoc":false,"filters":["'clean_url'"],"uses":{"preg_replace":[2585],"_deep_replace":[2587],"str_replace":[2588,2600,2601],"strpos":[2593],"in_array":[2593],"preg_match":[2594],"wp_kses_normalize_entities":[2599],"wp_allowed_protocols":[2605],"is_array":[2604],"wp_kses_bad_protocol":[2606]},"used_by":{"wp_admin_bar_search_menu":[644],"wp_list_authors":[339],"_walk_bookmarks":[72],"get_category_parents":[59],"get_the_category_list":[174,177,184,197,200,207],"wp_list_categories":[461],"wp_generate_tag_cloud":[671],"Walker_Category::start_el":[828,842],"get_the_term_list":[1104],"WP_oEmbed::data2html":[275,275,286],"WP_Admin_Bar::_render":[357],"WP_Admin_Bar::_render_item":[420],"WP_Customize_Image_Control::render_content":[534],"WP_Customize_Image_Control::print_tab_image":[630,631],"WP_Customize_Header_Image_Control::print_header_image":[795,797],"WP_Theme::markup_header":[669],"WP_Scripts::do_item":[120],"WP_Styles::_css_href":[145],"get_comment_author_url":[210],"comments_template":[879],"get_comment_reply_link":[1059,1061],"wp_set_comment_cookies":[621],"WP_Widget_Recent_Comments::widget":[694],"WP_Widget_RSS::widget":[771,780],"wp_widget_rss_output":[858],"wp_widget_rss_form":[930],"wp_widget_rss_process":[1010],"get_links":[976],"comments_rss":[1218],"clean_url":[2093],"get_index_rel_link":[2775],"__main":[31,32,51,54,35],"the_permalink_rss":[191],"comments_link_feed":[201],"comment_guid":[214],"comment_link":[242],"self_link":[491],"_make_url_clickable_cb":[1512],"_make_web_ftp_clickable_cb":[1535],"esc_url_raw":[2623],"wp_nonce_ays":[2026],"get_search_form":[161],"wp_loginout":[189,191],"wp_login_form":[276,290],"get_archives_link":[828],"feed_links_extra":[1672],"paginate_links":[1961,1975,1989],"wp_admin_css":[2102,2104],"the_feed_link":[415],"post_comments_feed_link":[512],"get_pagenum_link":[1470],"next_posts":[1506],"previous_posts":[1586],"get_next_comments_link":[1746],"get_previous_comments_link":[1783],"wp_shortlink_wp_head":[2385],"the_shortlink":[2435],"get_blogaddress_by_id":[34],"get_blogaddress_by_name":[57],"get_blogaddress_by_domain":[83],"get_most_active_blogs":[196],"wpmu_signup_blog_notification":[732,744,754],"newblog_notify_siteadmin":[1020],"newuser_notify_siteadmin":[1061],"the_guid":[135],"_wp_link_page":[709],"get_the_password_form":[1225],"wp_rss":[887],"_wp_customize_loader_settings":[1658],"wp_customize_url":[1685],"wp_version_check":[108],"sanitize_user_field":[1145]}},"wp_admin_bar_add_secondary_groups":{"doc":"\/**\n * Add secondary menus.\n *\n * @since 3.3.0\n *\/","file":"admin-bar.php","line":665,"missingDoc":false,"filters":[],"uses":{"add_group":[666,673]},"used_by":[]},"wp_admin_bar_header":{"doc":"\/**\n * Style and scripts for the admin bar.\n *\n * @since 3.1.0\n *\n *\/","file":"admin-bar.php","line":688,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"_admin_bar_bump_cb":{"doc":"\/**\n * Default admin bar callback.\n *\n * @since 3.1.0\n *\n *\/","file":"admin-bar.php","line":699,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"show_admin_bar":{"doc":"\/**\n * Set the display status of the admin bar.\n *\n * This can be called immediately upon plugin load. It does not need to be called from a function hooked to the init action.\n *\n * @since 3.1.0\n *\n * @param bool $show Whether to allow the admin bar to show.\n * @return void\n *\/","file":"admin-bar.php","line":717,"missingDoc":false,"filters":[],"uses":[],"used_by":{"WP_Customize_Manager::setup_theme":[117],"preview_theme":[561]}},"_get_admin_bar_pref":{"doc":"\/**\n * Retrieve the admin bar display preference of a user.\n *\n * @since 3.1.0\n * @access private\n *\n * @param string $context Context of this preference check. Defaults to 'front'. The 'admin'\n * \tpreference is no longer used.\n * @param int $user Optional. ID of the user to check, defaults to 0 for current user.\n * @return bool Whether the admin bar should be showing for this user.\n *\/","file":"admin-bar.php","line":764,"missingDoc":false,"filters":[],"uses":{"get_user_option":[765]},"used_by":{"is_admin_bar_showing":[744]}},"get_user_option":{"doc":"\/**\n * Retrieve user option that can be either per Site or per Network.\n *\n * If the user ID is not given, then the current user will be used instead. If\n * the user ID is given, then the user data will be retrieved. The filter for\n * the result, will also pass the original option name and finally the user data\n * object as the third parameter.\n *\n * The option will first check for the per site name and then the per Network name.\n *\n * @since 2.0.0\n * @uses $wpdb WordPress database object for queries.\n * @uses apply_filters() Calls 'get_user_option_$option' hook with result,\n *\t\toption parameter, and user data object.\n *\n * @param string $option User option name.\n * @param int $user Optional. User ID.\n * @param bool $deprecated Use get_option() to check for an option in the options table.\n * @return mixed\n *\/","file":"user.php","line":233,"missingDoc":false,"filters":["\"get_user_option_{$option}\""],"uses":{"_deprecated_argument":[237],"get_current_user_id":[240],"get_userdata":[242],"get":[246,248],"has_prop":[247,245]},"used_by":{"_get_admin_bar_pref":[765],"user_can_richedit":[1757],"wp_user_settings":[548,557],"get_all_user_settings":[681],"auth_redirect":[769],"wp_style_loader_src":[611]}},"AtomParser::AtomParser":{"doc":"","file":"atomlib.php","line":90,"missingDoc":true,"filters":[],"uses":{"create_function":[94,95]},"used_by":[]},"AtomParser::_p":{"doc":"","file":"atomlib.php","line":98,"missingDoc":true,"filters":[],"uses":{"str_repeat":[100]},"used_by":[]},"AtomParser::error_handler":{"doc":"","file":"atomlib.php","line":104,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"AtomParser::parse":{"doc":"","file":"atomlib.php","line":108,"missingDoc":true,"filters":[],"uses":{"set_error_handler":[110],"array_unshift":[112],"xml_parser_create_ns":[114],"xml_set_object":[115],"xml_set_element_handler":[116],"xml_parser_set_option":[117,118],"xml_set_character_data_handler":[119],"xml_set_default_handler":[120],"xml_set_start_namespace_decl_handler":[121],"xml_set_end_namespace_decl_handler":[122],"fopen":[128],"fread":[129],"trigger_error":[133],"sprintf":[133],"__":[133],"xml_error_string":[134],"xml_get_error_code":[134],"xml_get_current_line_number":[135],"xml_parse":[132],"feof":[132],"fclose":[140],"xml_parser_free":[142],"restore_error_handler":[144]},"used_by":[]},"AtomParser::start_element":{"doc":"","file":"atomlib.php","line":149,"missingDoc":true,"filters":[],"uses":{"array_pop":[151],"split":[151],"_p":[162],"array_unshift":[166,198],"trigger_error":[175],"ns_to_prefix":[181,190],"xml_escape":[182],"join":[185,199],"array_map":[185,199],"array_keys":[185,199,211,214],"array_values":[185,199],"strlen":[186,200],"array_push":[193,205,217,220,222],"is_declared_content_ns":[192],"count":[197],"in_array":[211,214,207,207]},"used_by":[]},"AtomParser::end_element":{"doc":"","file":"atomlib.php","line":228,"missingDoc":true,"filters":[],"uses":{"array_pop":[230],"split":[230],"count":[232,244],"array_shift":[241,270],"array_push":[245,248,250,266,275],"xml_escape":[248],"join":[255,257],"in_array":[254],"substr":[262],"ns_to_prefix":[265],"_p":[279]},"used_by":[]},"AtomParser::start_ns":{"doc":"","file":"atomlib.php","line":282,"missingDoc":true,"filters":[],"uses":{"_p":[283],"array_push":[284]},"used_by":[]},"AtomParser::end_ns":{"doc":"","file":"atomlib.php","line":287,"missingDoc":true,"filters":[],"uses":{"_p":[288]},"used_by":[]},"AtomParser::cdata":{"doc":"","file":"atomlib.php","line":291,"missingDoc":true,"filters":[],"uses":{"_p":[292],"str_replace":[292],"trim":[292],"array_push":[294]},"used_by":[]},"AtomParser::_default":{"doc":"","file":"atomlib.php","line":298,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"AtomParser::ns_to_prefix":{"doc":"","file":"atomlib.php","line":303,"missingDoc":true,"filters":[],"uses":{"split":[305],"array_pop":[308],"join":[312],"strlen":[315,327]},"used_by":[]},"AtomParser::is_declared_content_ns":{"doc":"","file":"atomlib.php","line":335,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"AtomParser::xml_escape":{"doc":"","file":"atomlib.php","line":346,"missingDoc":true,"filters":[],"uses":{"str_replace":[348]},"used_by":[]},"get_the_author":{"doc":"\/**\n * Retrieve the author of the current post.\n *\n * @since 1.5\n * @uses $authordata The current author's DB object.\n * @uses apply_filters() Calls 'the_author' hook on the author display name.\n *\n * @param string $deprecated Deprecated.\n * @return string The author's display name.\n *\/","file":"author-template.php","line":23,"missingDoc":false,"filters":["'the_author'"],"uses":{"_deprecated_argument":[27],"is_object":[29]},"used_by":{"the_author":[57,58],"get_the_author_link":[137,137,139],"the_author_posts_link":[204,205]}},"_deprecated_argument":{"doc":"\/**\n * Marks a function argument as deprecated and informs when it has been used.\n *\n * This function is to be used whenever a deprecated function argument is used.\n * Before this function is called, the argument must be checked for whether it was\n * used by comparing it to its default value or evaluating whether it is empty.\n * For example:\n * <code>\n * if ( !empty($deprecated) )\n * \t_deprecated_argument( __FUNCTION__, '3.0' );\n * <\/code>\n *\n * There is a hook deprecated_argument_run that will be called that can be used\n * to get the backtrace up to what file and function used the deprecated\n * argument.\n *\n * The current behavior is to trigger a user error if WP_DEBUG is true.\n *\n * @package WordPress\n * @subpackage Debug\n * @since 3.0.0\n * @access private\n *\n * @uses do_action() Calls 'deprecated_argument_run' and passes the function name, a message on the change,\n *   and the version in which the argument was deprecated.\n * @uses apply_filters() Calls 'deprecated_argument_trigger_error' and expects boolean value of true to do\n *   trigger or false to not trigger error.\n *\n * @param string $function The function that was called\n * @param string $version The version of WordPress that deprecated the argument used\n * @param string $message Optional. A message regarding the change.\n *\/","file":"functions.php","line":2938,"missingDoc":false,"filters":["'deprecated_argument_run'","'deprecated_argument_trigger_error'"],"uses":{"trigger_error":[2945,2947],"sprintf":[2945,2947],"__":[2945,2947],"is_null":[2944]},"used_by":{"get_the_author":[27],"the_author":[53,55],"the_author_posts_link":[196],"WP_User::__isset":[590],"WP_User::__get":[610],"WP_User::__set":[636],"WP_User::has_cap":[920],"wp_dropdown_categories":[317],"get_categories":[47],"WP_Admin_Bar::__get":[21],"WP_Admin_Bar::add_node":[127],"comments_link":[532,534],"comments_number":[575],"trackback_url":[726],"trackback_rdf":[744],"discover_pingback_server_uri":[1648],"wp_clear_scheduled_hook":[159],"convert_chars":[1081],"is_email":[1792],"wp_get_http_headers":[544],"wp_upload_bits":[1717],"get_bloginfo":[410],"safecss_filter_attr":[1402],"load_plugin_textdomain":[422],"post_permalink":[223],"get_delete_post_link":[953],"get_adjacent_post":[1149],"update_blog_option":[470],"update_blog_status":[670],"get_last_updated":[727],"ms_subdomain_constants":[130],"add_option":[297],"get_the_excerpt":[262],"the_attachment_link":[1140],"wp_get_recent_posts":[2633],"WP_Query::get_posts":[1958],"get_user_option":[237],"wp_get_sidebars_widgets":[1009]}},"the_author":{"doc":"\/**\n * Display the name of the author of the current post.\n *\n * The behavior of this function is based off of old functionality predating\n * get_the_author(). This function is not deprecated, but is designed to echo\n * the value from get_the_author() and as an result of any old theme that might\n * still use the old behavior will also pass the value from get_the_author().\n *\n * The normal, expected behavior of this function is to echo the author and not\n * return it. However, backwards compatibility has to be maintained.\n *\n * @since 0.71\n * @see get_the_author()\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/the_author\n *\n * @param string $deprecated Deprecated.\n * @param string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it.\n * @return string The author's display name, from get_the_author().\n *\/","file":"author-template.php","line":51,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[53,55],"__":[55],"get_the_author":[57,58]},"used_by":{"__main":[32,43,39]}},"get_the_modified_author":{"doc":"\/**\n * Retrieve the author who last edited the current post.\n *\n * @since 2.8\n * @uses $post The current post's DB object.\n * @uses get_post_meta() Retrieves the ID of the author who last edited the current post.\n * @uses get_userdata() Retrieves the author's DB object.\n * @uses apply_filters() Calls 'the_modified_author' hook on the author display name.\n * @return string The author's display name.\n *\/","file":"author-template.php","line":71,"missingDoc":false,"filters":["'the_modified_author'"],"uses":{"get_userdata":[73],"get_post_meta":[72],"get_post":[72]},"used_by":{"the_modified_author":[86]}},"get_userdata":{"doc":"\/**\n * Retrieve user info by user ID.\n *\n * @since 0.71\n *\n * @param int $user_id User ID\n * @return bool|object False on failure, WP_User object on success\n *\/","file":"pluggable.php","line":120,"missingDoc":false,"filters":[],"uses":{"get_user_by":[121]},"used_by":{"get_the_modified_author":[73],"get_the_author_meta":[103],"get_author_posts_url":[227],"wp_list_authors":[291],"redirect_canonical":[155],"map_meta_cap":[1039,1089,1143],"author_can":[1334],"user_can":[1356],"is_super_admin":[1453],"wp_xmlrpc_server::_prepare_page":[805],"wp_xmlrpc_server::_insert_post":[1046],"wp_xmlrpc_server::wp_getUser":[2039],"wp_xmlrpc_server::wp_getProfile":[2159],"wp_xmlrpc_server::mw_newPost":[4131],"wp_xmlrpc_server::mw_getPost":[4666],"wp_xmlrpc_server::mw_getRecentPosts":[4797],"get_comment_author":[27],"get_comment_class":[310],"wp_allow_comment":[687],"user_can_create_post":[210],"user_can_create_draft":[230],"user_can_edit_post":[250,252],"user_can_set_post_date":[299],"user_can_edit_post_date":[319],"user_can_edit_user":[378,379],"get_permalink":[141],"get_edit_user_link":[1069],"add_user_to_blog":[181],"remove_user_from_blog":[244],"newuser_notify_siteadmin":[1059],"wpmu_welcome_notification":[1237],"wpmu_welcome_user_notification":[1286],"wpmu_log_new_registrations":[1512],"is_user_spammy":[1755],"wp_generate_auth_cookie":[579],"wp_notify_postauthor":[992],"wp_notify_moderator":[1102],"wp_new_user_notification":[1198],"get_avatar":[1604,1615],"WP_Query::get_queried_object":[3022],"setup_postdata":[3630],"get_user_option":[242],"setup_userdata":[965],"wp_dropdown_users":[1067],"wp_update_user":[1454]}},"get_post_meta":{"doc":"\/**\n * Retrieve post meta field for a post.\n *\n * @since 1.5.0\n * @uses $wpdb\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/get_post_meta\n *\n * @param int $post_id Post ID.\n * @param string $key Optional. The meta key to retrieve. By default, returns data for all keys.\n * @param bool $single Whether to return a single value.\n * @return mixed Will be an array if $single is false. Will be value of meta data field if $single\n *  is true.\n *\/","file":"post.php","line":1795,"missingDoc":false,"filters":[],"uses":{"get_metadata":[1796]},"used_by":{"get_the_modified_author":[72],"map_meta_cap":[1047,1097],"WP_Embed::shortcode":[171],"wp_xmlrpc_server::_prepare_post":[686],"wp_get_attachment_image":[557],"wp_prepare_attachment_for_js":[1332],"wp_enqueue_media":[1481],"_wp_menu_item_classes_by_context":[348,378],"wp_update_nav_menu_item":[386],"wp_get_nav_menu_items":[504,505,506],"wp_setup_nav_menu_item":[574,575,576,577,614,617,624,625],"wp_get_associated_nav_menu_items":[695],"get_page_template_slug":[1277],"get_post_thumbnail_id":[34],"get_attached_file":[186],"WP_Post::__get":[617,645],"get_post_custom":[1855],"wp_untrash_post":[2441],"wp_untrash_post_comments":[2517],"wp_delete_attachment":[4092],"wp_get_attachment_metadata":[4172],"wp_get_attachment_url":[4217],"wp_check_for_changed_slugs":[4430]}},"the_modified_author":{"doc":"\/**\n * Display the name of the author who last edited the current post.\n *\n * @since 2.8\n * @see get_the_author()\n * @return string The author's display name, from get_the_modified_author().\n *\/","file":"author-template.php","line":85,"missingDoc":false,"filters":[],"uses":{"get_the_modified_author":[86]},"used_by":[]},"get_the_author_meta":{"doc":"\/**\n * Retrieve the requested data of the author of the current post.\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/the_author_meta\n * @since 2.8.0\n * @uses $authordata The current author's DB object (if $user_id not specified).\n * @param string $field selects the field of the users record.\n * @param int $user_id Optional. User ID.\n * @return string The author's field from the current author's DB object.\n *\/","file":"author-template.php","line":98,"missingDoc":false,"filters":["'get_the_author_' . $field"],"uses":{"get_userdata":[103],"in_array":[106]},"used_by":{"the_author_meta":[123],"get_the_author_link":[137,136],"get_the_author_description":[1333],"get_the_author_login":[1361],"get_the_author_firstname":[1389],"get_the_author_lastname":[1417],"get_the_author_nickname":[1445],"get_the_author_email":[1473],"get_the_author_icq":[1501],"get_the_author_yim":[1529],"get_the_author_msn":[1557],"get_the_author_aim":[1585],"get_author_name":[1614],"get_the_author_url":[1629],"get_the_author_ID":[1657],"get_profile":[2473],"__main":[33],"feed_links_extra":[1661],"wp_list_post_revisions":[1389]}},"the_author_meta":{"doc":"\/**\n * Retrieve the requested data of the author of the current post.\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/the_author_meta\n * @since 2.8.0\n * @param string $field selects the field of the users record.\n * @param int $user_id Optional. User ID.\n * @echo string The author's field from the current author's DB object.\n *\/","file":"author-template.php","line":122,"missingDoc":false,"filters":["'the_author_' . $field"],"uses":{"get_the_author_meta":[123]},"used_by":{"the_author_description":[1346],"the_author_login":[1374],"the_author_firstname":[1402],"the_author_lastname":[1430],"the_author_nickname":[1458],"the_author_email":[1486],"the_author_icq":[1514],"the_author_yim":[1542],"the_author_msn":[1570],"the_author_aim":[1598],"the_author_url":[1642],"the_author_ID":[1670],"__main":[34]}},"get_the_author_link":{"doc":"\/**\n * Retrieve either author's link or author's name.\n *\n * If the author has a home page set, return an HTML link, otherwise just return the\n * author's name.\n *\n * @uses get_the_author_meta()\n * @uses get_the_author()\n *\/","file":"author-template.php","line":135,"missingDoc":false,"filters":[],"uses":{"get_the_author_meta":[137,136],"esc_attr":[137],"sprintf":[137],"__":[137],"get_the_author":[137,137,139]},"used_by":{"the_author_link":[154]}},"the_author_link":{"doc":"\/**\n * Display either author's link or author's name.\n *\n * If the author has a home page set, echo an HTML link, otherwise just echo the\n * author's name.\n *\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/the_author_link\n * @since 2.1\n * @uses get_the_author_link()\n *\/","file":"author-template.php","line":153,"missingDoc":false,"filters":[],"uses":{"get_the_author_link":[154]},"used_by":[]},"get_the_author_posts":{"doc":"\/**\n * Retrieve the number of posts by the author of the current post.\n *\n * @since 1.5\n * @uses $post The current post in the Loop's DB object.\n * @uses count_user_posts()\n * @return int The number of posts by the author.\n *\/","file":"author-template.php","line":165,"missingDoc":false,"filters":[],"uses":{"count_user_posts":[166],"get_post":[166]},"used_by":{"the_author_posts":[177]}},"count_user_posts":{"doc":"\/**\n * Number of posts user has written.\n *\n * @since 3.0.0\n * @uses $wpdb WordPress database object for queries.\n *\n * @param int $userid User ID.\n * @return int Amount of posts user has written.\n *\/","file":"user.php","line":152,"missingDoc":false,"filters":["'get_usernumposts'"],"uses":{"get_posts_by_author_sql":[155],"get_var":[157]},"used_by":{"get_the_author_posts":[166],"get_usernumposts":[2486]}},"the_author_posts":{"doc":"\/**\n * Display the number of posts by the author of the current post.\n *\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/the_author_posts\n * @since 0.71\n * @uses get_the_author_posts() Echoes returned value from function.\n *\/","file":"author-template.php","line":176,"missingDoc":false,"filters":[],"uses":{"get_the_author_posts":[177]},"used_by":[]},"the_author_posts_link":{"doc":"\/**\n * Display an HTML link to the author page of the author of the current post.\n *\n * Does just echo get_author_posts_url() function, like the others do. The\n * reason for this, is that another function is used to help in printing the\n * link to the author's posts.\n *\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/the_author_posts_link\n * @since 1.2.0\n * @uses $authordata The current author's DB object.\n * @uses get_author_posts_url()\n * @uses get_the_author()\n * @param string $deprecated Deprecated.\n *\/","file":"author-template.php","line":194,"missingDoc":false,"filters":["'the_author_posts_link'"],"uses":{"_deprecated_argument":[196],"is_object":[199],"sprintf":[201,204],"get_author_posts_url":[203],"esc_attr":[204],"__":[204],"get_the_author":[204,205]},"used_by":[]},"get_author_posts_url":{"doc":"\/**\n * Retrieve the URL to the author page for the user with the ID provided.\n *\n * @since 2.1.0\n * @uses $wp_rewrite WP_Rewrite\n * @return string The URL to the author's page.\n *\/","file":"author-template.php","line":217,"missingDoc":false,"filters":["'author_link'"],"uses":{"get_author_permastruct":[220],"home_url":[223,232],"get_userdata":[227],"str_replace":[231],"user_trailingslashit":[232]},"used_by":{"the_author_posts_link":[203],"wp_list_authors":[318],"redirect_canonical":[157],"get_author_link":[805],"get_author_feed_link":[543]}},"user_trailingslashit":{"doc":"\/**\n * Retrieve trailing slash string, if blog set for adding trailing slashes.\n *\n * Conditionally adds a trailing slash if the permalink structure has a trailing\n * slash, strips the trailing slash if not. The string is passed through the\n * 'user_trailingslashit' filter. Will remove trailing slash from string, if\n * blog is not set to have them.\n *\n * @since 2.2.0\n * @uses $wp_rewrite\n *\n * @param string $string URL with or without a trailing slash.\n * @param string $type_of_url The type of URL being considered (e.g. single, category, etc) for use in the filter.\n * @return string\n *\/","file":"link-template.php","line":34,"missingDoc":false,"filters":["'user_trailingslashit'"],"uses":{"trailingslashit":[37],"untrailingslashit":[39]},"used_by":{"get_author_posts_url":[232],"redirect_canonical":[217,236,238,261,271,275,364],"redirect_guess_404_permalink":[498],"get_comment_link":[500],"get_trackback_url":[708],"get_index_rel_link":[2775],"get_permalink":[161],"get_post_permalink":[200],"_get_page_link":[279],"get_attachment_link":[318],"get_year_link":[345],"get_month_link":[370],"get_day_link":[400],"get_feed_link":[442],"get_post_comments_feed_link":[483],"get_author_feed_link":[549],"get_term_feed_link":[618],"get_search_link":[759],"get_post_type_archive_link":[846],"get_pagenum_link":[1461],"get_comments_pagenum_link":[1697,1703],"paginate_comments_links":[1825],"_wp_link_page":[704,706],"get_term_link":[3036]}},"wp_list_authors":{"doc":"\/**\n * List all the authors of the blog, with several options available.\n *\n * <ul>\n * <li>optioncount (boolean) (false): Show the count in parenthesis next to the\n * author's name.<\/li>\n * <li>exclude_admin (boolean) (true): Exclude the 'admin' user that is\n * installed bydefault.<\/li>\n * <li>show_fullname (boolean) (false): Show their full names.<\/li>\n * <li>hide_empty (boolean) (true): Don't show authors without any posts.<\/li>\n * <li>feed (string) (''): If isn't empty, show links to author's feeds.<\/li>\n * <li>feed_image (string) (''): If isn't empty, use this image to link to\n * feeds.<\/li>\n * <li>echo (boolean) (true): Set to false to return the output, instead of\n * echoing.<\/li>\n * <li>style (string) ('list'): Whether to display list of authors in list form\n * or as a string.<\/li>\n * <li>html (bool) (true): Whether to list the items in html form or plaintext.\n * <\/li>\n * <\/ul>\n *\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/wp_list_authors\n * @since 1.2.0\n * @param array $args The argument array.\n * @return null|string The output, if echo is set to false.\n *\/","file":"author-template.php","line":266,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[277],"extract":[278],"wp_array_slice_assoc":[282],"get_users":[284],"get_results":[287],"get_private_posts_cap_sql":[287],"get_userdata":[291],"get_author_posts_url":[318],"esc_attr":[318,330,331],"sprintf":[318],"__":[318],"get_author_feed_link":[326],"esc_url":[339],"rtrim":[356]},"used_by":{"list_authors":[733]}},"wp_parse_args":{"doc":"\/**\n * Merge user defined arguments into defaults array.\n *\n * This function is used throughout WordPress to allow for both string or array\n * to be merged into another array.\n *\n * @since 2.2.0\n *\n * @param string|array $args Value to merge with $defaults\n * @param array $defaults Array that serves as the defaults.\n * @return array Merged user defined values with defaults.\n *\/","file":"functions.php","line":2551,"missingDoc":false,"filters":[],"uses":{"get_object_vars":[2553],"is_array":[2554,2559],"wp_parse_str":[2557],"is_object":[2552],"array_merge":[2560]},"used_by":{"wp_list_authors":[277],"_walk_bookmarks":[58],"wp_list_bookmarks":[212],"get_bookmarks":[132],"wp_dropdown_categories":[321],"wp_list_categories":[427],"wp_tag_cloud":[527],"wp_generate_tag_cloud":[622],"get_categories":[41],"WP_Http::request":[102,108],"WP_Http::post":[274],"WP_Http::get":[292],"WP_Http::head":[310],"WP_Http_Fsockopen::request":[619],"WP_Http_Streams::request":[850],"WP_Http_Curl::request":[1040],"WP_oEmbed::fetch":[165],"WP_Admin_Bar::add_node":[116,118],"WP_Ajax_Response::add":[63],"_WP_Editors::parse_settings":[31],"WP_Embed::shortcode":[144],"wp_xmlrpc_server::_insert_post":[999],"get_comment_link":[485],"get_comment_reply_link":[1041],"get_post_reply_link":[1102],"wp_list_comments":[1423],"comment_form":[1548],"WP_Comment_Query::query":[241],"get_page_of_comment":[832],"WP_Widget_Pages::form":[62],"WP_Widget_Links::form":[142],"WP_Widget_Search::form":[212],"WP_Widget_Search::update":[221],"WP_Widget_Archives::update":[267],"WP_Widget_Archives::form":[276],"WP_Widget_Meta::form":[336],"WP_Widget_Calendar::form":[376],"WP_Widget_Text::form":[421],"WP_Widget_Categories::form":[505],"wp_widget_rss_output":[836],"wp_widget_rss_form":[924],"wp_get_linksbyname":[446],"wp_list_cats":[658],"wp_get_links":[918],"_default_wp_die_handler":[2073],"_xmlrpc_wp_die_handler":[2271],"wp_login_form":[273],"wp_get_archives":[881],"feed_links":[1607],"feed_links_extra":[1638],"paginate_links":[1939],"wp_http_supports":[207],"get_posts_nav_link":[1645],"paginate_comments_links":[1827],"wp_get_attachment_image":[564],"wp_enqueue_media":[1437],"wp_nav_menu":[143],"wp_update_nav_menu_item":[299],"wp_get_nav_menus":[411],"wp_get_nav_menu_items":[487],"wp_text_diff":[1706],"the_title_attribute":[78],"wp_link_pages":[640],"wp_dropdown_pages":[778],"wp_list_pages":[823],"wp_page_menu":[889],"wp_list_post_revisions":[1357],"get_children":[309],"register_post_status":[942],"register_post_type":[1231],"get_posts":[1709],"wp_get_post_categories":[2562],"wp_get_post_terms":[2611],"wp_get_recent_posts":[2647],"wp_insert_post":[2709],"get_pages":[3636],"wp_insert_attachment":[3915],"wp_get_post_revisions":[5218],"WP_Query::parse_query":[1430,1612],"WP_Query::query":[2971],"WP_Rewrite::add_permastruct":[1863],"register_taxonomy":[332,346],"get_objects_in_term":[522],"get_terms":[1207],"wp_count_terms":[1692],"wp_delete_term":[1783],"wp_get_object_terms":[1909],"wp_insert_term":[2058],"wp_update_term":[2370],"the_taxonomies":[3075],"get_the_taxonomies":[3096],"wp_get_themes":[31],"get_custom_header":[1061],"add_theme_support":[1294,1299,1363,1366],"WP_User_Query::__construct":[361],"get_users":[664],"wp_dropdown_users":[1031],"WP_Widget::__construct":[97,98],"WP_Widget::display_callback":[173],"WP_Widget::update_callback":[194],"WP_Widget::form_callback":[253],"register_sidebar":[568],"wp_register_sidebar_widget":[637],"wp_register_widget_control":[750],"_register_widget_form_callback":[806],"the_widget":[1142,1143]}},"wp_array_slice_assoc":{"doc":"\/**\n * Extract a slice of an array, given a list of keys.\n *\n * @since 3.1.0\n *\n * @param array $array The original array\n * @param array $keys The list of keys\n * @return array The array slice\n *\/","file":"functions.php","line":2588,"missingDoc":false,"filters":[],"uses":[],"used_by":{"wp_list_authors":[282],"wp_dropdown_users":[1034]}},"get_users":{"doc":"\/**\n * Retrieve list of users matching criteria.\n *\n * @since 3.1.0\n * @uses $wpdb\n * @uses WP_User_Query See for default arguments and information.\n *\n * @param array $args Optional.\n * @return array List of users.\n *\/","file":"user.php","line":662,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[664],"get_results":[669]},"used_by":{"wp_list_authors":[284],"wp_xmlrpc_server::wp_getUsers":[2115],"wp_xmlrpc_server::wp_getAuthors":[2522],"wp_dropdown_users":[1036]}},"get_private_posts_cap_sql":{"doc":"\/**\n * Retrieve the private post SQL based on capability.\n *\n * This function provides a standardized way to appropriately select on the\n * post_status of a post type. The function will return a piece of SQL code\n * that can be added to a WHERE clause; this SQL is constructed to allow all\n * published posts, and all private posts to which the user has access.\n *\n * @since 2.2.0\n *\n * @uses $user_ID\n *\n * @param string $post_type currently only supports 'post' or 'page'.\n * @return string SQL code that can be added to a where clause.\n *\/","file":"post.php","line":4456,"missingDoc":false,"filters":[],"uses":{"get_posts_by_author_sql":[4457]},"used_by":{"wp_list_authors":[287]}},"get_author_feed_link":{"doc":"\/**\n * Retrieve the feed link for a given author.\n *\n * Returns a link to the feed for all posts by a given author. A specific feed\n * can be requested or left blank to get the default feed.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.5.0\n *\n * @param int $author_id ID of an author.\n * @param string $feed Optional. Feed type.\n * @return string Link to the feed for the author specified by $author_id.\n*\/","file":"link-template.php","line":533,"missingDoc":false,"filters":["'author_feed_link'"],"uses":{"get_option":[535],"get_default_feed":[538,544],"home_url":[541],"get_author_posts_url":[543],"trailingslashit":[549],"user_trailingslashit":[549]},"used_by":{"wp_list_authors":[326],"get_author_rss_link":[1200],"feed_links_extra":[1662]}},"is_multi_author":{"doc":"\/**\n * Does this site have more than one author\n *\n * Checks to see if more than one author has published posts.\n *\n * @since 3.2.0\n * @return bool Whether or not we have more than one author\n *\/","file":"author-template.php","line":372,"missingDoc":false,"filters":["'is_multi_author'"],"uses":{"get_col":[376],"count":[377],"wp_cache_set":[378],"wp_cache_get":[375]},"used_by":[]},"wp_cache_set":{"doc":"\/**\n * Saves the data to the cache.\n *\n * @since 2.0\n * @uses $wp_object_cache Object Cache Class\n * @see WP_Object_Cache::set()\n *\n * @param int|string $key What to call the contents in the cache\n * @param mixed $data The contents to store in the cache\n * @param string $group Where to group the cache contents\n * @param int $expire When to expire the cache contents\n * @return bool False if cache key and group already exist, true on success\n *\/","file":"cache.php","line":176,"missingDoc":false,"filters":[],"uses":{"set":[179]},"used_by":{"is_multi_author":[378],"get_bookmarks":[183,264],"WP_Comment_Query::query":[254],"wp_count_comments":[972],"wp_insert_comment":[1297],"clean_comment_cache":[1975],"WP_Widget_Recent_Posts::widget":[589],"WP_Widget_Recent_Comments::widget":[702],"is_blog_installed":[1123,1159],"wp_get_archives":[928,950,971,994,1024],"get_calendar":[1097,1264],"get_adjacent_post":[1190],"get_id_from_blogname":[112],"get_blog_details":[143,160,221,227,239,242],"get_blog_id_from_url":[352,356],"get_current_site_name":[124],"wpmu_current_site":[176],"__main":[57,78],"get_option":[69],"wp_load_core_site_options":[187],"update_option":[241,252,254],"add_option":[324,326,334],"delete_option":[376],"set_transient":[497],"get_site_option":[782],"add_site_option":[824],"update_site_option":[915],"set_site_transient":[1037],"wp_count_posts":[2152],"get_pages":[3831],"_get_last_post_time":[4600],"get_terms":[1246],"clean_term_cache":[2635]}},"wp_cache_get":{"doc":"\/**\n * Retrieves the cache contents from the cache by key and group.\n *\n * @since 2.0.0\n * @uses $wp_object_cache Object Cache Class\n * @see WP_Object_Cache::get()\n *\n * @param int|string $key What the contents in the cache are called\n * @param string $group Where the cache contents are grouped\n * @param bool $force Whether to force an update of the local cache from the persistent cache (default is false)\n * @param &bool $found Whether key was found in the cache. Disambiguates a return of false, a storable value.\n * @return bool|mixed False on failure to retrieve contents or the cache\n *\t\tcontents on success\n *\/","file":"cache.php","line":110,"missingDoc":false,"filters":[],"uses":{"get":[113]},"used_by":{"is_multi_author":[375],"get_bookmark":[34],"get_bookmarks":[137],"WP_User::get_data_by":[552,556,561,569],"get_all_category_ids":[17],"WP_Theme::cache_get":[495],"get_comment":[145],"WP_Comment_Query::query":[252,257],"wp_count_comments":[944],"wp_insert_comment":[1296],"clean_comment_cache":[1974],"WP_Widget_Recent_Posts::widget":[545],"WP_Widget_Recent_Posts::update":[599],"WP_Widget_Recent_Comments::widget":[662],"WP_Widget_Recent_Comments::update":[711],"get_usermeta":[2333],"is_blog_installed":[1108],"_get_non_cached_ids":[3829],"wp_get_archives":[924,946,967,990,1020],"get_calendar":[1078],"get_adjacent_post":[1179],"get_metadata":[282],"metadata_exists":[326],"update_meta_cache":[546],"get_id_from_blogname":[99],"get_blog_details":[133,150,180,198,200],"get_blog_id_from_url":[342],"get_current_site_name":[119],"wpmu_current_site":[163],"__main":[53,74],"get_option":[49,58],"wp_load_alloptions":[139],"update_option":[238],"add_option":[311,331],"get_transient":[450],"get_site_option":[773],"get_site_transient":[990],"WP_Post::get_instance":[577],"wp_count_posts":[2138],"get_all_page_ids":[3415],"get_pages":[3654],"wp_mime_type_icon":[4323,4346],"_get_last_post_time":[4578],"get_term":[892],"get_terms":[1243,1249],"get_object_term_cache":[2652],"update_object_term_cache":[2692]}},"__clear_multi_author_cache":{"doc":"\/**\n * Helper function to clear the cache for number of authors.\n *\n * @private\n *\/","file":"author-template.php","line":389,"missingDoc":false,"filters":[],"uses":{"wp_cache_delete":[390]},"used_by":[]},"wp_cache_delete":{"doc":"\/**\n * Removes the cache contents matching key and group.\n *\n * @since 2.0.0\n * @uses $wp_object_cache Object Cache Class\n * @see WP_Object_Cache::delete()\n *\n * @param int|string $key What the contents in the cache are called\n * @param string $group Where the cache contents are grouped\n * @return bool True on successful removal, false on failure\n *\/","file":"cache.php","line":75,"missingDoc":false,"filters":[],"uses":{"delete":[78]},"used_by":{"__clear_multi_author_cache":[390],"clean_bookmark_cache":[384,385],"WP_Theme::cache_delete":[506],"clean_comment_cache":[1969],"WP_Widget_Recent_Posts::flush_widget_cache":[607],"WP_Widget_Recent_Comments::flush_widget_cache":[656],"delete_usermeta":[2298],"update_usermeta":[2406],"delete_get_calendar_cache":[1280],"add_metadata":[75],"update_metadata":[156],"delete_metadata":[239,242],"update_metadata_by_mid":[441],"delete_metadata_by_mid":[498],"get_blog_details":[188,208],"clean_blog_cache":[354,355,356,357,358,359,360],"add_user_to_blog":[197],"delete_option":[379],"delete_transient":[409],"delete_site_option":[869],"delete_site_transient":[949],"wp_set_password":[1574],"clean_post_cache":[4650,4651,4655,4660,4663],"clean_attachment_cache":[4765,4766],"_transition_post_status":[4804,4805],"wp_set_object_terms":[2241],"clean_object_term_cache":[2573],"clean_term_cache":[2607,2614,2625,2626],"clean_user_cache":[1183,1184,1185,1186],"wp_insert_user":[1415,1416],"wp_update_user":[1474]}},"_walk_bookmarks":{"doc":"\/**\n * The formatted output of a list of bookmarks.\n *\n * The $bookmarks array must contain bookmark objects and will be iterated over\n * to retrieve the bookmark to be used in the output.\n *\n * The output is formatted as HTML with no way to change that format. However,\n * what is between, before, and after can be changed. The link itself will be\n * HTML.\n *\n * This function is used internally by wp_list_bookmarks() and should not be\n * used by themes.\n *\n * The defaults for overwriting are:\n * 'show_updated' - Default is 0 (integer). Will show the time of when the\n *\t\tbookmark was last updated.\n * 'show_description' - Default is 0 (integer). Whether to show the description\n *\t\tof the bookmark.\n * 'show_images' - Default is 1 (integer). Whether to show link image if\n *\t\tavailable.\n * 'show_name' - Default is 0 (integer). Whether to show link name if\n *\t\tavailable.\n * 'before' - Default is '<li>' (string). The html or text to prepend to each\n *\t\tbookmarks.\n * 'after' - Default is '<\/li>' (string). The html or text to append to each\n *\t\tbookmarks.\n * 'link_before' - Default is '' (string). The html or text to prepend to each\n *\t\tbookmarks inside the <a> tag.\n * 'link_after' - Default is '' (string). The html or text to append to each\n *\t\tbookmarks inside the <a> tag.\n * 'between' - Default is '\\n' (string). The string for use in between the link,\n *\t\tdescription, and image.\n * 'show_rating' - Default is 0 (integer). Whether to show the link rating.\n *\n * @since 2.1.0\n * @access private\n *\n * @param array $bookmarks List of bookmarks to traverse\n * @param string|array $args Optional. Overwrite the defaults.\n * @return string Formatted output in HTML\n *\/","file":"bookmark-template.php","line":50,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[58],"extract":[59],"get_option":[68,81,81,106,119],"esc_url":[72],"esc_attr":[74,75,92],"sanitize_bookmark_field":[74,75,125],"sprintf":[81],"__":[81],"date":[81],"substr":[79],"strpos":[103]},"used_by":{"wp_list_bookmarks":[233,244,247]}},"get_option":{"doc":"\/**\n * Retrieve option value based on name of option.\n *\n * If the option does not exist or does not have a value, then the return value\n * will be false. This is useful to check whether you need to install an option\n * and is commonly used during installation of plugin options and to test\n * whether upgrading is required.\n *\n * If the option was serialized then it will be unserialized when it is returned.\n *\n * @since 1.5.0\n * @package WordPress\n * @subpackage Option\n * @uses apply_filters() Calls 'pre_option_$option' before checking the option.\n * \tAny value other than false will \"short-circuit\" the retrieval of the option\n *\tand return the returned value. You should not try to override special options,\n * \tbut you will not be prevented from doing so.\n * @uses apply_filters() Calls 'option_$option', after checking the option, with\n * \tthe option value.\n *\n * @param string $option Name of option to retrieve. Expected to not be SQL-escaped.\n * @param mixed $default Optional. Default value to return if the option does not exist.\n * @return mixed Value set for the option.\n *\/","file":"option.php","line":32,"missingDoc":false,"filters":["'pre_option_' . $option","'default_option_' . $option","'default_option_' . $option","'default_option_' . $option","'option_' . $option"],"uses":{"trim":[35],"defined":[44,47],"wp_cache_get":[49,58],"wp_load_alloptions":[53],"get_row":[61,76],"prepare":[61,76],"wp_cache_add":[66],"wp_cache_set":[69],"is_object":[64,78],"suppress_errors":[75,77],"get_option":[86],"untrailingslashit":[89],"in_array":[88],"maybe_unserialize":[91]},"used_by":{"_walk_bookmarks":[68,81,81,106,119],"get_bookmarks":[212,211],"redirect_canonical":[124,124,126,126,127,270,270,270],"WP_Roles::_init":[103],"WP_Roles::reinit":[135],"map_meta_cap":[1252],"wp_list_categories":[460,460,460],"WP_Http::request":[177],"WP_Http::block_request":[508],"WP_Http_Fsockopen::test":[807],"WP_HTTP_Proxy::send_through_proxy":[1391],"IXR_Server::output":[469],"WP_Ajax_Response::send":[129,130],"WP_Customize_Manager::register_controls":[722,733,933],"WP_Customize_Setting::_update_option":[206],"WP_Theme::get_allowed_on_site":[1116,1119,1127,1130],"wp_xmlrpc_server::wp_getUsersBlogs":[493],"wp_xmlrpc_server::wp_newComment":[2959,3000],"wp_xmlrpc_server::_getOptions":[3200],"wp_xmlrpc_server::blogger_getUsersBlogs":[3645,3647],"wp_xmlrpc_server::mw_newPost":[4171,4184,4189,4202,4214,4219],"wp_xmlrpc_server::mw_editPost":[4448,4461,4477,4489],"wp_xmlrpc_server::pingback_ping":[5313],"WP::send_headers":[331,331,336,336],"get_comment_date":[375],"get_comment_link":[488,487],"get_comment_time":[633],"get_trackback_url":[710,707],"comments_template":[857,903,902],"comments_popup_link":[995],"get_comment_reply_link":[1058],"get_post_reply_link":[1109],"wp_list_comments":[1452,1462,1461,1472,1482],"comment_form":[1521,1555],"check_comment":[44,50,57,83],"get_comment_pages_count":[796,801],"get_page_of_comment":[834,845,844],"wp_blacklist_check":[890],"wp_new_comment":[1410],"wp_set_comment_status":[1443],"generic_ping":[1786],"privacy_ping_filter":[1883],"trackback":[1914],"weblog_ping":[1951,1950],"_close_comments_for_old_posts":[2012,2019],"_close_comments_for_old_post":[2045,2048],"_mb_substr":[25],"_get_cron_array":[362],"wp_plugin_directory_constants":[94],"wp_cookie_constants":[206,212],"WP_Widget_Recent_Comments::widget":[691],"WP_Widget_RSS::widget":[768],"wp_widget_rss_output":[863,885],"wp_widgets_init":[1177],"get_settings":[851],"get_links":[973,987,987,1004,1012],"make_url_footnote":[1763],"get_boundary_post_rel_link":[2734],"get_parent_post_rel_link":[2809],"get_current_theme":[2979],"__main":[8,9,8,11,45,8,11,45,8,11,8,10,8,11,43,15,14,16,25,25,69,68,64],"get_the_category_rss":[329],"wp_check_invalid_utf8":[518],"balanceTags":[1148],"convert_smilies":[1761],"get_gmt_from_date":[1900,1915],"get_date_from_gmt":[1935],"iso8601_to_datetime":[1979],"wp_trim_words":[2182],"sanitize_option":[2763,2850,2860,2869,2901],"current_time":[62,65],"date_i18n":[124],"get_weekstartend":[212],"do_robots":[1077],"wp_upload_dir":[1525,1526,1537,1594],"wp_send_json":[2320],"smilies_init":[2452],"wp_timezone_override_offset":[3265],"_wp_mysql_week":[3657],"wp_register":[340],"get_bloginfo":[418,439,452,455,459,479],"wp_get_archives":[910,911,912,1005],"get_calendar":[1106],"get_the_date":[1380],"get_the_modified_date":[1420],"get_the_time":[1450],"get_the_modified_time":[1500],"noindex":[1709],"language_attributes":[1865,1868],"get_locale":[41],"get_permalink":[113,134],"get_page_link":[243,243],"get_attachment_link":[312],"get_post_comments_feed_link":[475,475,474],"get_author_feed_link":[535],"get_term_feed_link":[599],"get_post_type_archive_link":[840],"get_post_type_archive_feed_link":[871],"get_adjacent_post_rel_link":[1225],"adjacent_post_link":[1392],"get_comments_pagenum_link":[1694],"get_next_comments_link":[1727],"get_previous_comments_link":[1770],"paginate_comments_links":[1809],"get_home_url":[1906,1909],"get_site_url":[1965,1968],"wp_get_shortlink":[2361],"wp_get_active_and_valid_plugins":[481,484],"wp_set_internal_encoding":[517],"image_constrain_size_for_editor":[47,48,56,57,65,66],"wp_prepare_attachment_for_js":[1346],"wp_enqueue_media":[1453,1454,1455],"get_blog_details":[232,233,234],"get_blog_option":[387,390],"ms_cookie_constants":[66],"wpmu_signup_blog_notification":[737],"wpmu_signup_user_notification":[790],"newblog_notify_siteadmin":[1023],"wpmu_welcome_notification":[1252],"wpmu_welcome_user_notification":[1300],"global_terms":[1569],"maybe_add_existing_user_to_blog":[1681],"get_space_allowed":[1961],"_wp_menu_item_classes_by_context":[265],"_wp_auto_add_pages_to_menu":[759],"get_option":[86],"form_option":[123],"update_option":[228],"add_option":[313],"get_transient":[458,466],"set_transient":[501],"get_site_option":[769],"wp_notify_postauthor":[1014,1069],"wp_notify_moderator":[1097,1104,1105,1113],"wp_password_change_notification":[1182,1183,1178],"wp_new_user_notification":[1205,1211],"get_avatar":[1590,1626,1664],"register_uninstall_hook":[686],"_wp_link_page":[703,703,701],"wp_list_pages":[816],"wp_page_menu":[913,907],"Walker_Page::start_el":[1045],"register_post_type":[1293],"is_sticky":[1918],"stick_post":[2065],"unstick_post":[2086],"wp_delete_post":[2338,2342],"wp_insert_post":[2704,2749,2831,2834],"wp_set_post_categories":[3237],"wp_insert_attachment":[3911,3974,3977],"_publish_post_hook":[4851],"WP_Query::parse_query":[1619,1611,1611,1635,1635,1643,1643],"WP_Query::get_posts":[1990,2005,2015,2020,2017,2017,2131,2132,2175,2175,2559,2692,2731],"WP_Query::get_queried_object":[3014],"WP_Query::is_front_page":[3323,3323,3323,3321],"WP_Rewrite::generate_rewrite_rules":[1334,1331,1361],"WP_Rewrite::wp_rewrite_rules":[1616],"WP_Rewrite::init":[1906],"WP_Rewrite::set_category_base":[1963],"WP_Rewrite::set_tag_base":[1982],"create_initial_taxonomies":[31,31,32,36,36,37],"register_taxonomy":[345],"wp_delete_term":[1778],"_get_term_hierarchy":[2766],"get_stylesheet":[147],"get_template":[240],"get_theme_root_uri":[495],"get_raw_theme_root":[518,519,520,517],"preview_theme":[578],"switch_theme":[695,694],"get_theme_mods":[747,749,752,748],"set_theme_mod":[801],"remove_theme_mod":[827],"remove_theme_mods":[837,840],"get_uploaded_header_images":[1003],"check_theme_switched":[1609],"wp_update_plugins":[147],"wp_update_themes":[248],"get_blogs_of_user":[698,702],"wp_insert_user":[1413],"WP_Widget::get_settings":[291,294],"is_dynamic_sidebar":[965],"wp_get_sidebars_widgets":[1017,1021],"wp_convert_widget_settings":[1092,1095]}},"sanitize_bookmark_field":{"doc":"\/**\n * Sanitizes a bookmark field\n *\n * Sanitizes the bookmark fields based on what the field name is. If the field\n * has a strict value set, then it will be tested for that, else a more generic\n * filtering is applied. After the more strict filter is applied, if the\n * $context is 'raw' then the value is immediately return.\n *\n * Hooks exist for the more generic cases. With the 'edit' context, the\n * 'edit_$field' filter will be called and passed the $value and $bookmark_id\n * respectively. With the 'db' context, the 'pre_$field' filter is called and\n * passed the value. The 'display' context is the final context and has the\n * $field has the filter name and is passed the $value, $bookmark_id, and\n * $context respectively.\n *\n * @since 2.3.0\n *\n * @param string $field The bookmark field\n * @param mixed $value The bookmark field value\n * @param int $bookmark_id Bookmark ID\n * @param string $context How to filter the field value. Either 'raw', 'edit',\n *\t\t'attribute', 'js', 'db', or 'display'\n * @return mixed The filtered value\n *\/","file":"bookmark.php","line":329,"missingDoc":false,"filters":["\"edit_{$field}\"","\"pre_{$field}\""],"uses":{"array_map":[336],"preg_replace":[342],"in_array":[346],"esc_html":[358],"esc_attr":[360,369],"esc_js":[371]},"used_by":{"_walk_bookmarks":[74,75,125],"get_bookmark_field":[84],"sanitize_bookmark":[295,298],"get_links":[981,982],"get_linkrating":[1115]}},"wp_list_bookmarks":{"doc":"\/**\n * Retrieve or echo all of the bookmarks.\n *\n * List of default arguments are as follows:\n * 'orderby' - Default is 'name' (string). How to order the links by. String is\n *\t\tbased off of the bookmark scheme.\n * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either\n *\t\tascending or descending order.\n * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to\n *\t\tdisplay.\n * 'category' - Default is empty string (string). Include the links in what\n *\t\tcategory ID(s).\n * 'category_name' - Default is empty string (string). Get links by category\n *\t\tname.\n * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide\n *\t\tlinks marked as 'invisible'.\n * 'show_updated' - Default is 0 (integer). Will show the time of when the\n *\t\tbookmark was last updated.\n * 'echo' - Default is 1 (integer). Whether to echo (default) or return the\n *\t\tformatted bookmarks.\n * 'categorize' - Default is 1 (integer). Whether to show links listed by\n *\t\tcategory (default) or show links in one column.\n * 'show_description' - Default is 0 (integer). Whether to show the description\n *\t\tof the bookmark.\n *\n * These options define how the Category name will appear before the category\n * links are displayed, if 'categorize' is 1. If 'categorize' is 0, then it will\n * display for only the 'title_li' string and only if 'title_li' is not empty.\n * 'title_li' - Default is 'Bookmarks' (translatable string). What to show\n *\t\tbefore the links appear.\n * 'title_before' - Default is '<h2>' (string). The HTML or text to show before\n *\t\tthe 'title_li' string.\n * 'title_after' - Default is '<\/h2>' (string). The HTML or text to show after\n *\t\tthe 'title_li' string.\n * 'class' - Default is 'linkcat' (string). The CSS class to use for the\n *\t\t'title_li'.\n *\n * 'category_before' - Default is '<li id=\"%id\" class=\"%class\">'. String must\n *\t\tcontain '%id' and '%class' to get\n * the id of the category and the 'class' argument. These are used for\n *\t\tformatting in themes.\n * Argument will be displayed before the 'title_before' argument.\n * 'category_after' - Default is '<\/li>' (string). The HTML or text that will\n *\t\tappear after the list of links.\n *\n * These are only used if 'categorize' is set to 1 or true.\n * 'category_orderby' - Default is 'name'. How to order the bookmark category\n *\t\tbased on term scheme.\n * 'category_order' - Default is 'ASC'. Set the order by either ASC (ascending)\n *\t\tor DESC (descending).\n *\n * @see _walk_bookmarks() For other arguments that can be set in this function\n *\t\tand passed to _walk_bookmarks().\n * @see get_bookmarks() For other arguments that can be set in this function and\n *\t\tpassed to get_bookmarks().\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/wp_list_bookmarks\n *\n * @since 2.1.0\n * @uses _walk_bookmarks() Used to iterate over all of the bookmarks and return\n *\t\tthe html\n * @uses get_terms() Gets all of the categories that are for links.\n *\n * @param string|array $args Optional. Overwrite the defaults of the function\n * @return string|null Will only return if echo option is set to not echo.\n *\t\tDefault is not return anything.\n *\/","file":"bookmark-template.php","line":199,"missingDoc":false,"filters":["'link_category'","'wp_list_bookmarks'"],"uses":{"__":[205],"wp_parse_args":[212],"extract":[213],"get_terms":[218],"array_merge":[226],"get_bookmarks":[227,238],"str_replace":[230,242],"_walk_bookmarks":[233,244,247]},"used_by":{"WP_Widget_Links::widget":[110],"wp_get_linksbyname":[448],"wp_get_links":[920],"__main":[67]}},"get_terms":{"doc":"\/**\n * Retrieve the terms in a given taxonomy or list of taxonomies.\n *\n * You can fully inject any customizations to the query before it is sent, as\n * well as control the output with a filter.\n *\n * The 'get_terms' filter will be called when the cache has the term and will\n * pass the found term along with the array of $taxonomies and array of $args.\n * This filter is also called before the array of terms is passed and will pass\n * the array of terms, along with the $taxonomies and $args.\n *\n * The 'list_terms_exclusions' filter passes the compiled exclusions along with\n * the $args.\n *\n * The 'get_terms_orderby' filter passes the ORDER BY clause for the query\n * along with the $args array.\n *\n * The 'get_terms_fields' filter passes the fields for the SELECT query\n * along with the $args array.\n *\n * The list of arguments that $args can contain, which will overwrite the defaults:\n *\n * orderby - Default is 'name'. Can be name, count, term_group, slug or nothing\n * (will use term_id), Passing a custom value other than these will cause it to\n * order based on the custom value.\n *\n * order - Default is ASC. Can use DESC.\n *\n * hide_empty - Default is true. Will not return empty terms, which means\n * terms whose count is 0 according to the given taxonomy.\n *\n * exclude - Default is an empty array. An array, comma- or space-delimited string\n * of term ids to exclude from the return array. If 'include' is non-empty,\n * 'exclude' is ignored.\n *\n * exclude_tree - Default is an empty array. An array, comma- or space-delimited\n * string of term ids to exclude from the return array, along with all of their\n * descendant terms according to the primary taxonomy. If 'include' is non-empty,\n * 'exclude_tree' is ignored.\n *\n * include - Default is an empty array. An array, comma- or space-delimited string\n * of term ids to include in the return array.\n *\n * number - The maximum number of terms to return. Default is to return them all.\n *\n * offset - The number by which to offset the terms query.\n *\n * fields - Default is 'all', which returns an array of term objects.\n * If 'fields' is 'ids' or 'names', returns an array of\n * integers or strings, respectively.\n *\n * slug - Returns terms whose \"slug\" matches this value. Default is empty string.\n *\n * hierarchical - Whether to include terms that have non-empty descendants\n * (even if 'hide_empty' is set to true).\n *\n * search - Returned terms' names will contain the value of 'search',\n * case-insensitive. Default is an empty string.\n *\n * name__like - Returned terms' names will begin with the value of 'name__like',\n * case-insensitive. Default is empty string.\n *\n * The argument 'pad_counts', if set to true will include the quantity of a term's\n * children in the quantity of each term's \"count\" object variable.\n *\n * The 'get' argument, if set to 'all' instead of its default empty string,\n * returns terms regardless of ancestry or whether the terms are empty.\n *\n * The 'child_of' argument, when used, should be set to the integer of a term ID. Its default\n * is 0. If set to a non-zero value, all returned terms will be descendants\n * of that term according to the given taxonomy. Hence 'child_of' is set to 0\n * if more than one taxonomy is passed in $taxonomies, because multiple taxonomies\n * make term ancestry ambiguous.\n *\n * The 'parent' argument, when used, should be set to the integer of a term ID. Its default is\n * the empty string '', which has a different meaning from the integer 0.\n * If set to an integer value, all returned terms will have as an immediate\n * ancestor the term whose ID is specified by that integer according to the given taxonomy.\n * The 'parent' argument is different from 'child_of' in that a term X is considered a 'parent'\n * of term Y only if term X is the father of term Y, not its grandfather or great-grandfather, etc.\n *\n * The 'cache_domain' argument enables a unique cache key to be produced when this query is stored\n * in object cache. For instance, if you are using one of this function's filters to modify the\n * query (such as 'terms_clauses'), setting 'cache_domain' to a unique value will not overwrite\n * the cache for similar queries. Default value is 'core'.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wpdb\n * @uses wp_parse_args() Merges the defaults with those defined by $args and allows for strings.\n *\n * @param string|array $taxonomies Taxonomy name or list of Taxonomy names\n * @param string|array $args The values of what to search for when returning terms\n * @return array|WP_Error List of Term Objects and their children. Will return WP_Error, if any of $taxonomies do not exist.\n *\/","file":"taxonomy.php","line":1187,"missingDoc":false,"filters":["'get_terms_args'","'get_terms'","'get_terms_orderby'","'list_terms_exclusions'","'get_terms_fields'","'terms_clauses'","'get_terms'","'get_terms'"],"uses":{"is_array":[1191,1192,1427,1423],"count":[1191,1454],"__":[1197],"taxonomy_exists":[1196],"wp_parse_args":[1207],"absint":[1208,1209],"is_taxonomy_hierarchical":[1210],"extract":[1226],"_get_term_hierarchy":[1229,1235,1413],"has_filter":[1241],"serialize":[1241,1242,1242],"md5":[1242],"compact":[1242,1388],"array_keys":[1242],"wp_cache_get":[1243,1249],"time":[1245],"wp_cache_set":[1246],"strtolower":[1255],"strtoupper":[1278],"in_array":[1279],"implode":[1282,1383],"wp_parse_id_list":[1287,1302,1316],"intval":[1290,1292,1304,1308,1310,1319,1321,1454],"get_terms":[1304],"sanitize_title":[1331],"like_escape":[1336,1359],"prepare":[1337,1360],"get_var":[1397],"get_results":[1401],"update_term_cache":[1403],"wp_cache_add":[1407,1458],"_get_term_children":[1415,1426],"_pad_term_counts":[1420],"reset":[1437],"array_shift":[1441,1445,1449],"array_slice":[1455]},"used_by":{"wp_list_bookmarks":[218],"wp_dropdown_categories":[333],"wp_tag_cloud":[529],"get_all_category_ids":[18],"get_categories":[51],"get_category_by_path":[121],"get_tags":[253],"wp_xmlrpc_server::_insert_post":[1152],"wp_xmlrpc_server::wp_getTerms":[1875],"WP_Widget_Links::form":[143],"WP_Nav_Menu_Widget::form":[1131],"wp_get_nav_menus":[412],"wp_get_nav_menu_items":[523],"get_terms":[1304],"wp_count_terms":[1702],"wp_insert_term":[2091],"_get_term_hierarchy":[2771]}},"get_bookmarks":{"doc":"\/**\n * Retrieves the list of bookmarks\n *\n * Attempts to retrieve from the cache first based on MD5 hash of arguments. If\n * that fails, then the query will be built from the arguments and executed. The\n * results will be stored to the cache.\n *\n * List of default arguments are as follows:\n * 'orderby' - Default is 'name' (string). How to order the links by. String is\n *\t\tbased off of the bookmark scheme.\n * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either\n *\t\tascending or descending order.\n * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to\n *\t\tdisplay.\n * 'category' - Default is empty string (string). Include the links in what\n *\t\tcategory ID(s).\n * 'category_name' - Default is empty string (string). Get links by category\n *\t\tname.\n * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide\n *\t\tlinks marked as 'invisible'.\n * 'show_updated' - Default is 0 (integer). Will show the time of when the\n *\t\tbookmark was last updated.\n * 'include' - Default is empty string (string). Include bookmark ID(s)\n *\t\tseparated by commas.\n * 'exclude' - Default is empty string (string). Exclude bookmark ID(s)\n *\t\tseparated by commas.\n *\n * @since 2.1.0\n * @uses $wpdb Database Object\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/get_bookmarks\n *\n * @param string|array $args List of arguments to overwrite the defaults\n * @return array List of bookmark row objects\n *\/","file":"bookmark.php","line":121,"missingDoc":false,"filters":["'get_bookmarks'","'get_bookmarks'","'get_bookmarks'"],"uses":{"wp_parse_args":[132],"extract":[133],"md5":[136],"serialize":[136],"is_array":[138,142],"wp_cache_get":[137],"preg_split":[150,165,196],"intval":[154,156,169,171,200,202],"count":[151,166,197],"wp_cache_set":[183,264],"get_term_by":[179],"like_escape":[189],"get_option":[212,211],"strtolower":[219],"trim":[234],"in_array":[238,236,248],"explode":[233],"implode":[241],"strtoupper":[247],"get_results":[261]},"used_by":{"wp_list_bookmarks":[227,238],"get_linkobjects":[530],"get_links":[961]}},"get_bookmark":{"doc":"\/**\n * Retrieve Bookmark data\n *\n * @since 2.1.0\n * @uses $wpdb Database Object\n *\n * @param mixed $bookmark\n * @param string $output Optional. Either OBJECT, ARRAY_N, or ARRAY_A constant\n * @param string $filter Optional, default is 'raw'.\n * @return array|object Type returned depends on $output value.\n *\/","file":"bookmark.php","line":20,"missingDoc":false,"filters":[],"uses":{"is_object":[28],"wp_cache_add":[29,38],"wp_cache_get":[34],"get_row":[35],"prepare":[35],"array_unique":[37],"wp_get_object_terms":[37],"sanitize_bookmark":[46],"get_object_vars":[51,53],"array_values":[53]},"used_by":{"get_bookmark_field":[73],"get_link":[2051],"get_edit_bookmark_link":[1022],"edit_bookmark_link":[1042]}},"wp_cache_add":{"doc":"\/**\n * Adds data to the cache, if the cache key doesn't already exist.\n *\n * @since 2.0.0\n * @uses $wp_object_cache Object Cache Class\n * @see WP_Object_Cache::add()\n *\n * @param int|string $key The cache key to use for retrieval later\n * @param mixed $data The data to add to the cache store\n * @param string $group The group to add the cache to\n * @param int $expire When the cache data should be expired\n * @return unknown\n *\/","file":"cache.php","line":24,"missingDoc":false,"filters":[],"uses":{"add":[27]},"used_by":{"get_bookmark":[29,38],"get_the_terms":[1068],"get_all_category_ids":[19],"WP_Theme::cache_add":[480],"get_comment":[140,149],"WP_Comment_Query::query":[380],"update_comment_cache":[1994],"update_meta_cache":[581],"get_option":[66],"wp_load_alloptions":[153],"WP_Post::get_instance":[586],"get_all_page_ids":[3418],"wp_mime_type_icon":[4372,4392],"update_post_cache":[4620],"get_term":[885,896],"get_term_by":[970],"get_terms":[1407,1458],"update_object_term_cache":[2720],"update_term_cache":[2741],"update_user_caches":[1163,1164,1165,1166]}},"wp_get_object_terms":{"doc":"\/**\n * Retrieves the terms associated with the given object(s), in the supplied taxonomies.\n *\n * The following information has to do the $args parameter and for what can be\n * contained in the string or array of that parameter, if it exists.\n *\n * The first argument is called, 'orderby' and has the default value of 'name'.\n * The other value that is supported is 'count'.\n *\n * The second argument is called, 'order' and has the default value of 'ASC'.\n * The only other value that will be acceptable is 'DESC'.\n *\n * The final argument supported is called, 'fields' and has the default value of\n * 'all'. There are multiple other options that can be used instead. Supported\n * values are as follows: 'all', 'ids', 'names', and finally\n * 'all_with_object_id'.\n *\n * The fields argument also decides what will be returned. If 'all' or\n * 'all_with_object_id' is chosen or the default kept intact, then all matching\n * terms objects will be returned. If either 'ids' or 'names' is used, then an\n * array of all matching term ids or term names will be returned respectively.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n * @uses $wpdb\n *\n * @param int|array $object_ids The ID(s) of the object(s) to retrieve.\n * @param string|array $taxonomies The taxonomies to retrieve terms from.\n * @param array|string $args Change what is returned\n * @return array|WP_Error The requested term data or empty array if no terms found. WP_Error if any of the $taxonomies don't exist.\n *\/","file":"taxonomy.php","line":1890,"missingDoc":false,"filters":["'wp_get_object_terms'"],"uses":{"is_array":[1896,1904,1915,1922],"__":[1901],"taxonomy_exists":[1900],"array_map":[1906],"wp_parse_args":[1909],"get_taxonomy":[1914,1921],"array_merge":[1917,1917,1915,1923,1974,1977],"wp_get_object_terms":[1917],"count":[1912],"extract":[1926],"strtoupper":[1952],"in_array":[1953],"implode":[1956,1957],"get_results":[1974],"update_term_cache":[1975],"get_col":[1977,1979]},"used_by":{"get_bookmark":[37],"redirect_canonical":[208],"get_the_terms":[1067],"wp_xmlrpc_server::_prepare_post":[674],"get_adjacent_post":[1138],"get_boundary_post":[1316],"_wp_menu_item_classes_by_context":[271],"wp_get_post_categories":[2564],"wp_get_post_terms":[2613],"_update_term_count_on_transition_post_status":[5536],"wp_delete_object_term_relationships":[1729],"wp_delete_term":[1808],"wp_get_object_terms":[1917],"wp_set_object_terms":[2182,2232],"update_object_term_cache":[2702],"get_the_taxonomies":[3117],"is_object_in_term":[3167]}},"sanitize_bookmark":{"doc":"\/**\n * Sanitizes all bookmark fields\n *\n * @since 2.3.0\n *\n * @param object|array $bookmark Bookmark row\n * @param string $context Optional, default is 'display'. How to filter the\n *\t\tfields\n * @return object|array Same type as $bookmark but with fields sanitized.\n *\/","file":"bookmark.php","line":279,"missingDoc":false,"filters":[],"uses":{"is_object":[284],"sanitize_bookmark_field":[295,298]},"used_by":{"get_bookmark":[46]}},"get_bookmark_field":{"doc":"\/**\n * Retrieve single bookmark data item or field.\n *\n * @since 2.3.0\n * @uses get_bookmark() Gets bookmark object using $bookmark as ID\n * @uses sanitize_bookmark_field() Sanitizes Bookmark field based on $context.\n *\n * @param string $field The name of the data field to return\n * @param int $bookmark The bookmark ID to get field\n * @param string $context Optional. The context of how the field will be used.\n * @return string\n *\/","file":"bookmark.php","line":71,"missingDoc":false,"filters":[],"uses":{"get_bookmark":[73],"is_wp_error":[75],"is_object":[78],"sanitize_bookmark_field":[84]},"used_by":[]},"is_wp_error":{"doc":"\/**\n * Check whether variable is a WordPress Error.\n *\n * Looks at the object and if a WP_Error class. Does not check to see if the\n * parent is also WP_Error, so can't inherit WP_Error and still use this\n * function.\n *\n * @since 2.1.0\n *\n * @param mixed $thing Check if unknown variable is WordPress Error object.\n * @return bool True, if WP_Error. False, if not WP_Error.\n *\/","file":"class-wp-error.php","line":206,"missingDoc":false,"filters":[],"uses":{"is_object":[207],"is_a":[207]},"used_by":{"get_bookmark_field":[75],"redirect_canonical":[167,209,209],"get_category_link":[24],"get_category_parents":[45],"get_the_category":[76],"get_the_category_by_ID":[139],"wp_tag_cloud":[531,539],"get_tag_link":[970],"term_description":[1049],"get_the_term_list":[1094,1102],"the_terms":[1127],"has_term":[1188],"get_category":[83],"get_category_by_path":[131],"get_cat_name":[189],"WP_SimplePie_File::__construct":[79],"WP_Http::_dispatch_request":[254],"WP_oEmbed::fetch":[175,177],"WP_Ajax_Response::add":[67,73],"WP_HTTP_IXR_Client::query":[60],"WP_Image_Editor_GD::resize":[148],"WP_Image_Editor_GD::multi_resize":[194,189],"WP_Image_Editor_GD::save":[319],"WP_Image_Editor_Imagick::load":[142],"WP_Image_Editor_Imagick::multi_resize":[272,265],"WP_Image_Editor_Imagick::save":[390],"WP_Theme::errors":[437],"wp_xmlrpc_server::login":[187],"wp_xmlrpc_server::_insert_post":[1177,1198,1213],"wp_xmlrpc_server::wp_newTerm":[1568,1585],"wp_xmlrpc_server::wp_editTerm":[1647,1667,1684],"wp_xmlrpc_server::wp_deleteTerm":[1734,1742],"wp_xmlrpc_server::wp_getTerm":[1801],"wp_xmlrpc_server::wp_getTerms":[1877],"wp_xmlrpc_server::wp_editProfile":[2230],"wp_xmlrpc_server::wp_newCategory":[2621],"wp_xmlrpc_server::wp_editComment":[2923],"wp_xmlrpc_server::blogger_newPost":[3885],"wp_xmlrpc_server::mw_newPost":[4292],"wp_xmlrpc_server::mw_editPost":[4569],"discover_pingback_server_uri":[1666,1679],"trackback":[1920],"WP_Widget_RSS::widget":[767,791],"wp_widget_rss_output":[829],"wp_widget_rss_process":[1007],"get_category_children":[1310],"image_resize":[3268,3273,3279],"user_pass_ok":[3319],"get_wp_title_rss":[84],"wp_get_http":[507],"wp_get_http_headers":[548],"wp_remote_fopen":[764],"_default_wp_die_handler":[2077],"wp_remote_retrieve_headers":[120],"wp_remote_retrieve_header":[136],"wp_remote_retrieve_response_code":[156],"wp_remote_retrieve_response_message":[173],"wp_remote_retrieve_body":[188],"get_permalink":[135],"get_post_permalink":[183],"get_term_feed_link":[593],"get_adjacent_post":[1139],"wp_set_wpdb_vars":[368],"image_make_intermediate_size":[393,393,398],"wp_get_image_editor":[1181],"wpmu_activate_signup":[879],"wpmu_create_user":[916],"maybe_add_existing_user_to_blog":[1685],"wp_nav_menu":[166,177,181],"is_nav_menu":[57],"is_nav_menu_item":[154],"wp_delete_nav_menu":[191],"wp_update_nav_menu_object":[222,237,229,252],"wp_update_nav_menu_item":[279,361],"wp_get_nav_menu_items":[495],"wp_setup_nav_menu_item":[604,607],"wp_login":[162],"wp_authenticate":[484],"get_post_class":[334],"get_body_class":[440],"_wp_put_post_revision":[5082],"wp_restore_post_revision":[5161],"wp_delete_post_revision":[5190],"wp_get_post_parent_id":[5268],"get_post_format_link":[5413],"WP_Query::get_queried_object":[3004],"_fetch_remote_file":[540],"WP_Tax_Query::get_sql":[672],"WP_Tax_Query::clean_query":[757],"get_term_by":[961],"get_term_field":[1050],"get_term_to_edit":[1081],"wp_delete_term":[1770,1795],"wp_insert_term":[2048],"wp_set_object_terms":[2200],"wp_unique_term_slug":[2283],"wp_update_term":[2360],"_get_term_children":[2812],"get_term_link":[3004],"is_object_in_term":[3169],"get_ancestors":[3235],"wp_get_term_taxonomy_parent_id":[3258],"wp_version_check":[91],"wp_update_plugins":[207],"wp_update_themes":[312],"wp_signon":[55],"wp_authenticate_username_password":[106]}},"get_term_by":{"doc":"\/**\n * Get all Term data from database by Term field and data.\n *\n * Warning: $value is not escaped for 'name' $field. You must do it yourself, if\n * required.\n *\n * The default $field is 'id', therefore it is possible to also use null for\n * field, but not recommended that you do so.\n *\n * If $value does not exist, the return value will be false. If $taxonomy exists\n * and $field and $value combinations exist, the Term will be returned.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wpdb\n * @uses sanitize_term() Cleanses the term based on $filter context before returning.\n * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param.\n *\n * @param string $field Either 'slug', 'name', or 'id'\n * @param string|int $value Search for this term value\n * @param string $taxonomy Taxonomy Name\n * @param string $output Constant OBJECT, ARRAY_A, or ARRAY_N\n * @param string $filter Optional, default is raw or no WordPress defined filter will applied.\n * @return mixed Term Row from database. Will return false if $taxonomy does not exist or $term was not found.\n *\/","file":"taxonomy.php","line":944,"missingDoc":false,"filters":["'get_term'","\"get_{$taxonomy}\""],"uses":{"taxonomy_exists":[947],"sanitize_title":[952],"stripslashes":[957],"get_term":[960],"is_wp_error":[961],"get_row":[966],"prepare":[966],"wp_cache_add":[970],"sanitize_term":[974],"get_object_vars":[979,981],"array_values":[981]},"used_by":{"get_bookmarks":[179],"get_category_by_slug":[156],"get_cat_ID":[172],"wp_xmlrpc_server::_insert_post":[1128,1168],"get_linksbyname":[413],"get_linkobjectsbyname":[477],"wp_get_nav_menu_object":[28,31],"wp_update_nav_menu_object":[219,230],"get_post_format_link":[5412],"WP_Query::get_posts":[2261,2273],"WP_Query::get_queried_object":[3002],"get_term_link":[2997]}},"like_escape":{"doc":"\/**\n * Escapes text for SQL LIKE special characters % and _.\n *\n * @since 2.5.0\n *\n * @param string $text The text to be escaped.\n * @return string text, safe for inclusion in LIKE query.\n *\/","file":"formatting.php","line":2725,"missingDoc":false,"filters":[],"uses":{"str_replace":[2726]},"used_by":{"get_bookmarks":[189],"redirect_guess_404_permalink":[477],"wp_xmlrpc_server::pingback_ping":[5346],"WP_Comment_Query::get_search_sql":[396],"do_enclose":[429,448],"WP_Meta_Query::get_sql":[807],"WP_Query::get_posts":[2196],"get_terms":[1336,1359],"WP_User_Query::get_search_sql":[621],"count_users":[893]}},"esc_js":{"doc":"\/**\n * Escape single quotes, htmlspecialchar \" < > &, and fix line endings.\n *\n * Escapes text strings for echoing in JS. It is intended to be used for inline JS\n * (in a tag attribute, for example onclick=\"...\"). Note that the strings have to\n * be in single quotes. The filter 'js_escape' is also applied here.\n *\n * @since 2.8.0\n *\n * @param string $text The text to be escaped.\n * @return string Escaped text.\n *\/","file":"formatting.php","line":2654,"missingDoc":false,"filters":["'js_escape'"],"uses":{"wp_check_invalid_utf8":[2655],"_wp_specialchars":[2656],"preg_replace":[2657],"stripslashes":[2657],"str_replace":[2658,2659],"addslashes":[2659]},"used_by":{"sanitize_bookmark_field":[371],"WP_Admin_Bar::_render_item":[422],"WP_Customize_Manager::customize_preview_settings":[381],"js_escape":[2111],"mce_escape":[11],"wp_print_media_templates":[327],"sanitize_post_field":[2050],"sanitize_term_field":[1669],"sanitize_user_field":[1150]}},"clean_bookmark_cache":{"doc":"\/**\n * Deletes bookmark cache\n *\n * @since 2.7.0\n * @uses wp_cache_delete() Deletes the contents of 'get_bookmarks'\n *\/","file":"bookmark.php","line":383,"missingDoc":false,"filters":[],"uses":{"wp_cache_delete":[384,385],"clean_object_term_cache":[386]},"used_by":[]},"clean_object_term_cache":{"doc":"\/**\n * Removes the taxonomy relationship to terms from the cache.\n *\n * Will remove the entire taxonomy relationship containing term $object_id. The\n * term IDs have to exist within the taxonomy $object_type for the deletion to\n * take place.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @see get_object_taxonomies() for more on $object_type\n * @uses do_action() Will call action hook named, 'clean_object_term_cache' after completion.\n *\tPasses, function params in same order.\n *\n * @param int|array $object_ids Single or list of term object ID(s)\n * @param array|string $object_type The taxonomy object type\n *\/","file":"taxonomy.php","line":2565,"missingDoc":false,"filters":["'clean_object_term_cache'"],"uses":{"is_array":[2566],"get_object_taxonomies":[2569],"wp_cache_delete":[2573]},"used_by":{"clean_bookmark_cache":[386],"clean_post_cache":[4653],"clean_attachment_cache":[4769],"wp_delete_term":[1823]}},"wp_cache_close":{"doc":"\/**\n * Closes the cache.\n *\n * This function has ceased to do anything since WordPress 2.5. The\n * functionality was removed along with the rest of the persistent cache. This\n * does not mean that plugins can't implement this function when they need to\n * make sure that the cache is cleaned up after WordPress no longer needs it.\n *\n * @since 2.0.0\n *\n * @return bool Always returns True\n *\/","file":"cache.php","line":42,"missingDoc":false,"filters":[],"uses":[],"used_by":{"shutdown_action_hook":[557]}},"wp_cache_decr":{"doc":"\/**\n * Decrement numeric cache item's value\n *\n * @since 3.3.0\n * @uses $wp_object_cache Object Cache Class\n * @see WP_Object_Cache::decr()\n *\n * @param int|string $key The cache key to increment\n * @param int $offset The amount by which to decrement the item's value. Default is 1.\n * @param string $group The group the key is in.\n * @return false|int False on failure, the item's new value on success.\n *\/","file":"cache.php","line":58,"missingDoc":false,"filters":[],"uses":{"decr":[61]},"used_by":[]},"wp_cache_flush":{"doc":"\/**\n * Removes all cache items.\n *\n * @since 2.0.0\n * @uses $wp_object_cache Object Cache Class\n * @see WP_Object_Cache::flush()\n *\n * @return bool Always returns true\n *\/","file":"cache.php","line":90,"missingDoc":false,"filters":[],"uses":{"flush":[93]},"used_by":[]},"wp_cache_incr":{"doc":"\/**\n * Increment numeric cache item's value\n *\n * @since 3.3.0\n * @uses $wp_object_cache Object Cache Class\n * @see WP_Object_Cache::incr()\n *\n * @param int|string $key The cache key to increment\n * @param int $offset The amount by which to increment the item's value. Default is 1.\n * @param string $group The group the key is in.\n * @return false|int False on failure, the item's new value on success.\n *\/","file":"cache.php","line":128,"missingDoc":false,"filters":[],"uses":{"incr":[131]},"used_by":{"wp_insert_comment":[1294],"clean_comment_cache":[1972]}},"wp_cache_init":{"doc":"\/**\n * Sets up Object Cache Global and assigns it.\n *\n * @since 2.0.0\n * @global WP_Object_Cache $wp_object_cache WordPress Object Cache\n *\/","file":"cache.php","line":140,"missingDoc":false,"filters":[],"uses":[],"used_by":{"wp_start_object_cache":[409],"switch_to_blog":[533],"restore_current_blog":[594]}},"wp_cache_replace":{"doc":"\/**\n * Replaces the contents of the cache with new data.\n *\n * @since 2.0.0\n * @uses $wp_object_cache Object Cache Class\n * @see WP_Object_Cache::replace()\n *\n * @param int|string $key What to call the contents in the cache\n * @param mixed $data The contents to store in the cache\n * @param string $group Where to group the cache contents\n * @param int $expire When to expire the cache contents\n * @return bool False if cache key and group already exist, true on success\n *\/","file":"cache.php","line":157,"missingDoc":false,"filters":[],"uses":{"replace":[160]},"used_by":[]},"wp_cache_switch_to_blog":{"doc":"\/**\n * Switch the interal blog id.\n *\n * This changes the blog id used to create keys in blog specific groups.\n *\n * @since 3.5.0\n *\n * @param int $blog_id Blog ID\n *\/","file":"cache.php","line":191,"missingDoc":false,"filters":[],"uses":{"switch_to_blog":[194]},"used_by":{"wp_start_object_cache":[407],"switch_to_blog":[524],"restore_current_blog":[585]}},"wp_cache_add_global_groups":{"doc":"\/**\n * Adds a group or set of groups to the list of global groups.\n *\n * @since 2.6.0\n *\n * @param string|array $groups A group or an array of groups to add\n *\/","file":"cache.php","line":204,"missingDoc":false,"filters":[],"uses":{"add_global_groups":[207]},"used_by":{"WP_Theme::__construct":[174],"wp_start_object_cache":[412],"switch_to_blog":[537,539],"restore_current_blog":[598,600]}},"wp_cache_add_non_persistent_groups":{"doc":"\/**\n * Adds a group or set of groups to the list of non-persistent groups.\n *\n * @since 2.6.0\n *\n * @param string|array $groups A group or an array of groups to add\n *\/","file":"cache.php","line":217,"missingDoc":false,"filters":[],"uses":[],"used_by":{"WP_Theme::__construct":[178],"wp_start_object_cache":[413],"switch_to_blog":[540],"restore_current_blog":[601]}},"wp_cache_reset":{"doc":"\/**\n * Reset internal cache keys and structures. If the cache backend uses global\n * blog or site IDs as part of its cache keys, this function instructs the\n * backend to reset those keys and perform any cleanup since blog or site IDs\n * have changed since cache init.\n *\n * This function is deprecated. Use wp_cache_switch_to_blog() instead of this\n * function when preparing the cache for a blog switch. For clearing the cache\n * during unit tests, consider using wp_cache_init(). wp_cache_init() is not\n * recommended outside of unit tests as the performance penality for using it is\n * high.\n *\n * @since 2.6.0\n * @deprecated 3.5.0\n *\/","file":"cache.php","line":237,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[238],"reset":[242]},"used_by":[]},"_deprecated_function":{"doc":"\/**\n * Marks a function as deprecated and informs when it has been used.\n *\n * There is a hook deprecated_function_run that will be called that can be used\n * to get the backtrace up to what file and function called the deprecated\n * function.\n *\n * The current behavior is to trigger a user error if WP_DEBUG is true.\n *\n * This function is to be used in every function that is deprecated.\n *\n * @package WordPress\n * @subpackage Debug\n * @since 2.5.0\n * @access private\n *\n * @uses do_action() Calls 'deprecated_function_run' and passes the function name, what to use instead,\n *   and the version the function was deprecated in.\n * @uses apply_filters() Calls 'deprecated_function_trigger_error' and expects boolean value of true to do\n *   trigger or false to not trigger error.\n *\n * @param string $function The function that was called\n * @param string $version The version of WordPress that deprecated the function\n * @param string $replacement Optional. The function that should have been called\n *\/","file":"functions.php","line":2854,"missingDoc":false,"filters":["'deprecated_function_run'","'deprecated_function_trigger_error'"],"uses":{"trigger_error":[2861,2863],"sprintf":[2861,2863],"__":[2861,2863],"is_null":[2860]},"used_by":{"wp_cache_reset":[238],"WP_Object_Cache::reset":[533],"WP_Admin_Bar::recursive_render":[463],"WP_Scripts::print_scripts_l10n":[57],"get_postdata":[27],"start_wp":[62],"the_category_ID":[82],"the_category_head":[108],"previous_post":[138],"next_post":[174],"user_can_create_post":[208],"user_can_create_draft":[228],"user_can_edit_post":[248],"user_can_delete_post":[277],"user_can_set_post_date":[297],"user_can_edit_post_date":[317],"user_can_edit_post_comments":[337],"user_can_delete_post_comments":[357],"user_can_edit_user":[376],"get_linksbyname":[410],"wp_get_linksbyname":[433],"get_linkobjectsbyname":[474],"get_linkobjects":[528],"get_linksbyname_withrating":[562],"get_links_withrating":[590],"get_autotoggle":[606],"list_cats":[639],"wp_list_cats":[656],"dropdown_cats":[699],"list_authors":[730],"wp_get_post_cats":[747],"wp_set_post_cats":[765],"get_archives":[784],"get_author_link":[803],"link_pages":[831],"get_settings":[849],"permalink_link":[863],"permalink_single_rss":[878],"wp_get_links":[895],"get_links":[950],"get_links_list":[1043],"links_popup_script":[1089],"get_linkrating":[1114],"get_linkcatname":[1130],"comments_rss_link":[1159],"get_category_rss_link":[1176],"get_author_rss_link":[1198],"comments_rss":[1217],"create_user":[1235],"gzip_compression":[1245],"get_commentdata":[1263],"get_catname":[1279],"get_category_children":[1298],"get_the_author_description":[1332],"the_author_description":[1345],"get_the_author_login":[1360],"the_author_login":[1373],"get_the_author_firstname":[1388],"the_author_firstname":[1401],"get_the_author_lastname":[1416],"the_author_lastname":[1429],"get_the_author_nickname":[1444],"the_author_nickname":[1457],"get_the_author_email":[1472],"the_author_email":[1485],"get_the_author_icq":[1500],"the_author_icq":[1513],"get_the_author_yim":[1528],"the_author_yim":[1541],"get_the_author_msn":[1556],"the_author_msn":[1569],"get_the_author_aim":[1584],"the_author_aim":[1597],"get_author_name":[1613],"get_the_author_url":[1628],"the_author_url":[1641],"get_the_author_ID":[1656],"the_author_ID":[1669],"the_content_rss":[1708],"make_url_footnote":[1754],"_c":[1794],"translate_with_context":[1813],"_nc":[1830],"__ngettext":[1843],"__ngettext_noop":[1857],"get_alloptions":[1874],"get_the_attachment_link":[1893],"get_attachment_icon_src":[1922],"get_attachment_icon":[1967],"get_attachment_innerHTML":[2024],"get_link":[2050],"sanitize_url":[2067],"clean_url":[2090,2092],"js_escape":[2110],"wp_specialchars":[2122],"attribute_escape":[2143],"register_sidebar_widget":[2168],"unregister_sidebar_widget":[2200],"register_widget_control":[2225],"unregister_widget_control":[2259],"delete_usermeta":[2277],"get_usermeta":[2324],"update_usermeta":[2378],"get_users_of_blog":[2431],"automatic_feed_links":[2451],"get_profile":[2468],"get_usernumposts":[2485],"funky_javascript_fix":[2517],"is_taxonomy":[2541],"is_term":[2559],"is_plugin_page":[2575],"update_category_cache":[2598],"wp_timezone_supported":[2612],"the_editor":[2632],"get_user_metavalues":[2648],"sanitize_user_object":[2682],"get_boundary_post_rel_link":[2721],"start_post_rel_link":[2759],"get_index_rel_link":[2773],"index_rel_link":[2786],"get_parent_post_rel_link":[2801],"parent_post_rel_link":[2829],"wp_admin_bar_dashboard_view_site_menu":[2841],"is_blog_user":[2867],"debug_fopen":[2881],"debug_fwrite":[2894],"debug_fclose":[2908],"get_themes":[2926],"get_theme":[2958],"get_current_theme":[2977],"clean_pre":[2998],"add_custom_image_header":[3026],"remove_custom_image_header":[3047],"add_custom_background":[3064],"remove_custom_background":[3084],"get_theme_data":[3100],"update_page_cache":[3136],"clean_page_cache":[3155],"wp_explain_nonce":[3174],"sticky_class":[3189],"_get_post_ancestors":[3205],"wp_load_image":[3219],"image_resize":[3265],"wp_get_single_post":[3300],"user_pass_ok":[3317],"gd_edit_image_support":[3344],"generate_random_password":[23],"is_site_admin":[44],"graceful_fail":[68],"get_user_details":[105],"clear_global_post_cache":[116],"is_main_blog":[126],"validate_email":[137],"get_blog_list":[147],"get_most_active_blogs":[174],"wpmu_admin_do_redirect":[223],"wpmu_admin_redirect_add_updated_param":[263],"set_current_user":[34],"get_userdatabylogin":[51],"get_user_by_email":[68],"wp_setcookie":[90],"__main":[95,112,133,169],"wp_clearcookie":[108],"wp_get_cookie_login":[129],"wp_login":[157],"wp_atom_server::__call":[185],"wp_atom_server::__callStatic":[189],"wpdb::supports_collation":[1667]}},"WP_Object_Cache::add":{"doc":"\/**\n * Adds data to the cache if it doesn't already exist.\n *\n * @uses WP_Object_Cache::_exists Checks to see if the cache already has data.\n * @uses WP_Object_Cache::set Sets the data after the checking the cache\n *\t\tcontents existence.\n *\n * @since 2.0.0\n *\n * @param int|string $key What to call the contents in the cache\n * @param mixed $data The contents to store in the cache\n * @param string $group Where to group the cache contents\n * @param int $expire When to expire the cache contents\n * @return bool False if cache key and group already exist, true on success\n *\/","file":"cache.php","line":323,"missingDoc":false,"filters":[],"uses":{"wp_suspend_cache_addition":[324],"_exists":[334],"set":[337]},"used_by":[]},"wp_suspend_cache_addition":{"doc":"\/**\n * Temporarily suspend cache additions.\n *\n * Stops more data being added to the cache, but still allows cache retrieval.\n * This is useful for actions, such as imports, when a lot of data would otherwise\n * be almost uselessly added to the cache.\n *\n * Suspension lasts for a single page load at most. Remember to call this\n * function again if you wish to re-enable cache adds earlier.\n *\n * @since 3.3.0\n *\n * @param bool $suspend Optional. Suspends additions if true, re-enables them if false.\n * @return bool The current suspend setting\n *\/","file":"functions.php","line":3180,"missingDoc":false,"filters":[],"uses":{"is_bool":[3183]},"used_by":{"WP_Object_Cache::add":[324]}},"WP_Object_Cache::add_global_groups":{"doc":"\/**\n * Sets the list of global groups.\n *\n * @since 3.0.0\n *\n * @param array $groups List of groups that are global.\n *\/","file":"cache.php","line":347,"missingDoc":false,"filters":[],"uses":{"array_fill_keys":[350],"array_merge":[351]},"used_by":[]},"WP_Object_Cache::decr":{"doc":"\/**\n * Decrement numeric cache item's value\n *\n * @since 3.3.0\n *\n * @param int|string $key The cache key to increment\n * @param int $offset The amount by which to decrement the item's value. Default is 1.\n * @param string $group The group the key is in.\n * @return false|int False on failure, the item's new value on success.\n *\/","file":"cache.php","line":364,"missingDoc":false,"filters":[],"uses":{"_exists":[371],"is_numeric":[374]},"used_by":[]},"WP_Object_Cache::delete":{"doc":"\/**\n * Remove the contents of the cache key in the group\n *\n * If the cache key does not exist in the group and $force parameter is set\n * to false, then nothing will happen. The $force parameter is set to false\n * by default.\n *\n * @since 2.0.0\n *\n * @param int|string $key What the contents in the cache are called\n * @param string $group Where the cache contents are grouped\n * @param bool $force Optional. Whether to force the unsetting of the cache\n *\t\tkey in the group\n * @return bool False if the contents weren't deleted and true on success\n *\/","file":"cache.php","line":402,"missingDoc":false,"filters":[],"uses":{"_exists":[409]},"used_by":[]},"WP_Object_Cache::flush":{"doc":"\/**\n * Clears the object cache of all data\n *\n * @since 2.0.0\n *\n * @return bool Always returns true\n *\/","file":"cache.php","line":423,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Object_Cache::get":{"doc":"\/**\n * Retrieves the cache contents, if it exists\n *\n * The contents will be first attempted to be retrieved by searching by the\n * key in the cache group. If the cache is hit (success) then the contents\n * are returned.\n *\n * On failure, the number of cache misses will be incremented.\n *\n * @since 2.0.0\n *\n * @param int|string $key What the contents in the cache are called\n * @param string $group Where the cache contents are grouped\n * @param string $force Whether to force a refetch rather than relying on the local cache (default is false)\n * @return bool|mixed False on failure to retrieve contents or the cache\n *\t\tcontents on success\n *\/","file":"cache.php","line":446,"missingDoc":false,"filters":[],"uses":{"is_object":[456],"_exists":[453]},"used_by":[]},"WP_Object_Cache::incr":{"doc":"\/**\n * Increment numeric cache item's value\n *\n * @since 3.3.0\n *\n * @param int|string $key The cache key to increment\n * @param int $offset The amount by which to increment the item's value. Default is 1.\n * @param string $group The group the key is in.\n * @return false|int False on failure, the item's new value on success.\n *\/","file":"cache.php","line":477,"missingDoc":false,"filters":[],"uses":{"_exists":[484],"is_numeric":[487]},"used_by":[]},"WP_Object_Cache::replace":{"doc":"\/**\n * Replace the contents in the cache, if contents already exist\n *\n * @since 2.0.0\n * @see WP_Object_Cache::set()\n *\n * @param int|string $key What to call the contents in the cache\n * @param mixed $data The contents to store in the cache\n * @param string $group Where to group the cache contents\n * @param int $expire When to expire the cache contents\n * @return bool False if not exists, true if contents were replaced\n *\/","file":"cache.php","line":512,"missingDoc":false,"filters":[],"uses":{"_exists":[520],"set":[523]},"used_by":[]},"WP_Object_Cache::reset":{"doc":"\/**\n * Reset keys\n *\n * @since 3.0.0\n * @deprecated 3.5.0\n *\/","file":"cache.php","line":532,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[533],"array_keys":[536]},"used_by":[]},"WP_Object_Cache::set":{"doc":"\/**\n * Sets the data contents into the cache\n *\n * The cache contents is grouped by the $group parameter followed by the\n * $key. This allows for duplicate ids in unique groups. Therefore, naming of\n * the group should be used with care and should follow normal function\n * naming guidelines outside of core WordPress usage.\n *\n * The $expire parameter is not used, because the cache will automatically\n * expire for each time a page is accessed and PHP finishes. The method is\n * more for cache plugins which use files.\n *\n * @since 2.0.0\n *\n * @param int|string $key What to call the contents in the cache\n * @param mixed $data The contents to store in the cache\n * @param string $group Where to group the cache contents\n * @param int $expire Not Used\n * @return bool Always returns true\n *\/","file":"cache.php","line":562,"missingDoc":false,"filters":[],"uses":{"is_object":[569]},"used_by":[]},"WP_Object_Cache::stats":{"doc":"\/**\n * Echoes the stats of the caching.\n *\n * Gives the cache hits, and cache misses. Also prints every cached group,\n * key and the data.\n *\n * @since 2.0.0\n *\/","file":"cache.php","line":584,"missingDoc":false,"filters":[],"uses":{"number_format":[591],"strlen":[591],"serialize":[591]},"used_by":[]},"WP_Object_Cache::switch_to_blog":{"doc":"\/**\n * Switch the interal blog id.\n *\n * This changes the blog id used to create keys in blog specific groups.\n *\n * @since 3.5.0\n *\n * @param int $blog_id Blog ID\n *\/","file":"cache.php","line":605,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Object_Cache::_exists":{"doc":"\/**\n * Utility function to determine whether a key exists in the cache.\n *\n * @since 3.4.0\n *\n * @access protected\n *\/","file":"cache.php","line":617,"missingDoc":false,"filters":[],"uses":{"array_key_exists":[618]},"used_by":[]},"WP_Object_Cache::__construct":{"doc":"\/**\n * Sets up object properties; PHP 5 style constructor\n *\n * @since 2.0.8\n * @return null|WP_Object_Cache If cache is disabled, returns null.\n *\/","file":"cache.php","line":627,"missingDoc":false,"filters":[],"uses":{"is_multisite":[630],"register_shutdown_function":[638]},"used_by":[]},"WP_Object_Cache::__destruct":{"doc":"\/**\n * Will save the object cache before object is completely destroyed.\n *\n * Called upon object destruction, which should be when PHP ends.\n *\n * @since  2.0.8\n *\n * @return bool True value. Won't be used by PHP\n *\/","file":"cache.php","line":650,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"redirect_canonical":{"doc":"\/**\n * Redirects incoming links to the proper URL based on the site url.\n *\n * Search engines consider www.somedomain.com and somedomain.com to be two\n * different URLs when they both go to the same location. This SEO enhancement\n * prevents penalty for duplicate content by redirecting all incoming links to\n * one or the other.\n *\n * Prevents redirection for feeds, trackbacks, searches, comment popup, and\n * admin URLs. Does not redirect on non-pretty-permalink-supporting IIS 7,\n * page\/post previews, WP admin, Trackbacks, robots.txt, searches, or on POST\n * requests.\n *\n * Will also attempt to find the correct link when a user enters a URL that does\n * not exist based on exact WordPress query. Will instead try to parse the URL\n * or query in an attempt to figure the correct page to go to.\n *\n * @since 2.3.0\n * @uses $wp_rewrite\n * @uses $is_IIS\n *\n * @param string $requested_url Optional. The URL that was requested, used to\n *\t\tfigure if redirect is needed.\n * @param bool $do_redirect Optional. Redirect to the new URL.\n * @return null|false|string Null, if redirect not needed. False, if redirect\n *\t\tnot needed or the string of the URL\n *\/","file":"canonical.php","line":39,"missingDoc":false,"filters":["'wp_signup_location'","'redirect_canonical'"],"uses":{"is_trackback":[42],"is_search":[42],"is_comments_popup":[42],"is_admin":[42],"is_preview":[42],"is_robots":[42],"iis7_supports_permalinks":[42],"is_ssl":[47],"parse_url":[52,74,189,297,311,314],"_remove_qs_args_if_not_in_url":[73,87,100,106],"get_post_comments_feed_link":[72],"get_query_var":[72,71,78,95,95,95,113,116,122,126,130,145,145,146,146,146,148,149,149,152,155,206,217,214,233,238,238,238,235,235,240,231,257,256,271,270,270,222,222,353,351],"is_feed":[71,124,240,231,259,222],"get_results":[80],"prepare":[80,156],"get_permalink":[86,99,116,119,122,127,210,216],"is_singular":[78,214,233],"max":[95],"get_post_type_object":[97],"get_post":[96],"redirect_guess_404_permalink":[105],"is_object":[110,351],"using_permalinks":[110,351],"remove_query_arg":[114,117,120,123,128,143,147,150,153,158,186,200,218,239,258,272],"get_attachment_link":[113],"is_single":[115,118,206,262,260],"get_queried_object_id":[119,208,210,216],"is_page":[121,124],"get_option":[124,124,126,126,127,270,270,270],"home_url":[125,314],"is_home":[126],"is_year":[129,151],"is_month":[129,148],"is_day":[129,145],"strlen":[131],"get_year_link":[133,152],"get_month_link":[136,149],"substr":[136,136,139,139,139],"get_day_link":[139,146],"is_author":[154],"preg_match":[154,223,223,223],"get_userdata":[155],"get_author_posts_url":[157],"get_var":[156],"is_category":[160,171],"is_tag":[160,174],"is_tax":[160],"count":[164],"get_queried_object":[166],"get_taxonomy":[178],"array_diff":[183,185],"array_keys":[183,183,185],"parse_str":[191,296,300],"add_query_arg":[192,266,307],"get_term_link":[167],"is_wp_error":[167,209,209],"strpos":[206,276,370,412],"get_category_by_path":[207],"wp_get_object_terms":[208],"in_array":[209,231],"is_attachment":[112],"trailingslashit":[217,232,261,263,271,277,279,366,375,374,374],"user_trailingslashit":[217,236,238,261,271,275,364],"is_front_page":[214,365,351,351],"preg_replace":[225,226,227,275,294,327,330,334,337,340,343,371],"get_default_feed":[236,238,235,244],"get_feed_link":[250],"basename":[250,249,283],"wp_redirect":[251,288,430],"using_index_permalinks":[276,347],"network_site_url":[285],"site_url":[287],"is_multisite":[284],"is_404":[92,351],"rawurlencode_deep":[306],"trim":[337],"str_replace":[348],"call_user_func":[358],"strtolower":[379,379,380,380,380,380],"function_exists":[413],"preg_replace_callback":[418],"redirect_canonical":[429]},"used_by":{"redirect_canonical":[429]}},"is_trackback":{"doc":"\/**\n * Is the query for a trackback endpoint call?\n *\n * @see WP_Query::is_trackback()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":664,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[668],"__":[668],"is_trackback":[672]},"used_by":{"redirect_canonical":[42],"is_trackback":[672],"__main":[20]}},"is_search":{"doc":"\/**\n * Is the query for a search?\n *\n * @see WP_Query::is_search()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":568,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[572],"__":[572],"is_search":[576]},"used_by":{"redirect_canonical":[42],"WP::handle_404":[522],"__main":[20,33,23,28,43,27],"wp_title":[578],"feed_links_extra":[1663],"get_body_class":[416,541],"is_search":[576]}},"is_comments_popup":{"doc":"\/**\n * Whether the current URL is within the comments popup window.\n *\n * @see WP_Query::is_comments_popup()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":301,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[305],"__":[305],"is_comments_popup":[309]},"used_by":{"redirect_canonical":[42],"is_comments_popup":[309],"__main":[41]}},"is_preview":{"doc":"\/**\n * Is the query for a post or page preview?\n *\n * @see WP_Query::is_preview()\n * @since 2.0.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":528,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[532],"__":[532],"is_preview":[536]},"used_by":{"redirect_canonical":[42],"WP_Customize_Manager::start_previewing_theme":[165],"WP_Customize_Manager::stop_previewing_theme":[195],"WP_Customize_Manager::wp_loaded":[280],"WP_Customize_Manager::wp_redirect_status":[296],"WP_Customize_Manager::save":[495],"is_preview":[536]}},"is_robots":{"doc":"\/**\n * Is the query for the robots file?\n *\n * @see WP_Query::is_robots()\n * @since 2.1.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":548,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[552],"__":[552],"is_robots":[556]},"used_by":{"redirect_canonical":[42],"WP::handle_404":[507],"is_robots":[556],"__main":[14]}},"iis7_supports_permalinks":{"doc":"\/**\n * Check if IIS 7 supports pretty permalinks.\n *\n * @since 2.8.0\n *\n * @return bool\n *\/","file":"functions.php","line":3034,"missingDoc":false,"filters":["'iis7_supports_permalinks'"],"uses":{"class_exists":[3049],"php_sapi_name":[3049]},"used_by":{"redirect_canonical":[42]}},"_remove_qs_args_if_not_in_url":{"doc":"\/**\n * Removes arguments from a query string if they are not present in a URL\n * DO NOT use this in plugin code.\n *\n * @since 3.4\n * @access private\n *\n * @return string The altered query string\n *\/","file":"canonical.php","line":451,"missingDoc":false,"filters":[],"uses":{"parse_url":[452],"parse_str":[454],"remove_query_arg":[457,460]},"used_by":{"redirect_canonical":[73,87,100,106]}},"get_post_comments_feed_link":{"doc":"\/**\n * Retrieve the permalink for the post comments feed.\n *\n * @since 2.2.0\n *\n * @param int $post_id Optional. Post ID.\n * @param string $feed Optional. Feed type.\n * @return string\n *\/","file":"link-template.php","line":465,"missingDoc":false,"filters":["'post_comments_feed_link'"],"uses":{"absint":[466],"get_the_ID":[469],"get_default_feed":[472,481],"_get_page_link":[476],"get_permalink":[478],"get_option":[475,475,474],"trailingslashit":[480],"user_trailingslashit":[483],"get_post_field":[485],"add_query_arg":[487,489],"home_url":[487,489]},"used_by":{"redirect_canonical":[72],"redirect_guess_404_permalink":[496],"comments_rss":[1218],"__main":[31,32,51,54,35],"feed_links_extra":[1646],"post_comments_feed_link":[512]}},"get_query_var":{"doc":"\/**\n * Retrieve variable in the WP_Query class.\n *\n * @see WP_Query::get()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @param string $var The variable key to retrieve.\n * @return mixed\n *\/","file":"query.php","line":24,"missingDoc":false,"filters":[],"uses":{"get":[27]},"used_by":{"redirect_canonical":[72,71,78,95,95,95,113,116,122,126,130,145,145,146,146,146,148,149,149,152,155,206,217,214,233,238,238,238,235,235,240,231,257,256,271,270,270,222,222,353,351],"redirect_guess_404_permalink":[477,481,480,486,485,488,487,490,489,496,497,498,495,476],"wp_dropdown_categories":[313],"get_comment_link":[497],"comments_template":[902],"wp_list_comments":[1453,1469],"get_comment_pages_count":[794],"get_page_of_comment":[835],"do_feed":[999],"wp_title":[524,525,526,527,528],"single_month_title":[770,771,772],"feed_links_extra":[1659],"get_search_query":[1828],"get_posts_nav_link":[1648],"get_next_comments_link":[1730],"get_previous_comments_link":[1773],"paginate_comments_links":[1812],"rel_canonical":[2322],"get_body_class":[456],"wp_old_slug_redirect":[3574,3573],"setup_postdata":[3635],"get_archive_template":[62],"get_page_template":[239],"wp_dropdown_users":[1029]}},"is_feed":{"doc":"\/**\n * Is the query for a feed?\n *\n * @see WP_Query::is_feed()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @param string|array $feeds Optional feed types to check.\n * @return bool\n *\/","file":"query.php","line":362,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[366],"__":[366],"is_feed":[370]},"used_by":{"redirect_canonical":[71,124,240,231,259,222],"SimplePie::fetch_data":[1571],"gallery_shortcode":[729],"is_feed":[370],"setup_postdata":[3638],"SimplePie_Locator::find":[96],"SimplePie_Locator::search_elements_by_tag":[252],"SimplePie_Locator::extension":[331],"SimplePie_Locator::body":[359],"__main":[17]}},"is_singular":{"doc":"\/**\n * Is the query for an existing single post of any post type (post, attachment, page, ... )?\n *\n * If the $post_types parameter is specified, this function will additionally\n * check if the query is for one of the Posts Types specified.\n *\n * @see is_page()\n * @see is_single()\n *\n * @see WP_Query::is_singular()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @param mixed $post_types Optional. Post Type or array of Post Types\n * @return bool\n *\/","file":"query.php","line":624,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[628],"__":[628],"is_singular":[632]},"used_by":{"redirect_canonical":[78,214,233],"_close_comments_for_old_posts":[2012],"__main":[18,29,49,21,41,36],"adjacent_posts_rel_link_wp_head":[1261],"get_posts_nav_link":[1639],"get_next_comments_link":[1727],"get_previous_comments_link":[1770],"paginate_comments_links":[1809],"rel_canonical":[2313],"is_singular":[632]}},"redirect_guess_404_permalink":{"doc":"\/**\n * Attempts to guess the correct URL based on query vars\n *\n * @since 2.3.0\n * @uses $wpdb\n *\n * @return bool|string The correct URL if one is found. False on failure.\n *\/","file":"canonical.php","line":473,"missingDoc":false,"filters":[],"uses":{"prepare":[477,481,486,488,490],"like_escape":[477],"get_query_var":[477,481,480,486,485,488,487,490,489,496,497,498,495,476],"implode":[483],"get_post_types":[483],"get_var":[492],"get_post_comments_feed_link":[496],"trailingslashit":[498],"get_permalink":[498,500],"user_trailingslashit":[498]},"used_by":{"redirect_canonical":[105]}},"remove_query_arg":{"doc":"\/**\n * Removes an item or list from the query string.\n *\n * @since 1.5.0\n *\n * @param string|array $key Query key or keys to remove.\n * @param bool $query When false uses the $_SERVER value.\n * @return string New URL query string.\n *\/","file":"functions.php","line":716,"missingDoc":false,"filters":[],"uses":{"add_query_arg":[719,722],"is_array":[717]},"used_by":{"redirect_canonical":[114,117,120,123,128,143,147,150,153,158,186,200,218,239,258,272],"_remove_qs_args_if_not_in_url":[457,460],"get_cancel_comment_reply_link":[1142],"wp_nonce_ays":[2026],"get_pagenum_link":[1423],"_post_format_link":[5464]}},"get_attachment_link":{"doc":"\/**\n * Retrieve permalink for attachment.\n *\n * This can be used in the WordPress Loop or outside of it.\n *\n * @since 2.0.0\n *\n * @param mixed $post Optional. Post ID or object.\n * @param bool $leavename Optional. Leave name.\n * @return string\n *\/","file":"link-template.php","line":298,"missingDoc":false,"filters":["'attachment_link'"],"uses":{"get_post":[303,306],"_get_page_link":[308],"get_permalink":[310],"is_numeric":[312],"strpos":[312,317],"get_option":[312],"user_trailingslashit":[318],"trailingslashit":[318],"str_replace":[321],"using_permalinks":[305],"home_url":[325]},"used_by":{"redirect_canonical":[113],"get_the_attachment_link":[1901],"get_permalink":[109],"wp_prepare_attachment_for_js":[1331],"wp_get_attachment_link":[1169]}},"is_single":{"doc":"\/**\n * Is the query for an existing single post?\n *\n * Works for any post type, except attachments and pages\n *\n * If the $post parameter is specified, this function will additionally\n * check if the query is for one of the Posts specified.\n *\n * @see is_page()\n * @see is_singular()\n *\n * @see WP_Query::is_single()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @param mixed $post Post ID, title, slug, or array of such.\n * @return bool\n *\/","file":"query.php","line":597,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[601],"__":[601],"is_single":[605]},"used_by":{"redirect_canonical":[115,118,206,262,260],"WP::register_globals":[461],"comments_template":[851],"__main":[29,34,27],"wp_title":[534],"feed_links_extra":[1640],"get_boundary_post":[1307],"get_next_posts_page_link":[1488],"get_next_posts_link":[1537],"get_previous_posts_page_link":[1570],"get_previous_posts_link":[1608],"wp_get_shortlink":[2351],"get_body_class":[427,529],"is_single":[605],"setup_postdata":[3638]}},"get_queried_object_id":{"doc":"\/**\n * Retrieve ID of the current queried object. Wrapper for $wp_query->get_queried_object_id()\n *\n * @uses WP_Query::get_queried_object_id()\n *\n * @since 3.1.0\n * @access public\n *\n * @return int\n *\/","file":"query.php","line":55,"missingDoc":false,"filters":[],"uses":{"get_queried_object_id":[57]},"used_by":{"redirect_canonical":[119,208,210,216],"wp_list_categories":[471],"rel_canonical":[2317],"wp_get_shortlink":[2352],"get_body_class":[428,489],"wp_list_pages":[846],"is_page_template":[1250],"get_queried_object_id":[57],"get_page_template":[237]}},"is_page":{"doc":"\/**\n * Is the query for an existing single page?\n *\n * If the $page parameter is specified, this function will additionally\n * check if the query is for one of the pages specified.\n *\n * @see is_single()\n * @see is_singular()\n *\n * @see WP_Query::is_page()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @param mixed $page Page ID, title, slug, or array of such.\n * @return bool\n *\/","file":"query.php","line":488,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[492],"__":[492],"is_page":[496]},"used_by":{"redirect_canonical":[121,124],"WP::register_globals":[461],"comments_template":[851],"wp_title":[534],"feed_links_extra":[1640],"get_body_class":[486,531],"wp_list_pages":[845],"is_page_template":[1247],"is_page":[496],"WP_Query::is_front_page":[3323],"setup_postdata":[3638],"__main":[35,66]}},"is_home":{"doc":"\/**\n * Is the query for the blog homepage?\n *\n * This is the page which shows the time based blog content of your site.\n *\n * Depends on the site's \"Front page displays\" Reading Settings 'show_on_front' and 'page_for_posts'.\n *\n * If you set a static page for the front page of your site, this function will return\n * true only on the page you set as the \"Posts page\".\n *\n * @see is_front_page()\n *\n * @see WP_Query::is_home()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool True if blog view homepage.\n *\/","file":"query.php","line":441,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[445],"__":[445],"is_home":[449]},"used_by":{"redirect_canonical":[126],"WP::handle_404":[522],"wp_title":[534],"get_post_class":[345],"get_body_class":[410],"is_home":[449],"WP_Query::is_front_page":[3321],"__main":[31,66]}},"is_year":{"doc":"\/**\n * Is the query for an existing year archive?\n *\n * @see WP_Query::is_year()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":684,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[688],"__":[688],"is_year":[692]},"used_by":{"redirect_canonical":[129,151],"is_year":[692],"__main":[40,27]}},"is_month":{"doc":"\/**\n * Is the query for an existing month archive?\n *\n * @see WP_Query::is_month()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":461,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[465],"__":[465],"is_month":[469]},"used_by":{"redirect_canonical":[129,148],"is_month":[469],"__main":[37,26]}},"is_day":{"doc":"\/**\n * Is the query for an existing day archive?\n *\n * @see WP_Query::is_day()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":341,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[345],"__":[345],"is_day":[349]},"used_by":{"redirect_canonical":[129,145],"is_day":[349],"__main":[34,26]}},"get_year_link":{"doc":"\/**\n * Retrieve the permalink for the year archives.\n *\n * @since 1.5.0\n *\n * @param int|bool $year False for current year or year for permalink.\n * @return string\n *\/","file":"link-template.php","line":338,"missingDoc":false,"filters":["'year_link'","'year_link'"],"uses":{"gmdate":[341],"current_time":[341],"get_year_permastruct":[342],"str_replace":[344],"home_url":[345,347],"user_trailingslashit":[345]},"used_by":{"redirect_canonical":[133,152],"wp_get_archives":[957]}},"get_month_link":{"doc":"\/**\n * Retrieve the permalink for the month archives with year.\n *\n * @since 1.0.0\n *\n * @param bool|int $year False for current year. Integer of year.\n * @param bool|int $month False for current month. Integer of month.\n * @return string\n *\/","file":"link-template.php","line":360,"missingDoc":false,"filters":["'month_link'","'month_link'"],"uses":{"gmdate":[363,365],"current_time":[363,365],"get_month_permastruct":[366],"str_replace":[368,369],"zeroise":[369,372],"intval":[369],"home_url":[370,372],"user_trailingslashit":[370]},"used_by":{"redirect_canonical":[136,149],"wp_get_archives":[935],"get_calendar":[1172,1180]}},"get_day_link":{"doc":"\/**\n * Retrieve the permalink for the day archives with year and month.\n *\n * @since 1.0.0\n *\n * @param bool|int $year False for current year. Integer of year.\n * @param bool|int $month False for current month. Integer of month.\n * @param bool|int $day False for current day. Integer of day.\n * @return string\n *\/","file":"link-template.php","line":386,"missingDoc":false,"filters":["'day_link'","'day_link'"],"uses":{"gmdate":[389,391,393],"current_time":[389,391,393],"get_day_permastruct":[395],"str_replace":[397,398,399],"zeroise":[398,399,402,402],"intval":[398,399],"home_url":[400,402],"user_trailingslashit":[400]},"used_by":{"redirect_canonical":[139,146],"wp_get_archives":[978],"get_calendar":[1248]}},"is_author":{"doc":"\/**\n * Is the query for an existing author archive page?\n *\n * If the $author parameter is specified, this function will additionally\n * check if the query is for one of the authors specified.\n *\n * @see WP_Query::is_author()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @param mixed $author Optional. User ID, nickname, nicename, or array of User IDs, nicknames, and nicenames\n * @return bool\n *\/","file":"query.php","line":204,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[208],"__":[208],"is_author":[212]},"used_by":{"redirect_canonical":[154],"WP::handle_404":[516],"wp_title":[551],"feed_links_extra":[1658],"get_body_class":[457,539],"is_author":[212],"__main":[38],"wp_dropdown_users":[1029]}},"is_category":{"doc":"\/**\n * Is the query for an existing category archive page?\n *\n * If the $category parameter is specified, this function will additionally\n * check if the query is for one of the categories specified.\n *\n * @see WP_Query::is_category()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @param mixed $category Optional. Category ID, name, slug, or array of Category IDs, names, and slugs.\n * @return bool\n *\/","file":"query.php","line":228,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[232],"__":[232],"is_category":[236]},"used_by":{"redirect_canonical":[160,171],"wp_dropdown_categories":[313],"wp_list_categories":[468],"term_description":[1043],"WP::handle_404":[516],"wp_title":[539],"single_term_title":[731],"feed_links_extra":[1648],"get_body_class":[464,533],"is_category":[236],"__main":[36,31,26]}},"is_tag":{"doc":"\/**\n * Is the query for an existing tag archive page?\n *\n * If the $tag parameter is specified, this function will additionally\n * check if the query is for one of the tags specified.\n *\n * @see WP_Query::is_tag()\n * @since 2.3.0\n * @uses $wp_query\n *\n * @param mixed $slug Optional. Tag slug or array of slugs.\n * @return bool\n *\/","file":"query.php","line":252,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[256],"__":[256],"is_tag":[260]},"used_by":{"redirect_canonical":[160,174],"wp_list_categories":[468],"term_description":[1043],"WP::handle_404":[516],"wp_title":[539],"single_term_title":[733],"feed_links_extra":[1653],"get_body_class":[471,535],"is_tag":[260],"__main":[37]}},"is_tax":{"doc":"\/**\n * Is the query for an existing taxonomy archive page?\n *\n * If the $taxonomy parameter is specified, this function will additionally\n * check if the query is for that specific $taxonomy.\n *\n * If the $term parameter is specified in addition to the $taxonomy parameter,\n * this function will additionally check if the query is for one of the terms\n * specified.\n *\n * @see WP_Query::is_tax()\n * @since 2.5.0\n * @uses $wp_query\n *\n * @param mixed $taxonomy Optional. Taxonomy slug or slugs.\n * @param mixed $term Optional. Term ID, name, slug or array of Term IDs, names, and slugs.\n * @return bool\n *\/","file":"query.php","line":281,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[285],"__":[285],"is_tax":[289]},"used_by":{"redirect_canonical":[160],"wp_list_categories":[468],"term_description":[1043],"WP::handle_404":[516],"wp_title":[544],"single_term_title":[735],"get_body_class":[478],"is_tax":[289],"__main":[29]}},"get_category_by_path":{"doc":"\/**\n * Retrieve category based on URL containing the category slug.\n *\n * Breaks the $category_path parameter up to get the category slug.\n *\n * Tries to find the child path and will return it. If it doesn't find a\n * match, then it will return the first category matching slug, if $full_match,\n * is set to false. If it does not, then it will return null.\n *\n * It is also possible that it will return a WP_Error object on failure. Check\n * for it when using this function.\n *\n * @since 2.1.0\n *\n * @param string $category_path URL containing category slugs.\n * @param bool $full_match Optional. Whether full path should be matched.\n * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N\n * @return null|object|array Null on failure. Type is based on $output value.\n *\/","file":"category.php","line":110,"missingDoc":false,"filters":[],"uses":{"rawurlencode":[111],"urldecode":[111],"str_replace":[112,113],"trim":[114],"sanitize_title":[115,119],"basename":[115],"explode":[116],"get_terms":[121],"get_term":[130],"is_wp_error":[131],"get_category":[137,142]},"used_by":{"redirect_canonical":[207]}},"is_attachment":{"doc":"\/**\n * Is the query for an existing attachment page?\n *\n * @see WP_Query::is_attachment()\n * @since 2.0.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":180,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[184],"__":[184],"is_attachment":[188]},"used_by":{"redirect_canonical":[112],"get_adjacent_post_rel_link":[1212],"adjacent_posts_rel_link_wp_head":[1261],"get_boundary_post":[1307],"adjacent_post_link":[1378],"get_body_class":[422,447],"wp_list_pages":[845],"is_attachment":[188],"__main":[32]}},"trailingslashit":{"doc":"\/**\n * Appends a trailing slash.\n *\n * Will remove trailing slash if it exists already before adding a trailing\n * slash. This prevents double slashing a string or path.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 1.2.0\n * @uses untrailingslashit() Unslashes string if it was slashed already.\n *\n * @param string $string What to add the trailing slash to.\n * @return string String with trailing slash added.\n *\/","file":"formatting.php","line":1367,"missingDoc":false,"filters":[],"uses":{"untrailingslashit":[1368]},"used_by":{"redirect_canonical":[217,232,261,263,271,277,279,366,375,374,374],"redirect_guess_404_permalink":[498],"WP_Admin_Bar::initialize":[35,39],"_WP_Editors::editor_settings":[251],"WP_Image_Editor::get_output_format":[265],"WP_Image_Editor::generate_filename":[297],"WP_Theme::scandir":[976],"get_comment_link":[500],"get_trackback_url":[708],"weblog_ping":[1949],"get_temp_dir":[1414,1417,1422,1427],"wp_upload_dir":[1541,1548,1586],"load_muplugin_textdomain":[444],"user_trailingslashit":[37],"get_attachment_link":[318],"get_post_comments_feed_link":[480],"get_author_feed_link":[549],"get_term_feed_link":[618],"get_search_feed_link":[786],"get_post_type_archive_feed_link":[872],"get_pagenum_link":[1433,1455,1461],"get_comments_pagenum_link":[1697,1703],"paginate_comments_links":[1825],"insert_blog":[1107],"plugin_dir_path":[587],"plugin_dir_url":[600],"_wp_link_page":[704,706],"WP_Rewrite::mod_rewrite_rules":[1646,1650]}},"is_front_page":{"doc":"\/**\n * Is the query for the front page of the site?\n *\n * This is for what is displayed at your site's main URL.\n *\n * Depends on the site's \"Front page displays\" Reading Settings 'show_on_front' and 'page_on_front'.\n *\n * If you set a static page for the front page of your site, this function will return\n * true when viewing that page.\n *\n * Otherwise the same as @see is_home()\n *\n * @see WP_Query::is_front_page()\n * @since 2.5.0\n * @uses is_home()\n * @uses get_option()\n *\n * @return bool True, if front of site.\n *\/","file":"query.php","line":412,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[416],"__":[416],"is_front_page":[420]},"used_by":{"redirect_canonical":[214,365,351,351],"wp_title":[534,534],"_wp_menu_item_classes_by_context":[393],"get_body_class":[408],"wp_page_menu":[903],"is_front_page":[420],"__main":[30]}},"get_default_feed":{"doc":"\/**\n * Retrieve the default feed.\n *\n * The default feed is 'rss2', unless a plugin changes it through the\n * 'default_feed' filter.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.5\n * @uses apply_filters() Calls 'default_feed' hook on the default feed string.\n *\n * @return string Default feed, or for example 'rss2', 'atom', etc.\n *\/","file":"feed.php","line":65,"missingDoc":false,"filters":["'default_feed'"],"uses":[],"used_by":{"redirect_canonical":[236,238,235,244],"get_the_content_feed":[147],"get_the_category_rss":[303],"feed_content_type":[503],"do_feed":[1005],"feed_links":[1610],"get_feed_link":[437,445],"get_post_comments_feed_link":[472,481],"get_author_feed_link":[538,544],"get_term_feed_link":[597,613],"get_search_feed_link":[779],"get_search_comments_feed_link":[808],"get_post_type_archive_feed_link":[864],"WP_Query::is_feed":[3286]}},"get_feed_link":{"doc":"\/**\n * Retrieve the permalink for the feed type.\n *\n * @since 1.5.0\n *\n * @param string $feed Optional, defaults to default feed. Feed type.\n * @return string\n *\/","file":"link-template.php","line":427,"missingDoc":false,"filters":["'feed_link'"],"uses":{"get_feed_permastruct":[430],"str_replace":[433,440,448],"get_comment_feed_permastruct":[434],"strpos":[432,447],"get_default_feed":[437,445],"preg_replace":[441],"home_url":[442,450],"user_trailingslashit":[442]},"used_by":{"redirect_canonical":[250],"get_bloginfo":[421,424,427,430,433,436],"feed_links":[1609,1610],"the_feed_link":[415]}},"wp_redirect":{"doc":"\/**\n * Redirects to another page.\n *\n * @since 1.5.1\n * @uses apply_filters() Calls 'wp_redirect' hook on $location and $status.\n *\n * @param string $location The path to redirect to\n * @param int $status Status code to use\n * @return bool False if $location is not set\n *\/","file":"pluggable.php","line":863,"missingDoc":false,"filters":["'wp_redirect'","'wp_redirect_status'"],"uses":{"wp_sanitize_redirect":[872],"status_header":[875],"php_sapi_name":[874],"header":[877]},"used_by":{"redirect_canonical":[251,288,430],"wp_redirect_admin_locations":[521,531],"WP_Customize_Manager::after_setup_theme":[151],"spawn_cron":[233],"wp_not_installed":[436],"wpmu_admin_do_redirect":[233,237,248],"maybe_redirect_404":[1656],"auth_redirect":[752,755,771,774,789],"wp_safe_redirect":[924],"wp_old_slug_redirect":[3611]}},"network_site_url":{"doc":"\/**\n * Retrieve the site url for the current network.\n *\n * Returns the site url with the appropriate protocol, 'https' if\n * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is\n * overridden.\n *\n * @package WordPress\n * @since 3.0.0\n *\n * @param string $path Optional. Path relative to the site url.\n * @param string $scheme Optional. Scheme to give the site url context. See set_url_scheme().\n * @return string Site url link with optional path appended.\n*\/","file":"link-template.php","line":2103,"missingDoc":false,"filters":["'network_site_url'"],"uses":{"site_url":[2107],"is_multisite":[2106],"set_url_scheme":[2112],"ltrim":[2115],"is_string":[2114],"strpos":[2114]},"used_by":{"redirect_canonical":[285],"wp_lostpassword_url":[319],"network_admin_url":[2170],"user_admin_url":[2189],"wpmu_signup_blog_notification":[728],"wp_version_check":[57]}},"site_url":{"doc":"\/**\n * Retrieve the site url for the current site.\n *\n * Returns the 'site_url' option with the appropriate protocol, 'https' if\n * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is\n * overridden.\n *\n * @package WordPress\n * @since 2.6.0\n *\n * @uses get_site_url()\n *\n * @param string $path Optional. Path relative to the site url.\n * @param string $scheme Optional. Scheme to give the site url context. See set_url_scheme().\n * @return string Site url link with optional path appended.\n*\/","file":"link-template.php","line":1944,"missingDoc":false,"filters":[],"uses":{"get_site_url":[1945]},"used_by":{"redirect_canonical":[287],"wp_redirect_admin_locations":[517,518,528,531],"wp_xmlrpc_server::wp_getUsersBlogs":[494],"wp_xmlrpc_server::blogger_getUsersBlogs":[3648],"comment_form":[1559],"spawn_cron":[248],"WP_Widget_RSS::widget":[759],"translate_smiley":[1741],"do_robots":[1081],"wp_logout_url":[218],"wp_login_url":[238],"wp_login_form":[276],"wp_register":[341],"get_bloginfo":[415],"includes_url":[2024],"network_site_url":[2107],"wpmu_signup_user_notification":[796],"newblog_notify_siteadmin":[1024],"get_the_password_form":[1225],"WP_Rewrite::mod_rewrite_rules":[1644],"wp_default_scripts":[52],"wp_default_styles":[494],"get_theme_root_uri":[483]}},"is_404":{"doc":"\/**\n * Is the query a 404 (returns no results)?\n *\n * @see WP_Query::is_404()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":704,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[708],"__":[708],"is_404":[712]},"used_by":{"redirect_canonical":[92,351],"wp_redirect_admin_locations":[510],"WP::handle_404":[503],"wp_title":[584],"maybe_redirect_404":[1653],"get_body_class":[424],"is_404":[712],"wp_old_slug_redirect":[3569],"__main":[27,30,26]}},"rawurlencode_deep":{"doc":"\/**\n * Navigates through an array and raw encodes the values to be used in a URL.\n *\n * @since 3.4.0\n *\n * @param array|string $value The array or string to be encoded.\n * @return array|string $value The encoded array (or string from the callback).\n *\/","file":"formatting.php","line":1452,"missingDoc":false,"filters":[],"uses":{"is_array":[1453],"array_map":[1453],"rawurlencode":[1453]},"used_by":{"redirect_canonical":[306]}},"redirect_canonical::lowercase_octets":{"doc":"","file":"canonical.php","line":414,"missingDoc":true,"filters":[],"uses":{"strtolower":[415]},"used_by":[]},"wp_redirect_admin_locations":{"doc":"","file":"canonical.php","line":508,"missingDoc":true,"filters":[],"uses":{"is_404":[510],"using_permalinks":[510],"home_url":[514,515,516,526,527],"site_url":[517,518,528,531],"wp_redirect":[521,531],"admin_url":[521],"in_array":[520,530],"untrailingslashit":[520,530]},"used_by":[]},"untrailingslashit":{"doc":"\/**\n * Removes trailing slash if it exists.\n *\n * The primary use of this is for paths and thus should be used for paths. It is\n * not restricted to paths and offers no specific path support.\n *\n * @since 2.2.0\n *\n * @param string $string What to remove the trailing slash from.\n * @return string String without the trailing slash.\n *\/","file":"formatting.php","line":1382,"missingDoc":false,"filters":[],"uses":{"rtrim":[1383]},"used_by":{"wp_redirect_admin_locations":[520,530],"WP_Widget_RSS::widget":[759],"trailingslashit":[1368],"wp_upload_dir":[1583],"_config_wp_home":[2376],"_config_wp_siteurl":[2396],"user_trailingslashit":[39],"install_blog":[1153],"recurse_dirsize":[1439],"_wp_menu_item_classes_by_context":[366,369,370,384,384,397],"get_option":[89]}},"WP_Roles::__construct":{"doc":"\/**\n * Constructor\n *\n * @since 2.0.0\n *\/","file":"capabilities.php","line":80,"missingDoc":false,"filters":[],"uses":{"_init":[81]},"used_by":[]},"WP_Roles::_init":{"doc":"\/**\n * Set up the object properties.\n *\n * The role key is set to the current prefix for the $wpdb object with\n * 'user_roles' appended. If the $wp_user_roles global is set, then it will\n * be used and the role option will not be updated or used.\n *\n * @since 2.1.0\n * @access protected\n * @uses $wpdb Used to get the database prefix.\n * @global array $wp_user_roles Used to set the 'roles' property value.\n *\/","file":"capabilities.php","line":96,"missingDoc":false,"filters":[],"uses":{"get_option":[103],"array_keys":[111]},"used_by":[]},"WP_Roles::reinit":{"doc":"\/**\n * Reinitialize the object\n *\n * Recreates the role objects. This is typically called only by switch_to_blog()\n * after switching wpdb to a new blog ID.\n *\n * @since 3.5.0\n * @access public\n *\/","file":"capabilities.php","line":126,"missingDoc":false,"filters":[],"uses":{"get_option":[135],"array_keys":[141]},"used_by":[]},"WP_Roles::add_role":{"doc":"\/**\n * Add role name with capabilities to list.\n *\n * Updates the list of roles, if the role doesn't already exist.\n *\n * The capabilities are defined in the following format `array( 'read' => true );`\n * To explicitly deny a role a capability you set the value for that capability to false.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name.\n * @param string $display_name Role display name.\n * @param array $capabilities List of role capabilities in the above format.\n * @return null|WP_Role WP_Role object if role is added, null if already exists.\n *\/","file":"capabilities.php","line":163,"missingDoc":false,"filters":[],"uses":{"update_option":[172]},"used_by":[]},"update_option":{"doc":"\/**\n * Update the value of an option that was already added.\n *\n * You do not need to serialize values. If the value needs to be serialized, then\n * it will be serialized before it is inserted into the database. Remember,\n * resources can not be serialized or added as an option.\n *\n * If the option does not exist, then the option will be added with the option\n * value, but you will not be able to set whether it is autoloaded. If you want\n * to set whether an option is autoloaded, then you need to use the add_option().\n *\n * @since 1.0.0\n * @package WordPress\n * @subpackage Option\n *\n * @uses apply_filters() Calls 'pre_update_option_$option' hook to allow overwriting the\n * \toption value to be stored.\n * @uses do_action() Calls 'update_option' hook before updating the option.\n * @uses do_action() Calls 'update_option_$option' and 'updated_option' hooks on success.\n *\n * @param string $option Option name. Expected to not be SQL-escaped.\n * @param mixed $newvalue Option value. Expected to not be SQL-escaped.\n * @return bool False if value was not updated and true if value was updated.\n *\/","file":"option.php","line":215,"missingDoc":false,"filters":["'pre_update_option_' . $option","'update_option'","\"update_option_{$option}\"","'updated_option'"],"uses":{"trim":[218],"wp_protect_special_option":[222],"is_object":[224],"sanitize_option":[227],"get_option":[228],"add_option":[236],"wp_cache_get":[238],"wp_cache_set":[241,252,254],"is_array":[239],"maybe_serialize":[245],"wp_load_alloptions":[249],"defined":[248],"update":[258]},"used_by":{"WP_Roles::add_role":[172],"WP_Roles::remove_role":[195],"WP_Roles::add_cap":[214],"WP_Roles::remove_cap":[232],"WP_Customize_Setting::_update_option":[203,209],"WP_Theme::get_allowed_on_site":[1148,1152],"wp_xmlrpc_server::wp_setOptions":[3239],"_set_cron_array":[384],"_upgrade_cron_array":[412],"update_blog_details":[334],"update_blog_option":[473,476],"wpmu_create_blog":[986,990],"install_blog":[1155,1156,1159,1161,1163,1164],"update_posts_count":[1499],"global_terms":[1570],"set_transient":[510,511],"update_site_option":[911],"register_uninstall_hook":[688],"stick_post":[2073],"unstick_post":[2100],"wp_delete_post":[2339],"WP_Rewrite::wp_rewrite_rules":[1620],"WP_Rewrite::set_permalink_structure":[1944],"WP_Rewrite::set_category_base":[1964],"WP_Rewrite::set_tag_base":[1983],"_get_term_hierarchy":[2776],"switch_theme":[679,680,683,684,692,699],"get_theme_mods":[754],"set_theme_mod":[802],"remove_theme_mod":[828],"check_theme_switched":[1617],"WP_Widget::save_settings":[287],"wp_set_sidebars_widgets":[1042],"wp_convert_widget_settings":[1112,1117]}},"WP_Roles::remove_role":{"doc":"\/**\n * Remove role by name.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name.\n *\/","file":"capabilities.php","line":186,"missingDoc":false,"filters":[],"uses":{"update_option":[195]},"used_by":[]},"WP_Roles::add_cap":{"doc":"\/**\n * Add capability to role.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name.\n * @param string $cap Capability name.\n * @param bool $grant Optional, default is true. Whether role is capable of performing capability.\n *\/","file":"capabilities.php","line":208,"missingDoc":false,"filters":[],"uses":{"update_option":[214]},"used_by":[]},"WP_Roles::remove_cap":{"doc":"\/**\n * Remove capability from role.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name.\n * @param string $cap Capability name.\n *\/","file":"capabilities.php","line":226,"missingDoc":false,"filters":[],"uses":{"update_option":[232]},"used_by":[]},"WP_Roles::get_role":{"doc":"\/**\n * Retrieve role object by name.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name.\n * @return object|null Null, if role does not exist. WP_Role object, if found.\n *\/","file":"capabilities.php","line":244,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Roles::get_names":{"doc":"\/**\n * Retrieve list of role names.\n *\n * @since 2.0.0\n * @access public\n *\n * @return array List of role names.\n *\/","file":"capabilities.php","line":259,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Roles::is_role":{"doc":"\/**\n * Whether role name is currently in the list of available roles.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name to look up.\n * @return bool\n *\/","file":"capabilities.php","line":272,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Role::__construct":{"doc":"\/**\n * Constructor - Set up object properties.\n *\n * The list of capabilities, must have the key as the name of the capability\n * and the value a boolean of whether it is granted to the role.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name.\n * @param array $capabilities List of capabilities.\n *\/","file":"capabilities.php","line":315,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Role::add_cap":{"doc":"\/**\n * Assign role a capability.\n *\n * @see WP_Roles::add_cap() Method uses implementation for role.\n * @since 2.0.0\n * @access public\n *\n * @param string $cap Capability name.\n * @param bool $grant Whether role has capability privilege.\n *\/","file":"capabilities.php","line":330,"missingDoc":false,"filters":[],"uses":{"add_cap":[337]},"used_by":[]},"WP_Role::remove_cap":{"doc":"\/**\n * Remove capability from role.\n *\n * This is a container for {@link WP_Roles::remove_cap()} to remove the\n * capability from the role. That is to say, that {@link\n * WP_Roles::remove_cap()} implements the functionality, but it also makes\n * sense to use this class, because you don't need to enter the role name.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $cap Capability name.\n *\/","file":"capabilities.php","line":353,"missingDoc":false,"filters":[],"uses":{"remove_cap":[360]},"used_by":[]},"WP_Role::has_cap":{"doc":"\/**\n * Whether role has capability.\n *\n * The capabilities is passed through the 'role_has_cap' filter. The first\n * parameter for the hook is the list of capabilities the class has\n * assigned. The second parameter is the capability name to look for. The\n * third and final parameter for the hook is the role name.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $cap Capability name.\n * @return bool True, if user has capability. False, if doesn't have capability.\n *\/","file":"capabilities.php","line":377,"missingDoc":false,"filters":["'role_has_cap'"],"uses":[],"used_by":[]},"WP_User::__construct":{"doc":"\/**\n * Constructor\n *\n * Retrieves the userdata and passes it to {@link WP_User::init()}.\n *\n * @since 2.0.0\n * @access public\n *\n * @param int|string|stdClass|WP_User $id User's ID, a WP_User object, or a user object from the DB.\n * @param string $name Optional. User's username\n * @param int $blog_id Optional Blog ID, defaults to current blog.\n * @return WP_User\n *\/","file":"capabilities.php","line":473,"missingDoc":false,"filters":[],"uses":{"init":[487,490,505],"is_object":[489],"is_a":[486],"is_numeric":[494]},"used_by":[]},"init":{"doc":"\/**\n * Set up constants with default values, unless user overrides.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\/","file":"rss.php","line":628,"missingDoc":false,"filters":[],"uses":{"define":[633,637,641,645,649,653,666,670,675],"defined":[629,636,640,644,648,652,656,669,674]},"used_by":{"WP_User::__construct":[487,490,505],"SimplePie::__construct":[710],"SimplePie::init":[1311],"SimplePie::fetch_data":[1489],"WP::main":[546],"WP_Scripts::__construct":[34],"fetch_feed":[542],"WP_Locale::__construct":[317],"get_user_by":[142],"WP_Query::parse_query":[1429],"WP_Query::query":[2970],"WP_Rewrite::set_permalink_structure":[1945],"WP_Rewrite::set_category_base":[1965],"WP_Rewrite::set_tag_base":[1984],"WP_Rewrite::__construct":[1997],"fetch_rss":[402]}},"WP_User::init":{"doc":"\/**\n * Sets up object properties, including capabilities.\n *\n * @param object $data User DB row object\n * @param int $blog_id Optional. The blog id to initialize for\n *\/","file":"capabilities.php","line":514,"missingDoc":false,"filters":[],"uses":{"for_blog":[518]},"used_by":[]},"WP_User::get_data_by":{"doc":"\/**\n * Return only the main user fields\n *\n * @since 3.3.0\n *\n * @param string $field The field to query against: 'id', 'slug', 'email' or 'login'\n * @param string|int $value The field value\n * @return object Raw user object\n *\/","file":"capabilities.php","line":530,"missingDoc":false,"filters":[],"uses":{"is_numeric":[536],"absint":[538],"trim":[540],"wp_cache_get":[552,556,561,569],"sanitize_user":[560],"get_row":[573],"prepare":[573],"update_user_caches":[578]},"used_by":[]},"absint":{"doc":"\/**\n * Converts value to nonnegative integer.\n *\n * @since 2.5.0\n *\n * @param mixed $maybeint Data you wish to have converted to a nonnegative integer\n * @return int An nonnegative integer\n *\/","file":"functions.php","line":2790,"missingDoc":false,"filters":[],"uses":{"abs":[2791],"intval":[2791]},"used_by":{"WP_User::get_data_by":[538],"_WP_Editors::wp_link_query":[770],"wp_xmlrpc_server::_insert_post":[1041,1099],"wp_xmlrpc_server::wp_getPosts":[1473,1476],"wp_xmlrpc_server::wp_getTerms":[1855,1858],"wp_xmlrpc_server::wp_getUsers":[2094,2095],"wp_xmlrpc_server::wp_getComments":[2776,2780,2784],"wp_xmlrpc_server::wp_newComment":[2968,3008],"wp_xmlrpc_server::wp_getMediaLibrary":[3327,3329,3330],"wp_xmlrpc_server::blogger_getRecentPosts":[3780],"wp_xmlrpc_server::mw_getRecentPosts":[4753],"wp_xmlrpc_server::mt_getRecentPostTitles":[5007],"get_comments_number":[548],"WP_Comment_Query::query":[260,310,311],"wp_new_comment":[1386],"WP_Widget_Recent_Posts::widget":[562],"WP_Widget_Recent_Posts::form":[612],"WP_Widget_Recent_Comments::widget":[679],"WP_Widget_Recent_Comments::update":[708],"WP_Widget_Recent_Comments::form":[720],"sanitize_option":[2788],"number_format_i18n":[155],"get_status_header_desc":[796],"wp_get_archives":[888],"get_post_comments_feed_link":[466],"get_current_blog_id":[677],"add_image_size":[190,190],"add_metadata":[35],"update_metadata":[105],"delete_metadata":[188],"get_metadata":[271],"metadata_exists":[319],"get_metadata_by_mid":[354],"update_metadata_by_mid":[394],"delete_metadata_by_mid":[474],"get_post_custom":[1851],"is_sticky":[1913],"wp_get_recent_posts":[2634],"set_post_thumbnail":[5378],"WP_Query::parse_query":[1442,1443,1444,1445,1446,1447,1448,1449,1453,1454,1455,1456,1464],"WP_Query::parse_tax_query":[1808],"WP_Query::get_posts":[2025,2154,2158,2298,2306,2326,2529,2536],"url_to_postid":[288],"get_terms":[1208,1209],"WP_User_Query::prepare_query":[486]}},"sanitize_user":{"doc":"\/**\n * Sanitize username stripping out unsafe characters.\n *\n * Removes tags, octets, entities, and if strict is enabled, will only keep\n * alphanumeric, _, space, ., -, @. After sanitizing, it passes the username,\n * raw username (the username in the parameter), and the value of $strict as\n * parameters for the 'sanitize_user' filter.\n *\n * @since 2.0.0\n * @uses apply_filters() Calls 'sanitize_user' hook on username, raw username,\n *\t\tand $strict parameter.\n *\n * @param string $username The username to be sanitized.\n * @param bool $strict If set limits $username to specific characters. Default false.\n * @return string The sanitized username, after passing through filters.\n *\/","file":"formatting.php","line":886,"missingDoc":false,"filters":["'sanitize_user'"],"uses":{"wp_strip_all_tags":[888],"remove_accents":[889],"preg_replace":[891,892,896,900],"trim":[898]},"used_by":{"WP_User::get_data_by":[560],"wpmu_validate_user_signup":[436],"wpmu_signup_user":[677],"wpmu_create_user":[913],"wpmu_create_blog":[955],"wp_authenticate":[471],"validate_username":[1231],"wp_insert_user":[1303]}},"update_user_caches":{"doc":"\/**\n * Update all user caches\n *\n * @since 3.0.0\n *\n * @param object $user User object to be cached\n *\/","file":"user.php","line":1162,"missingDoc":false,"filters":[],"uses":{"wp_cache_add":[1163,1164,1165,1166]},"used_by":{"WP_User::get_data_by":[578],"cache_users":[170]}},"WP_User::__isset":{"doc":"\/**\n * Magic method for checking the existence of a certain custom field\n *\n * @since 3.3.0\n *\/","file":"capabilities.php","line":588,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[590],"__":[590],"metadata_exists":[600]},"used_by":[]},"metadata_exists":{"doc":"\/**\n * Determine if a meta key is set for a given object\n *\n * @since 3.3.0\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int $object_id ID of the object metadata is for\n * @param string $meta_key Metadata key.\n * @return boolean true of the key is set, false if not.\n *\/","file":"meta.php","line":315,"missingDoc":false,"filters":["\"get_{$meta_type}_metadata\""],"uses":{"absint":[319],"wp_cache_get":[326],"update_meta_cache":[329]},"used_by":{"WP_User::__isset":[600],"WP_Post::__isset":[612]}},"WP_User::__get":{"doc":"\/**\n * Magic method for accessing custom fields\n *\n * @since 3.3.0\n *\/","file":"capabilities.php","line":608,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[610],"__":[610],"get_user_meta":[619],"sanitize_user_field":[623]},"used_by":[]},"get_user_meta":{"doc":"\/**\n * Retrieve user meta field for a user.\n *\n * @since 3.0.0\n * @uses get_metadata()\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/get_user_meta\n *\n * @param int $user_id Post ID.\n * @param string $key Optional. The meta key to retrieve. By default, returns data for all keys.\n * @param bool $single Whether to return a single value.\n * @return mixed Will be an array if $single is false. Will be value of meta data field if $single\n *  is true.\n *\/","file":"user.php","line":836,"missingDoc":false,"filters":[],"uses":{"get_metadata":[837]},"used_by":{"WP_User::__get":[619],"WP_User::_init_caps":[714],"get_active_blog_for_user":[79,105,107],"add_user_to_blog":[188],"remove_user_from_blog":[226],"wpmu_create_blog":[992],"get_blogs_of_user":[690],"wp_update_user":[1462]}},"sanitize_user_field":{"doc":"\/**\n * Sanitize user field based on context.\n *\n * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The\n * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display'\n * when calling filters.\n *\n * @since 2.3.0\n * @uses apply_filters() Calls 'edit_$field' passing $value and $user_id if $context == 'edit'.\n *  $field is prefixed with 'user_' if it isn't already.\n * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db'. $field is prefixed with\n *  'user_' if it isn't already.\n * @uses apply_filters() Calls '$field' passing $value, $user_id and $context if $context == anything\n *  other than 'raw', 'edit' and 'db'. $field is prefixed with 'user_' if it isn't already.\n *\n * @param string $field The user Object field name.\n * @param mixed $value The user Object value.\n * @param int $user_id user ID.\n * @param string $context How to sanitize user fields. Looks for 'raw', 'edit', 'db', 'display',\n *               'attribute' and 'js'.\n * @return mixed Sanitized value.\n *\/","file":"user.php","line":1106,"missingDoc":false,"filters":["\"edit_{$field}\"","\"edit_user_{$field}\"","\"pre_{$field}\"","\"pre_user_{$field}\"","\"user_{$field}\""],"uses":{"in_array":[1108],"is_string":[1114],"is_numeric":[1114],"strpos":[1117],"esc_html":[1127],"esc_attr":[1129,1148],"esc_url":[1145],"esc_js":[1150]},"used_by":{"WP_User::__get":[623],"sanitize_user_object":[2691,2699]}},"WP_User::__set":{"doc":"\/**\n * Magic method for setting custom fields\n *\n * @since 3.3.0\n *\/","file":"capabilities.php","line":634,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[636],"__":[636]},"used_by":[]},"WP_User::exists":{"doc":"\/**\n * Determine whether the user exists in the database.\n *\n * @since 3.4.0\n * @access public\n *\n * @return bool True if user exists in the database, false if not.\n *\/","file":"capabilities.php","line":652,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_User::get":{"doc":"\/**\n * Retrieve the value of a property or meta key.\n *\n * Retrieves from the users and usermeta table.\n *\n * @since 3.3.0\n *\n * @param string $key Property\n *\/","file":"capabilities.php","line":665,"missingDoc":false,"filters":[],"uses":{"__get":[666]},"used_by":[]},"WP_User::has_prop":{"doc":"\/**\n * Determine whether a property or meta key is set\n *\n * Consults the users and usermeta tables.\n *\n * @since 3.3.0\n *\n * @param string $key Property\n *\/","file":"capabilities.php","line":678,"missingDoc":false,"filters":[],"uses":{"__isset":[679]},"used_by":[]},"WP_User::to_array":{"doc":"","file":"capabilities.php","line":689,"missingDoc":true,"filters":[],"uses":{"get_object_vars":[690]},"used_by":[]},"WP_User::_init_caps":{"doc":"\/**\n * Set up capability object properties.\n *\n * Will set the value for the 'cap_key' property to current database table\n * prefix, followed by 'capabilities'. Will then check to see if the\n * property matching the 'cap_key' exists and is an array. If so, it will be\n * used.\n *\n * @access protected\n * @since 2.1.0\n *\n * @param string $cap_key Optional capability key\n *\/","file":"capabilities.php","line":706,"missingDoc":false,"filters":[],"uses":{"get_user_meta":[714],"is_array":[716],"get_role_caps":[719]},"used_by":[]},"WP_User::get_role_caps":{"doc":"\/**\n * Retrieve all of the role capabilities and merge with individual capabilities.\n *\n * All of the capabilities of the roles the user belongs to are merged with\n * the users individual roles. This also means that the user can be denied\n * specific roles that their role might have, but the specific user isn't\n * granted permission to.\n *\n * @since 2.0.0\n * @uses $wp_roles\n * @access public\n *\/","file":"capabilities.php","line":734,"missingDoc":false,"filters":[],"uses":{"array_filter":[742],"array_keys":[742],"is_array":[741],"get_role":[747],"array_merge":[748,750]},"used_by":[]},"get_role":{"doc":"\/**\n * Retrieve role object.\n *\n * @see WP_Roles::get_role() Uses method to retrieve role object.\n * @since 2.0.0\n *\n * @param string $role Role name.\n * @return object\n *\/","file":"capabilities.php","line":1376,"missingDoc":false,"filters":[],"uses":{"get_role":[1382]},"used_by":{"WP_User::get_role_caps":[747],"get_role":[1382],"wp_xmlrpc_server::wp_getUsers":[2105]}},"WP_User::add_role":{"doc":"\/**\n * Add role to user.\n *\n * Updates the user's meta data option with capabilities and roles.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name.\n *\/","file":"capabilities.php","line":763,"missingDoc":false,"filters":[],"uses":{"update_user_meta":[765],"get_role_caps":[766],"update_user_level_from_caps":[767]},"used_by":[]},"update_user_meta":{"doc":"\/**\n * Update user meta field based on user ID.\n *\n * Use the $prev_value parameter to differentiate between meta fields with the\n * same key and user ID.\n *\n * If the meta field for the user does not exist, it will be added.\n *\n * @since 3.0.0\n * @uses update_metadata\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/update_user_meta\n *\n * @param int $user_id Post ID.\n * @param string $meta_key Metadata key.\n * @param mixed $meta_value Metadata value.\n * @param mixed $prev_value Optional. Previous value to check before removing.\n * @return bool False on failure, true if success.\n *\/","file":"user.php","line":858,"missingDoc":false,"filters":[],"uses":{"update_metadata":[859]},"used_by":{"WP_User::add_role":[765],"WP_User::remove_role":[782],"WP_User::set_role":[812],"WP_User::update_user_level_from_caps":[859],"WP_User::add_cap":[873],"WP_User::remove_cap":[888],"get_active_blog_for_user":[83,91,106,108],"add_user_to_blog":[189,191],"remove_user_from_blog":[239,240,254,255],"wpmu_create_blog":[993],"add_new_user_to_blog":[1725],"update_user_option":[284],"wp_insert_user":[1407]}},"WP_User::remove_role":{"doc":"\/**\n * Remove role from user.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name.\n *\/","file":"capabilities.php","line":778,"missingDoc":false,"filters":[],"uses":{"in_array":[779],"update_user_meta":[782],"get_role_caps":[783],"update_user_level_from_caps":[784]},"used_by":[]},"WP_User::set_role":{"doc":"\/**\n * Set the role of the user.\n *\n * This will remove the previous roles of the user and assign the user the\n * new one. You can set the role to an empty string and it will remove all\n * of the roles from the user.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $role Role name.\n *\/","file":"capabilities.php","line":799,"missingDoc":false,"filters":["'set_user_role'"],"uses":{"count":[800],"current":[800],"update_user_meta":[812],"get_role_caps":[813],"update_user_level_from_caps":[814]},"used_by":[]},"WP_User::level_reduction":{"doc":"\/**\n * Choose the maximum level the user has.\n *\n * Will compare the level from the $item parameter against the $max\n * parameter. If the item is incorrect, then just the $max parameter value\n * will be returned.\n *\n * Used to get the max level based on the capabilities the user has. This\n * is also based on roles, so if the user is assigned the Administrator role\n * then the capability 'level_10' will exist and the user will get that\n * value.\n *\n * @since 2.0.0\n * @access public\n *\n * @param int $max Max level of user.\n * @param string $item Level capability name.\n * @return int Max Level.\n *\/","file":"capabilities.php","line":837,"missingDoc":false,"filters":[],"uses":{"intval":[839],"max":[840],"preg_match":[838]},"used_by":[]},"WP_User::update_user_level_from_caps":{"doc":"\/**\n * Update the maximum user level for the user.\n *\n * Updates the 'user_level' user metadata (includes prefix that is the\n * database table prefix) with the maximum user level. Gets the value from\n * the all of the capabilities that the user has.\n *\n * @since 2.0.0\n * @access public\n *\/","file":"capabilities.php","line":856,"missingDoc":false,"filters":[],"uses":{"array_reduce":[858],"array_keys":[858],"update_user_meta":[859]},"used_by":[]},"WP_User::add_cap":{"doc":"\/**\n * Add capability and grant or deny access to capability.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $cap Capability name.\n * @param bool $grant Whether to grant capability to user.\n *\/","file":"capabilities.php","line":871,"missingDoc":false,"filters":[],"uses":{"update_user_meta":[873]},"used_by":[]},"WP_User::remove_cap":{"doc":"\/**\n * Remove capability from user.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string $cap Capability name.\n *\/","file":"capabilities.php","line":884,"missingDoc":false,"filters":[],"uses":{"update_user_meta":[888]},"used_by":[]},"WP_User::remove_all_caps":{"doc":"\/**\n * Remove all of the capabilities of the user.\n *\n * @since 2.1.0\n * @access public\n *\/","file":"capabilities.php","line":897,"missingDoc":false,"filters":[],"uses":{"delete_user_meta":[900,901],"get_role_caps":[902]},"used_by":[]},"delete_user_meta":{"doc":"\/**\n * Remove metadata matching criteria from a user.\n *\n * You can match based on the key, or key and value. Removing based on key and\n * value, will keep from removing duplicate metadata with the same key. It also\n * allows removing all metadata matching key, if needed.\n *\n * @since 3.0.0\n * @uses delete_metadata()\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/delete_user_meta\n *\n * @param int $user_id user ID\n * @param string $meta_key Metadata name.\n * @param mixed $meta_value Optional. Metadata value.\n * @return bool False for failure. True for success.\n *\/","file":"user.php","line":819,"missingDoc":false,"filters":[],"uses":{"delete_metadata":[820]},"used_by":{"WP_User::remove_all_caps":[900,901],"update_user_option":[282],"delete_user_option":[307]}},"WP_User::has_cap":{"doc":"\/**\n * Whether user has capability or role name.\n *\n * This is useful for looking up whether the user has a specific role\n * assigned to the user. The second optional parameter can also be used to\n * check for capabilities against a specific object, such as a post or user.\n *\n * @since 2.0.0\n * @access public\n *\n * @param string|int $cap Capability or role name to search.\n * @return bool True, if user has capability; false, if user does not have capability.\n *\/","file":"capabilities.php","line":918,"missingDoc":false,"filters":["'user_has_cap'"],"uses":{"_deprecated_argument":[920],"__":[920],"translate_level_to_cap":[921],"is_numeric":[919],"array_slice":[924],"func_get_args":[924],"array_merge":[925],"call_user_func_array":[926],"in_array":[930],"is_multisite":[929],"is_super_admin":[929]},"used_by":[]},"WP_User::translate_level_to_cap":{"doc":"\/**\n * Convert numeric level to level capability name.\n *\n * Prepends 'level_' to level number.\n *\n * @since 2.0.0\n * @access public\n *\n * @param int $level Level number, 1 to 10.\n * @return string\n *\/","file":"capabilities.php","line":957,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_User::for_blog":{"doc":"\/**\n * Set the blog to operate on. Defaults to the current blog.\n *\n * @since 3.0.0\n *\n * @param int $blog_id Optional Blog ID, defaults to current blog.\n *\/","file":"capabilities.php","line":968,"missingDoc":false,"filters":[],"uses":{"get_blog_prefix":[971],"_init_caps":[974]},"used_by":[]},"map_meta_cap":{"doc":"\/**\n * Map meta capabilities to primitive capabilities.\n *\n * This does not actually compare whether the user ID has the actual capability,\n * just what the capability or capabilities are. Meta capability list value can\n * be 'delete_user', 'edit_user', 'remove_user', 'promote_user', 'delete_post',\n * 'delete_page', 'edit_post', 'edit_page', 'read_post', or 'read_page'.\n *\n * @since 2.0.0\n *\n * @param string $cap Capability name.\n * @param int $user_id User ID.\n * @return array Actual capabilities for meta capability.\n *\/","file":"capabilities.php","line":992,"missingDoc":false,"filters":["\"auth_post_meta_{$meta_key}\"","'map_meta_cap'"],"uses":{"array_slice":[993],"func_get_args":[993],"is_multisite":[1010,1183,1192,1205,1221,1228,1238,1244],"is_super_admin":[1010,1183,1192,1205,1221,1238,1246],"get_post":[1017,1020,1067,1070,1115,1118,1153,1161,1177],"get_post_type_object":[1023,1073,1121,1154,1162,1178],"get_current_user_id":[1039,1089,1143],"wp_get_current_user":[1039,1089,1143],"get_userdata":[1039,1089,1143],"get_post_meta":[1047,1097],"is_object":[1042,1092,1145],"get_post_status_object":[1131],"map_meta_cap":[1150,1163,1180],"is_protected_meta":[1171],"has_filter":[1167],"get_comment":[1176],"defined":[1183,1190,1203,1201,1219],"get_site_option":[1230,1246],"get_option":[1252],"_post_type_meta_capabilities":[1259],"array_merge":[1261],"call_user_func_array":[1262]},"used_by":{"map_meta_cap":[1150,1163,1180]}},"get_post_status_object":{"doc":"\/**\n * Retrieve a post status object by name\n *\n * @package WordPress\n * @subpackage Post\n * @since 3.0.0\n * @uses $wp_post_statuses\n * @see register_post_status\n * @see get_post_statuses\n *\n * @param string $post_status The name of a registered post status\n * @return object A post status object\n *\/","file":"post.php","line":999,"missingDoc":false,"filters":[],"uses":[],"used_by":{"map_meta_cap":[1131],"wp_xmlrpc_server::_insert_post":[1033],"WP_Query::get_posts":[2701]}},"is_protected_meta":{"doc":"\/**\n * Determine whether a meta key is protected\n *\n * @since 3.1.3\n *\n * @param string $meta_key Meta key\n * @return bool True if the key is protected, false otherwise.\n *\/","file":"meta.php","line":862,"missingDoc":false,"filters":["'is_protected_meta'"],"uses":[],"used_by":{"map_meta_cap":[1171],"register_meta":[898],"the_meta":[747]}},"has_filter":{"doc":"\/**\n * Check if any filter has been registered for a hook.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 2.5\n * @global array $wp_filter Stores all of the filters\n *\n * @param string $tag The name of the filter hook.\n * @param callback $function_to_check optional.\n * @return mixed If $function_to_check is omitted, returns boolean for whether the hook has anything registered.\n * \tWhen checking a specific function, the priority of that hook is returned, or false if the function is not attached.\n * \tWhen using the $function_to_check argument, this function may return a non-boolean value that evaluates to false\n * \t(e.g.) 0, so use the === operator for testing the return value.\n *\/","file":"plugin.php","line":89,"missingDoc":false,"filters":[],"uses":{"_wp_filter_build_unique_id":[96],"array_keys":[99]},"used_by":{"map_meta_cap":[1167],"WP::build_query_string":[430],"has_action":[510],"get_terms":[1241]}},"get_comment":{"doc":"\/**\n * Retrieves comment data given a comment ID or comment object.\n *\n * If an object is passed then the comment data will be cached and then returned\n * after being passed through a filter. If the comment is empty, then the global\n * comment variable will be used, if it is set.\n *\n * If the comment is empty, then the global comment variable will be used, if it\n * is set.\n *\n * @since 2.0.0\n * @uses $wpdb\n *\n * @param object|string|int $comment Comment to retrieve.\n * @param string $output Optional. OBJECT or ARRAY_A or ARRAY_N constants.\n * @return object|array|null Depends on $output value.\n *\/","file":"comment.php","line":130,"missingDoc":false,"filters":["'get_comment'"],"uses":{"is_object":[139],"wp_cache_add":[140,149],"wp_cache_get":[145],"get_row":[146],"prepare":[146],"get_object_vars":[158,161],"array_values":[161]},"used_by":{"map_meta_cap":[1176],"wp_xmlrpc_server::wp_getComment":[2728],"wp_xmlrpc_server::wp_deleteComment":[2827],"wp_xmlrpc_server::wp_editComment":[2882],"get_comment_author":[24],"get_comment_author_email":[62],"get_comment_author_IP":[182],"get_comment_author_url":[208],"get_comment_class":[302],"get_comment_date":[373],"get_comment_excerpt":[408],"get_comment_link":[475],"get_comment_text":[599],"comment_text":[613],"get_comment_type":[661],"get_comment_reply_link":[1048],"comment_form_title":[1204],"get_page_of_comment":[828],"wp_delete_comment":[999],"wp_trash_comment":[1051],"wp_spam_comment":[1107],"wp_get_comment_status":[1159],"wp_insert_comment":[1290],"wp_set_comment_status":[1444,1458,1469],"wp_update_comment":[1495,1527],"get_commentdata":[1264],"__main":[77],"get_comment_guid":[228],"wp_scheduled_delete":[3500],"get_edit_comment_link":[981],"wp_notify_postauthor":[990],"wp_notify_moderator":[1100]}},"get_site_option":{"doc":"\/**\n * Retrieve site option value based on name of option.\n *\n * @see get_option()\n * @package WordPress\n * @subpackage Option\n * @since 2.8.0\n *\n * @uses apply_filters() Calls 'pre_site_option_$option' before checking the option.\n * \tAny value other than false will \"short-circuit\" the retrieval of the option\n *\tand return the returned value.\n * @uses apply_filters() Calls 'site_option_$option', after checking the  option, with\n * \tthe option value.\n *\n * @param string $option Name of option to retrieve. Expected to not be SQL-escaped.\n * @param mixed $default Optional value to return if option doesn't exist. Default false.\n * @param bool $use_cache Whether to use cache. Multisite only. Default true.\n * @return mixed Value set for the option.\n *\/","file":"option.php","line":759,"missingDoc":false,"filters":["'pre_site_option_' . $option","'default_site_option_' . $option","'default_site_option_' . $option","'site_option_' . $option"],"uses":{"get_option":[769],"wp_cache_get":[773],"get_row":[776],"prepare":[776],"maybe_unserialize":[781],"wp_cache_set":[782],"is_object":[779],"is_multisite":[767]},"used_by":{"map_meta_cap":[1230,1246],"get_super_admins":[1438],"WP_Theme::get_allowed_on_network":[1091],"wp_cookie_constants":[159],"wp_upload_dir":[1546,1554],"global_terms_enabled":[3250],"get_locale":[42],"ms_upload_constants":[24],"get_user_count":[131],"get_blog_count":[145],"is_email_address_unsafe":[377],"wpmu_validate_user_signup":[448,474],"wpmu_validate_blog_signup":[551],"wpmu_signup_blog_notification":[733,736,736],"wpmu_signup_user_notification":[786,789,789],"wpmu_create_blog":[989],"newblog_notify_siteadmin":[1013,1016],"newuser_notify_siteadmin":[1051,1054],"install_blog":[1158],"wpmu_welcome_notification":[1220,1246,1251,1251],"wpmu_welcome_user_notification":[1284,1294,1299,1299],"check_upload_mimes":[1477],"upload_is_file_too_big":[1606,1610,1609],"get_dashboard_blog":[1788],"users_can_register_signup_filter":[1830],"get_space_allowed":[1964],"get_upload_space_available":[1981],"is_upload_space_available":[1999],"upload_size_limit_filter":[2011,2012],"wp_get_active_network_plugins":[40],"ms_site_check":[96],"add_site_option":[820],"update_site_option":[901],"get_site_transient":[997,1005],"set_site_transient":[1041],"wp_salt":[1361,1370],"script_concat_settings":[859,865]}},"_post_type_meta_capabilities":{"doc":"\/**\n * Stores or returns a list of post type meta caps for map_meta_cap().\n *\n * @since 3.1.0\n * @access private\n *\/","file":"post.php","line":1460,"missingDoc":false,"filters":[],"uses":{"in_array":[1465]},"used_by":{"map_meta_cap":[1259],"get_post_type_capabilities":[1449]}},"current_user_can_for_blog":{"doc":"\/**\n * Whether current user has a capability or role for a given blog.\n *\n * @since 3.0.0\n *\n * @param int $blog_id Blog ID\n * @param string $capability Capability or role name.\n * @return bool\n *\/","file":"capabilities.php","line":1301,"missingDoc":false,"filters":[],"uses":{"switch_to_blog":[1303],"is_multisite":[1302,1315],"wp_get_current_user":[1305],"array_slice":[1310],"func_get_args":[1310],"array_merge":[1311],"call_user_func_array":[1313],"restore_current_blog":[1316]},"used_by":[]},"author_can":{"doc":"\/**\n * Whether author of supplied post has capability or role.\n *\n * @since 2.9.0\n *\n * @param int|object $post Post ID or post object.\n * @param string $capability Capability or role name.\n * @return bool\n *\/","file":"capabilities.php","line":1330,"missingDoc":false,"filters":[],"uses":{"get_post":[1331],"get_userdata":[1334],"array_slice":[1339],"func_get_args":[1339],"array_merge":[1340],"call_user_func_array":[1342]},"used_by":{"WP_Embed::shortcode":[182]}},"user_can":{"doc":"\/**\n * Whether a particular user has capability or role.\n *\n * @since 3.1.0\n *\n * @param int|object $user User ID or object.\n * @param string $capability Capability or role name.\n * @return bool\n *\/","file":"capabilities.php","line":1354,"missingDoc":false,"filters":[],"uses":{"get_userdata":[1356],"is_object":[1355],"exists":[1358],"array_slice":[1361],"func_get_args":[1361],"array_merge":[1362],"call_user_func_array":[1364]},"used_by":{"wp_notify_moderator":[1105]}},"add_role":{"doc":"\/**\n * Add role, if it does not exist.\n *\n * @see WP_Roles::add_role() Uses method to add role.\n * @since 2.0.0\n *\n * @param string $role Role name.\n * @param string $display_name Display name for role.\n * @param array $capabilities List of capabilities, e.g. array( 'edit_posts' => true, 'delete_posts' => false );\n * @return null|WP_Role WP_Role object if role is added, null if already exists.\n *\/","file":"capabilities.php","line":1396,"missingDoc":false,"filters":[],"uses":{"add_role":[1402]},"used_by":{"add_role":[1402]}},"remove_role":{"doc":"\/**\n * Remove role, if it exists.\n *\n * @see WP_Roles::remove_role() Uses method to remove role.\n * @since 2.0.0\n *\n * @param string $role Role name.\n * @return null\n *\/","file":"capabilities.php","line":1414,"missingDoc":false,"filters":[],"uses":{"remove_role":[1420]},"used_by":{"remove_role":[1420]}},"get_super_admins":{"doc":"\/**\n * Retrieve a list of super admins.\n *\n * @since 3.0.0\n *\n * @uses $super_admins Super admins global variable, if set.\n *\n * @return array List of super admin logins\n *\/","file":"capabilities.php","line":1432,"missingDoc":false,"filters":[],"uses":{"get_site_option":[1438]},"used_by":{"is_super_admin":[1459]}},"get_category_link":{"doc":"\/**\n * Retrieve category link URL.\n *\n * @since 1.0.0\n * @see get_term_link()\n *\n * @param int|object $category Category ID or object.\n * @return string Link on success, empty string if category does not exist.\n *\/","file":"category-template.php","line":18,"missingDoc":false,"filters":[],"uses":{"is_object":[19],"get_term_link":[22],"is_wp_error":[24]},"used_by":{"get_category_parents":[59],"get_the_category_list":[174,177,184,197,200,207],"wp_xmlrpc_server::mw_getCategories":[4885]}},"get_category_parents":{"doc":"\/**\n * Retrieve category parents with separator.\n *\n * @since 1.2.0\n *\n * @param int $id Category ID.\n * @param bool $link Optional, default is false. Whether to format with link.\n * @param string $separator Optional, default is '\/'. How to separate categories.\n * @param bool $nicename Optional, default is false. Whether to use nice name for display.\n * @param array $visited Optional. Already linked to categories to prevent duplicates.\n * @return string\n *\/","file":"category-template.php","line":42,"missingDoc":false,"filters":[],"uses":{"get_category":[44],"is_wp_error":[45],"get_category_parents":[55],"in_array":[53],"esc_url":[59],"get_category_link":[59],"esc_attr":[59],"sprintf":[59],"__":[59]},"used_by":{"get_category_parents":[55],"get_the_category_list":[173,179,196,202],"get_permalink":[129]}},"get_category":{"doc":"\/**\n * Retrieves category data given a category ID or category object.\n *\n * If you pass the $category parameter an object, which is assumed to be the\n * category row object retrieved the database. It will cache the category data.\n *\n * If you pass $category an integer of the category ID, then that category will\n * be retrieved from the database, if it isn't already cached, and pass it back.\n *\n * If you look at get_term(), then both types will be passed through several\n * filters and finally sanitized based on the $filter parameter value.\n *\n * The category will converted to maintain backwards compatibility.\n *\n * @since 1.5.1\n * @uses get_term() Used to get the category data from the taxonomy.\n *\n * @param int|object $category Category ID or Category row object\n * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N\n * @param string $filter Optional. Default is raw or no WordPress defined filter will applied.\n * @return mixed Category data in type defined by $output parameter.\n *\/","file":"category.php","line":81,"missingDoc":false,"filters":[],"uses":{"get_term":[82],"is_wp_error":[83],"_make_cat_compat":[86]},"used_by":{"get_category_parents":[44],"get_the_category_by_ID":[138],"get_category_by_path":[137,142],"get_cat_name":[188],"get_linkcatname":[1144],"get_category_children":[1309],"get_permalink":[134]}},"get_the_category":{"doc":"\/**\n * Retrieve post categories.\n *\n * @since 0.71\n * @uses $post\n *\n * @param int $id Optional, default to current post ID. The post ID.\n * @return array\n *\/","file":"category-template.php","line":74,"missingDoc":false,"filters":["'get_the_categories'"],"uses":{"get_the_terms":[75],"is_wp_error":[76],"array_values":[79],"_make_cat_compat":[82],"array_keys":[81]},"used_by":{"get_the_category_list":[159],"the_category_ID":[85],"the_category_head":[111],"get_the_category_rss":[304],"get_permalink":[122],"get_post_class":[353]}},"get_the_terms":{"doc":"\/**\n * Retrieve the terms of the taxonomy that are attached to the post.\n *\n * @since 2.5.0\n *\n * @param mixed $post Post ID or object.\n * @param string $taxonomy Taxonomy name.\n * @return array|bool False on failure. Array of term objects on success.\n *\/","file":"category-template.php","line":1061,"missingDoc":false,"filters":["'get_the_terms'"],"uses":{"get_post":[1062],"get_object_term_cache":[1065],"wp_get_object_terms":[1067],"wp_cache_add":[1068]},"used_by":{"get_the_category":[75],"get_the_tags":[986],"get_the_term_list":[1092],"WP_Post::__get":[622,632],"get_post_format":[771]}},"_make_cat_compat":{"doc":"\/**\n * Update category structure to old pre 2.3 from new taxonomy structure.\n *\n * This function was added for the taxonomy support to update the new category\n * structure with the old category one. This will maintain compatibility with\n * plugins and themes which depend on the old key or property names.\n *\n * The parameter should only be passed a variable and not create the array or\n * object inline to the parameter. The reason for this is that parameter is\n * passed by reference and PHP will fail unless it has the variable.\n *\n * There is no return value, because everything is updated on the variable you\n * pass to it. This is one of the features with using pass by reference in PHP.\n *\n * @since 2.3.0\n * @access private\n *\n * @param array|object $category Category Row object or array\n *\/","file":"category.php","line":320,"missingDoc":false,"filters":[],"uses":{"is_array":[328],"is_object":[321]},"used_by":{"get_the_category":[82],"get_categories":[54],"get_category":[86],"get_category_by_slug":[158],"WP_Query::get_queried_object":[3009]}},"_usort_terms_by_name":{"doc":"\/**\n * Sort categories by name.\n *\n * Used by usort() as a callback, should not be used directly. Can actually be\n * used to sort any term object.\n *\n * @since 2.3.0\n * @access private\n *\n * @param object $a\n * @param object $b\n * @return int\n *\/","file":"category-template.php","line":102,"missingDoc":false,"filters":[],"uses":{"strcmp":[103]},"used_by":[]},"_usort_terms_by_ID":{"doc":"\/**\n * Sort categories by ID.\n *\n * Used by usort() as a callback, should not be used directly. Can actually be\n * used to sort any term object.\n *\n * @since 2.3.0\n * @access private\n *\n * @param object $a\n * @param object $b\n * @return int\n *\/","file":"category-template.php","line":119,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"get_the_category_by_ID":{"doc":"\/**\n * Retrieve category name based on category ID.\n *\n * @since 0.71\n *\n * @param int $cat_ID Category ID.\n * @return string Category name.\n *\/","file":"category-template.php","line":136,"missingDoc":false,"filters":[],"uses":{"get_category":[138],"is_wp_error":[139]},"used_by":{"the_category_head":[115]}},"get_the_category_list":{"doc":"\/**\n * Retrieve category list in either HTML list or custom format.\n *\n * @since 1.5.1\n *\n * @param string $separator Optional, default is empty string. Separator for between the categories.\n * @param string $parents Optional. How to display the parents.\n * @param int $post_id Optional. Post ID to retrieve categories.\n * @return string\n *\/","file":"category-template.php","line":154,"missingDoc":false,"filters":["'the_category'","'the_category'","'the_category'"],"uses":{"is_object_in_taxonomy":[156],"get_post_type":[156],"get_the_category":[159],"__":[161,174,177,184,197,200,207],"is_object":[163],"using_permalinks":[163],"strtolower":[170,193],"get_category_parents":[173,179,196,202],"esc_url":[174,177,184,197,200,207],"get_category_link":[174,177,184,197,200,207],"esc_attr":[174,177,184,197,200,207],"sprintf":[174,177,184,197,200,207]},"used_by":{"the_category":[250]}},"is_object_in_taxonomy":{"doc":"\/**\n * Determine if the given object type is associated with the given taxonomy.\n *\n * @since 3.0.0\n * @uses get_object_taxonomies()\n *\n * @param string $object_type Object type string\n * @param string $taxonomy Single taxonomy name\n * @return bool True if object is associated with the taxonomy, otherwise false.\n *\/","file":"taxonomy.php","line":3205,"missingDoc":false,"filters":[],"uses":{"get_object_taxonomies":[3206],"in_array":[3211]},"used_by":{"get_the_category_list":[156],"get_adjacent_post":[1136],"get_post_class":[352,361],"WP_Post::__get":[621,631],"wp_insert_post":[2903,2906],"wp_insert_attachment":[4024,4027]}},"get_post_type":{"doc":"\/**\n * Retrieve the post type of the current post or of a given post.\n *\n * @since 2.1.0\n *\n * @uses $post The Loop current post global\n *\n * @param mixed $post Optional. Post object or post ID.\n * @return bool|string post type or false on failure.\n *\/","file":"post.php","line":1074,"missingDoc":false,"filters":[],"uses":{"get_post":[1075]},"used_by":{"get_the_category_list":[156],"wp_xmlrpc_server::_insert_post":[1012],"is_nav_menu_item":[154],"wp_set_post_categories":[3232]}},"in_category":{"doc":"\/**\n * Check if the current post in within any of the given categories.\n *\n * The given categories are checked against the post's categories' term_ids, names and slugs.\n * Categories given as integers will only be checked against the post's categories' term_ids.\n *\n * Prior to v2.5 of WordPress, category names were not supported.\n * Prior to v2.7, category slugs were not supported.\n * Prior to v2.7, only one category could be compared: in_category( $single_category ).\n * Prior to v2.7, this function could only be used in the WordPress Loop.\n * As of 2.7, the function can be used anywhere if it is provided a post ID or post object.\n *\n * @since 1.2.0\n *\n * @param int|string|array $category Category ID, name or slug, or array of said.\n * @param int|object $post Optional. Post to check instead of the current post. (since 2.7.0)\n * @return bool True if the current post is in any of the given categories.\n *\/","file":"category-template.php","line":233,"missingDoc":false,"filters":[],"uses":{"has_term":[237]},"used_by":[]},"has_term":{"doc":"\/**\n * Check if the current post has any of given terms.\n *\n * The given terms are checked against the post's terms' term_ids, names and slugs.\n * Terms given as integers will only be checked against the post's terms' term_ids.\n * If no terms are given, determines if post has any terms.\n *\n * @since 3.1.0\n *\n * @param string|int|array $term Optional. The term name\/term_id\/slug or array of them to check for.\n * @param string $taxonomy Taxonomy name\n * @param int|object $post Optional. Post to check instead of the current post.\n * @return bool True if the current post has any of the given tags (or any tag, if no tag specified).\n *\/","file":"category-template.php","line":1181,"missingDoc":false,"filters":[],"uses":{"get_post":[1182],"is_object_in_term":[1187],"is_wp_error":[1188]},"used_by":{"in_category":[237],"has_category":[1143],"has_tag":[1164],"has_post_format":[792]}},"the_category":{"doc":"\/**\n * Display the category list for the post.\n *\n * @since 0.71\n *\n * @param string $separator Optional, default is empty string. Separator for between the categories.\n * @param string $parents Optional. How to display the parents.\n * @param int $post_id Optional. Post ID to retrieve categories.\n *\/","file":"category-template.php","line":249,"missingDoc":false,"filters":[],"uses":{"get_the_category_list":[250]},"used_by":[]},"category_description":{"doc":"\/**\n * Retrieve category description.\n *\n * @since 1.0.0\n *\n * @param int $category Optional. Category ID. Will use global category ID by default.\n * @return string Category description, available.\n *\/","file":"category-template.php","line":261,"missingDoc":false,"filters":[],"uses":{"term_description":[262]},"used_by":[]},"term_description":{"doc":"\/**\n * Retrieve term description.\n *\n * @since 2.8\n *\n * @param int $term Optional. Term ID. Will use global term ID by default.\n * @param string $taxonomy Optional taxonomy name. Defaults to 'post_tag'.\n * @return string Term description, available.\n *\/","file":"category-template.php","line":1042,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[1044],"is_tax":[1043],"is_tag":[1043],"is_category":[1043],"get_term_field":[1048],"is_wp_error":[1049]},"used_by":{"category_description":[262],"tag_description":[1030]}},"wp_dropdown_categories":{"doc":"\/**\n * Display or retrieve the HTML dropdown list of categories.\n *\n * The list of arguments is below:\n *     'show_option_all' (string) - Text to display for showing all categories.\n *     'show_option_none' (string) - Text to display for showing no categories.\n *     'orderby' (string) default is 'ID' - What column to use for ordering the\n * categories.\n *     'order' (string) default is 'ASC' - What direction to order categories.\n *     'show_count' (bool|int) default is 0 - Whether to show how many posts are\n * in the category.\n *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that\n * don't have any posts attached to them.\n *     'child_of' (int) default is 0 - See {@link get_categories()}.\n *     'exclude' (string) - See {@link get_categories()}.\n *     'echo' (bool|int) default is 1 - Whether to display or retrieve content.\n *     'depth' (int) - The max depth.\n *     'tab_index' (int) - Tab index for select element.\n *     'name' (string) - The name attribute value for select element.\n *     'id' (string) - The ID attribute value for select element. Defaults to name if omitted.\n *     'class' (string) - The class attribute value for select element.\n *     'selected' (int) - Which category ID is selected.\n *     'taxonomy' (string) - The name of the taxonomy to retrieve. Defaults to category.\n *\n * The 'hierarchical' argument, which is disabled by default, will override the\n * depth argument, unless it is true. When the argument is false, it will\n * display all of the categories. When it is enabled it will use the value in\n * the 'depth' argument.\n *\n * @since 2.1.0\n *\n * @param string|array $args Optional. Override default arguments.\n * @return string HTML content only if 'echo' argument is 0.\n *\/","file":"category-template.php","line":299,"missingDoc":false,"filters":["'list_cats'","'list_cats'","'list_cats'","'wp_dropdown_cats'"],"uses":{"is_category":[313],"get_query_var":[313],"_deprecated_argument":[317],"wp_parse_args":[321],"extract":[327],"get_terms":[333],"esc_attr":[334,335,336],"strval":[352,358],"walk_category_dropdown_tree":[367]},"used_by":{"WP_Widget_Categories::widget":[463],"dropdown_cats":[712]}},"walk_category_dropdown_tree":{"doc":"\/**\n * Retrieve HTML dropdown (select) content for category list.\n *\n * @uses Walker_CategoryDropdown to create HTML dropdown content.\n * @since 2.1.0\n * @see Walker_CategoryDropdown::walk() for parameters and return description.\n *\/","file":"category-template.php","line":748,"missingDoc":false,"filters":[],"uses":{"func_get_args":[749],"is_a":[751],"call_user_func_array":[756]},"used_by":{"wp_dropdown_categories":[367]}},"wp_list_categories":{"doc":"\/**\n * Display or retrieve the HTML list of categories.\n *\n * The list of arguments is below:\n *     'show_option_all' (string) - Text to display for showing all categories.\n *     'orderby' (string) default is 'ID' - What column to use for ordering the\n * categories.\n *     'order' (string) default is 'ASC' - What direction to order categories.\n *     'show_count' (bool|int) default is 0 - Whether to show how many posts are\n * in the category.\n *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that\n * don't have any posts attached to them.\n *     'use_desc_for_title' (bool|int) default is 1 - Whether to use the\n * description instead of the category title.\n *     'feed' - See {@link get_categories()}.\n *     'feed_type' - See {@link get_categories()}.\n *     'feed_image' - See {@link get_categories()}.\n *     'child_of' (int) default is 0 - See {@link get_categories()}.\n *     'exclude' (string) - See {@link get_categories()}.\n *     'exclude_tree' (string) - See {@link get_categories()}.\n *     'echo' (bool|int) default is 1 - Whether to display or retrieve content.\n *     'current_category' (int) - See {@link get_categories()}.\n *     'hierarchical' (bool) - See {@link get_categories()}.\n *     'title_li' (string) - See {@link get_categories()}.\n *     'depth' (int) - The max depth.\n *\n * @since 2.1.0\n *\n * @param string|array $args Optional. Override default arguments.\n * @return string HTML content only if 'echo' argument is 0.\n *\/","file":"category-template.php","line":412,"missingDoc":false,"filters":["'wp_list_categories'"],"uses":{"__":[414,422],"wp_parse_args":[427],"extract":[440],"taxonomy_exists":[442],"get_categories":[445],"esc_attr":[449],"get_option":[460,460,460],"get_permalink":[460],"home_url":[460],"esc_url":[461],"get_queried_object":[469],"get_queried_object_id":[471],"is_category":[468],"is_tax":[468],"is_tag":[468],"walk_category_tree":[479]},"used_by":{"WP_Widget_Categories::widget":[484],"wp_list_cats":[675],"__main":[63]}},"taxonomy_exists":{"doc":"\/**\n * Checks that the taxonomy name exists.\n *\n * Formerly is_taxonomy(), introduced in 2.3.0.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 3.0.0\n *\n * @uses $wp_taxonomies\n *\n * @param string $taxonomy Name of taxonomy object\n * @return bool Whether the taxonomy exists.\n *\/","file":"taxonomy.php","line":228,"missingDoc":false,"filters":[],"uses":[],"used_by":{"wp_list_categories":[442],"wp_xmlrpc_server::wp_newTerm":[1544],"wp_xmlrpc_server::wp_editTerm":[1632],"wp_xmlrpc_server::wp_deleteTerm":[1724],"wp_xmlrpc_server::wp_getTerm":[1791],"wp_xmlrpc_server::wp_getTerms":[1844],"wp_xmlrpc_server::wp_getTaxonomy":[1923],"WP_Widget_Tag_Cloud::_get_current_taxonomy":[1082],"is_taxonomy":[2542],"get_taxonomy":[208],"is_taxonomy_hierarchical":[253],"get_objects_in_term":[517],"WP_Tax_Query::clean_query":[747],"get_term":[879],"get_term_by":[947],"get_term_children":[1008],"get_terms":[1196],"wp_get_object_terms":[1900],"wp_insert_term":[2044],"wp_set_object_terms":[2175],"wp_update_term":[2352]}},"get_categories":{"doc":"\/**\n * Retrieve list of category objects.\n *\n * If you change the type to 'link' in the arguments, then the link categories\n * will be returned instead. Also all categories will be updated to be backwards\n * compatible with pre-2.3 plugins and themes.\n *\n * @since 2.1.0\n * @see get_terms() Type of arguments that can be changed.\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/get_categories\n *\n * @param string|array $args Optional. Change the defaults retrieving categories.\n * @return array List of categories.\n *\/","file":"category.php","line":39,"missingDoc":false,"filters":["'get_categories_taxonomy'"],"uses":{"wp_parse_args":[41],"_deprecated_argument":[47],"get_terms":[51],"_make_cat_compat":[54],"array_keys":[53]},"used_by":{"wp_list_categories":[445],"SimplePie::get_category":[2082],"wp_xmlrpc_server::wp_suggestCategories":[2694],"wp_xmlrpc_server::mw_getCategories":[4878],"wp_xmlrpc_server::mt_getCategoryList":[5077],"get_links_list":[1057],"SimplePie_Enclosure::get_category":[336],"SimplePie_Item::get_category":[419],"SimplePie_Source::get_category":[142]}},"walk_category_tree":{"doc":"\/**\n * Retrieve HTML list content for category list.\n *\n * @uses Walker_Category to create HTML list content.\n * @since 2.1.0\n * @see Walker_Category::walk() for parameters and return description.\n *\/","file":"category-template.php","line":730,"missingDoc":false,"filters":[],"uses":{"func_get_args":[731],"is_a":[733],"call_user_func_array":[738]},"used_by":{"wp_list_categories":[479]}},"wp_tag_cloud":{"doc":"\/**\n * Display tag cloud.\n *\n * The text size is set by the 'smallest' and 'largest' arguments, which will\n * use the 'unit' argument value for the CSS text size unit. The 'format'\n * argument can be 'flat' (default), 'list', or 'array'. The flat value for the\n * 'format' argument will separate tags with spaces. The list value for the\n * 'format' argument will format the tags in a UL HTML list. The array value for\n * the 'format' argument will return in PHP array type format.\n *\n * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'.\n * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC'.\n *\n * The 'number' argument is how many tags to return. By default, the limit will\n * be to return the top 45 tags in the tag cloud list.\n *\n * The 'topic_count_text_callback' argument is a function, which, given the count\n * of the posts  with that tag, returns a text for the tooltip of the tag link.\n *\n * The 'exclude' and 'include' arguments are used for the {@link get_tags()}\n * function. Only one should be used, because only one will be used and the\n * other ignored, if they are both set.\n *\n * @since 2.3.0\n *\n * @param array|string $args Optional. Override default arguments.\n * @return array Generated tag cloud, only if no failures and 'array' is set for the 'format' argument.\n *\/","file":"category-template.php","line":521,"missingDoc":false,"filters":["'wp_tag_cloud'"],"uses":{"wp_parse_args":[527],"get_terms":[529],"array_merge":[529],"is_wp_error":[531,539],"get_edit_tag_link":[536],"get_term_link":[538],"intval":[538],"wp_generate_tag_cloud":[546]},"used_by":{"WP_Widget_Tag_Cloud::widget":[1053]}},"get_edit_tag_link":{"doc":"\/**\n * Retrieve edit tag link.\n *\n * @since 2.7.0\n *\n * @param int $tag_id Tag ID\n * @param string $taxonomy Taxonomy\n * @return string\n *\/","file":"link-template.php","line":653,"missingDoc":false,"filters":["'get_edit_tag_link'"],"uses":{"get_edit_term_link":[654]},"used_by":{"wp_tag_cloud":[536]}},"wp_generate_tag_cloud":{"doc":"\/**\n * Generates a tag cloud (heatmap) from provided data.\n *\n * The text size is set by the 'smallest' and 'largest' arguments, which will\n * use the 'unit' argument value for the CSS text size unit. The 'format'\n * argument can be 'flat' (default), 'list', or 'array'. The flat value for the\n * 'format' argument will separate tags with spaces. The list value for the\n * 'format' argument will format the tags in a UL HTML list. The array value for\n * the 'format' argument will return in PHP array type format.\n *\n * The 'tag_cloud_sort' filter allows you to override the sorting.\n * Passed to the filter: $tags array and $args array, has to return the $tags array\n * after sorting it.\n *\n * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'.\n * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC' or\n * 'RAND'.\n *\n * The 'number' argument is how many tags to return. By default, the limit will\n * be to return the entire tag cloud list.\n *\n * The 'topic_count_text_callback' argument is a function, which given the count\n * of the posts  with that tag returns a text for the tooltip of the tag link.\n *\n * @todo Complete functionality.\n * @since 2.3.0\n *\n * @param array $tags List of tags.\n * @param string|array $args Optional, override default arguments.\n * @return string\n *\/","file":"category-template.php","line":607,"missingDoc":false,"filters":["'tag_cloud_sort'","'wp_generate_tag_cloud'"],"uses":{"var_export":[617,617],"create_function":[619],"wp_parse_args":[622],"extract":[623],"shuffle":[634],"uasort":[638,640],"array_reverse":[643],"array_slice":[648],"min":[657],"max":[658],"esc_url":[671],"esc_attr":[674],"call_user_func":[674],"str_replace":[675],"join":[685,689]},"used_by":{"wp_tag_cloud":[546]}},"default_topic_count_text":{"doc":"\/**\n * Default text for tooltip for tag links\n *\n * @param integer $count number of posts with that tag\n * @return string text for the tooltip of a tag link.\n *\/","file":"category-template.php","line":562,"missingDoc":false,"filters":[],"uses":{"sprintf":[563],"_n":[563],"number_format_i18n":[563]},"used_by":[]},"default_topic_count_scale":{"doc":"\/**\n * Default topic count scaling for tag links\n *\n * @param integer $count number of posts with that tag\n * @return integer scaled count\n *\/","file":"category-template.php","line":572,"missingDoc":false,"filters":[],"uses":{"round":[573],"log10":[573]},"used_by":[]},"_wp_object_name_sort_cb":{"doc":"\/**\n * Callback for comparing objects based on name\n *\n * @since 3.1.0\n * @access private\n *\/","file":"category-template.php","line":705,"missingDoc":false,"filters":[],"uses":{"strnatcasecmp":[706]},"used_by":[]},"_wp_object_count_sort_cb":{"doc":"\/**\n * Callback for comparing objects based on count\n *\n * @since 3.1.0\n * @access private\n *\/","file":"category-template.php","line":715,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Walker_Category::start_lvl":{"doc":"\/**\n * @see Walker::start_lvl()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param int $depth Depth of category. Used for tab indentation.\n * @param array $args Will only append content if style argument value is 'list'.\n *\/","file":"category-template.php","line":790,"missingDoc":false,"filters":[],"uses":{"str_repeat":[794]},"used_by":[]},"Walker_Category::end_lvl":{"doc":"\/**\n * @see Walker::end_lvl()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param int $depth Depth of category. Used for tab indentation.\n * @param array $args Will only append content if style argument value is 'list'.\n *\/","file":"category-template.php","line":806,"missingDoc":false,"filters":[],"uses":{"str_repeat":[810]},"used_by":[]},"Walker_Category::start_el":{"doc":"\/**\n * @see Walker::start_el()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $category Category data object.\n * @param int $depth Depth of category in reference to parents.\n * @param array $args\n *\/","file":"category-template.php","line":823,"missingDoc":false,"filters":["'list_cats'","'category_description'"],"uses":{"extract":[824],"esc_attr":[826,830,832],"esc_url":[828,842],"get_term_link":[828],"sprintf":[830,845],"__":[830,845],"strip_tags":[832],"get_term_feed_link":[842],"intval":[867],"get_term":[873]},"used_by":[]},"get_term_feed_link":{"doc":"\/**\n * Retrieve the feed link for a term.\n *\n * Returns a link to the feed for all posts in a given term. A specific feed\n * can be requested or left blank to get the default feed.\n *\n * @since 3.0\n *\n * @param int $term_id ID of a category.\n * @param string $taxonomy Optional. Taxonomy of $term_id\n * @param string $feed Optional. Feed type.\n * @return string Link to the feed for the term specified by $term_id and $taxonomy.\n*\/","file":"link-template.php","line":588,"missingDoc":false,"filters":["'category_feed_link'","'tag_feed_link'","'taxonomy_feed_link'"],"uses":{"get_term":[591],"is_wp_error":[593],"get_default_feed":[597,613],"get_option":[599],"home_url":[603,606,609],"get_taxonomy":[608],"get_term_link":[612],"trailingslashit":[618],"user_trailingslashit":[618]},"used_by":{"Walker_Category::start_el":[842],"get_category_feed_link":[572],"get_tag_feed_link":[641]}},"get_term":{"doc":"\/**\n * Get all Term data from database by Term ID.\n *\n * The usage of the get_term function is to apply filters to a term object. It\n * is possible to get a term object from the database before applying the\n * filters.\n *\n * $term ID must be part of $taxonomy, to get from the database. Failure, might\n * be able to be captured by the hooks. Failure would be the same value as $wpdb\n * returns for the get_row method.\n *\n * There are two hooks, one is specifically for each term, named 'get_term', and\n * the second is for the taxonomy name, 'term_$taxonomy'. Both hooks gets the\n * term object, and the taxonomy name as parameters. Both hooks are expected to\n * return a Term object.\n *\n * 'get_term' hook - Takes two parameters the term Object and the taxonomy name.\n * Must return term object. Used in get_term() as a catch-all filter for every\n * $term.\n *\n * 'get_$taxonomy' hook - Takes two parameters the term Object and the taxonomy\n * name. Must return term object. $taxonomy will be the taxonomy name, so for\n * example, if 'category', it would be 'get_category' as the filter name. Useful\n * for custom taxonomies or plugging into default taxonomies.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wpdb\n * @uses sanitize_term() Cleanses the term based on $filter context before returning.\n * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param.\n *\n * @param int|object $term If integer, will get from database. If object will apply filters and return $term.\n * @param string $taxonomy Taxonomy name that $term is part of.\n * @param string $output Constant OBJECT, ARRAY_A, or ARRAY_N\n * @param string $filter Optional, default is raw or no WordPress defined filter will applied.\n * @return mixed|null|WP_Error Term Row from database. Will return null if $term is empty. If taxonomy does not\n * exist then WP_Error will be returned.\n *\/","file":"taxonomy.php","line":870,"missingDoc":false,"filters":["'get_term'","\"get_{$taxonomy}\""],"uses":{"__":[875,880],"taxonomy_exists":[879],"wp_cache_add":[885,896],"is_object":[888,884],"get_row":[893],"prepare":[893],"wp_cache_get":[892],"sanitize_term":[902],"get_object_vars":[907,910],"array_values":[910]},"used_by":{"Walker_Category::start_el":[873],"get_category":[82],"get_category_by_path":[130],"get_tag":[284],"wp_xmlrpc_server::wp_newTerm":[1566],"wp_xmlrpc_server::wp_editTerm":[1645,1665],"wp_xmlrpc_server::wp_deleteTerm":[1732],"wp_xmlrpc_server::wp_getTerm":[1799],"get_permalink":[126],"get_term_feed_link":[591],"get_edit_term_link":[688],"wp_get_nav_menu_object":[25],"WP_Query::get_queried_object":[3000],"SimplePie_Category::get_label":[153],"get_term_by":[960],"get_term_field":[1049],"get_term_to_edit":[1079],"term_is_ancestor_of":[1544,1546,1553],"wp_delete_term":[1794,1826],"wp_unique_term_slug":[2282],"wp_update_term":[2358],"_get_term_children":[2811],"get_term_link":[2995,3027],"get_ancestors":[3234,3237],"wp_get_term_taxonomy_parent_id":[3257]}},"Walker_Category::end_el":{"doc":"\/**\n * @see Walker::end_el()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $page Not used.\n * @param int $depth Depth of category. Not used.\n * @param array $args Only uses 'list' for whether should append to output.\n *\/","file":"category-template.php","line":895,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Walker_CategoryDropdown::start_el":{"doc":"\/**\n * @see Walker::start_el()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $category Category data object.\n * @param int $depth Depth of category. Used for padding.\n * @param array $args Uses 'selected' and 'show_count' keys, if they exist.\n *\/","file":"category-template.php","line":936,"missingDoc":false,"filters":["'list_cats'"],"uses":{"str_repeat":[937]},"used_by":[]},"get_tag_link":{"doc":"\/**\n * Retrieve the link to the tag.\n *\n * @since 2.3.0\n * @see get_term_link()\n *\n * @param int|object $tag Tag ID or object.\n * @return string Link on success, empty string if tag does not exist.\n *\/","file":"category-template.php","line":964,"missingDoc":false,"filters":[],"uses":{"is_object":[965],"get_term_link":[968],"is_wp_error":[970]},"used_by":{"wp_xmlrpc_server::wp_getTags":[2564]}},"get_the_tags":{"doc":"\/**\n * Retrieve the tags for a post.\n *\n * @since 2.3.0\n * @uses apply_filters() Calls 'get_the_tags' filter on the list of post tags.\n *\n * @param int $id Post ID.\n * @return array\n *\/","file":"category-template.php","line":985,"missingDoc":false,"filters":["'get_the_tags'"],"uses":{"get_the_terms":[986]},"used_by":{"get_the_category_rss":[305],"get_post_class":[362]}},"get_the_tag_list":{"doc":"\/**\n * Retrieve the tags for a post formatted as a string.\n *\n * @since 2.3.0\n * @uses apply_filters() Calls 'the_tags' filter on string list of tags.\n *\n * @param string $before Optional. Before tags.\n * @param string $sep Optional. Between tags.\n * @param string $after Optional. After tags.\n * @param int $id Optional. Post ID. Defaults to the current post.\n * @return string\n *\/","file":"category-template.php","line":1001,"missingDoc":false,"filters":["'the_tags'"],"uses":{"get_the_term_list":[1002]},"used_by":{"the_tags":[1018]}},"get_the_term_list":{"doc":"\/**\n * Retrieve a post's terms as a list with specified format.\n *\n * @since 2.5.0\n *\n * @param int $id Post ID.\n * @param string $taxonomy Taxonomy name.\n * @param string $before Optional. Before list.\n * @param string $sep Optional. Separate items using this.\n * @param string $after Optional. After list.\n * @return string\n *\/","file":"category-template.php","line":1091,"missingDoc":false,"filters":["\"term_links-{$taxonomy}\""],"uses":{"get_the_terms":[1092],"is_wp_error":[1094,1102],"get_term_link":[1101],"esc_url":[1104],"join":[1109]},"used_by":{"get_the_tag_list":[1002],"the_terms":[1125]}},"the_tags":{"doc":"\/**\n * Retrieve the tags for a post.\n *\n * @since 2.3.0\n *\n * @param string $before Optional. Before list.\n * @param string $sep Optional. Separate items using this.\n * @param string $after Optional. After list.\n * @return string\n *\/","file":"category-template.php","line":1015,"missingDoc":false,"filters":[],"uses":{"__":[1017],"get_the_tag_list":[1018]},"used_by":[]},"tag_description":{"doc":"\/**\n * Retrieve tag description.\n *\n * @since 2.8\n *\n * @param int $tag Optional. Tag ID. Will use global tag ID by default.\n * @return string Tag description, available.\n *\/","file":"category-template.php","line":1029,"missingDoc":false,"filters":[],"uses":{"term_description":[1030]},"used_by":[]},"get_term_field":{"doc":"\/**\n * Get sanitized Term field.\n *\n * Does checks for $term, based on the $taxonomy. The function is for contextual\n * reasons and for simplicity of usage. See sanitize_term_field() for more\n * information.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses sanitize_term_field() Passes the return value in sanitize_term_field on success.\n *\n * @param string $field Term field to fetch\n * @param int $term Term ID\n * @param string $taxonomy Taxonomy Name\n * @param string $context Optional, default is display. Look at sanitize_term_field() for available options.\n * @return mixed Will return an empty string if $term is not an object or if $field is not set in $term.\n *\/","file":"taxonomy.php","line":1047,"missingDoc":false,"filters":[],"uses":{"get_term":[1049],"is_wp_error":[1050],"is_object":[1053],"sanitize_term_field":[1059]},"used_by":{"term_description":[1048],"wp_update_nav_menu_item":[321,322],"wp_setup_nav_menu_item":[606,661]}},"get_object_term_cache":{"doc":"\/**\n * Retrieves the taxonomy relationship to the term object id.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses wp_cache_get() Retrieves taxonomy relationship from cache\n *\n * @param int|array $id Term object ID\n * @param string $taxonomy Taxonomy Name\n * @return bool|array Empty array if $terms found, but not $taxonomy. False if nothing is in cache for $taxonomy and $id.\n *\/","file":"taxonomy.php","line":2651,"missingDoc":false,"filters":[],"uses":{"wp_cache_get":[2652]},"used_by":{"get_the_terms":[1065],"get_the_taxonomies":[3115],"is_object_in_term":[3165]}},"the_terms":{"doc":"\/**\n * Display the terms in a list.\n *\n * @since 2.5.0\n *\n * @param int $id Post ID.\n * @param string $taxonomy Taxonomy name.\n * @param string $before Optional. Before list.\n * @param string $sep Optional. Separate items using this.\n * @param string $after Optional. After list.\n * @return null|bool False on WordPress error. Returns null when displaying.\n *\/","file":"category-template.php","line":1124,"missingDoc":false,"filters":["'the_terms'"],"uses":{"get_the_term_list":[1125],"is_wp_error":[1127]},"used_by":[]},"has_category":{"doc":"\/**\n * Check if the current post has any of given category.\n *\n * @since 3.1.0\n *\n * @param string|int|array $category Optional. The category name\/term_id\/slug or array of them to check for.\n * @param int|object $post Optional. Post to check instead of the current post.\n * @return bool True if the current post has any of the given categories (or any category, if no category specified).\n *\/","file":"category-template.php","line":1142,"missingDoc":false,"filters":[],"uses":{"has_term":[1143]},"used_by":[]},"has_tag":{"doc":"\/**\n * Check if the current post has any of given tags.\n *\n * The given tags are checked against the post's tags' term_ids, names and slugs.\n * Tags given as integers will only be checked against the post's tags' term_ids.\n * If no tags are given, determines if post has any tags.\n *\n * Prior to v2.7 of WordPress, tags given as integers would also be checked against the post's tags' names and slugs (in addition to term_ids)\n * Prior to v2.7, this function could only be used in the WordPress Loop.\n * As of 2.7, the function can be used anywhere if it is provided a post ID or post object.\n *\n * @since 2.6.0\n *\n * @param string|int|array $tag Optional. The tag name\/term_id\/slug or array of them to check for.\n * @param int|object $post Optional. Post to check instead of the current post. (since 2.7.0)\n * @return bool True if the current post has any of the given tags (or any tag, if no tag specified).\n *\/","file":"category-template.php","line":1163,"missingDoc":false,"filters":[],"uses":{"has_term":[1164]},"used_by":[]},"is_object_in_term":{"doc":"\/**\n * Determine if the given object is associated with any of the given terms.\n *\n * The given terms are checked against the object's terms' term_ids, names and slugs.\n * Terms given as integers will only be checked against the object's terms' term_ids.\n * If no terms are given, determines if object is associated with any terms in the given taxonomy.\n *\n * @since 2.7.0\n * @uses get_object_term_cache()\n * @uses wp_get_object_terms()\n *\n * @param int $object_id ID of the object (post ID, link ID, ...)\n * @param string $taxonomy Single taxonomy name\n * @param int|string|array $terms Optional. Term term_id, name, slug or array of said\n * @return bool|WP_Error. WP_Error on input error.\n *\/","file":"taxonomy.php","line":3161,"missingDoc":false,"filters":[],"uses":{"__":[3163],"get_object_term_cache":[3165],"wp_get_object_terms":[3167],"is_wp_error":[3169],"array_diff":[3179],"array_filter":[3178],"in_array":[3184,3186,3187,3188]},"used_by":{"has_term":[1187],"wp_update_nav_menu_item":[353]}},"get_all_category_ids":{"doc":"\/**\n * Retrieves all category IDs.\n *\n * @since 2.0.0\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/get_all_category_ids\n *\n * @return object List of all of the category IDs.\n *\/","file":"category.php","line":16,"missingDoc":false,"filters":[],"uses":{"get_terms":[18],"wp_cache_add":[19],"wp_cache_get":[17]},"used_by":{"get_category_children":[1304]}},"sanitize_title":{"doc":"\/**\n * Sanitizes title or use fallback title.\n *\n * Specifically, HTML and PHP tags are stripped. Further actions can be added\n * via the plugin API. If $title is empty and $fallback_title is set, the latter\n * will be used.\n *\n * @since 1.0.0\n *\n * @param string $title The string to be sanitized.\n * @param string $fallback_title Optional. A title to use if $title is empty.\n * @param string $context Optional. The operation for which the string is sanitized\n * @return string The sanitized string.\n *\/","file":"formatting.php","line":936,"missingDoc":false,"filters":["'sanitize_title'"],"uses":{"remove_accents":[940]},"used_by":{"get_category_by_path":[115,119],"WP_Admin_Bar::add_node":[98],"register_sidebar_widget":[2177],"register_widget_control":[2234],"sanitize_title_for_query":[951],"permalink_anchor":[61],"wp_insert_post":[2774,2779,2783,2899],"wp_insert_attachment":[3953,3955,4020],"get_term_by":[952],"get_terms":[1331],"term_exists":[1499],"wp_insert_term":[2069,2120],"wp_update_term":[2384,2417],"wp_insert_user":[1316],"dynamic_sidebar":[858,860],"is_active_sidebar":[985]}},"get_category_by_slug":{"doc":"\/**\n * Retrieve category object by category slug.\n *\n * @since 2.3.0\n *\n * @param string $slug The category slug.\n * @return object Category data object\n *\/","file":"category.php","line":155,"missingDoc":false,"filters":[],"uses":{"get_term_by":[156],"_make_cat_compat":[158]},"used_by":[]},"get_cat_ID":{"doc":"\/**\n * Retrieve the ID of a category from its name.\n *\n * @since 1.0.0\n *\n * @param string $cat_name Category name.\n * @return int 0, if failure and ID of category on success.\n *\/","file":"category.php","line":171,"missingDoc":false,"filters":[],"uses":{"get_term_by":[172]},"used_by":{"wp_xmlrpc_server::mw_newPost":[4253],"wp_xmlrpc_server::mw_editPost":[4506]}},"get_cat_name":{"doc":"\/**\n * Retrieve the name of a category from its ID.\n *\n * @since 1.0.0\n *\n * @param int $cat_id Category ID\n * @return string Category name, or an empty string if category doesn't exist.\n *\/","file":"category.php","line":186,"missingDoc":false,"filters":[],"uses":{"get_category":[188],"is_wp_error":[189]},"used_by":{"wp_xmlrpc_server::_prepare_page":[801],"wp_xmlrpc_server::mw_getPost":[4650],"wp_xmlrpc_server::mw_getRecentPosts":[4780],"wp_xmlrpc_server::mt_getPostCategories":[5122],"get_catname":[1280]}},"cat_is_ancestor_of":{"doc":"\/**\n * Check if a category is an ancestor of another category.\n *\n * You can use either an id or the category object for both parameters. If you\n * use an integer the category will be retrieved.\n *\n * @since 2.1.0\n *\n * @param int|object $cat1 ID or object to check if this is the parent category.\n * @param int|object $cat2 The child category.\n * @return bool Whether $cat2 is child of $cat1\n *\/","file":"category.php","line":206,"missingDoc":false,"filters":[],"uses":{"term_is_ancestor_of":[207]},"used_by":[]},"term_is_ancestor_of":{"doc":"\/**\n * Check if a term is an ancestor of another term.\n *\n * You can use either an id or the term object for both parameters.\n *\n * @since 3.4.0\n *\n * @param int|object $term1 ID or object to check if this is the parent term.\n * @param int|object $term2 The child term.\n * @param string $taxonomy Taxonomy name that $term1 and $term2 belong to.\n * @return bool Whether $term2 is child of $term1\n *\/","file":"taxonomy.php","line":1542,"missingDoc":false,"filters":[],"uses":{"get_term":[1544,1546,1553],"term_is_ancestor_of":[1553]},"used_by":{"cat_is_ancestor_of":[207],"term_is_ancestor_of":[1553]}},"sanitize_category":{"doc":"\/**\n * Sanitizes category data based on context.\n *\n * @since 2.3.0\n * @uses sanitize_term() See this function for what context are supported.\n *\n * @param object|array $category Category data\n * @param string $context Optional. Default is 'display'.\n * @return object|array Same type as $category with sanitized data for safe use.\n *\/","file":"category.php","line":220,"missingDoc":false,"filters":[],"uses":{"sanitize_term":[221]},"used_by":[]},"sanitize_term":{"doc":"\/**\n * Sanitize Term all fields.\n *\n * Relies on sanitize_term_field() to sanitize the term. The difference is that\n * this function will sanitize <strong>all<\/strong> fields. The context is based\n * on sanitize_term_field().\n *\n * The $term is expected to be either an array or an object.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses sanitize_term_field Used to sanitize all fields in a term\n *\n * @param array|object $term The term to check\n * @param string $taxonomy The taxonomy name to use\n * @param string $context Default is 'display'.\n * @return array|object Term with all fields sanitized\n *\/","file":"taxonomy.php","line":1576,"missingDoc":false,"filters":[],"uses":{"is_object":[1584],"sanitize_term_field":[1592,1595]},"used_by":{"sanitize_category":[221],"get_term":[902],"get_term_by":[974],"get_term_to_edit":[1087],"wp_insert_term":[2061],"wp_update_term":[2371]}},"sanitize_category_field":{"doc":"\/**\n * Sanitizes data in single category key field.\n *\n * @since 2.3.0\n * @uses sanitize_term_field() See function for more details.\n *\n * @param string $field Category key to sanitize\n * @param mixed $value Category value to sanitize\n * @param int $cat_id Category ID\n * @param string $context What filter to use, 'raw', 'display', etc.\n * @return mixed Same type as $value after $value has been sanitized.\n *\/","file":"category.php","line":236,"missingDoc":false,"filters":[],"uses":{"sanitize_term_field":[237]},"used_by":[]},"sanitize_term_field":{"doc":"\/**\n * Cleanse the field value in the term based on the context.\n *\n * Passing a term field value through the function should be assumed to have\n * cleansed the value for whatever context the term field is going to be used.\n *\n * If no context or an unsupported context is given, then default filters will\n * be applied.\n *\n * There are enough filters for each context to support a custom filtering\n * without creating your own filter function. Simply create a function that\n * hooks into the filter you need.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wpdb\n *\n * @param string $field Term field to sanitize\n * @param string $value Search for this term value\n * @param int $term_id Term ID\n * @param string $taxonomy Taxonomy Name\n * @param string $context Either edit, db, display, attribute, or js.\n * @return mixed sanitized field\n *\/","file":"taxonomy.php","line":1633,"missingDoc":false,"filters":["\"edit_term_{$field}\"","\"edit_{$taxonomy}_{$field}\"","\"pre_term_{$field}\"","\"pre_{$taxonomy}_{$field}\"","'pre_category_nicename'","\"term_{$field}_rss\"","\"{$taxonomy}_{$field}_rss\"","\"term_{$field}\"","\"{$taxonomy}_{$field}\""],"uses":{"esc_html":[1647],"esc_attr":[1649,1667],"esc_js":[1669]},"used_by":{"sanitize_category_field":[237],"get_the_category_rss":[314,318],"WP_Query::parse_tax_query":[1792,1798,1802],"get_term_field":[1059],"sanitize_term":[1592,1595]}},"get_tags":{"doc":"\/**\n * Retrieves all post tags.\n *\n * @since 2.3.0\n * @see get_terms() For list of arguments to pass.\n * @uses apply_filters() Calls 'get_tags' hook on array of tags and with $args.\n *\n * @param string|array $args Tag arguments to use when retrieving tags.\n * @return array List of tags.\n *\/","file":"category.php","line":252,"missingDoc":false,"filters":["'get_tags'"],"uses":{"get_terms":[253]},"used_by":{"wp_xmlrpc_server::wp_getTags":[2558]}},"get_tag":{"doc":"\/**\n * Retrieve post tag by tag ID or tag object.\n *\n * If you pass the $tag parameter an object, which is assumed to be the tag row\n * object retrieved the database. It will cache the tag data.\n *\n * If you pass $tag an integer of the tag ID, then that tag will\n * be retrieved from the database, if it isn't already cached, and pass it back.\n *\n * If you look at get_term(), then both types will be passed through several\n * filters and finally sanitized based on the $filter parameter value.\n *\n * @since 2.3.0\n *\n * @param int|object $tag\n * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N\n * @param string $filter Optional. Default is raw or no WordPress defined filter will applied.\n * @return object|array Return type based on $output value.\n *\/","file":"category.php","line":283,"missingDoc":false,"filters":[],"uses":{"get_term":[284]},"used_by":[]},"clean_category_cache":{"doc":"\/**\n * Remove the category cache data based on ID.\n *\n * @since 2.1.0\n * @uses clean_term_cache() Clears the cache for the category based on ID\n *\n * @param int $id Category ID\n *\/","file":"category.php","line":297,"missingDoc":false,"filters":[],"uses":{"clean_term_cache":[298]},"used_by":[]},"clean_term_cache":{"doc":"\/**\n * Will remove all of the term ids from the cache.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n * @uses $wpdb\n *\n * @param int|array $ids Single or list of Term IDs\n * @param string $taxonomy Can be empty and will assume tt_ids, else will use for context.\n * @param bool $clean_taxonomy Whether to clean taxonomy wide caches (true), or just individual term object caches (false). Default is true.\n *\/","file":"taxonomy.php","line":2590,"missingDoc":false,"filters":["'clean_term_cache'"],"uses":{"is_array":[2594],"array_map":[2600],"implode":[2601],"get_results":[2602],"wp_cache_delete":[2607,2614,2625,2626],"array_unique":[2609],"delete_option":[2627],"_get_term_hierarchy":[2629],"wp_cache_set":[2635],"time":[2635]},"used_by":{"clean_category_cache":[298],"global_terms":[1576],"wp_delete_term":[1836],"wp_insert_term":[2139],"wp_update_term":[2432],"wp_update_term_count_now":[2538]}},"WP_Feed_Cache::create":{"doc":"\/**\n * Create a new SimplePie_Cache object\n *\n * @static\n * @access public\n *\/","file":"class-feed.php","line":13,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Feed_Cache_Transient::__construct":{"doc":"","file":"class-feed.php","line":23,"missingDoc":true,"filters":["'wp_feed_cache_transient_lifetime'"],"uses":[],"used_by":[]},"WP_Feed_Cache_Transient::save":{"doc":"","file":"class-feed.php","line":29,"missingDoc":true,"filters":[],"uses":{"is_a":[30],"set_transient":[33,34],"time":[34]},"used_by":[]},"set_transient":{"doc":"\/**\n * Set\/update the value of a transient.\n *\n * You do not need to serialize values. If the value needs to be serialized, then\n * it will be serialized before it is set.\n *\n * @since 2.8.0\n * @package WordPress\n * @subpackage Transient\n *\n * @uses apply_filters() Calls 'pre_set_transient_$transient' hook to allow overwriting the\n * \ttransient value to be stored.\n * @uses do_action() Calls 'set_transient_$transient' and 'setted_transient' hooks on success.\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped.\n * @param mixed $value Transient value. Expected to not be SQL-escaped.\n * @param int $expiration Time until expiration in seconds, default 0\n * @return bool False if value was not set and true if value was set.\n *\/","file":"option.php","line":491,"missingDoc":false,"filters":["'pre_set_transient_' . $transient","'set_transient_' . $transient","'setted_transient'"],"uses":{"wp_cache_set":[497],"add_option":[505,507],"time":[505,510],"update_option":[510,511],"get_option":[501]},"used_by":{"WP_Feed_Cache_Transient::save":[33,34],"WP_Feed_Cache_Transient::touch":[47],"spawn_cron":[230,245],"get_dirsize":[1421],"wp_rand":[1532],"RSSCache::set":[728]}},"WP_Feed_Cache_Transient::load":{"doc":"","file":"class-feed.php","line":38,"missingDoc":true,"filters":[],"uses":{"get_transient":[39]},"used_by":[]},"get_transient":{"doc":"\/**\n * Get the value of a transient.\n *\n * If the transient does not exist or does not have a value, then the return value\n * will be false.\n *\n * @uses apply_filters() Calls 'pre_transient_$transient' hook before checking the transient.\n * \tAny value other than false will \"short-circuit\" the retrieval of the transient\n *\tand return the returned value.\n * @uses apply_filters() Calls 'transient_$option' hook, after checking the transient, with\n * \tthe transient value.\n *\n * @since 2.8.0\n * @package WordPress\n * @subpackage Transient\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped\n * @return mixed Value of transient\n *\/","file":"option.php","line":442,"missingDoc":false,"filters":["'pre_transient_' . $transient","'transient_' . $transient"],"uses":{"wp_cache_get":[450],"wp_load_alloptions":[455],"delete_option":[459,460],"get_option":[458,466],"time":[458],"defined":[453]},"used_by":{"WP_Feed_Cache_Transient::load":[39],"WP_Feed_Cache_Transient::mtime":[43],"spawn_cron":[207],"get_dirsize":[1412],"wp_rand":[1526],"RSSCache::get":[743],"RSSCache::check_cache":[764]}},"WP_Feed_Cache_Transient::mtime":{"doc":"","file":"class-feed.php","line":42,"missingDoc":true,"filters":[],"uses":{"get_transient":[43]},"used_by":[]},"WP_Feed_Cache_Transient::touch":{"doc":"","file":"class-feed.php","line":46,"missingDoc":true,"filters":[],"uses":{"set_transient":[47],"time":[47]},"used_by":[]},"WP_Feed_Cache_Transient::unlink":{"doc":"","file":"class-feed.php","line":50,"missingDoc":true,"filters":[],"uses":{"delete_transient":[51,52]},"used_by":[]},"delete_transient":{"doc":"\/**\n * Delete a transient.\n *\n * @since 2.8.0\n * @package WordPress\n * @subpackage Transient\n *\n * @uses do_action() Calls 'delete_transient_$transient' hook before transient is deleted.\n * @uses do_action() Calls 'deleted_transient' hook on success.\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped.\n * @return bool true if successful, false otherwise\n *\/","file":"option.php","line":403,"missingDoc":false,"filters":["'delete_transient_' . $transient","'deleted_transient'"],"uses":{"wp_cache_delete":[409],"delete_option":[413,415]},"used_by":{"WP_Feed_Cache_Transient::unlink":[51,52],"wp_delete_attachment":[4102]}},"WP_SimplePie_File::__construct":{"doc":"","file":"class-feed.php","line":59,"missingDoc":true,"filters":[],"uses":{"wp_remote_request":[77],"get_error_message":[80],"wp_remote_retrieve_headers":[83],"wp_remote_retrieve_body":[84],"wp_remote_retrieve_response_code":[85],"is_wp_error":[79],"file_exists":[88],"file_get_contents":[88],"preg_match":[68]},"used_by":[]},"wp_remote_request":{"doc":"\/**\n * Retrieve the raw response from the HTTP request.\n *\n * The array structure is a little complex.\n *\n * <code>\n * $res = array( 'headers' => array(), 'response' => array('code' => int, 'message' => string) );\n * <\/code>\n *\n * All of the headers in $res['headers'] are with the name as the key and the\n * value as the value. So to get the User-Agent, you would do the following.\n *\n * <code>\n * $user_agent = $res['headers']['user-agent'];\n * <\/code>\n *\n * The body is the raw response content and can be retrieved from $res['body'].\n *\n * This function is called first to make the request and there are other API\n * functions to abstract out the above convoluted setup.\n *\n * @since 2.7.0\n *\n * @param string $url Site URL to retrieve.\n * @param array $args Optional. Override the defaults.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/","file":"http.php","line":58,"missingDoc":false,"filters":[],"uses":{"_wp_http_get_object":[59],"request":[60]},"used_by":{"WP_SimplePie_File::__construct":[77],"wp_get_http":[505],"_fetch_remote_file":[539]}},"wp_remote_retrieve_headers":{"doc":"\/**\n * Retrieve only the headers from the raw response.\n *\n * @since 2.7.0\n *\n * @param array $response HTTP response.\n * @return array The headers of the response. Empty array if incorrect parameter given.\n *\/","file":"http.php","line":119,"missingDoc":false,"filters":[],"uses":{"is_wp_error":[120],"is_array":[120]},"used_by":{"WP_SimplePie_File::__construct":[83],"wp_get_http":[510],"wp_get_http_headers":[551],"_fetch_remote_file":[553]}},"wp_remote_retrieve_body":{"doc":"\/**\n * Retrieve only the body from the raw response.\n *\n * @since 2.7.0\n *\n * @param array $response HTTP response.\n * @return string The body of the response. Empty string if no body or incorrect parameter given.\n *\/","file":"http.php","line":187,"missingDoc":false,"filters":[],"uses":{"is_wp_error":[188]},"used_by":{"WP_SimplePie_File::__construct":[84],"WP_oEmbed::discover":[111],"WP_oEmbed::_fetch_with_format":[196],"WP_HTTP_IXR_Client::query":[73,76],"discover_pingback_server_uri":[1682],"wp_get_http":[526],"wp_remote_fopen":[767],"_fetch_remote_file":[566],"wp_version_check":[94],"wp_update_plugins":[210],"wp_update_themes":[319]}},"wp_remote_retrieve_response_code":{"doc":"\/**\n * Retrieve only the response code from the raw response.\n *\n * Will return an empty array if incorrect parameter value is given.\n *\n * @since 2.7.0\n *\n * @param array $response HTTP response.\n * @return string the response code. Empty string on incorrect parameter given.\n *\/","file":"http.php","line":155,"missingDoc":false,"filters":[],"uses":{"is_wp_error":[156],"is_array":[156]},"used_by":{"WP_SimplePie_File::__construct":[85],"WP_oEmbed::_fetch_with_format":[194],"WP_HTTP_IXR_Client::query":[68,67],"wp_get_http":[511],"_fetch_remote_file":[563,564],"wp_version_check":[91],"wp_update_plugins":[207],"wp_update_themes":[312]}},"WP_SimplePie_Sanitize_KSES::sanitize":{"doc":"","file":"class-feed.php","line":106,"missingDoc":true,"filters":[],"uses":{"trim":[107],"preg_match":[109],"base64_decode":[117],"wp_kses_post":[120],"call":[122]},"used_by":[]},"wp_kses_post":{"doc":"\/**\n * Sanitize content for allowed HTML tags for post content.\n *\n * Post content refers to the page contents of the 'post' type and not $_POST\n * data from forms.\n *\n * @since 2.9.0\n *\n * @param string $data Post content to filter\n * @return string Filtered post content with allowed HTML tags and attributes intact.\n *\/","file":"kses.php","line":1299,"missingDoc":false,"filters":[],"uses":{"wp_kses":[1300]},"used_by":{"WP_SimplePie_Sanitize_KSES::sanitize":[120],"sanitize_option":[2809]}},"WP_Http::request":{"doc":"\/**\n * Send a HTTP request to a URI.\n *\n * The body and headers are part of the arguments. The 'body' argument is for the body and will\n * accept either a string or an array. The 'headers' argument should be an array, but a string\n * is acceptable. If the 'body' argument is an array, then it will automatically be escaped\n * using http_build_query().\n *\n * The only URI that are supported in the HTTP Transport implementation are the HTTP and HTTPS\n * protocols. HTTP and HTTPS are assumed so the server might not know how to handle the send\n * headers. Other protocols are unsupported and most likely will fail.\n *\n * The defaults are 'method', 'timeout', 'redirection', 'httpversion', 'blocking' and\n * 'user-agent'.\n *\n * Accepted 'method' values are 'GET', 'POST', and 'HEAD', some transports technically allow\n * others, but should not be assumed. The 'timeout' is used to sent how long the connection\n * should stay open before failing when no response. 'redirection' is used to track how many\n * redirects were taken and used to sent the amount for other transports, but not all transports\n * accept setting that value.\n *\n * The 'httpversion' option is used to sent the HTTP version and accepted values are '1.0', and\n * '1.1' and should be a string. Version 1.1 is not supported, because of chunk response. The\n * 'user-agent' option is the user-agent and is used to replace the default user-agent, which is\n * 'WordPress\/WP_Version', where WP_Version is the value from $wp_version.\n *\n * 'blocking' is the default, which is used to tell the transport, whether it should halt PHP\n * while it performs the request or continue regardless. Actually, that isn't entirely correct.\n * Blocking mode really just means whether the fread should just pull what it can whenever it\n * gets bytes or if it should wait until it has enough in the buffer to read or finishes reading\n * the entire content. It doesn't actually always mean that PHP will continue going after making\n * the request.\n *\n * @access public\n * @since 2.7.0\n * @todo Refactor this code. The code in this method extends the scope of its original purpose\n *\t\tand should be refactored to allow for cleaner abstraction and reduce duplication of the\n *\t\tcode. One suggestion is to create a class specifically for the arguments, however\n *\t\tpreliminary refactoring to this affect has affect more than just the scope of the\n *\t\targuments. Something to ponder at least.\n *\n * @param string $url URI resource.\n * @param str|array $args Optional. Override the defaults.\n * @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error\n *\/","file":"class-http.php","line":81,"missingDoc":false,"filters":["'http_request_timeout'","'http_request_redirection_count'","'http_request_version'","'http_headers_useragent'","'http_request_args'","'pre_http_request'"],"uses":{"get_bloginfo":[89,132],"wp_parse_args":[102,108],"parse_url":[119,132],"__":[122,125,145],"block_request":[124],"get_temp_dir":[139],"basename":[139],"wp_is_writable":[144],"dirname":[144],"is_null":[148,172],"is_array":[151,173],"http_build_query":[174],"get_option":[177],"is_object":[173],"strlen":[184],"_dispatch_request":[187]},"used_by":[]},"get_temp_dir":{"doc":"\/**\n * Determines a writable directory for temporary files.\n * Function's preference is the return value of <code>sys_get_temp_dir()<\/code>,\n * followed by your PHP temporary upload directory, followed by WP_CONTENT_DIR,\n * before finally defaulting to \/tmp\/\n *\n * In the event that this function does not find a writable location,\n * It may be overridden by the <code>WP_TEMP_DIR<\/code> constant in\n * your <code>wp-config.php<\/code> file.\n *\n * @since 2.5.0\n *\n * @return string Writable temporary directory\n *\/","file":"functions.php","line":1411,"missingDoc":false,"filters":[],"uses":{"trailingslashit":[1414,1417,1422,1427],"defined":[1413],"rtrim":[1417,1422,1427],"sys_get_temp_dir":[1420],"is_dir":[1421,1426,1430],"wp_is_writable":[1421,1426,1430],"function_exists":[1419],"ini_get":[1425]},"used_by":{"WP_Http::request":[139]}},"wp_is_writable":{"doc":"\/**\n * Determine if a directory is writable.\n *\n * This function is used to work around certain ACL issues \n * in PHP primarily affecting Windows Servers.\n *\n * @see win_is_writable()\n *\n * @since 3.6.0\n *\n * @param string $path\n * @return bool\n *\/","file":"functions.php","line":1450,"missingDoc":false,"filters":[],"uses":{"win_is_writable":[1452],"is_writable":[1454],"strtoupper":[1451],"substr":[1451]},"used_by":{"WP_Http::request":[144],"get_temp_dir":[1421,1426,1430]}},"WP_Http::_get_first_available_transport":{"doc":"\/**\n * Tests which transports are capable of supporting the request.\n *\n * @since 3.2.0\n * @access private\n *\n * @param array $args Request arguments\n * @param string $url URL to Request\n *\n * @return string|bool Class name for the first transport that claims to support the request. False if no transport claims to support the request.\n *\/","file":"class-http.php","line":201,"missingDoc":false,"filters":[],"uses":{"call_user_func":[209]},"used_by":[]},"WP_Http::_dispatch_request":{"doc":"\/**\n * Dispatches a HTTP request to a supporting transport.\n *\n * Tests each transport in order to find a transport which matches the request arguments.\n * Also caches the transport instance to be used later.\n *\n * The order for blocking requests is cURL, Streams, and finally Fsockopen.\n * The order for non-blocking requests is cURL, Streams and Fsockopen().\n *\n * There are currently issues with \"localhost\" not resolving correctly with DNS. This may cause\n * an error \"failed to open stream: A connection attempt failed because the connected party did\n * not properly respond after a period of time, or established connection failed because [the]\n * connected host has failed to respond.\"\n *\n * @since 3.2.0\n * @access private\n *\n * @param string $url URL to Request\n * @param array $args Request arguments\n * @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error\n *\/","file":"class-http.php","line":239,"missingDoc":false,"filters":["'http_api_debug'","'http_response'"],"uses":{"_get_first_available_transport":[242],"__":[244],"request":[250],"is_wp_error":[254]},"used_by":[]},"WP_Http::post":{"doc":"\/**\n * Uses the POST HTTP method.\n *\n * Used for sending data that is expected to be in the body.\n *\n * @access public\n * @since 2.7.0\n *\n * @param string $url URI resource.\n * @param str|array $args Optional. Override the defaults.\n * @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error\n *\/","file":"class-http.php","line":272,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[274],"request":[275]},"used_by":[]},"WP_Http::get":{"doc":"\/**\n * Uses the GET HTTP method.\n *\n * Used for sending data that is expected to be in the body.\n *\n * @access public\n * @since 2.7.0\n *\n * @param string $url URI resource.\n * @param str|array $args Optional. Override the defaults.\n * @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error\n *\/","file":"class-http.php","line":290,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[292],"request":[293]},"used_by":[]},"WP_Http::head":{"doc":"\/**\n * Uses the HEAD HTTP method.\n *\n * Used for sending data that is expected to be in the body.\n *\n * @access public\n * @since 2.7.0\n *\n * @param string $url URI resource.\n * @param str|array $args Optional. Override the defaults.\n * @return array|object Array containing 'headers', 'body', 'response', 'cookies', 'filename'. A WP_Error instance upon error\n *\/","file":"class-http.php","line":308,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[310],"request":[311]},"used_by":[]},"WP_Http::processResponse":{"doc":"\/**\n * Parses the responses and splits the parts into headers and body.\n *\n * @access public\n * @static\n * @since 2.7.0\n *\n * @param string $strResponse The full response string\n * @return array Array with 'headers' and 'body' keys.\n *\/","file":"class-http.php","line":324,"missingDoc":false,"filters":[],"uses":{"explode":[325]},"used_by":[]},"WP_Http::processHeaders":{"doc":"\/**\n * Transform header string into an array.\n *\n * If an array is given then it is assumed to be raw header data with numeric keys with the\n * headers as the values. No headers must be passed that were already processed.\n *\n * @access public\n * @static\n * @since 2.7.0\n *\n * @param string|array $headers\n * @return array Processed string headers. If duplicate headers are encountered,\n * \t\t\t\t\tThen a numbered array is returned as the value of that header-key.\n *\/","file":"class-http.php","line":344,"missingDoc":false,"filters":[],"uses":{"str_replace":[348],"preg_replace":[350],"explode":[352,373,379],"is_string":[346],"count":[359],"array_splice":[361],"strpos":[360,372],"strtolower":[381],"trim":[382],"is_array":[385]},"used_by":[]},"WP_Http::buildCookieHeader":{"doc":"\/**\n * Takes the arguments for a ::request() and checks for the cookie array.\n *\n * If it's found, then it's assumed to contain WP_Http_Cookie objects, which are each parsed\n * into strings and added to the Cookie: header (within the arguments array). Edits the array by\n * reference.\n *\n * @access public\n * @version 2.8.0\n * @static\n *\n * @param array $r Full array of args passed into ::request()\n *\/","file":"class-http.php","line":411,"missingDoc":false,"filters":[],"uses":{"getHeaderValue":[415],"substr":[417]},"used_by":[]},"WP_Http::chunkTransferDecode":{"doc":"\/**\n * Decodes chunk transfer-encoding, based off the HTTP 1.1 specification.\n *\n * Based off the HTTP http_encoding_dechunk function. Does not support UTF-8. Does not support\n * returning footer headers. Shouldn't be too difficult to support it though.\n *\n * @link http:\/\/tools.ietf.org\/html\/rfc2616#section-19.4.6 Process for chunked decoding.\n *\n * @todo Add support for footer chunked headers.\n * @access public\n * @since 2.7.0\n * @static\n *\n * @param string $body Body content\n * @return string Chunked decoded body on success or raw body on failure.\n *\/","file":"class-http.php","line":438,"missingDoc":false,"filters":[],"uses":{"str_replace":[439,460],"preg_match":[441,448],"trim":[441,462],"hexdec":[454],"strlen":[455],"substr":[457],"ltrim":[460]},"used_by":[]},"WP_Http::block_request":{"doc":"\/**\n * Block requests through the proxy.\n *\n * Those who are behind a proxy and want to prevent access to certain hosts may do so. This will\n * prevent plugins from working and core functionality, if you don't include api.wordpress.org.\n *\n * You block external URL requests by defining WP_HTTP_BLOCK_EXTERNAL as true in your wp-config.php\n * file and this will only allow localhost and your blog to make requests. The constant\n * WP_ACCESSIBLE_HOSTS will allow additional hosts to go through for requests. The format of the\n * WP_ACCESSIBLE_HOSTS constant is a comma separated list of hostnames to allow, wildcard domains\n * are supported, eg *.wordpress.org will allow for all subdomains of wordpress.org to be contacted.\n *\n * @since 2.8.0\n * @link http:\/\/core.trac.wordpress.org\/ticket\/8927 Allow preventing external requests.\n * @link http:\/\/core.trac.wordpress.org\/ticket\/14636 Allow wildcard domains in WP_ACCESSIBLE_HOSTS\n *\n * @param string $uri URI of url.\n * @return bool True to block, false to allow.\n *\/","file":"class-http.php","line":489,"missingDoc":false,"filters":["'block_local_requests'"],"uses":{"defined":[491,514],"parse_url":[496,508],"get_option":[508],"preg_split":[520],"str_replace":[525],"preg_quote":[525],"implode":[526],"strpos":[522],"preg_match":[531],"in_array":[533]},"used_by":[]},"WP_Http::make_absolute_url":{"doc":"","file":"class-http.php","line":537,"missingDoc":true,"filters":[],"uses":{"strpos":[542,571],"parse_url":[545,548],"substr":[565],"strrpos":[565],"preg_replace":[572,576],"ltrim":[583]},"used_by":[]},"WP_Http_Fsockopen::request":{"doc":"\/**\n * Send a HTTP request to a URI using fsockopen().\n *\n * Does not support non-blocking mode.\n *\n * @see WP_Http::request For default options descriptions.\n *\n * @since 2.7\n * @access public\n * @param string $url URI resource.\n * @param str|array $args Optional. Override the defaults.\n * @return array 'headers', 'body', 'response', 'cookies' and 'filename' keys.\n *\/","file":"class-http.php","line":611,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[619],"parse_url":[635],"extension_loaded":[642],"strtolower":[653],"error_reporting":[659,773],"time":[661,677],"fsockopen":[667,669,672,674],"host":[667,672],"port":[667,672],"is_enabled":[666,671,692,702],"send_through_proxy":[666,671,692,702],"add_option":[683],"floor":[688],"stream_set_timeout":[690],"strtoupper":[700],"is_array":[710],"authentication_header":[718],"use_authentication":[717],"is_null":[722],"fwrite":[725,747,753],"fclose":[728,760,770],"fopen":[738,740],"sprintf":[742],"__":[742,782],"feof":[744,763],"fread":[745,764],"strpos":[750],"request":[780]},"used_by":[]},"add_option":{"doc":"\/**\n * Add a new option.\n *\n * You do not need to serialize values. If the value needs to be serialized, then\n * it will be serialized before it is inserted into the database. Remember,\n * resources can not be serialized or added as an option.\n *\n * You can create options without values and then update the values later.\n * Existing options will not be updated and checks are performed to ensure that you\n * aren't adding a protected WordPress option. Care should be taken to not name\n * options the same as the ones which are protected.\n *\n * @package WordPress\n * @subpackage Option\n * @since 1.0.0\n *\n * @uses do_action() Calls 'add_option' hook before adding the option.\n * @uses do_action() Calls 'add_option_$option' and 'added_option' hooks on success.\n *\n * @param string $option Name of option to add. Expected to not be SQL-escaped.\n * @param mixed $value Optional. Option value, can be anything. Expected to not be SQL-escaped.\n * @param mixed $deprecated Optional. Description. Not used anymore.\n * @param bool $autoload Optional. Default is enabled. Whether to load the option when WordPress starts up.\n * @return bool False if option was not added and true if option was added.\n *\/","file":"option.php","line":293,"missingDoc":false,"filters":["'add_option'","\"add_option_{$option}\"","'added_option'"],"uses":{"_deprecated_argument":[297],"trim":[299],"wp_protect_special_option":[303],"is_object":[305],"sanitize_option":[308],"wp_cache_get":[311,331],"get_option":[313],"is_array":[312,332],"maybe_serialize":[317],"wp_load_alloptions":[322],"wp_cache_set":[324,326,334],"defined":[320],"query":[337],"prepare":[337]},"used_by":{"WP_Http_Fsockopen::request":[683],"add_blog_option":[422,425],"wpmu_create_blog":[989],"update_option":[236],"set_transient":[505,507],"add_site_option":[816],"switch_theme":[696]}},"WP_Http_Fsockopen::test":{"doc":"\/**\n * Whether this class can be used for retrieving an URL.\n *\n * @since 2.7.0\n * @static\n * @return boolean False means this class can not be used, true means it can.\n *\/","file":"class-http.php","line":803,"missingDoc":false,"filters":["'use_fsockopen_transport'"],"uses":{"function_exists":[804],"get_option":[807],"time":[807],"extension_loaded":[812]},"used_by":[]},"WP_Http_Streams::request":{"doc":"\/**\n * Send a HTTP request to a URI using streams with fopen().\n *\n * @access public\n * @since 2.7.0\n *\n * @param string $url\n * @param str|array $args Optional. Override the defaults.\n * @return array 'headers', 'body', 'response', 'cookies' and 'filename' keys.\n *\/","file":"class-http.php","line":842,"missingDoc":false,"filters":["'https_local_ssl_verify'","'https_ssl_verify'"],"uses":{"wp_parse_args":[850],"parse_url":[863],"sprintf":[866,924,943],"__":[866,924,943,966],"preg_replace":[869],"preg_quote":[869],"is_string":[876],"is_array":[873],"strtoupper":[888],"host":[905],"port":[905],"authentication_header":[910],"use_authentication":[909],"is_enabled":[904],"send_through_proxy":[904],"is_null":[913],"stream_context_create":[916],"fopen":[919,921,938,940],"floor":[926],"stream_set_timeout":[928],"stream_set_blocking":[931],"fclose":[932,947,955],"stream_copy_to_stream":[945],"stream_get_contents":[950],"stream_get_meta_data":[953]},"used_by":[]},"WP_Http_Streams::test":{"doc":"\/**\n * Whether this class can be used for retrieving an URL.\n *\n * @static\n * @access public\n * @since 2.7.0\n *\n * @return boolean False means this class can not be used, true means it can.\n *\/","file":"class-http.php","line":986,"missingDoc":false,"filters":["'use_streams_transport'"],"uses":{"function_exists":[987,990],"ini_get":[990],"extension_loaded":[995]},"used_by":[]},"WP_Http_Curl::request":{"doc":"\/**\n * Send a HTTP request to a URI using cURL extension.\n *\n * @access public\n * @since 2.7.0\n *\n * @param string $url\n * @param str|array $args Optional. Override the defaults.\n * @return array 'headers', 'body', 'response', 'cookies' and 'filename' keys.\n *\/","file":"class-http.php","line":1032,"missingDoc":false,"filters":["'https_local_ssl_verify'","'https_ssl_verify'","'http_api_curl'"],"uses":{"wp_parse_args":[1040],"curl_init":[1053],"curl_setopt":[1060,1061,1062,1065,1066,1080,1081,1083,1084,1085,1086,1087,1090,1094,1097,1098,1101,1102,1105,1107,1112,1114,1124,1133,1137,1139],"host":[1061],"port":[1062],"authentication":[1066],"use_authentication":[1064],"is_enabled":[1058],"send_through_proxy":[1058],"ceil":[1079],"is_null":[1106],"fopen":[1119,1121],"sprintf":[1123],"__":[1123,1164,1183],"curl_exec":[1147,1152],"curl_close":[1148,1173],"strlen":[1156,1160],"is_bool":[1156],"curl_error":[1161],"in_array":[1163],"curl_getinfo":[1163,1170],"get_status_header_desc":[1171],"fclose":[1176],"request":[1181]},"used_by":[]},"get_status_header_desc":{"doc":"\/**\n * Retrieve the description for the HTTP status.\n *\n * @since 2.3.0\n *\n * @param int $code HTTP status code.\n * @return string Empty string if not found, or description if found.\n *\/","file":"functions.php","line":793,"missingDoc":false,"filters":[],"uses":{"absint":[796]},"used_by":{"WP_Http_Curl::request":[1171],"status_header":[876]}},"WP_Http_Curl::stream_headers":{"doc":"\/**\n * Grab the headers of the cURL request\n *\n * Each header is sent individually to this callback, so we append to the $header property for temporary storage\n *\n * @since 3.2.0\n * @access private\n * @return int\n *\/","file":"class-http.php","line":1202,"missingDoc":false,"filters":[],"uses":{"strlen":[1204]},"used_by":[]},"WP_Http_Curl::test":{"doc":"\/**\n * Whether this class can be used for retrieving an URL.\n *\n * @static\n * @since 2.7.0\n *\n * @return boolean False means this class can not be used, true means it can.\n *\/","file":"class-http.php","line":1215,"missingDoc":false,"filters":["'use_curl_transport'"],"uses":{"function_exists":[1216,1216],"curl_version":[1222]},"used_by":[]},"WP_HTTP_Proxy::is_enabled":{"doc":"\/**\n * Whether proxy connection should be used.\n *\n * @since 2.8\n * @use WP_PROXY_HOST\n * @use WP_PROXY_PORT\n *\n * @return bool\n *\/","file":"class-http.php","line":1274,"missingDoc":false,"filters":[],"uses":{"defined":[1275,1275]},"used_by":[]},"WP_HTTP_Proxy::use_authentication":{"doc":"\/**\n * Whether authentication should be used.\n *\n * @since 2.8\n * @use WP_PROXY_USERNAME\n * @use WP_PROXY_PASSWORD\n *\n * @return bool\n *\/","file":"class-http.php","line":1287,"missingDoc":false,"filters":[],"uses":{"defined":[1288,1288]},"used_by":[]},"WP_HTTP_Proxy::host":{"doc":"\/**\n * Retrieve the host for the proxy server.\n *\n * @since 2.8\n *\n * @return string\n *\/","file":"class-http.php","line":1298,"missingDoc":false,"filters":[],"uses":{"defined":[1299]},"used_by":[]},"WP_HTTP_Proxy::port":{"doc":"\/**\n * Retrieve the port for the proxy server.\n *\n * @since 2.8\n *\n * @return string\n *\/","file":"class-http.php","line":1312,"missingDoc":false,"filters":[],"uses":{"defined":[1313]},"used_by":[]},"WP_HTTP_Proxy::username":{"doc":"\/**\n * Retrieve the username for proxy authentication.\n *\n * @since 2.8\n *\n * @return string\n *\/","file":"class-http.php","line":1326,"missingDoc":false,"filters":[],"uses":{"defined":[1327]},"used_by":[]},"WP_HTTP_Proxy::password":{"doc":"\/**\n * Retrieve the password for proxy authentication.\n *\n * @since 2.8\n *\n * @return string\n *\/","file":"class-http.php","line":1340,"missingDoc":false,"filters":[],"uses":{"defined":[1341]},"used_by":[]},"WP_HTTP_Proxy::authentication":{"doc":"\/**\n * Retrieve authentication string for proxy authentication.\n *\n * @since 2.8\n *\n * @return string\n *\/","file":"class-http.php","line":1354,"missingDoc":false,"filters":[],"uses":{"username":[1355],"password":[1355]},"used_by":[]},"WP_HTTP_Proxy::authentication_header":{"doc":"\/**\n * Retrieve header string for proxy authentication.\n *\n * @since 2.8\n *\n * @return string\n *\/","file":"class-http.php","line":1365,"missingDoc":false,"filters":[],"uses":{"base64_encode":[1366],"authentication":[1366]},"used_by":[]},"WP_HTTP_Proxy::send_through_proxy":{"doc":"\/**\n * Whether URL should be sent through the proxy server.\n *\n * We want to keep localhost and the blog URL from being sent through the proxy server, because\n * some proxies can not handle this. We also have the constant available for defining other\n * hosts that won't be sent through the proxy.\n *\n * @uses WP_PROXY_BYPASS_HOSTS\n * @since 2.8.0\n *\n * @param string $uri URI to check.\n * @return bool True, to send through the proxy and false if, the proxy should not be used.\n *\/","file":"class-http.php","line":1382,"missingDoc":false,"filters":["'pre_http_send_through_proxy'"],"uses":{"parse_url":[1385,1391],"get_option":[1391],"is_null":[1394],"defined":[1400],"preg_split":[1406],"str_replace":[1411],"preg_quote":[1411],"implode":[1412],"strpos":[1408],"preg_match":[1417],"in_array":[1419]},"used_by":[]},"WP_Http_Cookie::__construct":{"doc":"\/**\n * Sets up this cookie object.\n *\n * The parameter $data should be either an associative array containing the indices names below\n * or a header string detailing it.\n *\n * If it's an array, it should include the following elements:\n * <ol>\n * <li>Name<\/li>\n * <li>Value - should NOT be urlencoded already.<\/li>\n * <li>Expires - (optional) String or int (UNIX timestamp).<\/li>\n * <li>Path (optional)<\/li>\n * <li>Domain (optional)<\/li>\n * <\/ol>\n *\n * @access public\n * @since 2.8.0\n *\n * @param string|array $data Raw cookie data.\n *\/","file":"class-http.php","line":1497,"missingDoc":false,"filters":[],"uses":{"explode":[1500,1515],"trim":[1503,1516],"substr":[1503,1504],"strpos":[1503,1504,1515],"urldecode":[1506],"array_shift":[1507],"rtrim":[1511],"strtolower":[1516],"strtotime":[1518,1532],"is_int":[1532],"is_string":[1498]},"used_by":[]},"WP_Http_Cookie::test":{"doc":"\/**\n * Confirms that it's OK to send this cookie to the URL checked against.\n *\n * Decision is based on RFC 2109\/2965, so look there for details on validity.\n *\n * @access public\n * @since 2.8.0\n *\n * @param string $url URL you intend to send this cookie to\n * @return boolean true if allowed, false otherwise.\n *\/","file":"class-http.php","line":1549,"missingDoc":false,"filters":[],"uses":{"time":[1551],"parse_url":[1555],"strtolower":[1562,1562],"stripos":[1563],"substr":[1567,1567,1568,1576],"strlen":[1568,1576],"in_array":[1572],"explode":[1572]},"used_by":[]},"stripos":{"doc":"","file":"class-pop3.php","line":649,"missingDoc":true,"filters":[],"uses":{"strpos":[650],"stristr":[650]},"used_by":{"WP_Http_Cookie::test":[1563],"WP_Http_Encoding::should_decode":[1771],"WP_oEmbed::discover":[121,126],"POP3::is_ok":[605],"_WP_Editors::editor_js":[519],"WP::send_headers":[393],"trackback_rdf":[746],"add_query_arg":[661,658],"nocache_headers":[937],"get_calendar":[1205,1205],"__main":[30,53,54,61,76],"wp_mail":[250,285,283,433]}},"WP_Http_Cookie::getHeaderValue":{"doc":"\/**\n * Convert cookie name and value back to header string.\n *\n * @access public\n * @since 2.8.0\n *\n * @return string Header encoded cookie name and value.\n *\/","file":"class-http.php","line":1590,"missingDoc":false,"filters":["'wp_http_cookie_value'"],"uses":[],"used_by":[]},"WP_Http_Cookie::getFullHeader":{"doc":"\/**\n * Retrieve cookie header for usage in the rest of the WordPress HTTP API.\n *\n * @access public\n * @since 2.8.0\n *\n * @return string\n *\/","file":"class-http.php","line":1605,"missingDoc":false,"filters":[],"uses":{"getHeaderValue":[1606]},"used_by":[]},"WP_Http_Encoding::compress":{"doc":"\/**\n * Compress raw string using the deflate format.\n *\n * Supports the RFC 1951 standard.\n *\n * @since 2.8\n *\n * @param string $raw String to compress.\n * @param int $level Optional, default is 9. Compression level, 9 is highest.\n * @param string $supports Optional, not used. When implemented it will choose the right compression based on what the server supports.\n * @return string|bool False on failure.\n *\/","file":"class-http.php","line":1633,"missingDoc":false,"filters":[],"uses":{"gzdeflate":[1634]},"used_by":[]},"WP_Http_Encoding::decompress":{"doc":"\/**\n * Decompression of deflated string.\n *\n * Will attempt to decompress using the RFC 1950 standard, and if that fails\n * then the RFC 1951 standard deflate will be attempted. Finally, the RFC\n * 1952 standard gzip decode will be attempted. If all fail, then the\n * original compressed string will be returned.\n *\n * @since 2.8\n *\n * @param string $compressed String to decompress.\n * @param int $length The optional length of the compressed data.\n * @return string|bool False on failure.\n *\/","file":"class-http.php","line":1651,"missingDoc":false,"filters":[],"uses":{"gzinflate":[1656],"gzuncompress":[1662],"gzdecode":[1666],"function_exists":[1665]},"used_by":[]},"WP_Http_Encoding::compatible_gzinflate":{"doc":"\/**\n * Decompression of deflated string while staying compatible with the majority of servers.\n *\n * Certain Servers will return deflated data with headers which PHP's gzinflate()\n * function cannot handle out of the box. The following function has been created from\n * various snippets on the gzinflate() PHP documentation.\n *\n * Warning: Magic numbers within. Due to the potential different formats that the compressed\n * data may be returned in, some \"magic offsets\" are needed to ensure proper decompression\n * takes place. For a simple progmatic way to determine the magic offset in use, see:\n * http:\/\/core.trac.wordpress.org\/ticket\/18273\n *\n * @since 2.8.1\n * @link http:\/\/core.trac.wordpress.org\/ticket\/18273\n * @link http:\/\/au2.php.net\/manual\/en\/function.gzinflate.php#70875\n * @link http:\/\/au2.php.net\/manual\/en\/function.gzinflate.php#77336\n *\n * @param string $gzData String to decompress.\n * @return string|bool False on failure.\n *\/","file":"class-http.php","line":1695,"missingDoc":false,"filters":[],"uses":{"ord":[1700],"substr":[1700,1703,1713,1698,1719],"unpack":[1703],"strpos":[1707,1709],"gzinflate":[1713,1719]},"used_by":[]},"WP_Http_Encoding::accept_encoding":{"doc":"\/**\n * What encoding types to accept and their priority values.\n *\n * @since 2.8\n *\n * @return string Types of encoding to accept.\n *\/","file":"class-http.php","line":1733,"missingDoc":false,"filters":[],"uses":{"function_exists":[1735,1738,1741],"implode":[1744]},"used_by":[]},"WP_Http_Encoding::content_encoding":{"doc":"\/**\n * What encoding the content used when it was compressed to send in the headers.\n *\n * @since 2.8\n *\n * @return string Content-Encoding string to send in the header.\n *\/","file":"class-http.php","line":1754,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Http_Encoding::should_decode":{"doc":"\/**\n * Whether the content be decoded based on the headers.\n *\n * @since 2.8\n *\n * @param array|string $headers All of the available headers.\n * @return bool\n *\/","file":"class-http.php","line":1766,"missingDoc":false,"filters":[],"uses":{"array_key_exists":[1768],"stripos":[1771],"is_string":[1770],"is_array":[1767]},"used_by":[]},"WP_Http_Encoding::is_available":{"doc":"\/**\n * Whether decompression and compression are supported by the PHP version.\n *\n * Each function is tested instead of checking for the zlib extension, to\n * ensure that the functions all exist in the PHP version and aren't\n * disabled.\n *\n * @since 2.8\n *\n * @return bool\n *\/","file":"class-http.php","line":1788,"missingDoc":false,"filters":[],"uses":{"function_exists":[1789,1789,1789]},"used_by":[]},"IXR_Value::IXR_Value":{"doc":"","file":"class-IXR.php","line":52,"missingDoc":true,"filters":[],"uses":{"calculateType":[56],"count":[66]},"used_by":[]},"IXR_Value::calculateType":{"doc":"","file":"class-IXR.php","line":72,"missingDoc":true,"filters":[],"uses":{"is_integer":[77],"is_double":[80],"is_object":[85,88,93],"is_a":[85,88],"get_object_vars":[94],"is_array":[97],"isStruct":[102]},"used_by":[]},"IXR_Value::getXml":{"doc":"","file":"class-IXR.php","line":109,"missingDoc":true,"filters":[],"uses":{"htmlspecialchars":[123,136],"getXml":[128,138,145]},"used_by":[]},"IXR_Value::isStruct":{"doc":"\/**\n * Checks whether or not the supplied array is a struct or not\n *\n * @param unknown_type $array\n * @return boolean\n *\/","file":"class-IXR.php","line":157,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"IXR_Message::IXR_Message":{"doc":"","file":"class-IXR.php","line":197,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Message::parse":{"doc":"","file":"class-IXR.php","line":202,"missingDoc":true,"filters":[],"uses":{"preg_replace":[206],"substr":[206,224,225],"substr_replace":[207],"trim":[208],"xml_parser_create":[211],"xml_parser_set_option":[213],"xml_set_object":[215],"xml_set_element_handler":[216],"xml_set_character_data_handler":[217],"strlen":[221],"xml_parse":[226],"xml_parser_free":[233]},"used_by":[]},"IXR_Message::tag_open":{"doc":"","file":"class-IXR.php","line":243,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Message::cdata":{"doc":"","file":"class-IXR.php","line":265,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Message::tag_close":{"doc":"","file":"class-IXR.php","line":270,"missingDoc":true,"filters":[],"uses":{"trim":[276,280,284,288,293,299,317,320],"base64_decode":[303],"array_pop":[309,310,314],"count":[329,329,332,327,325]},"used_by":[]},"IXR_Server::IXR_Server":{"doc":"","file":"class-IXR.php","line":356,"missingDoc":true,"filters":[],"uses":{"setCapabilities":[358],"setCallbacks":[362],"serve":[364]},"used_by":[]},"IXR_Server::serve":{"doc":"","file":"class-IXR.php","line":368,"missingDoc":true,"filters":[],"uses":{"header":[372],"file_get_contents":[379],"error":[386,389,395],"parse":[385],"call":[391],"is_a":[394],"getXml":[400],"output":[416]},"used_by":[]},"error":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/includes\/general.php","line":77,"missingDoc":true,"filters":[],"uses":{"func_get_args":[78],"getLogger":[80],"error":[81],"implode":[81]},"used_by":{"IXR_Server::serve":[386,389,395],"SimplePie::init":[1315],"fetch_feed":[546,545],"error":[81],"MagpieRSS::MagpieRSS":[87],"RSSCache::debug":[816],"SimplePie_Misc::debug":[2201,2199]}},"IXR_Server::call":{"doc":"","file":"class-IXR.php","line":419,"missingDoc":true,"filters":[],"uses":{"hasMethod":[421],"count":[427],"substr":[435,433],"method_exists":[436],"is_callable":[445],"function_exists":[448],"is_array":[444],"call_user_func":[453],"is_string":[433]},"used_by":[]},"IXR_Server::error":{"doc":"","file":"class-IXR.php","line":458,"missingDoc":true,"filters":[],"uses":{"is_object":[461],"output":[464],"getXml":[464]},"used_by":[]},"IXR_Server::output":{"doc":"","file":"class-IXR.php","line":467,"missingDoc":true,"filters":[],"uses":{"function_exists":[469],"get_option":[469],"strlen":[474],"header":[475,476,478,480,481],"date":[481]},"used_by":[]},"IXR_Server::hasMethod":{"doc":"","file":"class-IXR.php","line":486,"missingDoc":true,"filters":[],"uses":{"in_array":[488],"array_keys":[488]},"used_by":[]},"IXR_Server::setCapabilities":{"doc":"","file":"class-IXR.php","line":491,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Server::getCapabilities":{"doc":"","file":"class-IXR.php","line":510,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Server::setCallbacks":{"doc":"","file":"class-IXR.php","line":515,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Server::listMethods":{"doc":"","file":"class-IXR.php","line":522,"missingDoc":true,"filters":[],"uses":{"array_reverse":[526],"array_keys":[526]},"used_by":[]},"IXR_Server::multiCall":{"doc":"","file":"class-IXR.php","line":529,"missingDoc":true,"filters":[],"uses":{"call":[539],"is_a":[541]},"used_by":[]},"IXR_Request::IXR_Request":{"doc":"","file":"class-IXR.php","line":566,"missingDoc":true,"filters":[],"uses":{"getXml":[580]},"used_by":[]},"IXR_Request::getLength":{"doc":"","file":"class-IXR.php","line":586,"missingDoc":true,"filters":[],"uses":{"strlen":[588]},"used_by":[]},"IXR_Request::getXml":{"doc":"","file":"class-IXR.php","line":591,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Client::IXR_Client":{"doc":"","file":"class-IXR.php","line":619,"missingDoc":true,"filters":[],"uses":{"parse_url":[623]},"used_by":[]},"IXR_Client::query":{"doc":"","file":"class-IXR.php","line":641,"missingDoc":true,"filters":[],"uses":{"func_get_args":[643],"array_shift":[644],"getLength":[646],"getXml":[647],"htmlspecialchars":[666,705],"fsockopen":[670,672],"fputs":[678],"feof":[683],"fgets":[684],"strstr":[687],"trim":[693],"parse":[710]},"used_by":[]},"IXR_Client::getResponse":{"doc":"","file":"class-IXR.php","line":726,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Client::isError":{"doc":"","file":"class-IXR.php","line":732,"missingDoc":true,"filters":[],"uses":{"is_object":[734]},"used_by":[]},"IXR_Client::getErrorCode":{"doc":"","file":"class-IXR.php","line":737,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Client::getErrorMessage":{"doc":"","file":"class-IXR.php","line":742,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Error::IXR_Error":{"doc":"","file":"class-IXR.php","line":760,"missingDoc":true,"filters":[],"uses":{"htmlspecialchars":[763]},"used_by":[]},"IXR_Error::getXml":{"doc":"","file":"class-IXR.php","line":766,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Date::IXR_Date":{"doc":"","file":"class-IXR.php","line":806,"missingDoc":true,"filters":[],"uses":{"parseTimestamp":[810],"parseIso":[812],"is_numeric":[809]},"used_by":[]},"IXR_Date::parseTimestamp":{"doc":"","file":"class-IXR.php","line":816,"missingDoc":true,"filters":[],"uses":{"date":[818,819,820,821,822,823]},"used_by":[]},"IXR_Date::parseIso":{"doc":"","file":"class-IXR.php","line":827,"missingDoc":true,"filters":[],"uses":{"substr":[829,830,831,832,833,834,835]},"used_by":[]},"IXR_Date::getIso":{"doc":"","file":"class-IXR.php","line":838,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Date::getXml":{"doc":"","file":"class-IXR.php","line":843,"missingDoc":true,"filters":[],"uses":{"getIso":[845]},"used_by":[]},"IXR_Date::getTimestamp":{"doc":"","file":"class-IXR.php","line":848,"missingDoc":true,"filters":[],"uses":{"mktime":[850]},"used_by":[]},"IXR_Base64::IXR_Base64":{"doc":"","file":"class-IXR.php","line":864,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_Base64::getXml":{"doc":"","file":"class-IXR.php","line":869,"missingDoc":true,"filters":[],"uses":{"base64_encode":[871]},"used_by":[]},"IXR_IntrospectionServer::IXR_IntrospectionServer":{"doc":"","file":"class-IXR.php","line":886,"missingDoc":true,"filters":[],"uses":{"setCallbacks":[888],"setCapabilities":[889],"addCallback":[894,900,906,912]},"used_by":[]},"IXR_IntrospectionServer::addCallback":{"doc":"","file":"class-IXR.php","line":920,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_IntrospectionServer::call":{"doc":"","file":"class-IXR.php","line":927,"missingDoc":true,"filters":[],"uses":{"is_array":[930,956],"hasMethod":[935],"array_shift":[940,951,952],"count":[943,943,950],"is_int":[956],"is_string":[962],"is_float":[973],"is_a":[979]},"used_by":[]},"IXR_IntrospectionServer::methodSignature":{"doc":"","file":"class-IXR.php","line":992,"missingDoc":true,"filters":[],"uses":{"hasMethod":[994],"time":[1013]},"used_by":[]},"IXR_IntrospectionServer::methodHelp":{"doc":"","file":"class-IXR.php","line":1032,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_ClientMulticall::IXR_ClientMulticall":{"doc":"","file":"class-IXR.php","line":1048,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"IXR_ClientMulticall::addCall":{"doc":"","file":"class-IXR.php","line":1054,"missingDoc":true,"filters":[],"uses":{"func_get_args":[1056],"array_shift":[1057]},"used_by":[]},"IXR_ClientMulticall::query":{"doc":"","file":"class-IXR.php","line":1065,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Services_JSON::Services_JSON":{"doc":"\/**\n * constructs a new JSON instance\n *\n * @param int $use object behavior flags; combine with boolean-OR\n *\n *\t\t\t\t\t\tpossible values:\n *\t\t\t\t\t\t- SERVICES_JSON_LOOSE_TYPE:  loose typing.\n *\t\t\t\t\t\t\t\t\"{...}\" syntax creates associative arrays\n *\t\t\t\t\t\t\t\tinstead of objects in decode().\n *\t\t\t\t\t\t- SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.\n *\t\t\t\t\t\t\t\tValues which can't be encoded (e.g. resources)\n *\t\t\t\t\t\t\t\tappear as NULL instead of throwing errors.\n *\t\t\t\t\t\t\t\tBy default, a deeply-nested resource will\n *\t\t\t\t\t\t\t\tbubble up with an error, so all return values\n *\t\t\t\t\t\t\t\tfrom encode() should be checked with isError()\n *\/","file":"class-json.php","line":133,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Services_JSON::utf162utf8":{"doc":"\/**\n * convert a string from one UTF-16 char to one UTF-8 char\n *\n * Normally should be handled by mb_convert_encoding, but\n * provides a slower PHP-only method for installations\n * that lack the multibye string extension.\n *\n * @param\tstring  $utf16  UTF-16 character\n * @return string  UTF-8 character\n * @access private\n *\/","file":"class-json.php","line":149,"missingDoc":false,"filters":[],"uses":{"mb_convert_encoding":[153],"function_exists":[152],"ord":[156,156],"chr":[162,167,168,173,174,175]},"used_by":[]},"Services_JSON::utf82utf16":{"doc":"\/**\n * convert a string from one UTF-8 char to one UTF-16 char\n *\n * Normally should be handled by mb_convert_encoding, but\n * provides a slower PHP-only method for installations\n * that lack the multibye string extension.\n *\n * @param\tstring  $utf8 UTF-8 character\n * @return string  UTF-16 character\n * @access private\n *\/","file":"class-json.php","line":193,"missingDoc":false,"filters":[],"uses":{"mb_convert_encoding":[197],"function_exists":[196],"strlen":[200],"chr":[209,210,216,218],"ord":[209,210,211,216,217,218,219]},"used_by":[]},"Services_JSON::encode":{"doc":"\/**\n * encodes an arbitrary variable into JSON format (and sends JSON Header)\n *\n * @param\tmixed $var\tany number, boolean, string, array, or object to be encoded.\n *\t\t\t\t\t\tsee argument 1 to Services_JSON() above for array-parsing behavior.\n *\t\t\t\t\t\tif var is a strng, note that encode() always expects it\n *\t\t\t\t\t\tto be in ASCII or UTF-8 format!\n *\n * @return mixed JSON string representation of input var or an error if a problem occurs\n * @access public\n *\/","file":"class-json.php","line":237,"missingDoc":false,"filters":[],"uses":{"header":[239],"_encode":[240]},"used_by":[]},"Services_JSON::encodeUnsafe":{"doc":"\/**\n * encodes an arbitrary variable into JSON format without JSON Header - warning - may allow CSS!!!!)\n *\n * @param\tmixed $var\tany number, boolean, string, array, or object to be encoded.\n *\t\t\t\t\t\tsee argument 1 to Services_JSON() above for array-parsing behavior.\n *\t\t\t\t\t\tif var is a strng, note that encode() always expects it\n *\t\t\t\t\t\tto be in ASCII or UTF-8 format!\n *\n * @return mixed JSON string representation of input var or an error if a problem occurs\n * @access public\n *\/","file":"class-json.php","line":253,"missingDoc":false,"filters":[],"uses":{"_encode":[255]},"used_by":[]},"Services_JSON::_encode":{"doc":"\/**\n * PRIVATE CODE that does the work of encodes an arbitrary variable into JSON format\n *\n * @param\tmixed $var\tany number, boolean, string, array, or object to be encoded.\n *\t\t\t\t\t\tsee argument 1 to Services_JSON() above for array-parsing behavior.\n *\t\t\t\t\t\tif var is a strng, note that encode() always expects it\n *\t\t\t\t\t\tto be in ASCII or UTF-8 format!\n *\n * @return mixed JSON string representation of input var or an error if a problem occurs\n * @access public\n *\/","file":"class-json.php","line":268,"missingDoc":false,"filters":[],"uses":{"gettype":[271,478],"strlen":[288],"ord":[296,336,351,352,367,368,369,384,385,386,387,402,403,404,405,406],"pack":[336,350,366,383,401],"utf82utf16":[338,354,371,389,408],"sprintf":[339,355,372,390,409],"bin2hex":[339,355,372,390,409],"array_map":[436,450,463],"array_keys":[437,435,464],"array_values":[438,465],"join":[446,458,473],"is_array":[435],"count":[435],"range":[435],"sizeof":[435],"get_object_vars":[461]},"used_by":[]},"Services_JSON::name_value":{"doc":"\/**\n * array-walking function for use in generating JSON-formatted name-value pairs\n *\n * @param\tstring  $name name of key to use\n * @param\tmixed $value  reference to an array element to be encoded\n *\n * @return string  JSON-formatted name-value pair, like '\"name\":value'\n * @access private\n *\/","file":"class-json.php","line":491,"missingDoc":false,"filters":[],"uses":{"_encode":[493,499],"strval":[499]},"used_by":[]},"Services_JSON::reduce_string":{"doc":"\/**\n * reduce a string by removing leading and trailing comments and whitespace\n *\n * @param\t$str\tstring\tstring value to strip of comments and whitespace\n *\n * @return string  string value stripped of comments and whitespace\n * @access private\n *\/","file":"class-json.php","line":510,"missingDoc":false,"filters":[],"uses":{"preg_replace":[512],"trim":[526]},"used_by":[]},"Services_JSON::decode":{"doc":"\/**\n * decodes a JSON string into appropriate variable\n *\n * @param\tstring  $str\tJSON-formatted string\n *\n * @return mixed number, boolean, string, array, or object\n *\t\t\t\tcorresponding to given JSON input string.\n *\t\t\t\tSee argument 1 to Services_JSON() above for object-output behavior.\n *\t\t\t\tNote that decode() always returns strings\n *\t\t\t\tin ASCII or UTF-8 format!\n * @access public\n *\/","file":"class-json.php","line":541,"missingDoc":false,"filters":[],"uses":{"reduce_string":[543,688],"strtolower":[545],"preg_match":[570,614,667,667,737,727],"substr":[572,573,579,614,616,617,629,636,643,650,657,687,707,712,758,758],"strlen":[575,702,758,758],"ord":[580],"chr":[584,588,592,596,600,616,617],"hexdec":[616,617],"utf162utf8":[618],"array_push":[683,713,718,753,768,779,790],"reset":[691,720,716,811,808],"end":[706],"decode":[718,729,730,740],"rtrim":[758],"array_pop":[762,773,784,796],"in_array":[766,777,788],"substr_replace":[800],"is_numeric":[558]},"used_by":[]},"Services_JSON::isError":{"doc":"\/**\n * @todo Ultimately, this should just call PEAR::isError()\n *\/","file":"class-json.php","line":823,"missingDoc":false,"filters":[],"uses":{"is_object":[827],"get_class":[827],"is_subclass_of":[828],"class_exists":[825]},"used_by":[]},"Services_JSON_Error::Services_JSON_Error":{"doc":"","file":"class-json.php","line":854,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_oEmbed::__construct":{"doc":"\/**\n * Constructor\n *\n * @uses apply_filters() Filters a list of pre-defined oEmbed providers.\n *\/","file":"class-oembed.php","line":28,"missingDoc":false,"filters":["'oembed_providers'"],"uses":{"add_filter":[57]},"used_by":[]},"add_filter":{"doc":"\/**\n * Hooks a function or method to a specific filter action.\n *\n * Filters are the hooks that WordPress launches to modify text of various types\n * before adding it to the database or sending it to the browser screen. Plugins\n * can specify that one or more of its PHP functions is executed to\n * modify specific types of text at these times, using the Filter API.\n *\n * To use the API, the following code should be used to bind a callback to the\n * filter.\n *\n * <code>\n * function example_hook($example) { echo $example; }\n * add_filter('example_filter', 'example_hook');\n * <\/code>\n *\n * In WordPress 1.5.1+, hooked functions can take extra arguments that are set\n * when the matching do_action() or apply_filters() call is run. The\n * $accepted_args allow for calling functions only when the number of args\n * match. Hooked functions can take extra arguments that are set when the\n * matching do_action() or apply_filters() call is run. For example, the action\n * comment_id_not_found will pass any functions that hook onto it the ID of the\n * requested comment.\n *\n * <strong>Note:<\/strong> the function will return true no matter if the\n * function was hooked fails or not. There are no checks for whether the\n * function exists beforehand and no checks to whether the <tt>$function_to_add\n * is even a string. It is up to you to take care and this is done for\n * optimization purposes, so everything is as quick as possible.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 0.71\n * @global array $wp_filter Stores all of the filters added in the form of\n *\twp_filter['tag']['array of priorities']['array of functions serialized']['array of ['array (functions, accepted_args)']']\n * @global array $merged_filters Tracks the tags that need to be merged for later. If the hook is added, it doesn't need to run through that process.\n *\n * @param string $tag The name of the filter to hook the $function_to_add to.\n * @param callback $function_to_add The name of the function to be called when the filter is applied.\n * @param int $priority optional. Used to specify the order in which the functions associated with a particular action are executed (default: 10). Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action.\n * @param int $accepted_args optional. The number of arguments the function accept (default 1).\n * @return boolean true\n *\/","file":"plugin.php","line":65,"missingDoc":false,"filters":[],"uses":{"_wp_filter_build_unique_id":[68]},"used_by":{"WP_oEmbed::__construct":[57],"WP_Customize_Manager::__construct":[35],"WP_Customize_Manager::start_previewing_theme":[171,172,173,176,177,180,181],"WP_Customize_Manager::customize_preview_init":[337],"WP_Customize_Setting::__construct":[56,59],"WP_Customize_Setting::preview":[72,76,78,79],"_WP_Editors::editor":[108,110],"WP_Embed::__construct":[20,26],"__main":[17,18,19,26,27,29,34,40,42,47,48,49,54,56,62,63,64,70,71,73,78,83,87,88,92,97,98,99,104,105,109,110,115,116,117,118,123,127,128,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,149,150,151,152,153,154,156,158,160,163,164,165,166,167,168,169,170,171,172,173,176,177,178,179,180,181,182,184,185,186,187,188,189,190,191,192,193,194,279,286,289,17,24,33,36,44,45,46,47,54,56,58,59,66,1836,1865,494,5449,5468,5482,5506,5522,871,872,875,335,29,71],"kses_init_filters":[1329,1333,1335,1338,1339,1340],"_wp_post_thumbnail_class_filter_add":[597],"register_meta":[895,905],"ms_upload_constants":[22],"add_action":[334],"_show_post_preview":[5253],"register_taxonomy":[390],"preview_theme":[568,574,578],"wp_signon":[51]}},"WP_oEmbed::get_html":{"doc":"\/**\n * The do-it-all function that takes a URL and attempts to return the HTML.\n *\n * @see WP_oEmbed::discover()\n * @see WP_oEmbed::fetch()\n * @see WP_oEmbed::data2html()\n *\n * @param string $url The URL to the content that should be attempted to be embedded.\n * @param array $args Optional arguments. Usually passed from a shortcode.\n * @return bool|string False on failure, otherwise the UNSANITIZED (and potentially unsafe) HTML that should be used to embed.\n *\/","file":"class-oembed.php","line":71,"missingDoc":false,"filters":["'oembed_result'"],"uses":{"str_replace":[82,82,87],"preg_quote":[82],"preg_replace":[83],"preg_match":[86],"discover":[93],"fetch":[95],"data2html":[98]},"used_by":[]},"WP_oEmbed::discover":{"doc":"\/**\n * Attempts to find oEmbed provider discovery <link> tags at the given URL.\n *\n * @param string $url The URL that should be inspected for discovery <link> tags.\n * @return bool|string False on failure, otherwise the oEmbed provider URL.\n *\/","file":"class-oembed.php","line":107,"missingDoc":false,"filters":["'oembed_linktypes'"],"uses":{"substr":[121],"stripos":[121,126],"shortcode_parse_atts":[134],"preg_match_all":[132],"wp_remote_retrieve_body":[111],"wp_remote_get":[111]},"used_by":[]},"shortcode_parse_atts":{"doc":"\/**\n * Retrieve all attributes from the shortcodes tag.\n *\n * The attributes list has the attribute name as the key and the value of the\n * attribute as the value in the key\/value pair. This allows for easier\n * retrieval of the attributes, since all attributes have to be known.\n *\n * @since 2.5\n *\n * @param string $text\n * @return array List of attributes and their value.\n *\/","file":"shortcodes.php","line":255,"missingDoc":false,"filters":[],"uses":{"preg_replace":[258],"strtolower":[262,264,266],"stripcslashes":[262,264,266,268,270],"strlen":[267],"ltrim":[273],"preg_match_all":[259]},"used_by":{"WP_oEmbed::discover":[134],"do_shortcode_tag":[232]}},"wp_remote_get":{"doc":"\/**\n * Retrieve the raw response from the HTTP request using the GET method.\n *\n * @see wp_remote_request() For more information on the response array format.\n *\n * @since 2.7.0\n *\n * @param string $url Site URL to retrieve.\n * @param array $args Optional. Override the defaults.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/","file":"http.php","line":74,"missingDoc":false,"filters":[],"uses":{"_wp_http_get_object":[75],"get":[76]},"used_by":{"WP_oEmbed::discover":[111],"WP_oEmbed::_fetch_with_format":[193],"discover_pingback_server_uri":[1677],"wp_remote_fopen":[762],"wp_version_check":[89]}},"WP_oEmbed::fetch":{"doc":"\/**\n * Connects to a oEmbed provider and returns the result.\n *\n * @param string $provider The URL to the oEmbed provider.\n * @param string $url The URL to the content that is desired to be embedded.\n * @param array $args Optional arguments. Usually passed from a shortcode.\n * @return bool|object False on failure, otherwise the result in the form of an object.\n *\/","file":"class-oembed.php","line":164,"missingDoc":false,"filters":["'oembed_fetch_url'"],"uses":{"wp_parse_args":[165],"wp_embed_defaults":[165],"add_query_arg":[167,168,169],"urlencode":[169],"_fetch_with_format":[174],"is_wp_error":[175,177],"get_error_code":[175]},"used_by":[]},"wp_embed_defaults":{"doc":"\/**\n * Create default array of embed parameters.\n *\n * The width defaults to the content width as specified by the theme. If the\n * theme does not specify a content width, then 500px is used.\n *\n * The default height is 1.5 times the width, or 1000px, whichever is smaller.\n *\n * The 'embed_defaults' filter can be used to adjust either of these values.\n *\n * @since 2.9.0\n *\n * @return array Default embed parameters.\n *\/","file":"media.php","line":972,"missingDoc":false,"filters":["'embed_defaults'"],"uses":{"min":[979],"ceil":[979],"compact":[981]},"used_by":{"WP_oEmbed::fetch":[165],"WP_Embed::shortcode":[144]}},"WP_oEmbed::_fetch_with_format":{"doc":"\/**\n * Fetches result from an oEmbed provider for a specific format and complete provider URL\n *\n * @since 3.0.0\n * @access private\n * @param string $provider_url_with_args URL to the provider with full arguments list (url, maxheight, etc.)\n * @param string $format Format to use\n * @return bool|object False on failure, otherwise the result in the form of an object.\n *\/","file":"class-oembed.php","line":191,"missingDoc":false,"filters":[],"uses":{"add_query_arg":[192],"wp_remote_get":[193],"wp_remote_retrieve_response_code":[194],"wp_remote_retrieve_body":[196]},"used_by":[]},"WP_oEmbed::_parse_json":{"doc":"\/**\n * Parses a json response body.\n *\n * @since 3.0.0\n * @access private\n *\/","file":"class-oembed.php","line":208,"missingDoc":false,"filters":[],"uses":{"json_decode":[209],"trim":[209],"is_object":[209]},"used_by":[]},"json_decode":{"doc":"","file":"compat.php","line":78,"missingDoc":true,"filters":[],"uses":{"is_a":[81],"decode":[86],"_json_decode_object_helper":[88]},"used_by":{"WP_oEmbed::_parse_json":[209],"WP_Customize_Manager::post_value":[313]}},"WP_oEmbed::_parse_xml":{"doc":"\/**\n * Parses an XML response body.\n *\n * @since 3.0.0\n * @access private\n *\/","file":"class-oembed.php","line":218,"missingDoc":false,"filters":[],"uses":{"function_exists":[219,228],"class_exists":[223],"libxml_use_internal_errors":[226,238],"libxml_disable_entity_loader":[229,236],"loadXML":[233],"is_null":[235],"simplexml_import_dom":[244],"is_object":[245]},"used_by":[]},"WP_oEmbed::data2html":{"doc":"\/**\n * Converts a data object from {@link WP_oEmbed::fetch()} and returns the HTML.\n *\n * @param object $data A data object result from an oEmbed provider.\n * @param string $url The URL to the content that is desired to be embedded.\n * @return bool|string False on error, otherwise the HTML needed to embed.\n *\/","file":"class-oembed.php","line":261,"missingDoc":false,"filters":["'oembed_dataparse'"],"uses":{"is_object":[262],"is_string":[271,274,280,285],"is_numeric":[271,271],"esc_url":[275,275,286],"esc_attr":[275,275,275],"esc_html":[286]},"used_by":[]},"WP_oEmbed::_strip_newlines":{"doc":"\/**\n * Strip any new lines from the HTML.\n *\n * @access private\n * @param string $html Existing HTML.\n * @param object $data Data object from WP_oEmbed::data2html()\n * @param string $url The original URL passed to oEmbed.\n * @return string Possibly modified $html\n *\/","file":"class-oembed.php","line":306,"missingDoc":false,"filters":[],"uses":{"str_replace":[308],"strpos":[307]},"used_by":[]},"_wp_oembed_get_object":{"doc":"\/**\n * Returns the initialized {@link WP_oEmbed} object\n *\n * @since 2.9.0\n * @access private\n *\n * @see WP_oEmbed\n * @uses WP_oEmbed\n *\n * @return WP_oEmbed object.\n *\/","file":"class-oembed.php","line":325,"missingDoc":false,"filters":[],"uses":{"is_null":[328]},"used_by":{"wp_oembed_get":[1020],"wp_oembed_add_provider":[1038],"wp_oembed_remove_provider":[1055]}},"PasswordHash::PasswordHash":{"doc":"","file":"class-phpass.php","line":42,"missingDoc":true,"filters":[],"uses":{"microtime":[52],"uniqid":[52],"rand":[52]},"used_by":[]},"PasswordHash::get_random_bytes":{"doc":"","file":"class-phpass.php","line":55,"missingDoc":true,"filters":[],"uses":{"fread":[60],"fclose":[61],"is_readable":[58],"fopen":[59],"md5":[68,70],"microtime":[68],"pack":[70],"substr":[72],"strlen":[64]},"used_by":[]},"PasswordHash::encode64":{"doc":"","file":"class-phpass.php","line":78,"missingDoc":true,"filters":[],"uses":{"ord":[83,86,91]},"used_by":[]},"PasswordHash::gensalt_private":{"doc":"","file":"class-phpass.php","line":101,"missingDoc":true,"filters":[],"uses":{"min":[104],"encode64":[106]},"used_by":[]},"PasswordHash::crypt_private":{"doc":"","file":"class-phpass.php","line":111,"missingDoc":true,"filters":[],"uses":{"substr":[114,117,128,150],"strpos":[122],"strlen":[129],"md5":[139,141,144,146],"pack":[144,146],"encode64":[151]},"used_by":[]},"PasswordHash::gensalt_extended":{"doc":"","file":"class-phpass.php","line":156,"missingDoc":true,"filters":[],"uses":{"min":[158],"encode64":[169]},"used_by":[]},"PasswordHash::gensalt_blowfish":{"doc":"","file":"class-phpass.php","line":174,"missingDoc":true,"filters":[],"uses":{"chr":[187,188],"ord":[187,188,193,201,206]},"used_by":[]},"PasswordHash::HashPassword":{"doc":"","file":"class-phpass.php","line":215,"missingDoc":true,"filters":[],"uses":{"get_random_bytes":[220,229,237],"crypt":[222,231],"gensalt_blowfish":[222],"strlen":[223,228,232,236,241],"gensalt_extended":[231],"crypt_private":[239],"gensalt_private":[240]},"used_by":[]},"PasswordHash::CheckPassword":{"doc":"","file":"class-phpass.php","line":250,"missingDoc":true,"filters":[],"uses":{"crypt_private":[252],"crypt":[254]},"used_by":[]},"PHPMailer::__construct":{"doc":"\/**\n * Constructor\n * @param boolean $exceptions Should we throw external exceptions?\n *\/","file":"class-phpmailer.php","line":372,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::IsHTML":{"doc":"\/**\n * Sets message type to HTML.\n * @param bool $ishtml\n * @return void\n *\/","file":"class-phpmailer.php","line":381,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::IsSMTP":{"doc":"\/**\n * Sets Mailer to send message using SMTP.\n * @return void\n *\/","file":"class-phpmailer.php","line":393,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::IsMail":{"doc":"\/**\n * Sets Mailer to send message using PHP mail() function.\n * @return void\n *\/","file":"class-phpmailer.php","line":401,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::IsSendmail":{"doc":"\/**\n * Sets Mailer to send message using the $Sendmail program.\n * @return void\n *\/","file":"class-phpmailer.php","line":409,"missingDoc":false,"filters":[],"uses":{"stristr":[410],"ini_get":[410]},"used_by":[]},"PHPMailer::IsQmail":{"doc":"\/**\n * Sets Mailer to send message using the qmail MTA.\n * @return void\n *\/","file":"class-phpmailer.php","line":420,"missingDoc":false,"filters":[],"uses":{"stristr":[421],"ini_get":[421]},"used_by":[]},"PHPMailer::AddAddress":{"doc":"\/**\n * Adds a \"To\" address.\n * @param string $address\n * @param string $name\n * @return boolean true on success, false if address already used\n *\/","file":"class-phpmailer.php","line":437,"missingDoc":false,"filters":[],"uses":{"AddAnAddress":[438]},"used_by":[]},"PHPMailer::AddCC":{"doc":"\/**\n * Adds a \"Cc\" address.\n * Note: this function works with the SMTP mailer on win32, not with the \"mail\" mailer.\n * @param string $address\n * @param string $name\n * @return boolean true on success, false if address already used\n *\/","file":"class-phpmailer.php","line":448,"missingDoc":false,"filters":[],"uses":{"AddAnAddress":[449]},"used_by":[]},"PHPMailer::AddBCC":{"doc":"\/**\n * Adds a \"Bcc\" address.\n * Note: this function works with the SMTP mailer on win32, not with the \"mail\" mailer.\n * @param string $address\n * @param string $name\n * @return boolean true on success, false if address already used\n *\/","file":"class-phpmailer.php","line":459,"missingDoc":false,"filters":[],"uses":{"AddAnAddress":[460]},"used_by":[]},"PHPMailer::AddReplyTo":{"doc":"\/**\n * Adds a \"Reply-to\" address.\n * @param string $address\n * @param string $name\n * @return boolean\n *\/","file":"class-phpmailer.php","line":469,"missingDoc":false,"filters":[],"uses":{"AddAnAddress":[470]},"used_by":[]},"PHPMailer::AddAnAddress":{"doc":"\/**\n * Adds an address to one of the recipient arrays\n * Addresses that have been added already return false, but do not throw exceptions\n * @param string $kind One of 'to', 'cc', 'bcc', 'ReplyTo'\n * @param string $address The email address to send to\n * @param string $name\n * @return boolean true on success, false if address already used or invalid in some way\n * @access protected\n *\/","file":"class-phpmailer.php","line":482,"missingDoc":false,"filters":[],"uses":{"SetError":[484,496],"Lang":[484,489,496,498,501],"preg_match":[483],"trim":[493,494],"preg_replace":[494],"array_push":[507],"strtolower":[508,506,513,512],"array_key_exists":[512]},"used_by":[]},"PHPMailer::SetFrom":{"doc":"\/**\n * Set the From and FromName properties\n * @param string $address\n * @param string $name\n * @return boolean\n *\/","file":"class-phpmailer.php","line":526,"missingDoc":false,"filters":[],"uses":{"trim":[527,528],"preg_replace":[528],"SetError":[530],"Lang":[530,532,535],"AddAnAddress":[543]},"used_by":[]},"PHPMailer::ValidateAddress":{"doc":"\/**\n * Check that a string looks roughly like an email address should\n * Static so it can be used without instantiation\n * Tries to use PHP built-in validator in the filter extension (from PHP 5.2), falls back to a reasonably competent regex validator\n * Conforms approximately to RFC2822\n * @link http:\/\/www.hexillion.com\/samples\/#Regex Original pattern found here\n * @param string $address The email address to check\n * @return boolean\n * @static\n * @access public\n *\/","file":"class-phpmailer.php","line":563,"missingDoc":false,"filters":[],"uses":{"filter_var":[565],"preg_match":[571],"function_exists":[564]},"used_by":[]},"PHPMailer::Send":{"doc":"\/**\n * Creates message and assigns Mailer. If the message is\n * not sent successfully then it returns false.  Use the ErrorInfo\n * variable to view description of the error.\n * @return bool\n *\/","file":"class-phpmailer.php","line":585,"missingDoc":false,"filters":[],"uses":{"PreSend":[587],"PostSend":[588],"SetError":[591],"getMessage":[591]},"used_by":[]},"PHPMailer::PreSend":{"doc":"","file":"class-phpmailer.php","line":599,"missingDoc":true,"filters":[],"uses":{"Lang":[603,615],"count":[602,602,602,624],"SetMessageType":[612],"CreateHeader":[618],"CreateBody":[619],"AddrAppend":[625],"HeaderLine":[627,629],"EncodeHeader":[629,637],"SecureHeader":[629,637],"trim":[629],"DKIM_Add":[637],"str_replace":[638],"sprintf":[641],"SetError":[645],"getMessage":[645]},"used_by":[]},"PHPMailer::PostSend":{"doc":"","file":"class-phpmailer.php","line":653,"missingDoc":true,"filters":[],"uses":{"SendmailSend":[658],"SmtpSend":[660],"MailSend":[662,664],"SetError":[668],"getMessage":[668,673]},"used_by":[]},"PHPMailer::SendmailSend":{"doc":"\/**\n * Sends mail using the $Sendmail program.\n * @param string $header The message headers\n * @param string $body The message body\n * @access protected\n * @return bool\n *\/","file":"class-phpmailer.php","line":686,"missingDoc":false,"filters":[],"uses":{"sprintf":[688,690],"escapeshellcmd":[688,690],"escapeshellarg":[688],"Lang":[695,705,710,719],"popen":[694,709],"fputs":[697,698,699,712,713],"pclose":[700,714],"doCallback":[703,717]},"used_by":[]},"PHPMailer::MailSend":{"doc":"\/**\n * Sends mail using the PHP mail() function.\n * @param string $header The message headers\n * @param string $body The message body\n * @access protected\n * @return bool\n *\/","file":"class-phpmailer.php","line":732,"missingDoc":false,"filters":[],"uses":{"AddrFormat":[735],"implode":[737],"sprintf":[742],"ini_get":[745,744],"ini_set":[746,776],"mail":[749,755,763,769],"EncodeHeader":[749,755,763,769],"SecureHeader":[749,755,763,769],"doCallback":[752,758,766,772],"count":[747,761],"Lang":[779]},"used_by":[]},"PHPMailer::SmtpSend":{"doc":"\/**\n * Sends mail via SMTP using PhpSMTP\n * Returns false if there is a bad MAIL FROM, RCPT, or DATA input.\n * @param string $header The message headers\n * @param string $body The message body\n * @uses SMTP\n * @access protected\n * @return bool\n *\/","file":"class-phpmailer.php","line":793,"missingDoc":false,"filters":[],"uses":{"Lang":[798,802,846,849],"SmtpConnect":[797],"Mail":[801],"doCallback":[811,815,823,827,835,839],"Recipient":[807,819,831],"implode":[845],"count":[844],"Data":[848],"Reset":[852]},"used_by":[]},"PHPMailer::SmtpConnect":{"doc":"\/**\n * Initiates a connection to an SMTP server.\n * Returns false if the operation failed.\n * @uses SMTP\n * @access public\n * @return bool\n *\/","file":"class-phpmailer.php","line":864,"missingDoc":false,"filters":[],"uses":{"is_null":[865],"explode":[870],"Connected":[872],"count":[876],"preg_match":[878],"ServerHostname":[891],"Hello":[892,900],"Lang":[896,906,912],"StartTLS":[895],"Authenticate":[905],"Connect":[889],"Reset":[916]},"used_by":[]},"PHPMailer::SmtpClose":{"doc":"\/**\n * Closes the active SMTP session if one exists.\n * @return void\n *\/","file":"class-phpmailer.php","line":928,"missingDoc":false,"filters":[],"uses":{"Quit":[931],"Close":[932],"Connected":[930],"is_null":[929]},"used_by":[]},"PHPMailer::SetLanguage":{"doc":"\/**\n * Sets the language for all class error messages.\n * Returns false if it cannot load the language file.  The default language is English.\n * @param string $langcode ISO 639-1 2-character language code (e.g. Portuguese: \"br\")\n * @param string $lang_path Path to the language file directory\n * @access public\n *\/","file":"class-phpmailer.php","line":944,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::GetTranslations":{"doc":"\/**\n * Return the current array of language strings\n * @return array\n *\/","file":"class-phpmailer.php","line":978,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::AddrAppend":{"doc":"\/**\n * Creates recipient headers.\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":991,"missingDoc":false,"filters":[],"uses":{"AddrFormat":[995],"implode":[997]},"used_by":[]},"PHPMailer::AddrFormat":{"doc":"\/**\n * Formats an address correctly.\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":1008,"missingDoc":false,"filters":[],"uses":{"SecureHeader":[1010,1012,1012],"EncodeHeader":[1012]},"used_by":[]},"PHPMailer::WrapText":{"doc":"\/**\n * Wraps message for use with mailers that do not\n * automatically perform wrapping and for quoted-printable.\n * Original written by philippe.\n * @param string $message The message to wrap\n * @param integer $length The line length to wrap to\n * @param boolean $qp_mode Whether to run in Quoted-Printable mode\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":1026,"missingDoc":false,"filters":[],"uses":{"sprintf":[1027,1059,1078],"strtolower":[1030],"FixEOL":[1032],"substr":[1034,1033,1051,1053,1056,1057,1069,1071,1074,1075],"explode":[1037,1040],"count":[1039,1042],"strlen":[1045,1065,1077,1087,1044],"UTF8CharBoundary":[1050,1068]},"used_by":[]},"PHPMailer::UTF8CharBoundary":{"doc":"\/**\n * Finds last character boundary prior to maxLength in a utf-8\n * quoted (printable) encoded string.\n * Original written by Colin Brown.\n * @access public\n * @param string $encodedText utf-8 QP text\n * @param int    $maxLength   find last character boundary prior to this length\n * @return int\n *\/","file":"class-phpmailer.php","line":1108,"missingDoc":false,"filters":[],"uses":{"substr":[1112,1117],"strpos":[1113],"hexdec":[1118]},"used_by":[]},"PHPMailer::SetWordWrap":{"doc":"\/**\n * Set the body wrapping.\n * @access public\n * @return void\n *\/","file":"class-phpmailer.php","line":1146,"missingDoc":false,"filters":[],"uses":{"WrapText":[1156,1159]},"used_by":[]},"PHPMailer::CreateHeader":{"doc":"\/**\n * Assembles message header.\n * @access public\n * @return string The assembled header\n *\/","file":"class-phpmailer.php","line":1169,"missingDoc":false,"filters":[],"uses":{"md5":[1173],"uniqid":[1173],"time":[1173],"HeaderLine":[1178,1180,1182,1195,1221,1225,1229,1231,1233,1237,1242,1245],"trim":[1180,1182,1201,1237,1242,1242],"AddrFormat":[1189],"AddrAppend":[1193,1203,1207,1212,1216],"count":[1194,1192,1206,1211,1215,1241],"EncodeHeader":[1221,1242],"SecureHeader":[1221],"sprintf":[1227],"ServerHostname":[1227],"GetMailMIME":[1246]},"used_by":[]},"PHPMailer::GetMailMIME":{"doc":"\/**\n * Returns the message MIME.\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":1257,"missingDoc":false,"filters":[],"uses":{"HeaderLine":[1261,1265,1272,1277],"TextLine":[1262,1266,1273,1278]},"used_by":[]},"PHPMailer::GetSentMIMEMessage":{"doc":"\/**\n * Returns the MIME message (headers and body). Only really valid post PreSend().\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":1294,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::CreateBody":{"doc":"\/**\n * Assembles the message body.  Returns an empty string on failure.\n * @access public\n * @return string The assembled message body\n *\/","file":"class-phpmailer.php","line":1304,"missingDoc":false,"filters":[],"uses":{"GetMailMIME":[1308],"SetWordWrap":[1311],"EncodeString":[1315,1319,1325,1335,1343,1346,1352,1359,1371,1374,1386,1393],"GetBoundary":[1318,1324,1334,1342,1345,1351,1358,1370,1373,1385,1392],"AttachAll":[1321,1327,1337,1339,1361,1378,1395,1399],"TextLine":[1330,1332,1354,1356,1366,1368,1381,1383,1388,1390],"HeaderLine":[1331,1355,1367,1382,1389],"EndBoundary":[1348,1363,1376,1397],"tempnam":[1407,1409],"file_put_contents":[1408],"unlink":[1411,1413,1415,1416],"file_get_contents":[1412],"Lang":[1417],"openssl_error_string":[1417],"openssl_pkcs7_sign":[1410],"IsError":[1403]},"used_by":[]},"unlink":{"doc":"\/**\n * Remove the cache\n *\n * @return bool Success status\n *\/","file":"SimplePie\/Cache\/Base.php","line":113,"missingDoc":false,"filters":[],"uses":[],"used_by":{"PHPMailer::CreateBody":[1411,1413,1415,1416],"SimplePie::fetch_data":[1470,1492,1540],"Snoopy::_httpsrequest":[1081],"win_is_writable":[1487],"PSpellShell::checkWords":[32],"PSpellShell::getSuggestions":[76],"Moxiecode_Logger::_logMsg":[247],"wp_delete_attachment":[4130,4137,4144,4151],"SimplePie_Cache_File::unlink":[169],"Text_Diff_Engine_shell::diff":[51,52]}},"PHPMailer::GetBoundary":{"doc":"\/**\n * Returns the start of a message boundary.\n * @access protected\n * @return string\n *\/","file":"class-phpmailer.php","line":1435,"missingDoc":false,"filters":[],"uses":{"TextLine":[1446],"sprintf":[1447],"HeaderLine":[1449]},"used_by":[]},"PHPMailer::EndBoundary":{"doc":"\/**\n * Returns the end of a message boundary.\n * @access protected\n * @return string\n *\/","file":"class-phpmailer.php","line":1460,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::SetMessageType":{"doc":"\/**\n * Sets the message type.\n * @access protected\n * @return void\n *\/","file":"class-phpmailer.php","line":1469,"missingDoc":false,"filters":[],"uses":{"AlternativeExists":[1471],"InlineImageExists":[1472],"AttachmentExists":[1473],"implode":[1474]},"used_by":[]},"PHPMailer::HeaderLine":{"doc":"\/**\n *  Returns a formatted header line.\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":1483,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::TextLine":{"doc":"\/**\n * Returns a formatted mail line.\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":1492,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::AddAttachment":{"doc":"\/**\n * Adds an attachment from a path on the filesystem.\n * Returns false if the file could not be found\n * or accessed.\n * @param string $path Path to the attachment.\n * @param string $name Overrides the attachment name.\n * @param string $encoding File encoding (see $Encoding).\n * @param string $type File extension (MIME) type.\n * @return bool\n *\/","file":"class-phpmailer.php","line":1510,"missingDoc":false,"filters":[],"uses":{"Lang":[1513],"is_file":[1512],"basename":[1515],"SetError":[1532],"getMessage":[1532,1537],"getCode":[1539]},"used_by":[]},"PHPMailer::GetAttachments":{"doc":"\/**\n * Return the current array of attachments\n * @return array\n *\/","file":"class-phpmailer.php","line":1550,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::AttachAll":{"doc":"\/**\n * Attaches all fs, string, and binary attachments to the message.\n * Returns an empty string on failure.\n * @access protected\n * @return string\n *\/","file":"class-phpmailer.php","line":1560,"missingDoc":false,"filters":[],"uses":{"md5":[1578],"serialize":[1578],"in_array":[1579],"sprintf":[1590,1591,1592,1595,1598,1617],"EncodeHeader":[1591,1598],"SecureHeader":[1591,1598],"EncodeString":[1602],"IsError":[1603,1609],"EncodeFile":[1608],"implode":[1619]},"used_by":[]},"PHPMailer::EncodeFile":{"doc":"\/**\n * Encodes attachment in requested format.\n * Returns an empty string on failure.\n * @param string $path The full path to the file\n * @param string $encoding The encoding to use; one of 'base64', '7bit', '8bit', 'binary', 'quoted-printable'\n * @see EncodeFile()\n * @access protected\n * @return string\n *\/","file":"class-phpmailer.php","line":1631,"missingDoc":false,"filters":[],"uses":{"Lang":[1634],"is_readable":[1633],"function_exists":[1636],"get_magic_quotes_runtime":[1641],"set_magic_quotes_runtime":[1644,1653],"ini_set":[1646,1655],"version_compare":[1643,1652],"file_get_contents":[1649],"EncodeString":[1650],"SetError":[1660],"getMessage":[1660]},"used_by":[]},"PHPMailer::EncodeFile::get_magic_quotes":{"doc":"","file":"class-phpmailer.php","line":1637,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"PHPMailer::EncodeString":{"doc":"\/**\n * Encodes string to requested format.\n * Returns an empty string on failure.\n * @param string $str The text to encode\n * @param string $encoding The encoding to use; one of 'base64', '7bit', '8bit', 'binary', 'quoted-printable'\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":1673,"missingDoc":false,"filters":[],"uses":{"strtolower":[1675],"chunk_split":[1677],"base64_encode":[1677],"FixEOL":[1681],"substr":[1683],"strlen":[1683],"EncodeQP":[1690],"SetError":[1693],"Lang":[1693]},"used_by":[]},"PHPMailer::EncodeHeader":{"doc":"\/**\n * Encode a header string to best (shortest) of Q, B, quoted or none.\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":1704,"missingDoc":false,"filters":[],"uses":{"strtolower":[1707],"addcslashes":[1711],"preg_match":[1712,1709],"preg_match_all":[1718,1721,1725],"strlen":[1733,1735],"Base64EncodeWrapMB":[1740],"base64_encode":[1742],"trim":[1744,1750,1754],"chunk_split":[1744],"function_exists":[1737],"HasMultiBytes":[1737],"EncodeQ":[1748],"WrapText":[1749],"str_replace":[1750,1754],"preg_replace":[1753]},"used_by":[]},"PHPMailer::HasMultiBytes":{"doc":"\/**\n * Checks if a string contains multibyte characters.\n * @access public\n * @param string $str multi-byte text to wrap encode\n * @return bool\n *\/","file":"class-phpmailer.php","line":1765,"missingDoc":false,"filters":[],"uses":{"strlen":[1767],"mb_strlen":[1767],"function_exists":[1766]},"used_by":[]},"PHPMailer::Base64EncodeWrapMB":{"doc":"\/**\n * Correctly encodes and wraps long multibyte strings for mail headers\n * without breaking lines within a character.\n * Adapted from a function by paravoid at http:\/\/uk.php.net\/manual\/en\/function.mb-encode-mimeheader.php\n * @access public\n * @param string $str multi-byte text to wrap encode\n * @return string\n *\/","file":"class-phpmailer.php","line":1781,"missingDoc":false,"filters":[],"uses":{"mb_strlen":[1786],"strlen":[1788,1788,1790,1803,1809],"floor":[1792],"mb_substr":[1799],"base64_encode":[1800],"substr":[1809]},"used_by":[]},"mb_substr":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/GoogleSpell.php","line":123,"missingDoc":true,"filters":[],"uses":{"_mb_substr":[18],"strlen":[124],"substr":[141,157]},"used_by":{"PHPMailer::Base64EncodeWrapMB":[1799],"wp_html_excerpt":[3095],"GoogleSpell::checkWords":[24],"POMO_Reader::substr":[64]}},"PHPMailer::EncodeQPphp":{"doc":"\/**\n * Encode string to quoted-printable.\n * Only uses standard PHP, slow, but will always work\n * @access public\n * @param string $string the text to encode\n * @param integer $line_max Number of chars allowed on a line before wrapping\n * @return string\n *\/","file":"class-phpmailer.php","line":1821,"missingDoc":false,"filters":[],"uses":{"preg_split":[1823],"each":[1827],"strlen":[1828,1847,1847],"substr":[1831],"ord":[1832],"floor":[1843,1844]},"used_by":[]},"PHPMailer::EncodeQP":{"doc":"\/**\n * Encode string to RFC2045 (6.7) quoted-printable format\n * Uses a PHP5 stream filter to do the encoding about 64x faster than the old version\n * Also results in same content as you started with after decoding\n * @see EncodeQPphp()\n * @access public\n * @param string $string the text to encode\n * @param integer $line_max Number of chars allowed on a line before wrapping\n * @param boolean $space_conv Dummy param for compatibility with existing EncodeQP function\n * @return string\n * @author Marcus Bointon\n *\/","file":"class-phpmailer.php","line":1874,"missingDoc":false,"filters":[],"uses":{"quoted_printable_encode":[1876],"function_exists":[1875],"stream_get_filters":[1878],"EncodeQPphp":[1880],"in_array":[1879],"fopen":[1882],"preg_replace":[1883,1890],"stream_filter_append":[1885],"fputs":[1886],"rewind":[1887],"stream_get_contents":[1888],"stream_filter_remove":[1889],"fclose":[1891]},"used_by":[]},"PHPMailer::EncodeQ":{"doc":"\/**\n * Encode string to q encoding.\n * @link http:\/\/tools.ietf.org\/html\/rfc2047\n * @param string $str the text to encode\n * @param string $position Where the text is going to be used, see the RFC for what that means\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":1903,"missingDoc":false,"filters":[],"uses":{"preg_replace":[1905,1909,1912,1917],"strtolower":[1907],"str_replace":[1923]},"used_by":[]},"PHPMailer::AddStringAttachment":{"doc":"\/**\n * Adds a string or binary attachment (non-filesystem) to the list.\n * This method can be used to attach ascii or binary data,\n * such as a BLOB record from a database.\n * @param string $string String attachment data.\n * @param string $filename Name of the attachment.\n * @param string $encoding File encoding (see $Encoding).\n * @param string $type File extension (MIME) type.\n * @return void\n *\/","file":"class-phpmailer.php","line":1938,"missingDoc":false,"filters":[],"uses":{"basename":[1943]},"used_by":[]},"PHPMailer::AddEmbeddedImage":{"doc":"\/**\n * Adds an embedded attachment.  This can include images, sounds, and\n * just about any other document.  Make sure to set the $type to an\n * image type.  For JPEG images use \"image\/jpeg\" and for GIF images\n * use \"image\/gif\".\n * @param string $path Path to the attachment.\n * @param string $cid Content ID of the attachment.  Use this to identify\n *        the Id for accessing the image in an HTML form.\n * @param string $name Overrides the attachment name.\n * @param string $encoding File encoding (see $Encoding).\n * @param string $type File extension (MIME) type.\n * @return bool\n *\/","file":"class-phpmailer.php","line":1965,"missingDoc":false,"filters":[],"uses":{"SetError":[1968],"Lang":[1968],"is_file":[1967],"basename":[1972]},"used_by":[]},"PHPMailer::AddStringEmbeddedImage":{"doc":"","file":"class-phpmailer.php","line":1992,"missingDoc":true,"filters":[],"uses":{"basename":[1997]},"used_by":[]},"PHPMailer::InlineImageExists":{"doc":"\/**\n * Returns true if an inline attachment is present.\n * @access public\n * @return bool\n *\/","file":"class-phpmailer.php","line":2011,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::AttachmentExists":{"doc":"","file":"class-phpmailer.php","line":2020,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"PHPMailer::AlternativeExists":{"doc":"","file":"class-phpmailer.php","line":2029,"missingDoc":true,"filters":[],"uses":{"strlen":[2030]},"used_by":[]},"PHPMailer::ClearAddresses":{"doc":"\/**\n * Clears all recipients assigned in the TO array.  Returns void.\n * @return void\n *\/","file":"class-phpmailer.php","line":2041,"missingDoc":false,"filters":[],"uses":{"strtolower":[2043]},"used_by":[]},"PHPMailer::ClearCCs":{"doc":"\/**\n * Clears all recipients assigned in the CC array.  Returns void.\n * @return void\n *\/","file":"class-phpmailer.php","line":2052,"missingDoc":false,"filters":[],"uses":{"strtolower":[2054]},"used_by":[]},"PHPMailer::ClearBCCs":{"doc":"\/**\n * Clears all recipients assigned in the BCC array.  Returns void.\n * @return void\n *\/","file":"class-phpmailer.php","line":2063,"missingDoc":false,"filters":[],"uses":{"strtolower":[2065]},"used_by":[]},"PHPMailer::ClearReplyTos":{"doc":"\/**\n * Clears all recipients assigned in the ReplyTo array.  Returns void.\n * @return void\n *\/","file":"class-phpmailer.php","line":2074,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::ClearAllRecipients":{"doc":"\/**\n * Clears all recipients assigned in the TO, CC and BCC\n * array.  Returns void.\n * @return void\n *\/","file":"class-phpmailer.php","line":2083,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::ClearAttachments":{"doc":"\/**\n * Clears all previously set filesystem, string, and binary\n * attachments.  Returns void.\n * @return void\n *\/","file":"class-phpmailer.php","line":2095,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::ClearCustomHeaders":{"doc":"\/**\n * Clears all custom headers.  Returns void.\n * @return void\n *\/","file":"class-phpmailer.php","line":2103,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::SetError":{"doc":"\/**\n * Adds the error message to the error container.\n * @access protected\n * @return void\n *\/","file":"class-phpmailer.php","line":2116,"missingDoc":false,"filters":[],"uses":{"getError":[2119],"Lang":[2121],"array_key_exists":[2120],"is_null":[2118]},"used_by":[]},"PHPMailer::RFCDate":{"doc":"\/**\n * Returns the proper RFC 822 formatted date.\n * @access public\n * @return string\n * @static\n *\/","file":"class-phpmailer.php","line":2133,"missingDoc":false,"filters":[],"uses":{"date":[2134,2138],"abs":[2136],"sprintf":[2138]},"used_by":[]},"PHPMailer::ServerHostname":{"doc":"\/**\n * Returns the server hostname or 'localhost.localdomain' if unknown.\n * @access protected\n * @return string\n *\/","file":"class-phpmailer.php","line":2148,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::Lang":{"doc":"\/**\n * Returns a message in the appropriate language.\n * @access protected\n * @return string\n *\/","file":"class-phpmailer.php","line":2165,"missingDoc":false,"filters":[],"uses":{"SetLanguage":[2167],"count":[2166]},"used_by":[]},"PHPMailer::IsError":{"doc":"\/**\n * Returns true if an error occurred.\n * @access public\n * @return bool\n *\/","file":"class-phpmailer.php","line":2182,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::FixEOL":{"doc":"\/**\n * Changes every end of line from CR or LF to CRLF.\n * @access public\n * @return string\n *\/","file":"class-phpmailer.php","line":2191,"missingDoc":false,"filters":[],"uses":{"str_replace":[2192,2193,2194]},"used_by":[]},"PHPMailer::AddCustomHeader":{"doc":"\/**\n * Adds a custom header.\n * @access public\n * @return void\n *\/","file":"class-phpmailer.php","line":2203,"missingDoc":false,"filters":[],"uses":{"explode":[2204]},"used_by":[]},"PHPMailer::MsgHTML":{"doc":"\/**\n * Evaluates the message and returns modifications for inline images and backgrounds\n * @access public\n * @return $message\n *\/","file":"class-phpmailer.php","line":2212,"missingDoc":false,"filters":[],"uses":{"preg_match_all":[2213],"basename":[2218],"dirname":[2219],"md5":[2221,2226],"pathinfo":[2222],"strlen":[2224,2225],"substr":[2224,2225],"preg_replace":[2227,2235],"preg_quote":[2227],"AddEmbeddedImage":[2226],"preg_match":[2217],"IsHTML":[2232],"trim":[2235],"strip_tags":[2235],"html_entity_decode":[2237]},"used_by":[]},"PHPMailer::_mime_types":{"doc":"\/**\n * Gets the MIME type of the embedded or inline image\n * @param string File extension\n * @access public\n * @return string MIME type of ext\n * @static\n *\/","file":"class-phpmailer.php","line":2253,"missingDoc":false,"filters":[],"uses":{"strtolower":[2343,2343]},"used_by":[]},"PHPMailer::set":{"doc":"\/**\n * Set (or reset) Class Objects (variables)\n *\n * Usage Example:\n * $page->set('X-Priority', '3');\n *\n * @access public\n * @param string $name Parameter Name\n * @param mixed $value Parameter Value\n * NOTE: will not work with arrays, there are no arrays to set\/reset\n * @todo Should this not be using __set() magic function?\n *\/","file":"class-phpmailer.php","line":2358,"missingDoc":false,"filters":[],"uses":{"Lang":[2363],"SetError":[2366],"getMessage":[2366],"getCode":[2367]},"used_by":[]},"PHPMailer::SecureHeader":{"doc":"\/**\n * Strips newlines to prevent header injection.\n * @access public\n * @param string $str String\n * @return string\n *\/","file":"class-phpmailer.php","line":2380,"missingDoc":false,"filters":[],"uses":{"str_replace":[2381,2382],"trim":[2383]},"used_by":[]},"PHPMailer::Sign":{"doc":"\/**\n * Set the private key file and password to sign the message.\n *\n * @access public\n * @param string $key_filename Parameter File Name\n * @param string $key_pass Password for private key\n *\/","file":"class-phpmailer.php","line":2393,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PHPMailer::DKIM_QP":{"doc":"\/**\n * Set the private key file and password to sign the message.\n *\n * @access public\n * @param string $key_filename Parameter File Name\n * @param string $key_pass Password for private key\n *\/","file":"class-phpmailer.php","line":2406,"missingDoc":false,"filters":[],"uses":{"strlen":[2409],"ord":[2410],"sprintf":[2414]},"used_by":[]},"PHPMailer::DKIM_Sign":{"doc":"\/**\n * Generate DKIM signature\n *\n * @access public\n * @param string $s Header\n *\/","file":"class-phpmailer.php","line":2426,"missingDoc":false,"filters":[],"uses":{"file_get_contents":[2427],"openssl_pkey_get_private":[2429],"base64_encode":[2434],"openssl_sign":[2433]},"used_by":[]},"PHPMailer::DKIM_HeaderC":{"doc":"\/**\n * Generate DKIM Canonicalization Header\n *\n * @access public\n * @param string $s Header\n *\/","file":"class-phpmailer.php","line":2444,"missingDoc":false,"filters":[],"uses":{"preg_replace":[2445,2450],"explode":[2446,2448],"strtolower":[2449],"trim":[2451],"implode":[2453]},"used_by":[]},"PHPMailer::DKIM_BodyC":{"doc":"\/**\n * Generate DKIM Canonicalization Body\n *\n * @access public\n * @param string $body Message Body\n *\/","file":"class-phpmailer.php","line":2463,"missingDoc":false,"filters":[],"uses":{"str_replace":[2466,2467],"substr":[2469,2470],"strlen":[2469,2470]},"used_by":[]},"PHPMailer::DKIM_Add":{"doc":"\/**\n * Create the DKIM header, body, as new header\n *\n * @access public\n * @param string $headers_line Header lines\n * @param string $subject Subject\n * @param string $body Body\n *\/","file":"class-phpmailer.php","line":2483,"missingDoc":false,"filters":[],"uses":{"time":[2487],"explode":[2489],"strpos":[2493,2491],"str_replace":[2497,2498,2499],"DKIM_QP":[2497,2498,2499],"DKIM_BodyC":[2500],"strlen":[2501],"base64_encode":[2502],"pack":[2502],"sha1":[2502],"DKIM_HeaderC":[2513],"DKIM_Sign":[2514]},"used_by":[]},"PHPMailer::doCallback":{"doc":"","file":"class-phpmailer.php","line":2518,"missingDoc":true,"filters":[],"uses":{"call_user_func_array":[2521],"function_exists":[2519]},"used_by":[]},"phpmailerException::errorMessage":{"doc":"","file":"class-phpmailer.php","line":2527,"missingDoc":true,"filters":[],"uses":{"getMessage":[2528]},"used_by":[]},"POP3::POP3":{"doc":"","file":"class-pop3.php","line":47,"missingDoc":true,"filters":[],"uses":{"settype":[48,57],"set_time_limit":[60],"ini_get":[59]},"used_by":[]},"POP3::update_timer":{"doc":"","file":"class-pop3.php","line":65,"missingDoc":true,"filters":[],"uses":{"set_time_limit":[67],"ini_get":[66]},"used_by":[]},"POP3::connect":{"doc":"","file":"class-pop3.php","line":71,"missingDoc":true,"filters":[],"uses":{"_":[82,90,102],"fsockopen":[87],"socket_set_blocking":[95],"update_timer":[96],"fgets":[97],"strip_clf":[98],"error_log":[100],"is_ok":[101],"parse_banner":[107]},"used_by":[]},"_":{"doc":"","file":"compat.php","line":11,"missingDoc":true,"filters":[],"uses":[],"used_by":{"POP3::connect":[82,90,102],"POP3::user":[115,118,123],"POP3::pass":[135,138,143],"POP3::apop":[162,168,171,176,176,186,186],"POP3::login":[205],"POP3::top":[230,246],"POP3::pop_list":[272,300,311,323],"POP3::get":[346,359],"POP3::last":[386,393],"POP3::reset":[416,426],"POP3::send_cmd":[450,456],"POP3::quit":[476],"POP3::uidl":[513,525,548],"POP3::delete":[578,583,589]}},"POP3::user":{"doc":"","file":"class-pop3.php","line":111,"missingDoc":true,"filters":[],"uses":{"_":[115,118,123],"send_cmd":[121],"is_ok":[122]},"used_by":[]},"POP3::pass":{"doc":"","file":"class-pop3.php","line":130,"missingDoc":true,"filters":[],"uses":{"_":[135,138,143],"send_cmd":[141],"quit":[144],"last":[148],"is_ok":[142]},"used_by":[]},"POP3::apop":{"doc":"","file":"class-pop3.php","line":155,"missingDoc":true,"filters":[],"uses":{"_":[162,168,171,176,176,186,186],"login":[165,177,187],"md5":[182],"send_cmd":[184],"last":[191],"is_ok":[185]},"used_by":[]},"POP3::login":{"doc":"","file":"class-pop3.php","line":199,"missingDoc":true,"filters":[],"uses":{"_":[205],"pass":[213],"user":[209]},"used_by":[]},"POP3::top":{"doc":"","file":"class-pop3.php","line":223,"missingDoc":true,"filters":[],"uses":{"_":[230,246],"update_timer":[233],"fwrite":[238],"fgets":[239,253,258],"strip_clf":[240],"error_log":[242],"is_ok":[244],"preg_match":[254]},"used_by":[]},"POP3::pop_list":{"doc":"","file":"class-pop3.php","line":265,"missingDoc":true,"filters":[],"uses":{"_":[272,300,311,323],"update_timer":[287],"fwrite":[292],"fgets":[293,319],"strip_clf":[294,310,320],"error_log":[296],"is_ok":[298,308],"preg_split":[303,326],"send_cmd":[307],"strpos":[321],"settype":[327]},"used_by":[]},"POP3::get":{"doc":"","file":"class-pop3.php","line":340,"missingDoc":true,"filters":[],"uses":{"_":[346,359],"update_timer":[350],"send_cmd":[355],"is_ok":[357],"fgets":[366,372],"preg_match":[367],"substr":[369]},"used_by":[]},"POP3::last":{"doc":"","file":"class-pop3.php","line":378,"missingDoc":true,"filters":[],"uses":{"_":[386,393],"send_cmd":[390],"is_ok":[391],"preg_split":[397],"settype":[400,401]},"used_by":[]},"POP3::reset":{"doc":"","file":"class-pop3.php","line":409,"missingDoc":true,"filters":[],"uses":{"_":[416,426],"send_cmd":[419],"error_log":[427],"is_ok":[420],"quit":[429]},"used_by":[]},"POP3::send_cmd":{"doc":"","file":"class-pop3.php","line":433,"missingDoc":true,"filters":[],"uses":{"_":[450,456],"update_timer":[462],"fwrite":[463],"fgets":[464],"strip_clf":[465],"error_log":[466]},"used_by":[]},"POP3::quit":{"doc":"","file":"class-pop3.php","line":470,"missingDoc":true,"filters":[],"uses":{"_":[476],"fwrite":[481],"fgets":[482],"strip_clf":[483],"error_log":[484],"fclose":[485]},"used_by":[]},"POP3::popstat":{"doc":"","file":"class-pop3.php","line":490,"missingDoc":true,"filters":[],"uses":{"last":[494]},"used_by":[]},"POP3::uidl":{"doc":"","file":"class-pop3.php","line":505,"missingDoc":true,"filters":[],"uses":{"_":[513,525,548],"send_cmd":[522],"is_ok":[523,546],"preg_split":[528,556],"update_timer":[531],"fwrite":[542],"fgets":[543,554,566],"strip_clf":[544,557],"error_log":[545],"preg_match":[555]},"used_by":[]},"POP3::delete":{"doc":"","file":"class-pop3.php","line":572,"missingDoc":true,"filters":[],"uses":{"_":[578,583,589],"send_cmd":[586],"is_ok":[587]},"used_by":[]},"POP3::is_ok":{"doc":"","file":"class-pop3.php","line":599,"missingDoc":true,"filters":[],"uses":{"stripos":[605]},"used_by":[]},"POP3::strip_clf":{"doc":"","file":"class-pop3.php","line":608,"missingDoc":true,"filters":[],"uses":{"str_replace":[614]},"used_by":[]},"POP3::parse_banner":{"doc":"","file":"class-pop3.php","line":619,"missingDoc":true,"filters":[],"uses":{"strlen":[622],"substr":[625],"strip_clf":[641]},"used_by":[]},"wp_simplepie_autoload":{"doc":"\/**\n * WordPress autoloader for SimplePie.\n *\n * @since 3.5.0\n *\/","file":"class-simplepie.php","line":24,"missingDoc":false,"filters":[],"uses":{"strpos":[25],"str_replace":[28]},"used_by":[]},"SimplePie::__construct":{"doc":"\/**\n * The SimplePie class contains feed level data and options\n *\n * To use SimplePie, create the SimplePie object with no parameters. You can\n * then set configuration options using the provided methods. After setting\n * them, you must initialise the feed using $feed->init(). At that point the\n * object's methods and properties will be available to you.\n *\n * Previously, it was possible to pass in the feed URL along with cache\n * options directly into the constructor. This has been removed as of 1.3 as\n * it caused a lot of confusion.\n *\n * @since 1.0 Preview Release\n *\/","file":"class-simplepie.php","line":685,"missingDoc":false,"filters":[],"uses":{"trigger_error":[689,700],"version_compare":[687],"defined":[699],"func_get_args":[702],"count":[703],"set_cache_duration":[705],"set_cache_location":[707],"set_feed_url":[709],"init":[710],"func_num_args":[697]},"used_by":[]},"SimplePie::__toString":{"doc":"\/**\n * Used for converting object to a string\n *\/","file":"class-simplepie.php","line":718,"missingDoc":false,"filters":[],"uses":{"md5":[720],"serialize":[720]},"used_by":[]},"SimplePie::__destruct":{"doc":"\/**\n * Remove items that link back to this before destroying this object\n *\/","file":"class-simplepie.php","line":726,"missingDoc":false,"filters":[],"uses":{"__destruct":[734,742],"version_compare":[728],"gc_enabled":[728],"ini_get":[728]},"used_by":[]},"SimplePie::force_feed":{"doc":"\/**\n * Force the given data\/URL to be treated as a feed\n *\n * This tells SimplePie to ignore the content-type provided by the server.\n * Be careful when using this option, as it will also disable autodiscovery.\n *\n * @since 1.1\n * @param bool $enable Force the given data\/URL to be treated as a feed\n *\/","file":"class-simplepie.php","line":758,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_feed_url":{"doc":"\/**\n * Set the URL of the feed you want to parse\n *\n * This allows you to enter the URL of the feed you want to parse, or the\n * website you want to try to use auto-discovery on. This takes priority\n * over any set raw data.\n *\n * You can set multiple feeds to mash together by passing an array instead\n * of a string for the $url. Remember that with each additional feed comes\n * additional processing and resources.\n *\n * @since 1.0 Preview Release\n * @see set_raw_data()\n * @param string|array $url This is the URL (or array of URLs) that you want to parse.\n *\/","file":"class-simplepie.php","line":778,"missingDoc":false,"filters":[],"uses":{"call":[785,790],"is_array":[781]},"used_by":[]},"SimplePie::set_file":{"doc":"\/**\n * Set an instance of {@see SimplePie_File} to use as a feed\n *\n * @param SimplePie_File &$file\n * @return bool True on success, false on failure\n *\/","file":"class-simplepie.php","line":800,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_raw_data":{"doc":"\/**\n * Set the raw XML data to parse\n *\n * Allows you to use a string of RSS\/Atom data instead of a remote feed.\n *\n * If you have a feed available as a string in PHP, you can tell SimplePie\n * to parse that data string instead of a remote feed. Any set feed URL\n * takes precedence.\n *\n * @since 1.0 Beta 3\n * @param string $data RSS or Atom data as a string.\n * @see set_feed_url()\n *\/","file":"class-simplepie.php","line":824,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_timeout":{"doc":"\/**\n * Set the the default timeout for fetching remote feeds\n *\n * This allows you to change the maximum time the feed's server to respond\n * and send the feed back.\n *\n * @since 1.0 Beta 3\n * @param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.\n *\/","file":"class-simplepie.php","line":838,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::force_fsockopen":{"doc":"\/**\n * Force SimplePie to use fsockopen() instead of cURL\n *\n * @since 1.0 Beta 3\n * @param bool $enable Force fsockopen() to be used\n *\/","file":"class-simplepie.php","line":849,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::enable_cache":{"doc":"\/**\n * Enable\/disable caching in SimplePie.\n *\n * This option allows you to disable caching all-together in SimplePie.\n * However, disabling the cache can lead to longer load times.\n *\n * @since 1.0 Preview Release\n * @param bool $enable Enable caching\n *\/","file":"class-simplepie.php","line":863,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_cache_duration":{"doc":"\/**\n * Set the length of time (in seconds) that the contents of a feed will be\n * cached\n *\n * @param int $seconds The feed content cache duration\n *\/","file":"class-simplepie.php","line":874,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_autodiscovery_cache_duration":{"doc":"\/**\n * Set the length of time (in seconds) that the autodiscovered feed URL will\n * be cached\n *\n * @param int $seconds The autodiscovered feed URL cache duration.\n *\/","file":"class-simplepie.php","line":885,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_cache_location":{"doc":"\/**\n * Set the file system location where the cached files should be stored\n *\n * @param string $location The file system location.\n *\/","file":"class-simplepie.php","line":895,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::enable_order_by_date":{"doc":"\/**\n * Set whether feed items should be sorted into reverse chronological order\n *\n * @param bool $enable Sort as reverse chronological order.\n *\/","file":"class-simplepie.php","line":905,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_input_encoding":{"doc":"\/**\n * Set the character encoding used to parse the feed\n *\n * This overrides the encoding reported by the feed, however it will fall\n * back to the normal encoding detection if the override fails\n *\n * @param string $encoding Character encoding\n *\/","file":"class-simplepie.php","line":918,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_autodiscovery_level":{"doc":"\/**\n * Set how much feed autodiscovery to do\n *\n * @see SIMPLEPIE_LOCATOR_NONE\n * @see SIMPLEPIE_LOCATOR_AUTODISCOVERY\n * @see SIMPLEPIE_LOCATOR_LOCAL_EXTENSION\n * @see SIMPLEPIE_LOCATOR_LOCAL_BODY\n * @see SIMPLEPIE_LOCATOR_REMOTE_EXTENSION\n * @see SIMPLEPIE_LOCATOR_REMOTE_BODY\n * @see SIMPLEPIE_LOCATOR_ALL\n * @param int $level Feed Autodiscovery Level (level can be a combination of the above constants, see bitwise OR operator)\n *\/","file":"class-simplepie.php","line":942,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::get_registry":{"doc":"\/**\n * Get the class registry\n *\n * Use this to override SimplePie's default classes\n * @see SimplePie_Registry\n * @return SimplePie_Registry\n *\/","file":"class-simplepie.php","line":954,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_cache_class":{"doc":"\/**\n * Set which class SimplePie uses for caching\n *\/","file":"class-simplepie.php","line":970,"missingDoc":false,"filters":[],"uses":{"register":[972]},"used_by":[]},"SimplePie::set_locator_class":{"doc":"\/**\n * Set which class SimplePie uses for auto-discovery\n *\/","file":"class-simplepie.php","line":978,"missingDoc":false,"filters":[],"uses":{"register":[980]},"used_by":[]},"SimplePie::set_parser_class":{"doc":"\/**\n * Set which class SimplePie uses for XML parsing\n *\/","file":"class-simplepie.php","line":986,"missingDoc":false,"filters":[],"uses":{"register":[988]},"used_by":[]},"SimplePie::set_file_class":{"doc":"\/**\n * Set which class SimplePie uses for remote file fetching\n *\/","file":"class-simplepie.php","line":994,"missingDoc":false,"filters":[],"uses":{"register":[996]},"used_by":[]},"SimplePie::set_sanitize_class":{"doc":"\/**\n * Set which class SimplePie uses for data sanitization\n *\/","file":"class-simplepie.php","line":1002,"missingDoc":false,"filters":[],"uses":{"register":[1004]},"used_by":[]},"SimplePie::set_item_class":{"doc":"\/**\n * Set which class SimplePie uses for handling feed items\n *\/","file":"class-simplepie.php","line":1010,"missingDoc":false,"filters":[],"uses":{"register":[1012]},"used_by":[]},"SimplePie::set_author_class":{"doc":"\/**\n * Set which class SimplePie uses for handling author data\n *\/","file":"class-simplepie.php","line":1018,"missingDoc":false,"filters":[],"uses":{"register":[1020]},"used_by":[]},"SimplePie::set_category_class":{"doc":"\/**\n * Set which class SimplePie uses for handling category data\n *\/","file":"class-simplepie.php","line":1026,"missingDoc":false,"filters":[],"uses":{"register":[1028]},"used_by":[]},"SimplePie::set_enclosure_class":{"doc":"\/**\n * Set which class SimplePie uses for feed enclosures\n *\/","file":"class-simplepie.php","line":1034,"missingDoc":false,"filters":[],"uses":{"register":[1036]},"used_by":[]},"SimplePie::set_caption_class":{"doc":"\/**\n * Set which class SimplePie uses for `<media:text>` captions\n *\/","file":"class-simplepie.php","line":1042,"missingDoc":false,"filters":[],"uses":{"register":[1044]},"used_by":[]},"SimplePie::set_copyright_class":{"doc":"\/**\n * Set which class SimplePie uses for `<media:copyright>`\n *\/","file":"class-simplepie.php","line":1050,"missingDoc":false,"filters":[],"uses":{"register":[1052]},"used_by":[]},"SimplePie::set_credit_class":{"doc":"\/**\n * Set which class SimplePie uses for `<media:credit>`\n *\/","file":"class-simplepie.php","line":1058,"missingDoc":false,"filters":[],"uses":{"register":[1060]},"used_by":[]},"SimplePie::set_rating_class":{"doc":"\/**\n * Set which class SimplePie uses for `<media:rating>`\n *\/","file":"class-simplepie.php","line":1066,"missingDoc":false,"filters":[],"uses":{"register":[1068]},"used_by":[]},"SimplePie::set_restriction_class":{"doc":"\/**\n * Set which class SimplePie uses for `<media:restriction>`\n *\/","file":"class-simplepie.php","line":1074,"missingDoc":false,"filters":[],"uses":{"register":[1076]},"used_by":[]},"SimplePie::set_content_type_sniffer_class":{"doc":"\/**\n * Set which class SimplePie uses for content-type sniffing\n *\/","file":"class-simplepie.php","line":1082,"missingDoc":false,"filters":[],"uses":{"register":[1084]},"used_by":[]},"SimplePie::set_source_class":{"doc":"\/**\n * Set which class SimplePie uses item sources\n *\/","file":"class-simplepie.php","line":1090,"missingDoc":false,"filters":[],"uses":{"register":[1092]},"used_by":[]},"SimplePie::set_useragent":{"doc":"\/**\n * Set the user agent string\n *\n * @param string $ua New user agent string.\n *\/","file":"class-simplepie.php","line":1101,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::set_cache_name_function":{"doc":"\/**\n * Set callback function to create cache filename with\n *\n * @param mixed $function Callback function\n *\/","file":"class-simplepie.php","line":1111,"missingDoc":false,"filters":[],"uses":{"is_callable":[1113]},"used_by":[]},"SimplePie::set_stupidly_fast":{"doc":"\/**\n * Set options to make SP as fast as possible\n *\n * Forgoes a substantial amount of data sanitization in favor of speed. This\n * turns SimplePie into a dumb parser of feeds.\n *\n * @param bool $set Whether to set them or not\n *\/","file":"class-simplepie.php","line":1127,"missingDoc":false,"filters":[],"uses":{"enable_order_by_date":[1131],"remove_div":[1132],"strip_comments":[1133],"strip_htmltags":[1134],"strip_attributes":[1135],"set_image_handler":[1136]},"used_by":[]},"SimplePie::set_max_checked_feeds":{"doc":"\/**\n * Set maximum number of feeds to check with autodiscovery\n *\n * @param int $max Maximum number of feeds to check\n *\/","file":"class-simplepie.php","line":1145,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::remove_div":{"doc":"","file":"class-simplepie.php","line":1150,"missingDoc":true,"filters":[],"uses":{"remove_div":[1152]},"used_by":[]},"SimplePie::strip_htmltags":{"doc":"","file":"class-simplepie.php","line":1155,"missingDoc":true,"filters":[],"uses":{"strip_htmltags":[1161],"encode_instead_of_strip":[1164]},"used_by":[]},"SimplePie::encode_instead_of_strip":{"doc":"","file":"class-simplepie.php","line":1168,"missingDoc":true,"filters":[],"uses":{"encode_instead_of_strip":[1170]},"used_by":[]},"SimplePie::strip_attributes":{"doc":"","file":"class-simplepie.php","line":1173,"missingDoc":true,"filters":[],"uses":{"strip_attributes":[1179]},"used_by":[]},"SimplePie::set_output_encoding":{"doc":"\/**\n * Set the output encoding\n *\n * Allows you to override SimplePie's output to match that of your webpage.\n * This is useful for times when your webpages are not being served as\n * UTF-8.  This setting will be obeyed by {@see handle_content_type()}, and\n * is similar to {@see set_input_encoding()}.\n *\n * It should be noted, however, that not all character encodings can support\n * all characters.  If your page is being served as ISO-8859-1 and you try\n * to display a Japanese feed, you'll likely see garbled characters.\n * Because of this, it is highly recommended to ensure that your webpages\n * are served as UTF-8.\n *\n * The number of supported character encodings depends on whether your web\n * host supports {@link http:\/\/php.net\/mbstring mbstring},\n * {@link http:\/\/php.net\/iconv iconv}, or both. See\n * {@link http:\/\/simplepie.org\/wiki\/faq\/Supported_Character_Encodings} for\n * more information.\n *\n * @param string $encoding\n *\/","file":"class-simplepie.php","line":1204,"missingDoc":false,"filters":[],"uses":{"set_output_encoding":[1206]},"used_by":[]},"SimplePie::strip_comments":{"doc":"","file":"class-simplepie.php","line":1209,"missingDoc":true,"filters":[],"uses":{"strip_comments":[1211]},"used_by":[]},"SimplePie::set_url_replacements":{"doc":"\/**\n * Set element\/attribute key\/value pairs of HTML attributes\n * containing URLs that need to be resolved relative to the feed\n *\n * Defaults to |a|@href, |area|@href, |blockquote|@cite, |del|@cite,\n * |form|@action, |img|@longdesc, |img|@src, |input|@src, |ins|@cite,\n * |q|@cite\n *\n * @since 1.0\n * @param array|null $element_attribute Element\/attribute key\/value pairs, null for default\n *\/","file":"class-simplepie.php","line":1225,"missingDoc":false,"filters":[],"uses":{"set_url_replacements":[1227]},"used_by":[]},"SimplePie::set_image_handler":{"doc":"\/**\n * Set the handler to enable the display of cached images.\n *\n * @param str $page Web-accessible path to the handler_image.php file.\n * @param str $qs The query string that the value should be passed to.\n *\/","file":"class-simplepie.php","line":1236,"missingDoc":false,"filters":[],"uses":{"set_image_handler":[1240]},"used_by":[]},"SimplePie::set_item_limit":{"doc":"\/**\n * Set the limit for items returned per-feed with multifeeds\n *\n * @param integer $limit The maximum number of items to return.\n *\/","file":"class-simplepie.php","line":1253,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::init":{"doc":"\/**\n * Initialize the feed object\n *\n * This is what makes everything happen.  Period.  This is where all of the\n * configuration options get processed, feeds are fetched, cached, and\n * parsed, and all of that other good stuff.\n *\n * @return boolean True if successful, false otherwise\n *\/","file":"class-simplepie.php","line":1267,"missingDoc":false,"filters":[],"uses":{"extension_loaded":[1275,1270,1270],"xml_parser_create":[1280],"xml_parse_into_struct":[1281],"xml_parser_free":[1282],"set_registry":[1293],"method_exists":[1291],"pass_cache_data":[1298],"get_class":[1298,1299],"pass_file_data":[1299],"set_feed_url":[1310],"init":[1311],"error":[1315],"call":[1333,1338,1374,1393,1416,1404,1446],"call_user_func":[1338],"fetch_data":[1342],"strtoupper":[1372],"preg_match":[1370,1379],"array_merge":[1374,1393],"in_array":[1377,1368],"substr":[1377,1377,1386,1368,1368],"array_unique":[1398],"create":[1407],"get_data":[1412],"get_type":[1413],"trigger_error":[1429],"save":[1427],"parse":[1410],"sprintf":[1439],"get_error_string":[1439],"get_current_line":[1439],"get_current_column":[1439]},"used_by":[]},"save":{"doc":"\/**\n * Save data to the cache\n *\n * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property\n * @return bool Successfulness\n *\/","file":"SimplePie\/Cache\/Base.php","line":85,"missingDoc":false,"filters":[],"uses":[],"used_by":{"SimplePie::init":[1427],"SimplePie::fetch_data":[1594],"WP_Customize_Manager::save":[512],"image_resize":[3277],"image_make_intermediate_size":[396],"SimplePie_Sanitize::sanitize":[323]}},"SimplePie::fetch_data":{"doc":"\/**\n * Fetch the data via SimplePie_File\n *\n * If the data is already cached, attempt to fetch it from there instead\n * @param SimplePie_Cache|false $cache Cache handler, or false to not load from the cache\n * @return array|true Returns true if the data was loaded from the cache, or an array of HTTP headers and sniffed type\n *\/","file":"class-simplepie.php","line":1458,"missingDoc":false,"filters":[],"uses":{"load":[1464],"unlink":[1470,1492,1540],"set_feed_url":[1488],"init":[1489],"mtime":[1483,1497],"time":[1483,1497],"create":[1514,1556,1569,1608],"touch":[1520],"call":[1580,1588,1598],"find":[1577],"getMessage":[1587],"getFile":[1588],"getLine":[1588],"trigger_error":[1596],"save":[1594],"call_user_func":[1598],"is_feed":[1571],"get_type":[1609]},"used_by":[]},"load":{"doc":"\/**\n * Retrieve the data saved to the cache\n *\n * @return array Data for SimplePie::$data\n *\/","file":"SimplePie\/Cache\/Base.php","line":92,"missingDoc":false,"filters":[],"uses":[],"used_by":{"SimplePie::fetch_data":[1464],"wp_get_image_editor":[1179],"SimplePie_Sanitize::sanitize":[312]}},"mtime":{"doc":"\/**\n * Retrieve the last modified time for the cache\n *\n * @return int Timestamp\n *\/","file":"SimplePie\/Cache\/Base.php","line":99,"missingDoc":false,"filters":[],"uses":[],"used_by":{"SimplePie::fetch_data":[1483,1497]}},"touch":{"doc":"\/**\n * Set the last modified time to the current time\n *\n * @return bool Success status\n *\/","file":"SimplePie\/Cache\/Base.php","line":106,"missingDoc":false,"filters":[],"uses":[],"used_by":{"SimplePie::fetch_data":[1520],"SimplePie_Cache_File::touch":[155]}},"SimplePie::error":{"doc":"\/**\n * Get the error message for the occured error\n *\n * @return string|array Error message, or array of messages for multifeeds\n *\/","file":"class-simplepie.php","line":1619,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::get_raw_data":{"doc":"\/**\n * Get the raw XML\n *\n * This is the same as the old `$feed->enable_xml_dump(true)`, but returns\n * the data instead of printing it.\n *\n * @return string|boolean Raw XML data, false if the cache is used\n *\/","file":"class-simplepie.php","line":1632,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::get_encoding":{"doc":"\/**\n * Get the character encoding used for output\n *\n * @since Preview Release\n * @return string\n *\/","file":"class-simplepie.php","line":1643,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie::handle_content_type":{"doc":"\/**\n * Send the content-type header with correct encoding\n *\n * This method ensures that the SimplePie-enabled page is being served with\n * the correct {@link http:\/\/www.iana.org\/assignments\/media-types\/ mime-type}\n * and character encoding HTTP headers (character encoding determined by the\n * {@see set_output_encoding} config option).\n *\n * This won't work properly if any content or whitespace has already been\n * sent to the browser, because it relies on PHP's\n * {@link http:\/\/php.net\/header header()} function, and these are the\n * circumstances under which the function works.\n *\n * Because it's setting these settings for the entire page (as is the nature\n * of HTTP headers), this should only be used once per page (again, at the\n * top).\n *\n * @param string $mime MIME type to serve the page as\n *\/","file":"class-simplepie.php","line":1667,"missingDoc":false,"filters":[],"uses":{"get_encoding":[1674,1672],"header":[1680],"headers_sent":[1669]},"used_by":[]},"SimplePie::get_type":{"doc":"\/**\n * Get the type of the feed\n *\n * This returns a SIMPLEPIE_TYPE_* constant, which can be tested against\n * using {@link http:\/\/php.net\/language.operators.bitwise bitwise operators}\n *\n * @since 0.8 (usage changed to using constants in 1.0)\n * @see SIMPLEPIE_TYPE_NONE Unknown.\n * @see SIMPLEPIE_TYPE_RSS_090 RSS 0.90.\n * @see SIMPLEPIE_TYPE_RSS_091_NETSCAPE RSS 0.91 (Netscape).\n * @see SIMPLEPIE_TYPE_RSS_091_USERLAND RSS 0.91 (Userland).\n * @see SIMPLEPIE_TYPE_RSS_091 RSS 0.91.\n * @see SIMPLEPIE_TYPE_RSS_092 RSS 0.92.\n * @see SIMPLEPIE_TYPE_RSS_093 RSS 0.93.\n * @see SIMPLEPIE_TYPE_RSS_094 RSS 0.94.\n * @see SIMPLEPIE_TYPE_RSS_10 RSS 1.0.\n * @see SIMPLEPIE_TYPE_RSS_20 RSS 2.0.x.\n * @see SIMPLEPIE_TYPE_RSS_RDF RDF-based RSS.\n * @see SIMPLEPIE_TYPE_RSS_SYNDICATION Non-RDF-based RSS (truly intended as syndication format).\n * @see SIMPLEPIE_TYPE_RSS_ALL Any version of RSS.\n * @see SIMPLEPIE_TYPE_ATOM_03 Atom 0.3.\n * @see SIMPLEPIE_TYPE_ATOM_10 Atom 1.0.\n * @see SIMPLEPIE_TYPE_ATOM_ALL Any version of Atom.\n * @see SIMPLEPIE_TYPE_ALL Any known\/supported feed type.\n * @return int SIMPLEPIE_TYPE_* constant\n *\/","file":"class-simplepie.php","line":1710,"missingDoc":false,"filters":[],"uses":{"trim":[1745,1751]},"used_by":[]},"SimplePie::subscribe_url":{"doc":"\/**\n * Get the URL for the feed\n *\n * May or may not be different from the URL passed to {@see set_feed_url()},\n * depending on whether auto-discovery was used.\n *\n * @since Preview Release (previously called `get_feed_url()` since SimplePie 0.8.)\n * @todo If we have a perm redirect we should return the new URL\n * @todo When we make the above change, let's support <itunes:new-feed-url> as well\n * @todo Also, |atom:link|@rel=self\n * @return string|null\n *\/","file":"class-simplepie.php","line":1802,"missingDoc":false,"filters":[],"uses":{"sanitize":[1806]},"used_by":[]},"SimplePie::get_feed_tags":{"doc":"\/**\n * Get data for an feed-level element\n *\n * This method allows you to get access to ANY element\/attribute that is a\n * sub-element of the opening feed tag.\n *\n * The return value is an indexed array of elements matching the given\n * namespace and tag name. Each element has `attribs`, `data` and `child`\n * subkeys. For `attribs` and `child`, these contain namespace subkeys.\n * `attribs` then has one level of associative name => value data (where\n * `value` is a string) after the namespace. `child` has tag-indexed keys\n * after the namespace, each member of which is an indexed array matching\n * this same format.\n *\n * For example:\n * <pre>\n * \/\/ This is probably a bad example because we already support\n * \/\/ <media:content> natively, but it shows you how to parse through\n * \/\/ the nodes.\n * $group = $item->get_item_tags(SIMPLEPIE_NAMESPACE_MEDIARSS, 'group');\n * $content = $group[0]['child'][SIMPLEPIE_NAMESPACE_MEDIARSS]['content'];\n * $file = $content[0]['attribs']['']['url'];\n * echo $file;\n * <\/pre>\n *\n * @since 1.0\n * @see http:\/\/simplepie.org\/wiki\/faq\/supported_xml_namespaces\n * @param string $namespace The URL of the XML namespace of the elements you're trying to access\n * @param string $tag Tag name\n * @return array\n *\/","file":"class-simplepie.php","line":1845,"missingDoc":false,"filters":[],"uses":{"get_type":[1847]},"used_by":[]},"SimplePie::get_channel_tags":{"doc":"\/**\n * Get data for an channel-level element\n *\n * This method allows you to get access to ANY element\/attribute in the\n * channel\/header section of the feed.\n *\n * See {@see SimplePie::get_feed_tags()} for a description of the return value\n *\n * @since 1.0\n * @see http:\/\/simplepie.org\/wiki\/faq\/supported_xml_namespaces\n * @param string $namespace The URL of the XML namespace of the elements you're trying to access\n * @param string $tag Tag name\n * @return array\n *\/","file":"class-simplepie.php","line":1893,"missingDoc":false,"filters":[],"uses":{"get_type":[1895],"get_feed_tags":[1898,1905,1915,1925]},"used_by":[]},"SimplePie::get_image_tags":{"doc":"\/**\n * Get data for an channel-level element\n *\n * This method allows you to get access to ANY element\/attribute in the\n * image\/logo section of the feed.\n *\n * See {@see SimplePie::get_feed_tags()} for a description of the return value\n *\n * @since 1.0\n * @see http:\/\/simplepie.org\/wiki\/faq\/supported_xml_namespaces\n * @param string $namespace The URL of the XML namespace of the elements you're trying to access\n * @param string $tag Tag name\n * @return array\n *\/","file":"class-simplepie.php","line":1950,"missingDoc":false,"filters":[],"uses":{"get_type":[1952],"get_feed_tags":[1955,1965],"get_channel_tags":[1975]},"used_by":[]},"SimplePie::get_base":{"doc":"\/**\n * Get the base URL value from the feed\n *\n * Uses `<xml:base>` if available, otherwise uses the first link in the\n * feed, or failing that, the URL of the feed itself.\n *\n * @see get_link\n * @see subscribe_url\n *\n * @param array $element\n * @return string\n *\/","file":"class-simplepie.php","line":1998,"missingDoc":false,"filters":[],"uses":{"get_link":[2004,2006],"subscribe_url":[2010],"get_type":[2000]},"used_by":[]},"get_link":{"doc":"\/**\n * Retrieve bookmark data based on ID.\n *\n * @since 2.0.0\n * @deprecated 2.1.0\n * @deprecated Use get_bookmark()\n * @see get_bookmark()\n *\n * @param int $bookmark_id ID of link\n * @param string $output OBJECT, ARRAY_N, or ARRAY_A\n * @return object|array\n *\/","file":"deprecated.php","line":2049,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2050],"get_bookmark":[2051]},"used_by":{"SimplePie::get_base":[2004,2006],"SimplePie::get_permalink":[2376],"SimplePie::get_favicon":[3008],"WP_Customize_Control::link":[225],"WP_Customize_Control::render_content":[299],"wp_widget_rss_output":[855],"SimplePie_Enclosure::embed":[1129,1133,1144,1148,1161,1165,1170,1180,1184,1189],"SimplePie_Item::get_permalink":[929,937],"SimplePie_Source::get_permalink":[382]}},"SimplePie::sanitize":{"doc":"\/**\n * Sanitize feed data\n *\n * @access private\n * @see SimplePie_Sanitize::sanitize()\n * @param string $data Data to sanitize\n * @param int $type One of the SIMPLEPIE_CONSTRUCT_* constants\n * @param string $base Base URL to resolve URLs against\n * @return string Sanitized data\n *\/","file":"class-simplepie.php","line":2024,"missingDoc":false,"filters":[],"uses":{"sanitize":[2026]},"used_by":[]},"SimplePie::get_title":{"doc":"\/**\n * Get the title of the feed\n *\n * Uses `<atom:title>`, `<title>` or `<dc:title>`\n *\n * @since 1.0 (previously called `get_feed_title` since 0.8)\n * @return string|null\n *\/","file":"class-simplepie.php","line":2037,"missingDoc":false,"filters":[],"uses":{"sanitize":[2041,2045,2049,2053,2057,2061,2065],"call":[2041,2045],"get_base":[2041,2045,2049,2053,2057],"get_channel_tags":[2043,2047,2051,2055,2059,2063,2039]},"used_by":[]},"SimplePie::get_category":{"doc":"\/**\n * Get a category for the feed\n *\n * @since Unknown\n * @param int $key The category that you want to return.  Remember that arrays begin with 0, not 1\n * @return SimplePie_Category|null\n *\/","file":"class-simplepie.php","line":2080,"missingDoc":false,"filters":[],"uses":{"get_categories":[2082]},"used_by":[]},"SimplePie::get_categories":{"doc":"\/**\n * Get all categories for the feed\n *\n * Uses `<atom:category>`, `<category>` or `<dc:subject>`\n *\n * @since Unknown\n * @return array|null List of {@see SimplePie_Category} objects\n *\/","file":"class-simplepie.php","line":2101,"missingDoc":false,"filters":[],"uses":{"sanitize":[2112,2116,2120,2128,2131,2141,2145],"create":[2122,2137,2141,2145],"get_channel_tags":[2105,2124,2139,2143],"array_unique":[2150]},"used_by":[]},"SimplePie::get_author":{"doc":"\/**\n * Get an author for the feed\n *\n * @since 1.1\n * @param int $key The author that you want to return.  Remember that arrays begin with 0, not 1\n * @return SimplePie_Author|null\n *\/","file":"class-simplepie.php","line":2165,"missingDoc":false,"filters":[],"uses":{"get_authors":[2167]},"used_by":[]},"SimplePie::get_authors":{"doc":"\/**\n * Get all authors for the feed\n *\n * Uses `<atom:author>`, `<author>`, `<dc:creator>` or `<itunes:author>`\n *\n * @since 1.1\n * @return array|null List of {@see SimplePie_Author} objects\n *\/","file":"class-simplepie.php","line":2186,"missingDoc":false,"filters":[],"uses":{"sanitize":[2196,2200,2204,2218,2222,2226,2235,2239,2243],"get_base":[2200,2222],"create":[2208,2230,2235,2239,2243],"get_channel_tags":[2189,2211,2233,2237,2241],"array_unique":[2248]},"used_by":[]},"SimplePie::get_contributor":{"doc":"\/**\n * Get a contributor for the feed\n *\n * @since 1.1\n * @param int $key The contrbutor that you want to return.  Remember that arrays begin with 0, not 1\n * @return SimplePie_Author|null\n *\/","file":"class-simplepie.php","line":2263,"missingDoc":false,"filters":[],"uses":{"get_contributors":[2265]},"used_by":[]},"SimplePie::get_contributors":{"doc":"\/**\n * Get all contributors for the feed\n *\n * Uses `<atom:contributor>`\n *\n * @since 1.1\n * @return array|null List of {@see SimplePie_Author} objects\n *\/","file":"class-simplepie.php","line":2284,"missingDoc":false,"filters":[],"uses":{"sanitize":[2294,2298,2302,2316,2320,2324],"get_base":[2298,2320],"create":[2306,2328],"get_channel_tags":[2287,2309],"array_unique":[2334]},"used_by":[]},"SimplePie::get_link":{"doc":"\/**\n * Get a single link for the feed\n *\n * @since 1.0 (previously called `get_feed_link` since Preview Release, `get_feed_permalink()` since 0.8)\n * @param int $key The link that you want to return.  Remember that arrays begin with 0, not 1\n * @param string $rel The relationship of the link to return\n * @return string|null Link URL\n *\/","file":"class-simplepie.php","line":2350,"missingDoc":false,"filters":[],"uses":{"get_links":[2352]},"used_by":[]},"get_links":{"doc":"\/**\n * Gets the links associated with category by id.\n *\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param int $category The category to use. If no category supplied uses all\n * @param string $before the html to output before the link\n * @param string $after the html to output after the link\n * @param string $between the html to output between the link\/image and its description.\n *\t\tNot used if no image or show_images == true\n * @param bool $show_images whether to show images (if defined).\n * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url',\n *\t\t'description', or 'rating'. Or maybe owner. If you start the name with an\n *\t\tunderscore the order will be reversed. You can also specify 'rand' as the order\n *\t\twhich will return links in a random order.\n * @param bool $show_description whether to show the description if show_images=false\/not defined.\n * @param bool $show_rating show rating stars\/chars\n * @param int $limit Limit to X entries. If not specified, all entries are shown.\n * @param int $show_updated whether to show last updated timestamp\n * @param bool $echo whether to echo the results, or return them instead\n * @return null|string\n *\/","file":"deprecated.php","line":948,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[950],"substr":[955,953,986],"get_bookmarks":[961],"get_option":[973,987,987,1004,1012],"esc_url":[976],"esc_attr":[981,982],"sanitize_bookmark_field":[981,982],"__":[987],"date":[987],"strpos":[1001],"get_linkrating":[1018]},"used_by":{"SimplePie::get_link":[2352],"get_linksbyname":[417],"get_links_withrating":[592],"get_links_list":[1067],"SimplePie_Item::get_link":[955],"SimplePie_Locator::find":[120],"SimplePie_Source::get_link":[366]}},"SimplePie::get_permalink":{"doc":"\/**\n * Get the permalink for the item\n *\n * Returns the first link available with a relationship of \"alternate\".\n * Identical to {@see get_link()} with key 0\n *\n * @see get_link\n * @since 1.0 (previously called `get_feed_link` since Preview Release, `get_feed_permalink()` since 0.8)\n * @internal Added for parity between the parent-level and the item\/entry-level.\n * @return string|null Link URL\n *\/","file":"class-simplepie.php","line":2374,"missingDoc":false,"filters":[],"uses":{"get_link":[2376]},"used_by":[]},"SimplePie::get_links":{"doc":"\/**\n * Get all links for the feed\n *\n * Uses `<atom:link>` or `<link>`\n *\n * @since Beta 2\n * @param string $rel The relationship of links to return\n * @return array|null Links found for the feed (strings)\n *\/","file":"class-simplepie.php","line":2388,"missingDoc":false,"filters":[],"uses":{"sanitize":[2400,2411,2418,2422,2426],"get_base":[2400,2411,2418,2422,2426],"get_channel_tags":[2393,2404,2416,2420,2424],"array_keys":[2429],"array_merge":[2436],"substr":[2444,2446],"call":[2432],"array_unique":[2448]},"used_by":[]},"SimplePie::get_all_discovered_feeds":{"doc":"","file":"class-simplepie.php","line":2462,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie::get_description":{"doc":"\/**\n * Get the content for the item\n *\n * Uses `<atom:subtitle>`, `<atom:tagline>`, `<description>`,\n * `<dc:description>`, `<itunes:summary>` or `<itunes:subtitle>`\n *\n * @since 1.0 (previously called `get_feed_description()` since 0.8)\n * @return string|null\n *\/","file":"class-simplepie.php","line":2476,"missingDoc":false,"filters":[],"uses":{"sanitize":[2480,2484,2488,2492,2496,2500,2504,2508,2512],"call":[2480,2484],"get_base":[2480,2484,2488,2492,2496,2508,2512],"get_channel_tags":[2482,2486,2490,2494,2498,2502,2506,2510,2478]},"used_by":[]},"SimplePie::get_copyright":{"doc":"\/**\n * Get the copyright info for the feed\n *\n * Uses `<atom:rights>`, `<atom:copyright>` or `<dc:rights>`\n *\n * @since 1.0 (previously called `get_feed_copyright()` since 0.8)\n * @return string|null\n *\/","file":"class-simplepie.php","line":2528,"missingDoc":false,"filters":[],"uses":{"sanitize":[2532,2536,2540,2544,2548],"call":[2532,2536],"get_base":[2532,2536],"get_channel_tags":[2534,2538,2542,2546,2530]},"used_by":[]},"SimplePie::get_language":{"doc":"\/**\n * Get the language for the feed\n *\n * Uses `<language>`, `<dc:language>`, or @xml_lang\n *\n * @since 1.0 (previously called `get_feed_language()` since 0.8)\n * @return string|null\n *\/","file":"class-simplepie.php","line":2564,"missingDoc":false,"filters":[],"uses":{"sanitize":[2568,2572,2576,2580,2584,2588,2592],"get_channel_tags":[2570,2574,2566]},"used_by":[]},"SimplePie::get_latitude":{"doc":"\/**\n * Get the latitude coordinates for the item\n *\n * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications\n *\n * Uses `<geo:lat>` or `<georss:point>`\n *\n * @since 1.0\n * @link http:\/\/www.w3.org\/2003\/01\/geo\/ W3C WGS84 Basic Geo\n * @link http:\/\/www.georss.org\/ GeoRSS\n * @return string|null\n *\/","file":"class-simplepie.php","line":2612,"missingDoc":false,"filters":[],"uses":{"get_channel_tags":[2619,2615],"preg_match":[2619],"trim":[2619]},"used_by":[]},"SimplePie::get_longitude":{"doc":"\/**\n * Get the longitude coordinates for the feed\n *\n * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications\n *\n * Uses `<geo:long>`, `<geo:lon>` or `<georss:point>`\n *\n * @since 1.0\n * @link http:\/\/www.w3.org\/2003\/01\/geo\/ W3C WGS84 Basic Geo\n * @link http:\/\/www.georss.org\/ GeoRSS\n * @return string|null\n *\/","file":"class-simplepie.php","line":2641,"missingDoc":false,"filters":[],"uses":{"get_channel_tags":[2647,2651,2643],"preg_match":[2651],"trim":[2651]},"used_by":[]},"SimplePie::get_image_title":{"doc":"\/**\n * Get the feed logo's title\n *\n * RSS 0.9.0, 1.0 and 2.0 feeds are allowed to have a \"feed logo\" title.\n *\n * Uses `<image><title>` or `<image><dc:title>`\n *\n * @return string|null\n *\/","file":"class-simplepie.php","line":2670,"missingDoc":false,"filters":[],"uses":{"sanitize":[2674,2678,2682,2686,2690],"get_image_tags":[2676,2680,2684,2688,2672]},"used_by":[]},"SimplePie::get_image_url":{"doc":"\/**\n * Get the feed logo's URL\n *\n * RSS 0.9.0, 2.0, Atom 1.0, and feeds with iTunes RSS tags are allowed to\n * have a \"feed logo\" URL. This points directly to the image itself.\n *\n * Uses `<itunes:image>`, `<atom:logo>`, `<atom:icon>`,\n * `<image><title>` or `<image><dc:title>`\n *\n * @return string|null\n *\/","file":"class-simplepie.php","line":2709,"missingDoc":false,"filters":[],"uses":{"sanitize":[2713,2717,2721,2725,2729,2733],"get_channel_tags":[2715,2719,2711],"get_base":[2717,2721,2725,2729,2733],"get_image_tags":[2723,2727,2731]},"used_by":[]},"SimplePie::get_image_link":{"doc":"\/**\n * Get the feed logo's link\n *\n * RSS 0.9.0, 1.0 and 2.0 feeds are allowed to have a \"feed logo\" link. This\n * points to a human-readable page that the image should link to.\n *\n * Uses `<itunes:image>`, `<atom:logo>`, `<atom:icon>`,\n * `<image><title>` or `<image><dc:title>`\n *\n * @return string|null\n *\/","file":"class-simplepie.php","line":2753,"missingDoc":false,"filters":[],"uses":{"sanitize":[2757,2761,2765],"get_base":[2757,2761,2765],"get_image_tags":[2759,2763,2755]},"used_by":[]},"SimplePie::get_image_width":{"doc":"\/**\n * Get the feed logo's link\n *\n * RSS 2.0 feeds are allowed to have a \"feed logo\" width.\n *\n * Uses `<image><width>` or defaults to 88.0 if no width is specified and\n * the feed is an RSS 2.0 feed.\n *\n * @return int|float|null\n *\/","file":"class-simplepie.php","line":2783,"missingDoc":false,"filters":[],"uses":{"round":[2787],"get_type":[2789],"get_image_tags":[2789,2785]},"used_by":[]},"SimplePie::get_image_height":{"doc":"\/**\n * Get the feed logo's height\n *\n * RSS 2.0 feeds are allowed to have a \"feed logo\" height.\n *\n * Uses `<image><height>` or defaults to 31.0 if no height is specified and\n * the feed is an RSS 2.0 feed.\n *\n * @return int|float|null\n *\/","file":"class-simplepie.php","line":2809,"missingDoc":false,"filters":[],"uses":{"round":[2813],"get_type":[2815],"get_image_tags":[2815,2811]},"used_by":[]},"SimplePie::get_item_quantity":{"doc":"\/**\n * Get the number of items in the feed\n *\n * This is well-suited for {@link http:\/\/php.net\/for for()} loops with\n * {@see get_item()}\n *\n * @param int $max Maximum value to return. 0 for no limit\n * @return int Number of items in the feed\n *\/","file":"class-simplepie.php","line":2834,"missingDoc":false,"filters":[],"uses":{"count":[2837],"get_items":[2837]},"used_by":[]},"SimplePie::get_item":{"doc":"\/**\n * Get a single item from the feed\n *\n * This is better suited for {@link http:\/\/php.net\/for for()} loops, whereas\n * {@see get_items()} is better suited for\n * {@link http:\/\/php.net\/foreach foreach()} loops.\n *\n * @see get_item_quantity()\n * @since Beta 2\n * @param int $key The item that you want to return.  Remember that arrays begin with 0, not 1\n * @return SimplePie_Item|null\n *\/","file":"class-simplepie.php","line":2860,"missingDoc":false,"filters":[],"uses":{"get_items":[2862]},"used_by":[]},"SimplePie::get_items":{"doc":"\/**\n * Get all items from the feed\n *\n * This is better suited for {@link http:\/\/php.net\/for for()} loops, whereas\n * {@see get_items()} is better suited for\n * {@link http:\/\/php.net\/foreach foreach()} loops.\n *\n * @see get_item_quantity\n * @since Beta 2\n * @param int $start Index to start at\n * @param int $end Number of items to return. 0 for all items after `$start`\n * @return array|null List of {@see SimplePie_Item} objects\n *\/","file":"class-simplepie.php","line":2886,"missingDoc":false,"filters":[],"uses":{"array_keys":[2899,2907,2915,2923,2931],"create":[2902,2910,2918,2926,2934],"get_feed_tags":[2897,2905,2913,2921],"get_channel_tags":[2929],"get_date":[2950],"usort":[2960],"get_class":[2960],"array_slice":[2973,2977]},"used_by":[]},"SimplePie::set_favicon_handler":{"doc":"\/**\n * Set the favicon handler\n *\n * @deprecated Use your own favicon handling instead\n *\/","file":"class-simplepie.php","line":2991,"missingDoc":false,"filters":[],"uses":{"defined":[2993],"trigger_error":[2994]},"used_by":[]},"SimplePie::get_favicon":{"doc":"\/**\n * Get the favicon for the current feed\n *\n * @deprecated Use your own favicon handling instead\n *\/","file":"class-simplepie.php","line":3003,"missingDoc":false,"filters":[],"uses":{"defined":[3005],"trigger_error":[3006],"urlencode":[3010],"get_link":[3008]},"used_by":[]},"SimplePie::__call":{"doc":"\/**\n * Magic method handler\n *\n * @param string $method Method name\n * @param array $args Arguments to the method\n * @return mixed\n *\/","file":"class-simplepie.php","line":3023,"missingDoc":false,"filters":[],"uses":{"defined":[3027,3033],"trigger_error":[3028,3034,3042],"strpos":[3025],"get_class":[3038],"debug_backtrace":[3039]},"used_by":[]},"SimplePie::sort_items":{"doc":"\/**\n * Sorting callback for items\n *\n * @access private\n * @param SimplePie $a\n * @param SimplePie $b\n * @return boolean\n *\/","file":"class-simplepie.php","line":3053,"missingDoc":false,"filters":[],"uses":{"get_date":[3055,3055]},"used_by":[]},"SimplePie::merge_items":{"doc":"\/**\n * Merge items from several feeds into one\n *\n * If you're merging multiple feeds together, they need to all have dates\n * for the items or else SimplePie will refuse to sort them.\n *\n * @link http:\/\/simplepie.org\/wiki\/tutorial\/sort_multiple_feeds_by_time_and_date#if_feeds_require_separate_per-feed_settings\n * @param array $urls List of SimplePie feed objects to merge\n * @param int $start Starting item\n * @param int $end Number of items to return\n * @param int $limit Maximum number of items per feed\n * @return array\n *\/","file":"class-simplepie.php","line":3071,"missingDoc":false,"filters":[],"uses":{"array_merge":[3080],"get_items":[3080],"trigger_error":[3084,3114],"get_date":[3091],"usort":[3100],"get_class":[3100],"array_slice":[3105,3109],"is_array":[3073],"sizeof":[3073]},"used_by":[]},"SMTP::__construct":{"doc":"\/**\n * Initialize the class so that the data is in a known state.\n * @access public\n * @return void\n *\/","file":"class-smtp.php","line":90,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SMTP::Connect":{"doc":"\/**\n * Connect to the server specified on the port specified.\n * If the port is not specified use the default SMTP_PORT.\n * If tval is specified then a connection will try and be\n * established with the server for that number of seconds.\n * If tval is not specified the default is 30 seconds to\n * try on the connection.\n *\n * SMTP CODE SUCCESS: 220\n * SMTP CODE FAILURE: 421\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":115,"missingDoc":false,"filters":[],"uses":{"connected":[120],"fsockopen":[131],"socket_set_timeout":[150],"substr":[149],"get_lines":[153]},"used_by":[]},"SMTP::StartTLS":{"doc":"\/**\n * Initiate a TLS communication with the server.\n *\n * SMTP CODE 220 Ready to start TLS\n * SMTP CODE 501 Syntax error (no parameters allowed)\n * SMTP CODE 454 TLS not available due to temporary reason\n * @access public\n * @return bool success\n *\/","file":"class-smtp.php","line":171,"missingDoc":false,"filters":[],"uses":{"connected":[174],"fputs":[179],"get_lines":[181],"substr":[182,192],"stream_socket_enable_crypto":[200]},"used_by":[]},"SMTP::Authenticate":{"doc":"\/**\n * Performs SMTP authentication.  Must be run after running the\n * Hello() method.  Returns true if successfully authenticated.\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":213,"missingDoc":false,"filters":[],"uses":{"fputs":[215,232,249],"get_lines":[217,234,251],"substr":[218,224,235,241,252,258],"base64_encode":[232,249]},"used_by":[]},"SMTP::Connected":{"doc":"\/**\n * Returns true if connected to a server otherwise false\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":273,"missingDoc":false,"filters":[],"uses":{"socket_get_status":[275],"Close":[281]},"used_by":[]},"SMTP::Close":{"doc":"\/**\n * Closes the socket and cleans up the state of the class.\n * It is not considered good to use this function without\n * first trying to use QUIT.\n * @access public\n * @return void\n *\/","file":"class-smtp.php","line":296,"missingDoc":false,"filters":[],"uses":{"fclose":[301]},"used_by":[]},"SMTP::Data":{"doc":"\/**\n * Issues a data command and sends the msg_data to the server\n * finializing the mail transaction. $msg_data is the message\n * that is to be send with the headers. Each header needs to be\n * on a single line followed by a <CRLF> with the message headers\n * and the message body being seperated by and additional <CRLF>.\n *\n * Implements rfc 821: DATA <CRLF>\n *\n * SMTP CODE INTERMEDIATE: 354\n *     [data]\n *     <CRLF>.<CRLF>\n *     SMTP CODE SUCCESS: 250\n *     SMTP CODE FAILURE: 552,554,451,452\n * SMTP CODE FAILURE: 451,554\n * SMTP CODE ERROR  : 500,501,503,421\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":329,"missingDoc":false,"filters":[],"uses":{"connected":[332],"fputs":[338,427,432],"get_lines":[340,434],"substr":[341,351,383,398,403,404,406,407,423,435,445],"str_replace":[370,371],"explode":[372],"strpos":[383],"strstr":[385],"each":[391,420],"strlen":[397,421],"strrpos":[398]},"used_by":[]},"SMTP::Hello":{"doc":"\/**\n * Sends the HELO command to the smtp server.\n * This makes sure that we and the server are in\n * the same known state.\n *\n * Implements from rfc 821: HELO <SP> <domain> <CRLF>\n *\n * SMTP CODE SUCCESS: 250\n * SMTP CODE ERROR  : 500, 501, 504, 421\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":466,"missingDoc":false,"filters":[],"uses":{"connected":[469],"SendHello":[483,482]},"used_by":[]},"SMTP::SendHello":{"doc":"\/**\n * Sends a HELO\/EHLO command.\n * @access private\n * @return bool\n *\/","file":"class-smtp.php","line":496,"missingDoc":false,"filters":[],"uses":{"fputs":[497],"get_lines":[499],"substr":[500,510]},"used_by":[]},"SMTP::Mail":{"doc":"\/**\n * Starts a mail transaction from the email address specified in\n * $from. Returns true if successful or false otherwise. If True\n * the mail transaction is started and then one or more Recipient\n * commands may be called followed by a Data command.\n *\n * Implements rfc 821: MAIL <SP> FROM:<reverse-path> <CRLF>\n *\n * SMTP CODE SUCCESS: 250\n * SMTP CODE SUCCESS: 552,451,452\n * SMTP CODE SUCCESS: 500,501,421\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":536,"missingDoc":false,"filters":[],"uses":{"connected":[539],"fputs":[546],"get_lines":[548],"substr":[549,559]},"used_by":[]},"SMTP::Quit":{"doc":"\/**\n * Sends the quit command to the server and then closes the socket\n * if there is no error or the $close_on_error argument is true.\n *\n * Implements from rfc 821: QUIT <CRLF>\n *\n * SMTP CODE SUCCESS: 221\n * SMTP CODE ERROR  : 500\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":579,"missingDoc":false,"filters":[],"uses":{"connected":[582],"fputs":[589],"get_lines":[592],"substr":[601,606],"Close":[614]},"used_by":[]},"SMTP::Recipient":{"doc":"\/**\n * Sends the command RCPT to the SMTP server with the TO: argument of $to.\n * Returns true if the recipient was accepted false if it was rejected.\n *\n * Implements from rfc 821: RCPT <SP> TO:<forward-path> <CRLF>\n *\n * SMTP CODE SUCCESS: 250,251\n * SMTP CODE FAILURE: 550,551,552,553,450,451,452\n * SMTP CODE ERROR  : 500,501,503,421\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":632,"missingDoc":false,"filters":[],"uses":{"connected":[635],"fputs":[641],"get_lines":[643],"substr":[644,654]},"used_by":[]},"SMTP::Reset":{"doc":"\/**\n * Sends the RSET command to abort and transaction that is\n * currently in progress. Returns true if successful false\n * otherwise.\n *\n * Implements rfc 821: RSET <CRLF>\n *\n * SMTP CODE SUCCESS: 250\n * SMTP CODE ERROR  : 500,501,504,421\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":675,"missingDoc":false,"filters":[],"uses":{"connected":[678],"fputs":[684],"get_lines":[686],"substr":[687,697]},"used_by":[]},"SMTP::SendAndMail":{"doc":"\/**\n * Starts a mail transaction from the email address specified in\n * $from. Returns true if successful or false otherwise. If True\n * the mail transaction is started and then one or more Recipient\n * commands may be called followed by a Data command. This command\n * will send the message to the users terminal if they are logged\n * in and send them an email.\n *\n * Implements rfc 821: SAML <SP> FROM:<reverse-path> <CRLF>\n *\n * SMTP CODE SUCCESS: 250\n * SMTP CODE SUCCESS: 552,451,452\n * SMTP CODE SUCCESS: 500,501,502,421\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":723,"missingDoc":false,"filters":[],"uses":{"connected":[726],"fputs":[732],"get_lines":[734],"substr":[735,745]},"used_by":[]},"SMTP::Turn":{"doc":"\/**\n * This is an optional command for SMTP that this class does not\n * support. This method is here to make the RFC821 Definition\n * complete for this class and __may__ be implimented in the future\n *\n * Implements from rfc 821: TURN <CRLF>\n *\n * SMTP CODE SUCCESS: 250\n * SMTP CODE FAILURE: 502\n * SMTP CODE ERROR  : 500, 503\n * @access public\n * @return bool\n *\/","file":"class-smtp.php","line":767,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SMTP::getError":{"doc":"\/**\n * Get the current error\n * @access public\n * @return array\n *\/","file":"class-smtp.php","line":781,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SMTP::get_lines":{"doc":"\/**\n * Read in as many lines as possible\n * either before eof or socket timeout occurs on the operation.\n * With SMTP we can tell if we have more lines to read if the\n * 4th character is '-' symbol. If it is a space then we don't\n * need to read anything else.\n * @access private\n * @return string\n *\/","file":"class-smtp.php","line":798,"missingDoc":false,"filters":[],"uses":{"feof":[800],"fgets":[801],"substr":[811]},"used_by":[]},"_deprecated_file":{"doc":"\/**\n * Marks a file as deprecated and informs when it has been used.\n *\n * There is a hook deprecated_file_included that will be called that can be used\n * to get the backtrace up to what file and function included the deprecated\n * file.\n *\n * The current behavior is to trigger a user error if WP_DEBUG is true.\n *\n * This function is to be used in every file that is deprecated.\n *\n * @package WordPress\n * @subpackage Debug\n * @since 2.5.0\n * @access private\n *\n * @uses do_action() Calls 'deprecated_file_included' and passes the file name, what to use instead,\n *   the version in which the file was deprecated, and any message regarding the change.\n * @uses apply_filters() Calls 'deprecated_file_trigger_error' and expects boolean value of true to do\n *   trigger or false to not trigger error.\n *\n * @param string $file The file that was included\n * @param string $version The version of WordPress that deprecated the file\n * @param string $replacement Optional. The file that should have been included based on ABSPATH\n * @param string $message Optional. A message regarding the change\n *\/","file":"functions.php","line":2893,"missingDoc":false,"filters":["'deprecated_file_included'","'deprecated_file_trigger_error'"],"uses":{"trigger_error":[2901,2903],"sprintf":[2901,2903],"__":[2901,2903],"is_null":[2900]},"used_by":{"__main":[6,7,7,8,18,10,10,10,10,10],"wp_get_active_and_valid_plugins":[485]}},"Snoopy::fetch":{"doc":"","file":"class-snoopy.php","line":129,"missingDoc":true,"filters":[],"uses":{"parse_url":[133],"strtolower":[143],"_httprequest":[154,160],"_disconnect":[163],"fetch":[176,190,236,250],"preg_match":[171,231],"preg_quote":[171,231],"each":[186,246],"count":[181,241],"_connect":[149],"is_executable":[208],"function_exists":[207],"_httpsrequest":[216,222]},"used_by":[]},"Snoopy::submit":{"doc":"","file":"class-snoopy.php","line":279,"missingDoc":true,"filters":[],"uses":{"_prepare_post_body":[283],"parse_url":[285],"strtolower":[295],"_httprequest":[306,312],"_disconnect":[315],"_expandlinks":[323,390],"preg_match":[322,326,389,393],"fetch":[332,348,399,415],"submit":[334,401],"strpos":[331,398],"preg_quote":[326,393],"each":[344,411],"count":[339,406],"_connect":[301],"is_executable":[367],"function_exists":[366],"_httpsrequest":[375,381]},"used_by":[]},"Snoopy::fetchlinks":{"doc":"","file":"class-snoopy.php","line":441,"missingDoc":true,"filters":[],"uses":{"count":[449],"_striplinks":[450,453],"is_array":[447],"_expandlinks":[456],"fetch":[443]},"used_by":[]},"Snoopy::fetchform":{"doc":"","file":"class-snoopy.php","line":470,"missingDoc":true,"filters":[],"uses":{"count":[478],"_stripform":[479,482],"is_array":[476],"fetch":[473]},"used_by":[]},"Snoopy::fetchtext":{"doc":"","file":"class-snoopy.php","line":498,"missingDoc":true,"filters":[],"uses":{"count":[504],"_striptext":[505,508],"is_array":[502],"fetch":[500]},"used_by":[]},"Snoopy::submitlinks":{"doc":"","file":"class-snoopy.php","line":522,"missingDoc":true,"filters":[],"uses":{"count":[530],"_striplinks":[532,539],"_expandlinks":[534,541],"is_array":[528],"submit":[524]},"used_by":[]},"Snoopy::submittext":{"doc":"","file":"class-snoopy.php","line":556,"missingDoc":true,"filters":[],"uses":{"count":[564],"_striptext":[566,573],"_expandlinks":[568,575],"is_array":[562],"submit":[558]},"used_by":[]},"Snoopy::set_submit_multipart":{"doc":"","file":"class-snoopy.php","line":590,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Snoopy::set_submit_normal":{"doc":"","file":"class-snoopy.php","line":601,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Snoopy::_striplinks":{"doc":"","file":"class-snoopy.php","line":621,"missingDoc":true,"filters":[],"uses":{"preg_match_all":[623],"each":[632,638]},"used_by":[]},"Snoopy::_stripform":{"doc":"","file":"class-snoopy.php","line":655,"missingDoc":true,"filters":[],"uses":{"preg_match_all":[657],"implode":[660]},"used_by":[]},"Snoopy::_striptext":{"doc":"","file":"class-snoopy.php","line":675,"missingDoc":true,"filters":[],"uses":{"chr":[714,715,716,717,718,719,720,721,722,723,724,725,726,727,728],"preg_replace":[731]},"used_by":[]},"Snoopy::_expandlinks":{"doc":"","file":"class-snoopy.php","line":744,"missingDoc":true,"filters":[],"uses":{"preg_match":[747],"preg_replace":[749,750,769],"parse_url":[751],"preg_quote":[755]},"used_by":[]},"Snoopy::_httprequest":{"doc":"","file":"class-snoopy.php","line":784,"missingDoc":true,"filters":[],"uses":{"setcookies":[788],"parse_url":[790],"is_array":[808,822,929],"reset":[811],"urlencode":[815],"substr":[817],"count":[812,925],"each":[824],"strlen":[834,850,901],"base64_encode":[836,840],"socket_set_timeout":[847],"fwrite":[850],"fgets":[855],"_check_timeout":[857,907],"preg_match":[870,877,872,867,888,886,915],"chop":[870],"fread":[900],"_expandlinks":[918,926],"preg_match_all":[922]},"used_by":[]},"Snoopy::_httpsrequest":{"doc":"","file":"class-snoopy.php","line":947,"missingDoc":true,"filters":[],"uses":{"setcookies":[950],"parse_url":[954],"is_array":[972,986,1075],"reset":[975],"urlencode":[979],"substr":[981],"count":[976,1002,1031,1071],"each":[988],"strlen":[998],"base64_encode":[1000],"strtr":[1003],"tempnam":[1013],"exec":[1015],"escapeshellcmd":[1015],"implode":[1024],"file":[1026],"preg_match":[1038,1045,1040,1035,1054,1062],"chop":[1038],"_expandlinks":[1064,1072],"preg_match_all":[1068],"unlink":[1081]},"used_by":[]},"Snoopy::setcookies":{"doc":"","file":"class-snoopy.php","line":1091,"missingDoc":true,"filters":[],"uses":{"count":[1093],"urldecode":[1096],"preg_match":[1095]},"used_by":[]},"Snoopy::_check_timeout":{"doc":"","file":"class-snoopy.php","line":1107,"missingDoc":true,"filters":[],"uses":{"socket_get_status":[1110]},"used_by":[]},"Snoopy::_connect":{"doc":"","file":"class-snoopy.php","line":1125,"missingDoc":true,"filters":[],"uses":{"fsockopen":[1142]},"used_by":[]},"Snoopy::_disconnect":{"doc":"","file":"class-snoopy.php","line":1178,"missingDoc":true,"filters":[],"uses":{"fclose":[1180]},"used_by":[]},"Snoopy::_prepare_post_body":{"doc":"","file":"class-snoopy.php","line":1192,"missingDoc":true,"filters":[],"uses":{"settype":[1194,1195,1234],"count":[1198,1198],"reset":[1203,1217,1232],"each":[1204,1206,1218,1220,1233,1235],"urlencode":[1207,1207,1210,1210],"is_array":[1205,1219],"is_object":[1205,1219],"md5":[1215],"uniqid":[1215],"microtime":[1215],"is_readable":[1236],"fopen":[1238],"fread":[1239],"filesize":[1239],"fclose":[1240],"basename":[1241]},"used_by":[]},"WP_Admin_Bar::__get":{"doc":"","file":"class-wp-admin-bar.php","line":15,"missingDoc":true,"filters":[],"uses":{"is_ssl":[18],"_deprecated_argument":[21]},"used_by":[]},"WP_Admin_Bar::initialize":{"doc":"","file":"class-wp-admin-bar.php","line":27,"missingDoc":true,"filters":["'admin_bar_init'"],"uses":{"get_blogs_of_user":[32],"get_current_user_id":[32,34],"get_active_blog_for_user":[34],"user_admin_url":[35],"trailingslashit":[35,39],"get_home_url":[35],"get_current_blog_id":[38],"home_url":[39],"is_multisite":[33],"is_user_logged_in":[30],"add_action":[44,46,56],"get_theme_support":[49],"current_theme_supports":[48],"wp_enqueue_script":[58],"wp_enqueue_style":[59]},"used_by":[]},"get_blogs_of_user":{"doc":"\/**\n * Get the blogs a user belongs to.\n *\n * @since 3.0.0\n *\n * @param int $user_id User ID\n * @param bool $all Whether to retrieve all blogs, or only blogs that are not marked as deleted, archived, or spam.\n * @return array A list of the user's blogs. An empty array if the user doesn't exist or belongs to no blogs.\n *\/","file":"user.php","line":681,"missingDoc":false,"filters":["'get_blogs_of_user'"],"uses":{"get_user_meta":[690],"get_current_blog_id":[695],"get_option":[698,702],"is_multisite":[694],"get_blog_details":[712,741],"defined":[711],"array_keys":[729],"substr":[732],"strpos":[734],"str_replace":[736],"is_numeric":[737]},"used_by":{"WP_Admin_Bar::initialize":[32],"wp_xmlrpc_server::wp_getUsersBlogs":[475],"get_dashboard_url":[2263],"get_active_blog_for_user":[72,96],"remove_user_from_blog":[230,252],"get_most_recent_post_of_user":[1367],"wp_user_settings":[544],"wp_set_all_user_settings":[706],"is_user_member_of_blog":[780]}},"get_active_blog_for_user":{"doc":"\/**\n * Get one of a user's active blogs\n *\n * Returns the user's primary blog, if she has one and\n * it is active. If it's inactive, function returns another\n * active blog of the user. If none are found, the user\n * is added as a Subscriber to the Dashboard Blog and that blog\n * is returned.\n *\n * @since MU 1.0\n * @uses get_blogs_of_user()\n * @uses add_user_to_blog()\n * @uses get_blog_details()\n *\n * @param int $user_id The unique ID of the user\n * @return object The blog object\n *\/","file":"ms-functions.php","line":70,"missingDoc":false,"filters":[],"uses":{"get_blogs_of_user":[72,96],"is_multisite":[76],"get_user_meta":[79,105,107],"current":[80],"update_user_meta":[83,91,106,108],"get_blog_details":[84,86,102],"add_user_to_blog":[90],"is_object":[103,95],"is_array":[98],"count":[98]},"used_by":{"WP_Admin_Bar::initialize":[34],"get_dashboard_url":[2273]}},"user_admin_url":{"doc":"\/**\n * Retrieve the url to the admin area for the current user.\n *\n * @package WordPress\n * @since 3.0.0\n *\n * @param string $path Optional path relative to the admin url.\n * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Admin url link with optional path appended.\n*\/","file":"link-template.php","line":2188,"missingDoc":false,"filters":["'user_admin_url'"],"uses":{"network_site_url":[2189],"ltrim":[2192],"is_string":[2191],"strpos":[2191]},"used_by":{"WP_Admin_Bar::initialize":[35],"self_admin_url":[2211],"get_dashboard_url":[2265,2277],"get_edit_profile_url":[2297]}},"get_theme_support":{"doc":"\/**\n * Gets the theme support arguments passed when registering that support\n *\n * @since 3.1\n * @param string $feature the feature to check\n * @return array The array of extra arguments\n *\/","file":"theme.php","line":1429,"missingDoc":false,"filters":[],"uses":{"func_num_args":[1434],"array_slice":[1437],"func_get_args":[1437]},"used_by":{"WP_Admin_Bar::initialize":[49],"WP_Customize_Manager::register_controls":[752,775,797,817,877],"wp_xmlrpc_server::wp_getPostFormats":[3374],"get_header_textcolor":[854],"display_header_text":[877],"get_header_image":[889],"is_random_header_image":[968],"get_custom_header":[1040,1058,1059],"get_background_image":[1109],"get_background_color":[1129],"_custom_header_background_just_in_time":[1397,1411],"_remove_theme_support":[1494,1504]}},"wp_enqueue_script":{"doc":"\/**\n * Enqueues script.\n *\n * Registers the script if src provided (does NOT overwrite) and enqueues.\n *\n * @since r16\n * @see wp_register_script() For parameter information.\n *\/","file":"functions.wp-scripts.php","line":125,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[129],"sprintf":[129],"__":[129],"did_action":[128],"is_a":[127],"explode":[135],"add":[136],"add_data":[138],"enqueue":[140]},"used_by":{"WP_Admin_Bar::initialize":[58],"WP_Customize_Color_Control::enqueue":[354],"WP_Customize_Upload_Control::enqueue":[413],"WP_Customize_Manager::customize_preview_init":[332],"_WP_Editors::enqueue_scripts":[479,482,485,488,489,494,498],"add_thickbox":[2117],"wp_enqueue_media":[1542],"__main":[36]}},"wp_enqueue_style":{"doc":"\/**\n * Enqueue a CSS style file.\n *\n * Registers the style if src provided (does NOT overwrite) and enqueues.\n *\n * @since r79\n * @see WP_Styles::add(), WP_Styles::enqueue()\n * @global object $wp_styles The WP_Styles object for printing styles.\n * @link http:\/\/www.w3.org\/TR\/CSS2\/media.html#media-types List of CSS media types.\n *\n * @param string $handle Name of the stylesheet.\n * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '\/css\/mystyle.css'.\n * @param array $deps Array of handles (names) of any stylesheet that this stylesheet depends on.\n *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies.\n * @param string|bool $ver String specifying the stylesheet version number, if it has one. This parameter\n *  is used to ensure that the correct version is sent to the client regardless of caching, and so should be included\n *  if a version number is available and makes sense for the stylesheet.\n * @param string $media The media for which this stylesheet has been defined.\n *\/","file":"functions.wp-styles.php","line":133,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[137],"sprintf":[137],"__":[137],"did_action":[136],"is_a":[135],"explode":[143],"add":[144],"enqueue":[146]},"used_by":{"WP_Admin_Bar::initialize":[59],"WP_Customize_Color_Control::enqueue":[355],"_WP_Editors::enqueue_scripts":[490],"wp_admin_css":[2098],"add_thickbox":[2118],"wp_enqueue_media":[1543]}},"WP_Admin_Bar::add_menu":{"doc":"","file":"class-wp-admin-bar.php","line":64,"missingDoc":true,"filters":[],"uses":{"add_node":[65]},"used_by":[]},"WP_Admin_Bar::remove_menu":{"doc":"","file":"class-wp-admin-bar.php","line":68,"missingDoc":true,"filters":[],"uses":{"remove_node":[69]},"used_by":[]},"WP_Admin_Bar::add_node":{"doc":"\/**\n * Add a node to the menu.\n *\n * @param array $args - The arguments for each node.\n * - id         - string    - The ID of the item.\n * - title      - string    - The title of the node.\n * - parent     - string    - The ID of the parent node. Optional.\n * - href       - string    - The link for the item. Optional.\n * - group      - boolean   - If the node is a group. Optional. Default false.\n * - meta       - array     - Meta data including the following keys: html, class, onclick, target, title, tabindex.\n *\/","file":"class-wp-admin-bar.php","line":83,"missingDoc":false,"filters":[],"uses":{"array_merge":[86],"func_get_arg":[86,86,85],"func_num_args":[85],"is_string":[85],"get_object_vars":[89,112],"is_object":[88],"_doing_it_wrong":[96],"__":[96],"esc_attr":[98],"sanitize_title":[98],"trim":[98],"get_node":[111],"wp_parse_args":[116,118],"_deprecated_argument":[127],"sprintf":[127],"_set_node":[131]},"used_by":[]},"_doing_it_wrong":{"doc":"\/**\n * Marks something as being incorrectly called.\n *\n * There is a hook doing_it_wrong_run that will be called that can be used\n * to get the backtrace up to what file and function called the deprecated\n * function.\n *\n * The current behavior is to trigger a user error if WP_DEBUG is true.\n *\n * @package WordPress\n * @subpackage Debug\n * @since 3.1.0\n * @access private\n *\n * @uses do_action() Calls 'doing_it_wrong_run' and passes the function arguments.\n * @uses apply_filters() Calls 'doing_it_wrong_trigger_error' and expects boolean value of true to do\n *   trigger or false to not trigger error.\n *\n * @param string $function The function that was called.\n * @param string $message A message explaining what has been done incorrectly.\n * @param string $version The version of WordPress where the message was added.\n *\/","file":"functions.php","line":2973,"missingDoc":false,"filters":["'doing_it_wrong_run'","'doing_it_wrong_trigger_error'"],"uses":{"is_null":[2979],"sprintf":[2979,2981],"__":[2979,2980,2981],"trigger_error":[2981]},"used_by":{"WP_Admin_Bar::add_node":[96],"wp_print_scripts":[29],"wp_register_script":[56],"wp_localize_script":[90],"wp_deregister_script":[109],"wp_enqueue_script":[129],"wp_dequeue_script":[153],"wp_script_is":[179],"wp_print_styles":[30],"wp_add_inline_style":[57],"wp_register_style":[85],"wp_deregister_style":[106],"wp_enqueue_style":[137],"wp_dequeue_style":[159],"wp_style_is":[186],"check_admin_referer":[808],"register_uninstall_hook":[679],"is_archive":[143],"is_post_type_archive":[164],"is_attachment":[184],"is_author":[208],"is_category":[232],"is_tag":[256],"is_tax":[285],"is_comments_popup":[305],"is_date":[325],"is_day":[345],"is_feed":[366],"is_comment_feed":[386],"is_front_page":[416],"is_home":[445],"is_month":[465],"is_page":[492],"is_paged":[512],"is_preview":[532],"is_robots":[552],"is_search":[572],"is_single":[601],"is_singular":[628],"is_time":[648],"is_trackback":[668],"is_year":[688],"is_404":[708]}},"WP_Admin_Bar::_set_node":{"doc":"","file":"class-wp-admin-bar.php","line":134,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Admin_Bar::get_node":{"doc":"\/**\n * Gets a node.\n *\n * @return object Node.\n *\/","file":"class-wp-admin-bar.php","line":143,"missingDoc":false,"filters":[],"uses":{"_get_node":[144]},"used_by":[]},"WP_Admin_Bar::_get_node":{"doc":"","file":"class-wp-admin-bar.php","line":148,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Admin_Bar::get_nodes":{"doc":"","file":"class-wp-admin-bar.php","line":159,"missingDoc":true,"filters":[],"uses":{"_get_nodes":[160]},"used_by":[]},"WP_Admin_Bar::_get_nodes":{"doc":"","file":"class-wp-admin-bar.php","line":169,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Admin_Bar::add_group":{"doc":"\/**\n * Add a group to a menu node.\n *\n * @since 3.3.0\n *\n * @param array $args - The arguments for each node.\n * - id         - string    - The ID of the item.\n * - parent     - string    - The ID of the parent node. Optional. Default root.\n * - meta       - array     - Meta data including the following keys: class, onclick, target, title.\n *\/","file":"class-wp-admin-bar.php","line":186,"missingDoc":false,"filters":[],"uses":{"add_node":[189]},"used_by":[]},"WP_Admin_Bar::remove_node":{"doc":"\/**\n * Remove a node.\n *\n * @param string The ID of the item.\n *\/","file":"class-wp-admin-bar.php","line":197,"missingDoc":false,"filters":[],"uses":{"_unset_node":[198]},"used_by":[]},"WP_Admin_Bar::_unset_node":{"doc":"","file":"class-wp-admin-bar.php","line":201,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Admin_Bar::render":{"doc":"","file":"class-wp-admin-bar.php","line":205,"missingDoc":true,"filters":[],"uses":{"_bind":[206],"_render":[208]},"used_by":[]},"WP_Admin_Bar::_bind":{"doc":"","file":"class-wp-admin-bar.php","line":211,"missingDoc":true,"filters":[],"uses":{"remove_node":[217],"add_node":[218],"_get_nodes":[224,234],"_get_node":[239,256,274,283,299,302,327],"_set_node":[263,289],"array_search":[307],"array_splice":[311]},"used_by":[]},"WP_Admin_Bar::_render":{"doc":"","file":"class-wp-admin-bar.php","line":332,"missingDoc":true,"filters":[],"uses":{"strpos":[341,343,339],"wp_is_mobile":[345],"_e":[351,357],"esc_attr_e":[352],"_render_group":[354],"esc_url":[357],"wp_logout_url":[357]},"used_by":[]},"wp_is_mobile":{"doc":"\/**\n * Test if the current browser runs on a mobile device (smart phone, tablet, etc.)\n *\n * @return bool true|false\n *\/","file":"vars.php","line":106,"missingDoc":false,"filters":[],"uses":{"strpos":[114,115,116,117,118,119,120]},"used_by":{"WP_Admin_Bar::_render":[345],"_device_can_upload":[3846],"user_can_richedit":[1759,1760],"wp_plupload_default_settings":[1271,1287],"_wp_customize_loader_settings":[1653,1654]}},"_e":{"doc":"\/**\n * Displays the returned translated text from translate().\n *\n * @see translate() Echoes returned translate() string\n * @since 1.2.0\n *\n * @param string $text Text to translate\n * @param string $domain Optional. Domain to retrieve the translated text\n *\/","file":"l10n.php","line":141,"missingDoc":false,"filters":[],"uses":{"translate":[142]},"used_by":{"WP_Admin_Bar::_render":[351,357],"WP_Customize_Upload_Control::render_content":[444,445],"WP_Customize_Image_Control::render_content":[558],"WP_Customize_Image_Control::tab_upload_new":[597,602,605],"_WP_Editors::wp_fullscreen_html":[669,673,718,718,737],"_WP_Editors::wp_link_dialog":[815,817,820,823,827,831,843,856],"Walker_Comment::start_el":[1357],"WP_Widget_Pages::form":[66,68,70,71,72,76,78],"WP_Widget_Links::form":[148,159,161,162,163,169,171,173,175,178],"WP_Widget_Search::form":[215],"WP_Widget_Archives::form":[281,283,285],"WP_Widget_Meta::widget":[316,317,320],"WP_Widget_Meta::form":[339],"WP_Widget_Calendar::form":[379],"WP_Widget_Text::form":[425,430],"WP_Widget_Categories::form":[511,515,518,521],"WP_Widget_Recent_Posts::form":[615,618,622],"WP_Widget_Recent_Comments::form":[722,725],"wp_widget_rss_form":[943,946,949,958,961,964],"WP_Widget_Tag_Cloud::form":[1067,1069],"WP_Nav_Menu_Widget::form":[1140,1144],"dead_db":[2771,2775],"__main":[16,162,163,164,165,171,172,173,174,175,179,180,181,182,183,184,185,186,187,191,192,195,195,195,195,196,196,197,197,198,198,200,200,201,201,202,202,203,203,204,204,207,209,209,209,209,210,210,211,211,212,212,213,213,214,214,215,215,216,216,217,217,220,222,223,224,229,231,233,234,33,35,62,66,75,80,85,90,103,108,114,17,49,72,77,77,80,80,83,21,57,69,73,74],"wp_maintenance":[174,178],"wp_print_media_templates":[40,51,53,58,59,110,111,125,148,152,176,203,204,209,222,226,231,236,245,248,255,259,284,310,340,343,360,372,379,391,397,402,420],"wp_list_post_revisions":[1443,1444],"wp_rss":[895]}},"esc_attr_e":{"doc":"\/**\n * Displays translated text that has been escaped for safe use in an attribute.\n *\n * @see translate() Echoes returned translate() string\n * @see esc_attr()\n * @since 2.8.0\n *\n * @param string $text Text to translate\n * @param string $domain Optional. Domain to retrieve the translated text\n *\/","file":"l10n.php","line":155,"missingDoc":false,"filters":[],"uses":{"esc_attr":[156],"translate":[156]},"used_by":{"WP_Admin_Bar::_render":[352],"WP_Customize_Color_Control::render_content":[387],"_WP_Editors::wp_link_dialog":[853],"WP_Widget_Meta::widget":[318],"__main":[162,163,164,165,237,245,245,98,72,91,73,74,75],"wp_print_media_templates":[32,160,164,166,168,267,270,273,276,292,295,298,301,351,354,405,408,411,414,423,426,429],"wp_list_post_revisions":[1424]}},"WP_Admin_Bar::_render_container":{"doc":"","file":"class-wp-admin-bar.php","line":363,"missingDoc":true,"filters":[],"uses":{"esc_attr":[367],"_render_group":[369]},"used_by":[]},"WP_Admin_Bar::_render_group":{"doc":"","file":"class-wp-admin-bar.php","line":374,"missingDoc":true,"filters":[],"uses":{"_render_container":[376],"esc_attr":[382,386],"trim":[382],"_render_item":[388]},"used_by":[]},"WP_Admin_Bar::_render_item":{"doc":"","file":"class-wp-admin-bar.php","line":393,"missingDoc":true,"filters":[],"uses":{"esc_attr":[414,418,425,428,434],"trim":[414],"esc_url":[420],"esc_js":[422],"_render_group":[450]},"used_by":[]},"WP_Admin_Bar::recursive_render":{"doc":"","file":"class-wp-admin-bar.php","line":462,"missingDoc":true,"filters":[],"uses":{"_deprecated_function":[463],"_render_item":[464]},"used_by":[]},"WP_Admin_Bar::add_menus":{"doc":"","file":"class-wp-admin-bar.php","line":467,"missingDoc":true,"filters":["'add_admin_bar_menus'"],"uses":{"add_action":[469,470,471,474,475,476,477,481,482,484,486],"is_network_admin":[480],"is_user_admin":[480]},"used_by":[]},"WP_Ajax_Response::__construct":{"doc":"\/**\n * Constructor - Passes args to {@link WP_Ajax_Response::add()}.\n *\n * @since 2.1.0\n * @see WP_Ajax_Response::add()\n *\n * @param string|array $args Optional. Will be passed to add() method.\n * @return WP_Ajax_Response\n *\/","file":"class-wp-ajax-response.php","line":27,"missingDoc":false,"filters":[],"uses":{"add":[29]},"used_by":[]},"WP_Ajax_Response::add":{"doc":"\/**\n * Append to XML response based on given arguments.\n *\n * The arguments that can be passed in the $args parameter are below. It is\n * also possible to pass a WP_Error object in either the 'id' or 'data'\n * argument. The parameter isn't actually optional, content should be given\n * in order to send the correct response.\n *\n * 'what' argument is a string that is the XMLRPC response type.\n * 'action' argument is a boolean or string that acts like a nonce.\n * 'id' argument can be WP_Error or an integer.\n * 'old_id' argument is false by default or an integer of the previous ID.\n * 'position' argument is an integer or a string with -1 = top, 1 = bottom,\n * html ID = after, -html ID = before.\n * 'data' argument is a string with the content or message.\n * 'supplemental' argument is an array of strings that will be children of\n * the supplemental element.\n *\n * @since 2.1.0\n *\n * @param string|array $args Override defaults.\n * @return string XML response.\n *\/","file":"class-wp-ajax-response.php","line":55,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[63],"extract":[64],"preg_replace":[65],"is_wp_error":[67,73],"get_error_message":[75],"get_error_data":[76],"get_class":[80],"get_object_vars":[81],"is_object":[79],"is_array":[88,100],"is_scalar":[86],"get_error_codes":[74]},"used_by":[]},"WP_Ajax_Response::send":{"doc":"\/**\n * Display XML formatted responses.\n *\n * Sets the content type header to text\/xml.\n *\n * @since 2.1.0\n *\/","file":"class-wp-ajax-response.php","line":128,"missingDoc":false,"filters":[],"uses":{"header":[129],"get_option":[129,130],"wp_die":[135],"defined":[134]},"used_by":[]},"wp_die":{"doc":"\/**\n * Kill WordPress execution and display HTML message with error message.\n *\n * This function complements the die() PHP function. The difference is that\n * HTML will be displayed to the user. It is recommended to use this function\n * only, when the execution should not continue any further. It is not\n * recommended to call this function very often and try to handle as many errors\n * as possible silently.\n *\n * @since 2.0.4\n *\n * @param string $message Error message.\n * @param string $title Error title.\n * @param string|array $args Optional arguments to control behavior.\n *\/","file":"functions.php","line":2047,"missingDoc":false,"filters":["'wp_die_ajax_handler'","'wp_die_xmlrpc_handler'","'wp_die_handler'"],"uses":{"defined":[2050,2048],"call_user_func":[2055]},"used_by":{"WP_Ajax_Response::send":[135],"WP_Customize_Manager::wp_die":[80,85],"WP_Customize_Manager::setup_theme":[115,120,131,135,138],"wp_allow_comment":[681],"check_comment_flood_db":[740],"do_feed":[1010],"wp_nonce_ays":[2029],"wp_send_json":[2323],"dead_db":[2758],"wp_set_wpdb_vars":[370],"wp_not_installed":[428],"signup_nonce_check":[1641],"maybe_add_existing_user_to_blog":[1686,1688],"ms_site_check":[89,96,103],"wpmu_current_site":[219,221],"ms_not_installed":[257],"__main":[35,122],"wp_protect_special_option":[109],"check_ajax_referer":[841],"_show_post_preview":[5251],"wpdb::print_error":[1045],"wpdb::bail":[1636]}},"WP_Customize_Control::__construct":{"doc":"\/**\n * Constructor.\n *\n * If $args['settings'] is not defined, use the $id as the setting ID.\n *\n * @since 3.4.0\n *\n * @param WP_Customize_Manager $manager\n * @param string $id\n * @param array $args\n *\/","file":"class-wp-customize-control.php","line":88,"missingDoc":false,"filters":[],"uses":{"array_keys":[89],"get_object_vars":[89],"get_setting":[106,109],"is_array":[104]},"used_by":[]},"WP_Customize_Control::enqueue":{"doc":"\/**\n * Enqueue control related scripts\/styles.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":120,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Control::value":{"doc":"\/**\n * Fetch a setting's value.\n * Grabs the main setting by default.\n *\n * @since 3.4.0\n *\n * @param string $setting_key\n * @return mixed The requested setting's value, if the setting exists.\n *\/","file":"class-wp-customize-control.php","line":132,"missingDoc":false,"filters":[],"uses":{"value":[134]},"used_by":[]},"WP_Customize_Control::to_json":{"doc":"\/**\n * Refresh the parameters passed to the JavaScript via JSON.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":142,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Control::check_capabilities":{"doc":"\/**\n * Check if the theme supports the control and check user capabilities.\n *\n * @since 3.4.0\n *\n * @return bool False if theme doesn't support the control or user doesn't have the required permissions, otherwise true.\n *\/","file":"class-wp-customize-control.php","line":158,"missingDoc":false,"filters":[],"uses":{"check_capabilities":[160,165],"get_section":[164]},"used_by":[]},"WP_Customize_Control::maybe_render":{"doc":"\/**\n * Check capabilities and render the control.\n *\n * @since 3.4.0\n * @uses WP_Customize_Control::render()\n *\/","file":"class-wp-customize-control.php","line":177,"missingDoc":false,"filters":["'customize_render_control'","'customize_render_control_' . $this->id"],"uses":{"check_capabilities":[178],"render":[184]},"used_by":[]},"WP_Customize_Control::render":{"doc":"\/**\n * Render the control. Renders the control wrapper, then calls $this->render_content().\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":192,"missingDoc":false,"filters":[],"uses":{"str_replace":[193,193],"esc_attr":[196,196],"render_content":[197]},"used_by":[]},"WP_Customize_Control::get_link":{"doc":"\/**\n * Get the data link parameter for a setting.\n *\n * @since 3.4.0\n *\n * @param string $setting_key\n * @return string Data link parameter, if $setting_key is a valid setting, empty string otherwise.\n *\/","file":"class-wp-customize-control.php","line":209,"missingDoc":false,"filters":[],"uses":{"esc_attr":[213]},"used_by":[]},"WP_Customize_Control::link":{"doc":"\/**\n * Render the data link parameter for a setting\n *\n * @since 3.4.0\n * @uses WP_Customize_Control::get_link()\n *\n * @param string $setting_key\n *\/","file":"class-wp-customize-control.php","line":224,"missingDoc":false,"filters":[],"uses":{"get_link":[225]},"used_by":[]},"WP_Customize_Control::render_content":{"doc":"\/**\n * Render the control's content.\n *\n * Allows the content to be overriden without having to rewrite the wrapper.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":235,"missingDoc":false,"filters":[],"uses":{"esc_html":[240,249,260,266,277],"esc_attr":[241,248,265,265,281],"value":[241,248,248,265,281,294],"link":[241,248,265,278],"checked":[248,265],"selected":[281],"wp_dropdown_pages":[288],"__":[292],"str_replace":[299],"get_link":[299],"printf":[301]},"used_by":[]},"checked":{"doc":"\/**\n * Outputs the html checked attribute.\n *\n * Compares the first two arguments and if identical marks as checked\n *\n * @since 1.0.0\n *\n * @param mixed $checked One of the values to compare\n * @param mixed $current (true) The other value to compare if not just true\n * @param bool $echo Whether to echo or just return the string\n * @return string html attribute or empty string\n *\/","file":"general-template.php","line":2226,"missingDoc":false,"filters":[],"uses":{"__checked_selected_helper":[2227]},"used_by":{"WP_Customize_Control::render_content":[248,265],"WP_Widget_Links::form":[168,170,172,174],"WP_Widget_Text::form":[430],"WP_Widget_Categories::form":[514,517,520],"WP_Widget_Recent_Posts::form":[621]}},"selected":{"doc":"\/**\n * Outputs the html selected attribute.\n *\n * Compares the first two arguments and if identical marks as selected\n *\n * @since 1.0.0\n *\n * @param mixed $selected One of the values to compare\n * @param mixed $current (true) The other value to compare if not just true\n * @param bool $echo Whether to echo or just return the string\n * @return string html attribute or empty string\n *\/","file":"general-template.php","line":2242,"missingDoc":false,"filters":[],"uses":{"__checked_selected_helper":[2243]},"used_by":{"WP_Customize_Control::render_content":[281],"WP_Widget_Pages::form":[70,71,72],"WP_Widget_Links::form":[154,161,162,163,164],"wp_widget_rss_form":[953],"WP_Widget_Tag_Cloud::form":[1076],"WP_Nav_Menu_Widget::form":[1149],"wp_print_media_templates":[329,364],"wp_dropdown_users":[1052,1059,1068]}},"wp_dropdown_pages":{"doc":"\/**\n * Retrieve or display list of pages as a dropdown (select list).\n *\n * @since 2.1.0\n *\n * @param array|string $args Optional. Override default arguments.\n * @return string HTML content, if not displaying.\n *\/","file":"post-template.php","line":769,"missingDoc":false,"filters":["'wp_dropdown_pages'"],"uses":{"wp_parse_args":[778],"extract":[779],"get_pages":[781],"esc_attr":[788,788,792],"walk_page_dropdown_tree":[793]},"used_by":{"WP_Customize_Control::render_content":[288]}},"WP_Customize_Color_Control::__construct":{"doc":"\/**\n * Constructor.\n *\n * If $args['settings'] is not defined, use the $id as the setting ID.\n *\n * @since 3.4.0\n * @uses WP_Customize_Control::__construct()\n *\n * @param WP_Customize_Manager $manager\n * @param string $id\n * @param array $args\n *\/","file":"class-wp-customize-control.php","line":343,"missingDoc":false,"filters":[],"uses":{"__":[344]},"used_by":[]},"WP_Customize_Color_Control::enqueue":{"doc":"\/**\n * Enqueue control related scripts\/styles.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":353,"missingDoc":false,"filters":[],"uses":{"wp_enqueue_script":[354],"wp_enqueue_style":[355]},"used_by":[]},"WP_Customize_Color_Control::to_json":{"doc":"\/**\n * Refresh the parameters passed to the JavaScript via JSON.\n *\n * @since 3.4.0\n * @uses WP_Customize_Control::to_json()\n *\/","file":"class-wp-customize-control.php","line":364,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Color_Control::render_content":{"doc":"\/**\n * Render the control's content.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":374,"missingDoc":false,"filters":[],"uses":{"strpos":[378],"esc_attr":[380],"esc_html":[385],"esc_attr_e":[387]},"used_by":[]},"WP_Customize_Upload_Control::enqueue":{"doc":"\/**\n * Enqueue control related scripts\/styles.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":412,"missingDoc":false,"filters":[],"uses":{"wp_enqueue_script":[413]},"used_by":[]},"WP_Customize_Upload_Control::to_json":{"doc":"\/**\n * Refresh the parameters passed to the JavaScript via JSON.\n *\n * @since 3.4.0\n * @uses WP_Customize_Control::to_json()\n *\/","file":"class-wp-customize-control.php","line":422,"missingDoc":false,"filters":[],"uses":{"implode":[431]},"used_by":[]},"WP_Customize_Upload_Control::render_content":{"doc":"\/**\n * Render the control's content.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":439,"missingDoc":false,"filters":[],"uses":{"esc_html":[442],"_e":[444,445]},"used_by":[]},"WP_Customize_Image_Control::__construct":{"doc":"\/**\n * Constructor.\n *\n * If $args['settings'] is not defined, use the $id as the setting ID.\n *\n * @since 3.4.0\n * @uses WP_Customize_Upload_Control::__construct()\n *\n * @param WP_Customize_Manager $manager\n * @param string $id\n * @param array $args\n *\/","file":"class-wp-customize-control.php","line":479,"missingDoc":false,"filters":[],"uses":{"__":[480,484,485],"add_tab":[484,485],"add_action":[488]},"used_by":[]},"WP_Customize_Image_Control::prepare_control":{"doc":"\/**\n * Prepares the control.\n *\n * If no tabs exist, removes the control from the manager.\n *\n * @since 3.4.2\n *\/","file":"class-wp-customize-control.php","line":498,"missingDoc":false,"filters":[],"uses":{"remove_control":[500]},"used_by":[]},"WP_Customize_Image_Control::to_json":{"doc":"\/**\n * Refresh the parameters passed to the JavaScript via JSON.\n *\n * @since 3.4.0\n * @uses WP_Customize_Upload_Control::to_json()\n *\/","file":"class-wp-customize-control.php","line":509,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Image_Control::render_content":{"doc":"\/**\n * Render the control's content.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":519,"missingDoc":false,"filters":[],"uses":{"value":[520],"call_user_func":[522,552],"esc_html":[526,546],"esc_url":[534],"set_url_scheme":[534],"esc_attr":[545,551],"_e":[558]},"used_by":[]},"set_url_scheme":{"doc":"\/**\n * Set the scheme for a URL\n *\n * @since 3.4.0\n *\n * @param string $url Absolute url that includes a scheme\n * @param string $scheme Optional. Scheme to give $url. Currently 'http', 'https', 'login', 'login_post', 'admin', or 'relative'.\n * @return string $url URL with chosen scheme.\n *\/","file":"link-template.php","line":2225,"missingDoc":false,"filters":["'set_url_scheme'"],"uses":{"force_ssl_admin":[2230,2232,2228],"is_ssl":[2235],"force_ssl_login":[2228],"in_array":[2227],"preg_replace":[2239,2241]},"used_by":{"WP_Customize_Image_Control::render_content":[534],"WP_Customize_Image_Control::print_tab_image":[627,628],"WP_Customize_Header_Image_Control::print_header_image":[783,784],"_WP_Editors::editor_settings":[240],"wp_xmlrpc_server::_multisite_getUsersBlogs":[3665],"self_link":[491],"url_is_accessable_via_ssl":[2808],"get_home_url":[1920],"get_site_url":[1972],"content_url":[2042],"plugins_url":[2075],"network_site_url":[2112],"network_home_url":[2148],"filter_SSL":[1902],"_wp_menu_item_classes_by_context":[367],"auth_redirect":[752,771,785],"get_header_image":[897],"_custom_background_cb":[1149]}},"WP_Customize_Image_Control::add_tab":{"doc":"\/**\n * Add a tab to the control.\n *\n * @since 3.4.0\n *\n * @param string $id\n * @param string $label\n * @param mixed $callback\n *\/","file":"class-wp-customize-control.php","line":573,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Image_Control::remove_tab":{"doc":"\/**\n * Remove a tab from the control.\n *\n * @since 3.4.0\n *\n * @param string $id\n *\/","file":"class-wp-customize-control.php","line":587,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Image_Control::tab_upload_new":{"doc":"\/**\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":594,"missingDoc":false,"filters":[],"uses":{"_e":[597,602,605],"_device_can_upload":[595]},"used_by":[]},"_device_can_upload":{"doc":"\/**\n * Test if the current device has the capability to upload files.\n *\n * @since 3.4.0\n * @access private\n *\n * @return bool true|false\n *\/","file":"functions.php","line":3845,"missingDoc":false,"filters":[],"uses":{"wp_is_mobile":[3846],"preg_match":[3854],"version_compare":[3854],"strpos":[3851,3852,3853]},"used_by":{"WP_Customize_Image_Control::tab_upload_new":[595],"wp_print_media_templates":[50],"wp_plupload_default_settings":[1288]}},"WP_Customize_Image_Control::tab_uploaded":{"doc":"\/**\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":614,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Image_Control::print_tab_image":{"doc":"\/**\n * @since 3.4.0\n *\n * @param string $url\n * @param string $thumbnail_url\n *\/","file":"class-wp-customize-control.php","line":626,"missingDoc":false,"filters":[],"uses":{"set_url_scheme":[627,628],"esc_url":[630,631]},"used_by":[]},"WP_Customize_Background_Image_Control::__construct":{"doc":"\/**\n * Constructor.\n *\n * @since 3.4.0\n * @uses WP_Customize_Image_Control::__construct()\n *\n * @param WP_Customize_Manager $manager\n *\/","file":"class-wp-customize-control.php","line":654,"missingDoc":false,"filters":[],"uses":{"__":[656,663],"add_tab":[663]},"used_by":[]},"WP_Customize_Background_Image_Control::tab_uploaded":{"doc":"\/**\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":669,"missingDoc":false,"filters":[],"uses":{"get_posts":[670],"get_stylesheet":[673],"print_tab_image":[684],"esc_url_raw":[684]},"used_by":[]},"get_posts":{"doc":"\/**\n * Retrieve list of latest posts or posts matching criteria.\n *\n * The defaults are as follows:\n *     'numberposts' - Default is 5. Total number of posts to retrieve.\n *     'offset' - Default is 0. See {@link WP_Query::query()} for more.\n *     'category' - What category to pull the posts from.\n *     'orderby' - Default is 'post_date'. How to order the posts.\n *     'order' - Default is 'DESC'. The order to retrieve the posts.\n *     'include' - See {@link WP_Query::query()} for more.\n *     'exclude' - See {@link WP_Query::query()} for more.\n *     'meta_key' - See {@link WP_Query::query()} for more.\n *     'meta_value' - See {@link WP_Query::query()} for more.\n *     'post_type' - Default is 'post'. Can be 'page', or 'attachment' to name a few.\n *     'post_parent' - The parent of the post or post type.\n *     'post_status' - Default is 'publish'. Post status to retrieve.\n *\n * @since 1.2.0\n * @uses $wpdb\n * @uses WP_Query::query() See for more default arguments and information.\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/get_posts\n *\n * @param array $args Optional. Overrides defaults.\n * @return array List of posts.\n *\/","file":"post.php","line":1699,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[1709],"wp_parse_id_list":[1717,1721],"count":[1718],"query":[1727]},"used_by":{"WP_Customize_Background_Image_Control::tab_uploaded":[670],"wp_xmlrpc_server::wp_getPages":[2310],"wp_xmlrpc_server::wp_getMediaLibrary":[3332],"get_boundary_post":[1333],"gallery_shortcode":[714],"wp_get_nav_menu_items":[493,516],"get_children":[311],"wp_get_recent_posts":[2649],"WP_Query::get_posts":[2757],"WP_Query::query":[2972],"get_uploaded_header_images":[1003]}},"get_stylesheet":{"doc":"\/**\n * Retrieve name of the current stylesheet.\n *\n * The theme name that the administrator has currently set the front end theme\n * as.\n *\n * For all extensive purposes, the template name and the stylesheet name are\n * going to be the same for most cases.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'stylesheet' filter on stylesheet name.\n *\n * @return string Stylesheet name.\n *\/","file":"theme.php","line":146,"missingDoc":false,"filters":["'stylesheet'"],"uses":{"get_option":[147]},"used_by":{"WP_Customize_Background_Image_Control::tab_uploaded":[673],"WP_Customize_Manager::setup_theme":[122],"WP_Customize_Manager::is_theme_active":[269],"WP_Customize_Manager::customize_preview_init":[328],"WP_Customize_Manager::customize_preview_settings":[386,387],"WP_Customize_Manager::get_stylesheet":[452],"WP_Customize_Manager::get_stylesheet_root":[474],"WP_Customize_Manager::save":[498,505],"WP_Theme::__get":[330],"WP_Theme::offsetGet":[404],"WP_Theme::markup_header":[644],"WP_Theme::is_allowed":[1053,1059],"get_themes":[2938],"wp_get_themes":[38],"wp_get_theme":[96],"get_stylesheet_directory":[159],"get_stylesheet_directory_uri":[174],"switch_theme":[699],"validate_current_theme":[726],"wp_update_themes":[251,253,260]}},"esc_url_raw":{"doc":"\/**\n * Performs esc_url() for database usage.\n *\n * @since 2.8.0\n * @uses esc_url()\n *\n * @param string $url The URL to be cleaned.\n * @param array $protocols An array of acceptable protocols.\n * @return string The cleaned URL.\n *\/","file":"formatting.php","line":2622,"missingDoc":false,"filters":[],"uses":{"esc_url":[2623]},"used_by":{"WP_Customize_Background_Image_Control::tab_uploaded":[684],"WP_Theme::sanitize_header":[619],"wp_widget_rss_process":[997],"sanitize_url":[2068],"sanitize_option":[2848,2858,2910],"get_pagenum_link":[1472],"wp_update_nav_menu_item":[382],"get_header_image":[897],"get_uploaded_header_images":[1009]}},"WP_Customize_Background_Image_Control::tab_default_background":{"doc":"\/**\n * @since 3.4.0\n * @uses WP_Customize_Image_Control::print_tab_image()\n *\/","file":"class-wp-customize-control.php","line":691,"missingDoc":false,"filters":[],"uses":{"print_tab_image":[692]},"used_by":[]},"WP_Customize_Header_Image_Control::__construct":{"doc":"\/**\n * Constructor.\n *\n * @since 3.4.0\n * @uses WP_Customize_Image_Control::__construct()\n * @uses WP_Customize_Image_Control::add_tab()\n *\n * @param WP_Customize_Manager $manager\n *\/","file":"class-wp-customize-control.php","line":727,"missingDoc":false,"filters":[],"uses":{"__":[729,739,740,741,742],"remove_tab":[747]},"used_by":[]},"WP_Customize_Header_Image_Control::prepare_control":{"doc":"\/**\n * Prepares the control.\n *\n * If no tabs exist, removes the control from the manager.\n *\n * @since 3.4.2\n *\/","file":"class-wp-customize-control.php","line":757,"missingDoc":false,"filters":[],"uses":{"process_default_headers":[763],"get_uploaded_header_images":[765],"add_tab":[768],"__":[768],"remove_tab":[771]},"used_by":[]},"get_uploaded_header_images":{"doc":"\/**\n * Get the header images uploaded for the current theme.\n *\n * @since 3.2.0\n *\n * @return array\n *\/","file":"theme.php","line":999,"missingDoc":false,"filters":[],"uses":{"get_posts":[1003],"get_option":[1003],"esc_url_raw":[1009],"wp_get_attachment_metadata":[1010],"basename":[1011]},"used_by":{"WP_Customize_Header_Image_Control::prepare_control":[765],"_get_random_header_data":[919]}},"WP_Customize_Header_Image_Control::print_header_image":{"doc":"\/**\n * @since 3.4.0\n *\n * @param mixed $choice Which header image to select. (@see Custom_Image_Header::get_header_image() )\n * @param array $header\n *\/","file":"class-wp-customize-control.php","line":782,"missingDoc":false,"filters":[],"uses":{"set_url_scheme":[783,784],"esc_url":[795,797],"esc_attr":[796],"json_encode":[796]},"used_by":[]},"json_encode":{"doc":"","file":"compat.php","line":65,"missingDoc":true,"filters":[],"uses":{"is_a":[68],"encodeUnsafe":[73]},"used_by":{"WP_Customize_Header_Image_Control::print_header_image":[796],"WP_Customize_Manager::customize_preview_settings":[397],"WP_Scripts::localize":[148],"wp_send_json":[2321],"wp_mce_translation":[554,555,556,557,558,559],"wp_plupload_default_settings":[1293],"_wp_customize_loader_settings":[1663]}},"WP_Customize_Header_Image_Control::tab_uploaded":{"doc":"\/**\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":805,"missingDoc":false,"filters":[],"uses":{"print_header_image":[809]},"used_by":[]},"WP_Customize_Header_Image_Control::tab_default_headers":{"doc":"\/**\n * @since 3.4.0\n *\/","file":"class-wp-customize-control.php","line":815,"missingDoc":false,"filters":[],"uses":{"print_header_image":[817]},"used_by":[]},"WP_Customize_Manager::__construct":{"doc":"\/**\n * Constructor.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":30,"missingDoc":false,"filters":[],"uses":{"add_filter":[35],"add_action":[37,38,41,51,53,54,55],"remove_action":[44,47,48,49]},"used_by":[]},"remove_action":{"doc":"\/**\n * Removes a function from a specified action hook.\n *\n * This function removes a function attached to a specified action hook. This\n * method can be used to remove default functions attached to a specific filter\n * hook and possibly replace them with a substitute.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 1.2\n *\n * @param string $tag The action hook to which the function to be removed is hooked.\n * @param callback $function_to_remove The name of the function which should be removed.\n * @param int $priority optional The priority of the function (default: 10).\n * @return boolean Whether the function is removed.\n *\/","file":"plugin.php","line":529,"missingDoc":false,"filters":[],"uses":{"remove_filter":[530]},"used_by":{"WP_Customize_Manager::__construct":[44,47,48,49],"WP_Customize_Manager::remove_preview_signature":[417],"automatic_feed_links":[2456],"wp_print_media_templates":[69],"wp_get_post_autosave":[4999],"add_feed":[92],"_remove_theme_support":[1496,1497,1505,1506]}},"WP_Customize_Manager::doing_ajax":{"doc":"\/**\n * Return true if it's an AJAX request.\n *\n * @since 3.4.0\n *\n * @return bool\n *\/","file":"class-wp-customize-manager.php","line":65,"missingDoc":false,"filters":[],"uses":{"defined":[66]},"used_by":[]},"WP_Customize_Manager::wp_die":{"doc":"\/**\n * Custom wp_die wrapper. Returns either the standard message for UI\n * or the AJAX message.\n *\n * @since 3.4.0\n *\n * @param mixed $ajax_message AJAX return\n * @param mixed $message UI message\n *\/","file":"class-wp-customize-manager.php","line":78,"missingDoc":false,"filters":[],"uses":{"wp_die":[80,85],"doing_ajax":[79],"__":[83]},"used_by":[]},"WP_Customize_Manager::wp_die_handler":{"doc":"\/**\n * Return the AJAX wp_die() handler if it's a customized request.\n *\n * @since 3.4.0\n *\n * @return string\n *\/","file":"class-wp-customize-manager.php","line":95,"missingDoc":false,"filters":[],"uses":{"doing_ajax":[96]},"used_by":[]},"WP_Customize_Manager::setup_theme":{"doc":"\/**\n * Start preview and customize theme.\n *\n * Check if customize query variable exist. Init filters to filter the current theme.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":109,"missingDoc":false,"filters":[],"uses":{"send_origin_headers":[110],"auth_redirect":[113],"doing_ajax":[114,112],"is_user_logged_in":[114],"wp_die":[115,120,131,135,138],"is_admin":[112],"show_admin_bar":[117],"current_user_can":[119,130],"get_stylesheet":[122],"wp_get_theme":[124],"add_action":[128],"errors":[134],"theme":[134,137],"is_allowed":[137],"is_theme_active":[126],"start_previewing_theme":[141]},"used_by":[]},"send_origin_headers":{"doc":"\/**\n * Send Access-Control-Allow-Origin and related headers if the current request\n * is from an allowed origin.\n *\n * If the request is an OPTIONS request, the script exits with either access\n * control headers sent, or a 403 response if the origin is not allowed. For\n * other request methods, you will receive a return value.\n *\n * @since 3.4.0\n *\n * @return bool|string Returns the origin URL if headers are sent. Returns false\n * if headers are not sent.\n *\/","file":"http.php","line":296,"missingDoc":false,"filters":[],"uses":{"get_http_origin":[297],"header":[300,301],"is_allowed_http_origin":[299],"status_header":[308]},"used_by":{"WP_Customize_Manager::setup_theme":[110]}},"auth_redirect":{"doc":"\/**\n * Checks if a user is logged in, if not it redirects them to the login page.\n *\n * @since 1.5\n *\/","file":"pluggable.php","line":742,"missingDoc":false,"filters":["'secure_auth_redirect'","'auth_redirect_scheme'","'auth_redirect'"],"uses":{"is_ssl":[745,750],"force_ssl_admin":[745],"wp_redirect":[752,755,771,774,789],"set_url_scheme":[752,771,785],"strpos":[751,750,770,769,785],"is_user_admin":[760],"get_user_option":[769],"wp_validate_auth_cookie":[765],"nocache_headers":[783],"wp_get_referer":[785,785],"wp_login_url":[787]},"used_by":{"WP_Customize_Manager::setup_theme":[113]}},"wp_get_theme":{"doc":"\/**\n * Gets a WP_Theme object for a theme.\n *\n * @since 3.4.0\n *\n * @param string $stylesheet Directory name for the theme. Optional. Defaults to current theme.\n * @param string $theme_root Absolute path of the theme root to look in. Optional. If not specified, get_raw_theme_root()\n * \tis used to calculate the theme root for the $stylesheet provided (or current theme).\n * @return WP_Theme Theme object. Be sure to check the object's exists() method if you need to confirm the theme's existence.\n *\/","file":"theme.php","line":92,"missingDoc":false,"filters":[],"uses":{"get_stylesheet":[96],"get_raw_theme_root":[99],"in_array":[102]},"used_by":{"WP_Customize_Manager::setup_theme":[124],"get_current_theme":[2982],"wp_insert_post":[2932],"switch_theme":[669,670],"get_theme_mods":[751],"remove_theme_mods":[842],"check_theme_switched":[1610]}},"WP_Customize_Manager::after_setup_theme":{"doc":"\/**\n * Callback to validate a theme once it is loaded\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":149,"missingDoc":false,"filters":[],"uses":{"wp_redirect":[151],"doing_ajax":[150],"validate_current_theme":[150]},"used_by":[]},"validate_current_theme":{"doc":"\/**\n * Checks that current theme files 'index.php' and 'style.css' exists.\n *\n * Does not check the default theme, which is the fallback and should always exist.\n * Will switch theme to the fallback theme if current theme does not validate.\n * You can use the 'validate_current_theme' filter to return false to\n * disable this functionality.\n *\n * @since 1.5.0\n * @see WP_DEFAULT_THEME\n *\n * @return bool\n *\/","file":"theme.php","line":716,"missingDoc":false,"filters":["'validate_current_theme'"],"uses":{"defined":[718],"switch_theme":[722,727,732],"get_template":[721],"file_exists":[721,726,731],"get_template_directory":[721,726],"get_stylesheet":[726],"is_child_theme":[731],"get_stylesheet_directory":[731]},"used_by":{"WP_Customize_Manager::after_setup_theme":[150]}},"WP_Customize_Manager::start_previewing_theme":{"doc":"\/**\n * Start previewing the selected theme.\n *\n * Adds filters to change the current theme.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":163,"missingDoc":false,"filters":["'start_previewing_theme'"],"uses":{"is_preview":[165],"add_filter":[171,172,173,176,177,180,181],"is_theme_active":[170]},"used_by":[]},"WP_Customize_Manager::stop_previewing_theme":{"doc":"\/**\n * Stop previewing the selected theme.\n *\n * Removes filters to change the current theme.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":194,"missingDoc":false,"filters":["'stop_previewing_theme'"],"uses":{"is_preview":[195],"remove_filter":[201,202,203,206,207,210,211],"is_theme_active":[200]},"used_by":[]},"remove_filter":{"doc":"\/**\n * Removes a function from a specified filter hook.\n *\n * This function removes a function attached to a specified filter hook. This\n * method can be used to remove default functions attached to a specific filter\n * hook and possibly replace them with a substitute.\n *\n * To remove a hook, the $function_to_remove and $priority arguments must match\n * when the hook was added. This goes for both filters and actions. No warning\n * will be given on removal failure.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 1.2\n *\n * @param string $tag The filter hook to which the function to be removed is hooked.\n * @param callback $function_to_remove The name of the function which should be removed.\n * @param int $priority optional. The priority of the function (default: 10).\n * @param int $accepted_args optional. The number of arguments the function accepts (default: 1).\n * @return boolean Whether the function existed before it was removed.\n *\/","file":"plugin.php","line":260,"missingDoc":false,"filters":[],"uses":{"_wp_filter_build_unique_id":[261]},"used_by":{"WP_Customize_Manager::stop_previewing_theme":[201,202,203,206,207,210,211],"kses_remove_filters":[1357,1360,1361,1364,1365,1366],"_wp_post_thumbnail_class_filter_remove":[606],"__main":[62,63,33],"welcome_user_msg_filter":[1848],"remove_action":[530]}},"WP_Customize_Manager::theme":{"doc":"\/**\n * Get the theme being customized.\n *\n * @since 3.4.0\n *\n * @return WP_Theme\n *\/","file":"class-wp-customize-manager.php","line":224,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::settings":{"doc":"\/**\n * Get the registered settings.\n *\n * @since 3.4.0\n *\n * @return array\n *\/","file":"class-wp-customize-manager.php","line":235,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::controls":{"doc":"\/**\n * Get the registered controls.\n *\n * @since 3.4.0\n *\n * @return array\n *\/","file":"class-wp-customize-manager.php","line":246,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::sections":{"doc":"\/**\n * Get the registered sections.\n *\n * @since 3.4.0\n *\n * @return array\n *\/","file":"class-wp-customize-manager.php","line":257,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::is_theme_active":{"doc":"\/**\n * Checks if the current theme is active.\n *\n * @since 3.4.0\n *\n * @return bool\n *\/","file":"class-wp-customize-manager.php","line":268,"missingDoc":false,"filters":[],"uses":{"get_stylesheet":[269]},"used_by":[]},"WP_Customize_Manager::wp_loaded":{"doc":"\/**\n * Register styles\/scripts and initialize the preview of each setting\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":277,"missingDoc":false,"filters":["'customize_register'"],"uses":{"customize_preview_init":[281],"is_preview":[280],"is_admin":[280]},"used_by":[]},"WP_Customize_Manager::wp_redirect_status":{"doc":"\/**\n * Prevents AJAX requests from following redirects when previewing a theme\n * by issuing a 200 response instead of a 30x.\n *\n * Instead, the JS will sniff out the location header.\n *\n * @since 3.4.0\n *\n * @param $status\n * @return int\n *\/","file":"class-wp-customize-manager.php","line":295,"missingDoc":false,"filters":[],"uses":{"is_preview":[296],"is_admin":[296]},"used_by":[]},"WP_Customize_Manager::post_value":{"doc":"\/**\n * Decode the $_POST attribute used to override the WP_Customize_Setting values.\n *\n * @since 3.4.0\n *\n * @param mixed $setting A WP_Customize_Setting derived object\n * @return string Sanitized attribute\n *\/","file":"class-wp-customize-manager.php","line":310,"missingDoc":false,"filters":[],"uses":{"json_decode":[313],"stripslashes":[313],"sanitize":[319]},"used_by":[]},"WP_Customize_Manager::customize_preview_init":{"doc":"\/**\n * Print javascript settings.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":327,"missingDoc":false,"filters":["'customize_preview_init'"],"uses":{"check_ajax_referer":[328],"get_stylesheet":[328],"prepare_controls":[330],"wp_enqueue_script":[332],"add_action":[333,334,335,336],"add_filter":[337],"preview":[340]},"used_by":[]},"check_ajax_referer":{"doc":"\/**\n * Verifies the AJAX request to prevent processing requests external of the blog.\n *\n * @since 2.0.3\n *\n * @param string $action Action nonce\n * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5)\n *\/","file":"pluggable.php","line":831,"missingDoc":false,"filters":["'check_ajax_referer'"],"uses":{"wp_verify_nonce":[837],"wp_die":[841],"defined":[840]},"used_by":{"WP_Customize_Manager::customize_preview_init":[328],"WP_Customize_Manager::save":[498]}},"WP_Customize_Manager::customize_preview_base":{"doc":"\/**\n * Print base element for preview frame.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":351,"missingDoc":false,"filters":[],"uses":{"home_url":[352]},"used_by":[]},"WP_Customize_Manager::customize_preview_html5":{"doc":"\/**\n * Print a workaround to handle HTML5 tags in IE < 9\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":360,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::customize_preview_settings":{"doc":"\/**\n * Print javascript settings for preview frame.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":378,"missingDoc":false,"filters":[],"uses":{"esc_js":[381],"wp_create_nonce":[386,387],"get_stylesheet":[386,387],"js_value":[392],"json_encode":[397]},"used_by":[]},"wp_create_nonce":{"doc":"\/**\n * Creates a random, one time use token.\n *\n * @since 2.0.3\n *\n * @param string|int $action Scalar value to add context to the nonce.\n * @return string The one use form token\n *\/","file":"pluggable.php","line":1284,"missingDoc":false,"filters":["'nonce_user_logged_out'"],"uses":{"wp_get_current_user":[1285],"wp_nonce_tick":[1290],"substr":[1292],"wp_hash":[1292]},"used_by":{"WP_Customize_Manager::customize_preview_settings":[386,387],"wp_nonce_url":[1177],"wp_nonce_field":[1210],"wp_plupload_default_settings":[1281],"wp_prepare_attachment_for_js":[1355,1360],"wp_enqueue_media":[1464,1477],"signup_nonce_check":[1640]}},"WP_Customize_Manager::customize_preview_signature":{"doc":"\/**\n * Prints a signature so we can ensure the customizer was properly executed.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":407,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::remove_preview_signature":{"doc":"\/**\n * Removes the signature in case we experience a case where the customizer was not properly executed.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":416,"missingDoc":false,"filters":[],"uses":{"remove_action":[417]},"used_by":[]},"WP_Customize_Manager::is_preview":{"doc":"\/**\n * Is it a theme preview?\n *\n * @since 3.4.0\n *\n * @return bool True if it's a preview, false if not.\n *\/","file":"class-wp-customize-manager.php","line":429,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::get_template":{"doc":"\/**\n * Retrieve the template name of the previewed theme.\n *\n * @since 3.4.0\n *\n * @return string Template name.\n *\/","file":"class-wp-customize-manager.php","line":440,"missingDoc":false,"filters":[],"uses":{"get_template":[441],"theme":[441]},"used_by":[]},"get_template":{"doc":"\/**\n * Retrieve name of the current theme.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'template' filter on template option.\n *\n * @return string Template name.\n *\/","file":"theme.php","line":239,"missingDoc":false,"filters":["'template'"],"uses":{"get_option":[240]},"used_by":{"WP_Customize_Manager::get_template":[441],"WP_Customize_Manager::get_template_root":[463],"WP_Theme::__get":[328],"WP_Theme::offsetGet":[402],"get_template_directory":[252],"get_template_directory_uri":[268],"switch_theme":[676],"validate_current_theme":[721],"wp_update_themes":[259]}},"WP_Customize_Manager::get_stylesheet":{"doc":"\/**\n * Retrieve the stylesheet name of the previewed theme.\n *\n * @since 3.4.0\n *\n * @return string Stylesheet name.\n *\/","file":"class-wp-customize-manager.php","line":451,"missingDoc":false,"filters":[],"uses":{"get_stylesheet":[452],"theme":[452]},"used_by":[]},"WP_Customize_Manager::get_template_root":{"doc":"\/**\n * Retrieve the template root of the previewed theme.\n *\n * @since 3.4.0\n *\n * @return string Theme root.\n *\/","file":"class-wp-customize-manager.php","line":462,"missingDoc":false,"filters":[],"uses":{"get_raw_theme_root":[463],"get_template":[463]},"used_by":[]},"get_raw_theme_root":{"doc":"\/**\n * Get the raw theme root relative to the content directory with no filters applied.\n *\n * @since 3.1.0\n *\n * @param string $stylesheet_or_template The stylesheet or template name of the theme\n * @param bool $skip_cache Optional. Whether to skip the cache. Defaults to false, meaning the cache is used.\n * @return string Theme root\n *\/","file":"theme.php","line":507,"missingDoc":false,"filters":[],"uses":{"count":[510],"get_option":[518,519,520,517],"get_theme_roots":[524]},"used_by":{"WP_Customize_Manager::get_template_root":[463],"WP_Customize_Manager::get_stylesheet_root":[474],"wp_get_themes":[40],"wp_get_theme":[99],"get_theme_root":[446],"get_theme_root_uri":[475],"switch_theme":[683,684]}},"WP_Customize_Manager::get_stylesheet_root":{"doc":"\/**\n * Retrieve the stylesheet root of the previewed theme.\n *\n * @since 3.4.0\n *\n * @return string Theme root.\n *\/","file":"class-wp-customize-manager.php","line":473,"missingDoc":false,"filters":[],"uses":{"get_raw_theme_root":[474],"get_stylesheet":[474]},"used_by":[]},"WP_Customize_Manager::current_theme":{"doc":"\/**\n * Filter the current theme and return the name of the previewed theme.\n *\n * @since 3.4.0\n *\n * @param $current_theme {@internal Parameter is not used}\n * @return string Theme name.\n *\/","file":"class-wp-customize-manager.php","line":485,"missingDoc":false,"filters":[],"uses":{"display":[486],"theme":[486]},"used_by":[]},"WP_Customize_Manager::save":{"doc":"\/**\n * Switch the theme and trigger the save action of each setting.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":494,"missingDoc":false,"filters":["'customize_save'"],"uses":{"is_preview":[495],"check_ajax_referer":[498],"get_stylesheet":[498,505],"stop_previewing_theme":[504],"switch_theme":[505],"start_previewing_theme":[506],"is_theme_active":[501],"save":[512]},"used_by":[]},"switch_theme":{"doc":"\/**\n * Switches the theme.\n *\n * Accepts one argument: $stylesheet of the theme. It also accepts an additional function signature\n * of two arguments: $template then $stylesheet. This is for backwards compatibility.\n *\n * @since 2.5.0\n * @uses do_action() Calls 'switch_theme' action, passing the new theme.\n *\n * @param string $stylesheet Stylesheet name\n *\/","file":"theme.php","line":663,"missingDoc":false,"filters":["'switch_theme'"],"uses":{"set_theme_mod":[667],"time":[667],"is_array":[666],"wp_get_theme":[669,670],"func_get_arg":[674],"get_template":[676],"func_num_args":[672],"update_option":[679,680,683,684,692,699],"get_raw_theme_root":[683,684],"delete_option":[686,687],"count":[682],"get":[690],"get_option":[695,694],"add_option":[696],"is_admin":[694],"get_stylesheet":[699]},"used_by":{"WP_Customize_Manager::save":[505],"validate_current_theme":[722,727,732]}},"WP_Customize_Manager::add_setting":{"doc":"\/**\n * Add a customize setting.\n *\n * @since 3.4.0\n *\n * @param string $id A specific ID of the setting. Can be a\n *                   theme mod or option name.\n * @param array $args Setting arguments.\n *\/","file":"class-wp-customize-manager.php","line":527,"missingDoc":false,"filters":[],"uses":{"is_a":[528]},"used_by":[]},"WP_Customize_Manager::get_setting":{"doc":"\/**\n * Retrieve a customize setting.\n *\n * @since 3.4.0\n *\n * @param string $id A specific ID of the setting.\n * @return object The settings object.\n *\/","file":"class-wp-customize-manager.php","line":544,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::remove_setting":{"doc":"\/**\n * Remove a customize setting.\n *\n * @since 3.4.0\n *\n * @param string $id A specific ID of the setting.\n *\/","file":"class-wp-customize-manager.php","line":556,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::add_section":{"doc":"\/**\n * Add a customize section.\n *\n * @since 3.4.0\n *\n * @param string $id A specific ID of the section.\n * @param array $args Section arguments.\n *\/","file":"class-wp-customize-manager.php","line":568,"missingDoc":false,"filters":[],"uses":{"is_a":[569]},"used_by":[]},"WP_Customize_Manager::get_section":{"doc":"\/**\n * Retrieve a customize section.\n *\n * @since 3.4.0\n *\n * @param string $id A specific ID of the section.\n * @return object The section object.\n *\/","file":"class-wp-customize-manager.php","line":585,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::remove_section":{"doc":"\/**\n * Remove a customize section.\n *\n * @since 3.4.0\n *\n * @param string $id A specific ID of the section.\n *\/","file":"class-wp-customize-manager.php","line":597,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::add_control":{"doc":"\/**\n * Add a customize control.\n *\n * @since 3.4.0\n *\n * @param string $id A specific ID of the control.\n * @param array $args Setting arguments.\n *\/","file":"class-wp-customize-manager.php","line":609,"missingDoc":false,"filters":[],"uses":{"is_a":[610]},"used_by":[]},"WP_Customize_Manager::get_control":{"doc":"\/**\n * Retrieve a customize control.\n *\n * @since 3.4.0\n *\n * @param string $id A specific ID of the control.\n * @return object The settings object.\n *\/","file":"class-wp-customize-manager.php","line":626,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::remove_control":{"doc":"\/**\n * Remove a customize setting.\n *\n * @since 3.4.0\n *\n * @param string $id A specific ID of the control.\n *\/","file":"class-wp-customize-manager.php","line":638,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::_cmp_priority":{"doc":"\/**\n * Helper function to compare two objects by priority.\n *\n * @since 3.4.0\n *\n * @param object $a Object A.\n * @param object $b Object B.\n * @return int\n *\/","file":"class-wp-customize-manager.php","line":651,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Manager::prepare_controls":{"doc":"\/**\n * Prepare settings and sections.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":665,"missingDoc":false,"filters":[],"uses":{"array_reverse":[669,682],"check_capabilities":[673,687],"uasort":[683],"usort":[690]},"used_by":[]},"WP_Customize_Manager::enqueue_control_scripts":{"doc":"\/**\n * Enqueue scripts for customize controls.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":701,"missingDoc":false,"filters":[],"uses":{"enqueue":[703]},"used_by":[]},"WP_Customize_Manager::register_controls":{"doc":"\/**\n * Register some default controls.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-manager.php","line":712,"missingDoc":false,"filters":[],"uses":{"add_section":[716,745,790,810,890,925],"__":[717,728,739,746,762,768,783,791,811,833,837,838,839,840,850,854,855,856,866,870,871,891,894,898,926,929,940,944,945,956,968],"add_setting":[721,732,750,774,796,801,816,821,827,844,860,908,932,949,961],"get_option":[722,733,933],"add_control":[727,738,760,767,782,806,825,832,849,865,913,939,955,967],"get_theme_support":[752,775,797,817,877],"get_setting":[879],"get_registered_nav_menus":[885],"wp_get_nav_menus":[886],"get_nav_menu_locations":[887],"count":[888],"array_keys":[888],"sprintf":[894],"_n":[894],"number_format_i18n":[894],"wp_html_excerpt":[900],"trim":[901]},"used_by":[]},"get_registered_nav_menus":{"doc":"\/**\n * Returns an array of all registered navigation menus in a theme\n *\n * @since 3.0.0\n * @return array\n *\/","file":"nav-menu.php","line":115,"missingDoc":false,"filters":[],"uses":[],"used_by":{"WP_Customize_Manager::register_controls":[885]}},"wp_get_nav_menus":{"doc":"\/**\n * Returns all navigation menu objects.\n *\n * @since 3.0.0\n *\n * @param array $args Array of arguments passed on to get_terms().\n * @return array menu objects\n *\/","file":"nav-menu.php","line":409,"missingDoc":false,"filters":["'wp_get_nav_menus'"],"uses":{"wp_parse_args":[411],"get_terms":[412]},"used_by":{"WP_Customize_Manager::register_controls":[886],"wp_nav_menu":[156]}},"get_nav_menu_locations":{"doc":"\/**\n * Returns an array with the registered navigation menu locations and the menu assigned to it\n *\n * @since 3.0.0\n * @return array\n *\/","file":"nav-menu.php","line":129,"missingDoc":false,"filters":[],"uses":{"get_theme_mod":[130]},"used_by":{"WP_Customize_Manager::register_controls":[887],"wp_nav_menu":[151],"has_nav_menu":[141]}},"WP_Customize_Manager::_sanitize_header_textcolor":{"doc":"\/**\n * Callback for validating the header_textcolor value.\n *\n * Accepts 'blank', and otherwise uses sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string\n *\/","file":"class-wp-customize-manager.php","line":984,"missingDoc":false,"filters":[],"uses":{"sanitize_hex_color_no_hash":[985]},"used_by":[]},"sanitize_hex_color_no_hash":{"doc":"\/**\n * Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.\n *\n * Saving hex colors without a hash puts the burden of adding the hash on the\n * UI, which makes it difficult to use or upgrade to other color types such as\n * rgba, hsl, rgb, and html color names.\n *\n * Returns either '', a 3 or 6 digit hex color (without a #), or null.\n *\n * @since 3.4.0\n * @uses sanitize_hex_color()\n *\n * @param string $color\n * @return string|null\n *\/","file":"class-wp-customize-manager.php","line":1026,"missingDoc":false,"filters":[],"uses":{"ltrim":[1027],"sanitize_hex_color":[1032]},"used_by":{"WP_Customize_Manager::_sanitize_header_textcolor":[985],"maybe_hash_hex_color":[1047]}},"sanitize_hex_color":{"doc":"\/**\n * Validates a hex color.\n *\n * Returns either '', a 3 or 6 digit hex color (with #), or null.\n * For validating values without a #, see sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string|null\n *\/","file":"class-wp-customize-manager.php","line":1000,"missingDoc":false,"filters":[],"uses":{"preg_match":[1005]},"used_by":{"sanitize_hex_color_no_hash":[1032]}},"maybe_hash_hex_color":{"doc":"\/**\n * Ensures that any hex color is properly hashed.\n * Otherwise, returns value untouched.\n *\n * This method should only be necessary if using sanitize_hex_color_no_hash().\n *\n * @since 3.4.0\n *\n * @param string $color\n * @return string\n *\/","file":"class-wp-customize-manager.php","line":1046,"missingDoc":false,"filters":[],"uses":{"sanitize_hex_color_no_hash":[1047]},"used_by":[]},"WP_Customize_Section::__construct":{"doc":"\/**\n * Constructor.\n *\n * @since 3.4.0\n *\n * @param WP_Customize_Manager $manager\n * @param string $id An specific ID of the section.\n * @param array $args Section arguments.\n *\/","file":"class-wp-customize-section.php","line":28,"missingDoc":false,"filters":[],"uses":{"array_keys":[29],"get_class_vars":[29]},"used_by":[]},"WP_Customize_Section::check_capabilities":{"doc":"\/**\n * Check if the theme supports the section and check user capabilities.\n *\n * @since 3.4.0\n *\n * @return bool False if theme doesn't support the section or user doesn't have the capability.\n *\/","file":"class-wp-customize-section.php","line":50,"missingDoc":false,"filters":[],"uses":{"call_user_func_array":[51,54]},"used_by":[]},"WP_Customize_Section::maybe_render":{"doc":"\/**\n * Check capabilities and render the section.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-section.php","line":65,"missingDoc":false,"filters":["'customize_render_section'","'customize_render_section_' . $this->id"],"uses":{"check_capabilities":[66],"render":[72]},"used_by":[]},"WP_Customize_Section::render":{"doc":"\/**\n * Render the section.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-section.php","line":80,"missingDoc":false,"filters":[],"uses":{"esc_attr":[82,83],"esc_html":[83],"maybe_render":[87]},"used_by":[]},"WP_Customize_Setting::__construct":{"doc":"\/**\n * Constructor.\n *\n * @since 3.4.0\n *\n * @param WP_Customize_Manager $manager\n * @param string $id An specific ID of the setting. Can be a\n *                   theme mod or option name.\n * @param array $args Setting arguments.\n * @return WP_Customize_Setting\n *\/","file":"class-wp-customize-setting.php","line":36,"missingDoc":false,"filters":[],"uses":{"array_keys":[37],"get_class_vars":[37],"preg_split":[47],"str_replace":[47],"array_shift":[48],"implode":[53],"add_filter":[56,59]},"used_by":[]},"WP_Customize_Setting::preview":{"doc":"\/**\n * Handle previewing the setting.\n *\n * @since 3.4.0\n *\/","file":"class-wp-customize-setting.php","line":69,"missingDoc":false,"filters":["'customize_preview_' . $this->id"],"uses":{"add_filter":[72,76,78,79]},"used_by":[]},"WP_Customize_Setting::_preview_filter":{"doc":"\/**\n * Callback function to filter the theme mods and options.\n *\n * @since 3.4.0\n * @uses WP_Customize_Setting::multidimensional_replace()\n *\n * @param mixed $original Old value.\n * @return mixed New or old value.\n *\/","file":"class-wp-customize-setting.php","line":96,"missingDoc":false,"filters":[],"uses":{"multidimensional_replace":[97],"post_value":[97]},"used_by":[]},"WP_Customize_Setting::save":{"doc":"\/**\n * Set the value of the parameter for a specific theme.\n *\n * @since 3.4.0\n *\n * @return bool False if cap check fails or value isn't set.\n *\/","file":"class-wp-customize-setting.php","line":107,"missingDoc":false,"filters":["'customize_save_' . $this->id_data['base']"],"uses":{"post_value":[108],"check_capabilities":[110],"update":[115]},"used_by":[]},"WP_Customize_Setting::post_value":{"doc":"\/**\n * Fetches, validates, and sanitizes the $_POST value.\n *\n * @since 3.4.0\n *\n * @param mixed $default A default value which is used as a fallback. Default is null.\n * @return mixed The default value on failure, otherwise the sanitized value.\n *\/","file":"class-wp-customize-setting.php","line":126,"missingDoc":false,"filters":[],"uses":{"post_value":[130]},"used_by":[]},"WP_Customize_Setting::sanitize":{"doc":"\/**\n * Sanitize an input.\n *\n * @since 3.4.0\n *\n * @param mixed $value The value to sanitize.\n * @return mixed Null if an input isn't valid, otherwise the sanitized value.\n *\/","file":"class-wp-customize-setting.php","line":146,"missingDoc":false,"filters":["\"customize_sanitize_{$this->id}\""],"uses":{"stripslashes_deep":[147]},"used_by":[]},"stripslashes_deep":{"doc":"\/**\n * Navigates through an array and removes slashes from the values.\n *\n * If an array is passed, the array_map() function causes a callback to pass the\n * value back to the function. The slashes from this value will removed.\n *\n * @since 2.0.0\n *\n * @param mixed $value The value to be stripped.\n * @return mixed Stripped value.\n *\/","file":"formatting.php","line":1415,"missingDoc":false,"filters":[],"uses":{"array_map":[1417],"is_object":[1418],"get_object_vars":[1419],"stripslashes_deep":[1421],"is_string":[1423],"stripslashes":[1424],"is_array":[1416]},"used_by":{"WP_Customize_Setting::sanitize":[147],"wp_xmlrpc_server::set_custom_fields":[286],"wp_insert_comment":[1263],"wp_update_comment":[1508],"stripslashes_deep":[1421],"wp_parse_str":[2935],"wp_magic_quotes":[534,535,536],"add_metadata":[47],"update_metadata":[119],"delete_metadata":[200],"wp_insert_post":[2865],"wp_insert_attachment":[4002],"wp_insert_user":[1393],"WP_Widget::update_callback":[227]}},"WP_Customize_Setting::update":{"doc":"\/**\n * Set the value of the parameter for a specific theme.\n *\n * @since 3.4.0\n *\n * @param mixed $value The value to update.\n * @return mixed The result of saving the value.\n *\/","file":"class-wp-customize-setting.php","line":159,"missingDoc":false,"filters":["'customize_update_' . $this->type"],"uses":{"_update_theme_mod":[162],"_update_option":[165]},"used_by":[]},"WP_Customize_Setting::_update_theme_mod":{"doc":"\/**\n * Update the theme mod from the value of the parameter.\n *\n * @since 3.4.0\n *\n * @param mixed $value The value to update.\n * @return mixed The result of saving the value.\n *\/","file":"class-wp-customize-setting.php","line":180,"missingDoc":false,"filters":[],"uses":{"set_theme_mod":[183,189],"get_theme_mod":[186],"multidimensional_replace":[187]},"used_by":[]},"set_theme_mod":{"doc":"\/**\n * Update theme modification value for the current theme.\n *\n * @since 2.1.0\n *\n * @param string $name Theme modification name.\n * @param string $value theme modification value.\n *\/","file":"theme.php","line":796,"missingDoc":false,"filters":[],"uses":{"get_theme_mods":[797],"get_option":[801],"update_option":[802]},"used_by":{"WP_Customize_Setting::_update_theme_mod":[183,189],"switch_theme":[667]}},"get_theme_mod":{"doc":"\/**\n * Retrieve theme modification value for the current theme.\n *\n * If the modification name does not exist, then the $default will be passed\n * through {@link http:\/\/php.net\/sprintf sprintf()} PHP function with the first\n * string the template directory URI and the second string the stylesheet\n * directory URI.\n *\n * @since 2.1.0\n * @uses apply_filters() Calls 'theme_mod_$name' filter on the value.\n *\n * @param string $name Theme modification name.\n * @param bool|string $default\n * @return string\n *\/","file":"theme.php","line":776,"missingDoc":false,"filters":["\"theme_mod_{$name}\"","\"theme_mod_{$name}\""],"uses":{"get_theme_mods":[777],"sprintf":[783],"get_template_directory_uri":[783],"get_stylesheet_directory_uri":[783],"is_string":[782]},"used_by":{"WP_Customize_Setting::_update_theme_mod":[186],"get_nav_menu_locations":[130],"get_body_class":[518],"get_header_textcolor":[854],"display_header_text":[877],"get_header_image":[889],"_get_random_header_data":[915],"is_random_header_image":[968],"get_custom_header":[1036],"get_background_image":[1109],"get_background_color":[1129],"_custom_background_cb":[1153,1163,1168,1173],"retrieve_widgets":[1180]}},"WP_Customize_Setting::_update_option":{"doc":"\/**\n * Update the theme mod from the value of the parameter.\n *\n * @since 3.4.0\n *\n * @param mixed $value The value to update.\n * @return mixed The result of saving the value.\n *\/","file":"class-wp-customize-setting.php","line":200,"missingDoc":false,"filters":[],"uses":{"update_option":[203,209],"get_option":[206],"multidimensional_replace":[207]},"used_by":[]},"WP_Customize_Setting::value":{"doc":"\/**\n * Fetch the value of the parameter for a specific theme.\n *\n * @since 3.4.0\n *\n * @return mixed The requested value.\n *\/","file":"class-wp-customize-setting.php","line":219,"missingDoc":false,"filters":["'customize_value_' . $this->id_data['base']"],"uses":{"multidimensional_get":[237]},"used_by":[]},"WP_Customize_Setting::js_value":{"doc":"\/**\n * Escape the parameter's value for use in JavaScript.\n *\n * @since 3.4.0\n *\n * @return mixed The requested escaped value.\n *\/","file":"class-wp-customize-setting.php","line":247,"missingDoc":false,"filters":["\"customize_sanitize_js_{$this->id}\""],"uses":{"value":[248],"html_entity_decode":[251],"is_string":[250]},"used_by":[]},"WP_Customize_Setting::check_capabilities":{"doc":"\/**\n * Check if the theme supports the setting and check user capabilities.\n *\n * @since 3.4.0\n *\n * @return bool False if theme doesn't support the setting or user can't change setting, otherwise true.\n *\/","file":"class-wp-customize-setting.php","line":263,"missingDoc":false,"filters":[],"uses":{"call_user_func_array":[264,267]},"used_by":[]},"WP_Customize_Setting::multidimensional":{"doc":"\/**\n * Multidimensional helper function.\n *\n * @since 3.4.0\n *\n * @param $root\n * @param $keys\n * @param bool $create Default is false.\n * @return null|array Keys are 'root', 'node', and 'key'.\n *\/","file":"class-wp-customize-setting.php","line":283,"missingDoc":false,"filters":[],"uses":{"array_pop":[290],"is_array":[297]},"used_by":[]},"WP_Customize_Setting::multidimensional_replace":{"doc":"\/**\n * Will attempt to replace a specific value in a multidimensional array.\n *\n * @since 3.4.0\n *\n * @param $root\n * @param $keys\n * @param mixed $value The value to update.\n * @return\n *\/","file":"class-wp-customize-setting.php","line":326,"missingDoc":false,"filters":[],"uses":{"multidimensional":[332]},"used_by":[]},"WP_Customize_Setting::multidimensional_get":{"doc":"\/**\n * Will attempt to fetch a specific value from a multidimensional array.\n *\n * @since 3.4.0\n *\n * @param $root\n * @param $keys\n * @param $default A default value which is used as a fallback. Default is null.\n * @return mixed The requested value or the default value.\n *\/","file":"class-wp-customize-setting.php","line":350,"missingDoc":false,"filters":[],"uses":{"multidimensional":[354]},"used_by":[]},"WP_Customize_Setting::multidimensional_isset":{"doc":"\/**\n * Will attempt to check if a specific value in a multidimensional array is set.\n *\n * @since 3.4.0\n *\n * @param $root\n * @param $keys\n * @return bool True if value is set, false if not.\n *\/","file":"class-wp-customize-setting.php","line":367,"missingDoc":false,"filters":[],"uses":{"multidimensional_get":[368]},"used_by":[]},"WP_Customize_Filter_Setting::update":{"doc":"\/**\n * @since 3.4.0\n *\/","file":"class-wp-customize-setting.php","line":387,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Customize_Header_Image_Setting::update":{"doc":"\/**\n * @since 3.4.0\n *\n * @param $value\n *\/","file":"class-wp-customize-setting.php","line":407,"missingDoc":false,"filters":[],"uses":{"post_value":[413],"get_setting":[413],"set_header_image":[416,418],"is_array":[415]},"used_by":[]},"WP_Customize_Background_Image_Setting::update":{"doc":"\/**\n * @since 3.4.0\n * @uses remove_theme_mod()\n *\n * @param $value\n *\/","file":"class-wp-customize-setting.php","line":436,"missingDoc":false,"filters":[],"uses":{"remove_theme_mod":[437]},"used_by":[]},"remove_theme_mod":{"doc":"\/**\n * Remove theme modification name from current theme list.\n *\n * If removing the name also removes all elements, then the entire option will\n * be removed.\n *\n * @since 2.1.0\n *\n * @param string $name Theme modification name.\n * @return null\n *\/","file":"theme.php","line":816,"missingDoc":false,"filters":[],"uses":{"get_theme_mods":[817],"remove_theme_mods":[825],"get_option":[827],"update_option":[828]},"used_by":{"WP_Customize_Background_Image_Setting::update":[437],"_delete_attachment_theme_mod":[1595,1598],"retrieve_widgets":[1184]}},"_WP_Editors::__construct":{"doc":"","file":"class-wp-editor.php","line":28,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"_WP_Editors::parse_settings":{"doc":"","file":"class-wp-editor.php","line":30,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[31],"user_can_richedit":[46],"get_user_setting":[60],"parse_str":[64]},"used_by":[]},"user_can_richedit":{"doc":"\/**\n * Whether the user should have a WYSIWIG editor.\n *\n * Checks that the user requires a WYSIWIG editor and that the editor is\n * supported in the users browser.\n *\n * @since 2.0.0\n *\n * @return bool\n *\/","file":"general-template.php","line":1751,"missingDoc":false,"filters":["'user_can_richedit'"],"uses":{"wp_is_mobile":[1759,1760],"preg_match":[1759],"intval":[1759],"get_user_option":[1757],"is_user_logged_in":[1757]},"used_by":{"_WP_Editors::parse_settings":[46],"wp_default_editor":[1780],"sanitize_post_field":[2025]}},"get_user_setting":{"doc":"\/**\n * Retrieve user interface setting value based on setting name.\n *\n * @package WordPress\n * @subpackage Option\n * @since 2.7.0\n *\n * @param string $name The name of the setting.\n * @param string $default Optional default value to return when $name is not set.\n * @return mixed the last saved user setting or the default value\/false if it doesn't exist.\n *\/","file":"option.php","line":584,"missingDoc":false,"filters":[],"uses":{"get_all_user_settings":[586]},"used_by":{"_WP_Editors::parse_settings":[60],"_WP_Editors::wp_fullscreen_html":[663],"_WP_Editors::wp_link_dialog":[826],"wp_default_editor":[1782]}},"_WP_Editors::editor":{"doc":"\/**\n * Outputs the HTML for a single instance of the editor.\n *\n * @param string $content The initial content of the editor.\n * @param string $editor_id ID for the textarea and TinyMCE and Quicktags instances (can contain only ASCII letters and numbers).\n * @param array $settings See the _parse_settings() method for description.\n *\/","file":"class-wp-editor.php","line":87,"missingDoc":false,"filters":["'media_buttons'","'the_editor'","'the_editor_content'"],"uses":{"trim":[90],"current_user_can":[100],"add_filter":[108,110],"wp_default_editor":[107],"_x":[114],"__":[115],"wp_print_styles":[121],"function_exists":[135],"printf":[148]},"used_by":[]},"wp_default_editor":{"doc":"\/**\n * Find out which editor should be displayed by default.\n *\n * Works out which of the two editors to display as the current editor for a\n * user. The 'html' setting is for the \"Text\" editor tab.\n *\n * @since 2.5.0\n *\n * @return string Either 'tinymce', or 'html', or 'test'\n *\/","file":"general-template.php","line":1779,"missingDoc":false,"filters":["'wp_default_editor'"],"uses":{"user_can_richedit":[1780],"get_user_setting":[1782],"in_array":[1783],"wp_get_current_user":[1781]},"used_by":{"_WP_Editors::editor":[107],"_WP_Editors::editor_js":[585]}},"wp_print_styles":{"doc":"\/**\n * Display styles that are in the queue or part of $handles.\n *\n * @since r79\n * @uses do_action() Calls 'wp_print_styles' hook.\n * @global object $wp_styles The WP_Styles object for printing styles.\n *\n * @param array|bool $handles Styles to be printed. An empty array prints the queue,\n *  an array with one string prints that style, and an array of strings prints those styles.\n * @return bool True on success, false on failure.\n *\/","file":"functions.wp-styles.php","line":20,"missingDoc":false,"filters":["'wp_print_styles'"],"uses":{"_doing_it_wrong":[30],"sprintf":[30],"__":[30],"did_action":[29],"is_a":[28],"do_items":[39]},"used_by":{"_WP_Editors::editor":[121],"wp_admin_css":[2096]}},"_WP_Editors::editor_settings":{"doc":"","file":"class-wp-editor.php","line":154,"missingDoc":true,"filters":["'quicktags_settings'","'disable_captions'","'teeny_mce_plugins'","'mce_external_plugins'","'mce_external_languages'","'tiny_mce_plugins'","'mce_spellchecker_languages'","'mce_css'","'teeny_mce_buttons'","'mce_buttons'","'mce_buttons_2'","'mce_buttons_3'","'mce_buttons_4'","'teeny_mce_before_init'","'tiny_mce_before_init'"],"uses":{"add_action":[160,161,163,164],"is_admin":[159],"array_merge":[176,187,436,439],"is_array":[175,355,438],"explode":[187],"includes_url":[193],"get_locale":[194,194],"strtolower":[194],"substr":[194],"is_file":[230,253,256,260,265],"is_readable":[230],"set_url_scheme":[240],"dirname":[244],"str_replace":[247],"content_url":[247],"trailingslashit":[251],"realpath":[251],"function_exists":[250],"file_get_contents":[254,257,261,266],"preg_replace":[262,267],"in_array":[246],"array_unique":[280,357],"__":[295],"implode":[351,376,424,425,426,427],"get_stylesheet_directory_uri":[358],"get_stylesheet_directory":[359],"get_template_directory_uri":[362],"get_template_directory":[363],"file_exists":[366,372],"is_child_theme":[361],"trim":[381],"get_post":[399],"array_search":[411,413,415,409]},"used_by":[]},"includes_url":{"doc":"\/**\n * Retrieve the url to the includes directory.\n *\n * @package WordPress\n * @since 2.6.0\n *\n * @param string $path Optional. Path relative to the includes url.\n * @return string Includes url link with optional path appended.\n*\/","file":"link-template.php","line":2023,"missingDoc":false,"filters":["'includes_url'"],"uses":{"site_url":[2024],"ltrim":[2027],"is_string":[2026],"strpos":[2026]},"used_by":{"_WP_Editors::editor_settings":[193],"WP_Widget_RSS::widget":[781],"translate_smiley":[1741],"wp_plupload_default_settings":[1262,1263],"get_avatar":[1648],"wp_mime_type_icon":[4350],"wp_default_scripts":[192,193]}},"get_locale":{"doc":"\/**\n * Gets the current locale.\n *\n * If the locale is set, then it will filter the locale in the 'locale' filter\n * hook and return the value.\n *\n * If the locale is not set already, then the WPLANG constant is used if it is\n * defined. Then it is filtered through the 'locale' filter hook and the value\n * for the locale global set and the locale is returned.\n *\n * The process to get the locale should only be done once, but the locale will\n * always be filtered using the 'locale' hook.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'locale' hook on locale value.\n * @uses $locale Gets the locale stored in the global.\n *\n * @return string The locale of the blog or from the 'locale' hook.\n *\/","file":"l10n.php","line":28,"missingDoc":false,"filters":["'locale'","'locale'"],"uses":{"defined":[35,41],"get_site_option":[42],"get_option":[41],"is_multisite":[39]},"used_by":{"_WP_Editors::editor_settings":[194,194],"WP_Theme::sort_by_name":[1169],"wp_timezone_choice":[3339],"get_bloginfo":[466],"load_default_textdomain":[386],"load_plugin_textdomain":[417],"load_muplugin_textdomain":[442],"load_theme_textdomain":[460],"get_locale_stylesheet_uri":[221],"wp_version_check":[43]}},"content_url":{"doc":"\/**\n * Retrieve the url to the content directory.\n *\n * @package WordPress\n * @since 2.6.0\n *\n * @param string $path Optional. Path relative to the content url.\n * @return string Content url link with optional path appended.\n*\/","file":"link-template.php","line":2041,"missingDoc":false,"filters":["'content_url'"],"uses":{"set_url_scheme":[2042],"ltrim":[2045],"is_string":[2044],"strpos":[2044]},"used_by":{"_WP_Editors::editor_settings":[247],"get_theme_root_uri":[481,489,492]}},"get_stylesheet_directory_uri":{"doc":"\/**\n * Retrieve stylesheet directory URI.\n *\n * @since 1.5.0\n *\n * @return string\n *\/","file":"theme.php","line":173,"missingDoc":false,"filters":["'stylesheet_directory_uri'"],"uses":{"get_stylesheet":[174],"get_theme_root_uri":[175]},"used_by":{"_WP_Editors::editor_settings":[358],"WP_Theme::get_screenshot":[875,885],"get_bloginfo":[445],"get_stylesheet_uri":[193],"get_locale_stylesheet_uri":[219],"get_theme_mod":[783],"_get_random_header_data":[934,935],"get_custom_header":[1038]}},"get_stylesheet_directory":{"doc":"\/**\n * Retrieve stylesheet directory path for current theme.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'stylesheet_directory' filter on stylesheet directory and theme name.\n *\n * @return string Path to current theme directory.\n *\/","file":"theme.php","line":158,"missingDoc":false,"filters":["'stylesheet_directory'"],"uses":{"get_stylesheet":[159],"get_theme_root":[160]},"used_by":{"_WP_Editors::editor_settings":[359],"WP_Theme::__get":[326],"WP_Theme::offsetGet":[412],"WP_Theme::get_screenshot":[881],"WP_Theme::get_files":[906],"WP_Theme::load_textdomain":[1026],"wp_templating_constants":[298],"load_child_theme_textdomain":[489],"get_locale_stylesheet_uri":[220],"validate_current_theme":[731]}},"get_template_directory_uri":{"doc":"\/**\n * Retrieve theme directory URI.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'template_directory_uri' filter on template directory URI path and template name.\n *\n * @return string Template directory URI.\n *\/","file":"theme.php","line":267,"missingDoc":false,"filters":["'template_directory_uri'"],"uses":{"get_template":[268],"get_theme_root_uri":[269]},"used_by":{"_WP_Editors::editor_settings":[362],"get_bloginfo":[449],"get_theme_mod":[783],"_get_random_header_data":[934,935],"get_custom_header":[1038]}},"get_template_directory":{"doc":"\/**\n * Retrieve current theme directory.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'template_directory' filter on template directory path and template name.\n *\n * @return string Template directory path.\n *\/","file":"theme.php","line":251,"missingDoc":false,"filters":["'template_directory'"],"uses":{"get_template":[252],"get_theme_root":[253]},"used_by":{"_WP_Editors::editor_settings":[363],"WP_Theme::__get":[324],"WP_Theme::offsetGet":[410],"WP_Theme::get_files":[909],"wp_templating_constants":[292],"get_attachment_icon_src":[1943],"load_theme_textdomain":[463],"validate_current_theme":[721,726]}},"is_child_theme":{"doc":"\/**\n * Whether a child theme is in use.\n *\n * @since 3.0.0\n *\n * @return bool true if a child theme is in use, false otherwise.\n **\/","file":"theme.php","line":128,"missingDoc":false,"filters":[],"uses":[],"used_by":{"_WP_Editors::editor_settings":[361],"validate_current_theme":[731]}},"_WP_Editors::_parse_init":{"doc":"","file":"class-wp-editor.php","line":460,"missingDoc":true,"filters":[],"uses":{"is_string":[468],"strlen":[468,468],"preg_match":[468],"is_bool":[464],"trim":[475]},"used_by":[]},"_WP_Editors::enqueue_scripts":{"doc":"","file":"class-wp-editor.php","line":478,"missingDoc":true,"filters":[],"uses":{"wp_enqueue_script":[479,482,485,488,489,494,498],"wp_enqueue_style":[490],"in_array":[487,487,493,493],"add_thickbox":[497]},"used_by":[]},"add_thickbox":{"doc":"\/**\n * Enqueues the default ThickBox js and css.\n *\n * If any of the settings need to be changed, this can be done with another js\n * file similar to media-upload.js. That file should\n * require array('thickbox') to ensure it is loaded after.\n *\n * @since 2.5.0\n *\/","file":"general-template.php","line":2116,"missingDoc":false,"filters":[],"uses":{"wp_enqueue_script":[2117],"wp_enqueue_style":[2118],"add_action":[2121],"is_network_admin":[2120]},"used_by":{"_WP_Editors::enqueue_scripts":[497]}},"_WP_Editors::editor_js":{"doc":"","file":"class-wp-editor.php","line":502,"missingDoc":true,"filters":["'before_wp_tiny_mce'","'after_wp_tiny_mce'"],"uses":{"script_concat_settings":[516],"stripos":[519],"trim":[530,540],"implode":[546],"defined":[551],"wp_default_editor":[585],"admin_url":[642],"is_admin":[641],"in_array":[648,648,651,651]},"used_by":[]},"script_concat_settings":{"doc":"\/**\n * Determine the concatenation and compression settings for scripts and styles.\n *\n * @since 2.8\n *\/","file":"script-loader.php","line":846,"missingDoc":false,"filters":[],"uses":{"ini_get":[849,849],"defined":[852,853,858,864],"is_admin":[853],"get_site_option":[859,865]},"used_by":{"_WP_Editors::editor_js":[516],"print_head_scripts":[652],"print_footer_scripts":[674],"print_admin_styles":[778]}},"_WP_Editors::wp_fullscreen_html":{"doc":"","file":"class-wp-editor.php","line":657,"missingDoc":true,"filters":["'wp_fullscreen_buttons'","'enter_title_here'"],"uses":{"get_post":[659],"get_user_setting":[663],"__":[664,664,682,683,685,686,688,689,691,692,694,727,736],"is_rtl":[666],"_e":[669,673,718,718,737],"_ex":[674],"post_type_supports":[726],"printf":[736]},"used_by":[]},"is_rtl":{"doc":"\/**\n * Checks if current locale is RTL.\n *\n * @since 3.0.0\n * @return bool Whether locale is RTL.\n *\/","file":"locale.php","line":338,"missingDoc":false,"filters":[],"uses":{"is_rtl":[340]},"used_by":{"_WP_Editors::wp_fullscreen_html":[666],"_default_wp_die_handler":[2117],"_mce_set_direction":[2418],"dead_db":[2768],"get_bloginfo":[472],"language_attributes":[1861],"wp_admin_css":[2103],"__main":[140],"wp_maintenance":[171],"is_rtl":[340],"gallery_shortcode":[740],"get_body_class":[405],"wp_default_styles":[500],"add_editor_style":[1217]}},"_ex":{"doc":"\/**\n * Displays translated string with gettext context\n *\n * @see _x\n * @since 3.0.0\n *\n * @param string $text Text to translate\n * @param string $context Context information for the translators\n * @param string $domain Optional. Domain to retrieve the translated text\n * @return string Translated context string without pipe\n *\/","file":"l10n.php","line":204,"missingDoc":false,"filters":[],"uses":{"_x":[205]},"used_by":{"_WP_Editors::wp_fullscreen_html":[674],"WP_Widget_Links::form":[150,164],"wp_list_post_revisions":[1440,1441,1442]}},"post_type_supports":{"doc":"\/**\n * Checks a post type's support for a given feature\n *\n * @since 3.0.0\n * @param string $post_type The post type being checked\n * @param string $feature the feature being checked\n * @return boolean\n *\/","file":"post.php","line":1633,"missingDoc":false,"filters":[],"uses":{"func_num_args":[1640]},"used_by":{"_WP_Editors::wp_fullscreen_html":[726],"wp_xmlrpc_server::wp_getRevisions":[3538],"wp_xmlrpc_server::wp_restoreRevision":[3605],"wp_enqueue_media":[1480],"get_post_class":[331],"get_body_class":[437],"get_post_format":[768],"wp_insert_post":[2727,2728,2728],"wp_save_post_revision":[4940]}},"_WP_Editors::wp_link_query":{"doc":"\/**\n * Performs post queries for internal linking.\n *\n * @since 3.1.0\n *\n * @param array $args Optional. Accepts 'pagenum' and 's' (search) arguments.\n * @return array Results.\n *\/","file":"class-wp-editor.php","line":755,"missingDoc":false,"filters":[],"uses":{"get_post_types":[756],"array_keys":[757],"absint":[770],"query":[779],"mysql2date":[788],"__":[788],"trim":[794],"esc_html":[794],"strip_tags":[794],"get_the_title":[794],"get_permalink":[795]},"used_by":[]},"mysql2date":{"doc":"\/**\n * Converts given date string into a different format.\n *\n * $format should be either a PHP date format string, e.g. 'U' for a Unix\n * timestamp, or 'G' for a Unix timestamp assuming that $date is GMT.\n *\n * If $translate is true then the given date and format string will\n * be passed to date_i18n() for translation.\n *\n * @since 0.71\n *\n * @param string $format Format of the date to return.\n * @param string $date Date string to convert.\n * @param bool $translate Whether the return date should be translated. Default is true.\n * @return string|int Formatted date string, or Unix timestamp.\n *\/","file":"functions.php","line":26,"missingDoc":false,"filters":[],"uses":{"strtotime":[31,33],"date_i18n":[39],"date":[41]},"used_by":{"_WP_Editors::wp_link_query":[788],"wp_xmlrpc_server::_convert_date":[589],"wp_xmlrpc_server::_convert_date_gmt":[603],"wp_xmlrpc_server::wp_editPost":[1262],"WP::send_headers":[350,352],"get_comment_date":[375,377],"get_comment_time":[633,635],"check_comment_flood_db":[731,732],"get_boundary_post_rel_link":[2734],"get_parent_post_rel_link":[2809],"__main":[27,66,67,22,25,42,17,31,51,28,38],"wp_get_archives":[980],"the_date_xml":[1321],"get_the_date":[1380,1382],"get_post_time":[1475],"get_post_modified_time":[1524],"the_weekday":[1538],"the_weekday_date":[1559],"get_adjacent_post_rel_link":[1225],"adjacent_post_link":[1392],"wp_prepare_attachment_for_js":[1346],"wpmu_validate_user_signup":[492,507],"wpmu_validate_blog_signup":[612],"Walker_Page::start_el":[1059],"wp_insert_post":[2819,2819,2823,2823],"setup_postdata":[3632,3633]}},"get_the_title":{"doc":"\/**\n * Retrieve post title.\n *\n * If the post is protected and the visitor is not an admin, then \"Protected\"\n * will be displayed before the post title. If the post is private, then\n * \"Private\" will be located before the post title.\n *\n * @since 0.71\n *\n * @param mixed $post Optional. Post ID or object.\n * @return string\n *\/","file":"post-template.php","line":102,"missingDoc":false,"filters":["'protected_title_format'","'private_title_format'","'the_title'"],"uses":{"get_post":[103],"__":[110,113],"sprintf":[111,114],"is_admin":[108]},"used_by":{"_WP_Editors::wp_link_query":[794],"wp_xmlrpc_server::_prepare_comment":[872],"trackback_rdf":[758],"WP_Widget_Recent_Posts::widget":[574,574,574],"WP_Widget_Recent_Comments::widget":[694],"__main":[50,42,27],"get_the_title_rss":[116],"feed_links_extra":[1645],"the_title":[43],"the_title_attribute":[72]}},"_WP_Editors::wp_link_dialog":{"doc":"\/**\n * Dialog for internal linking.\n *\n * @since 3.1.0\n *\/","file":"class-wp-editor.php","line":808,"missingDoc":false,"filters":[],"uses":{"wp_nonce_field":[812],"_e":[815,817,820,823,827,831,843,856],"get_user_setting":[826],"esc_attr_e":[853]},"used_by":[]},"wp_nonce_field":{"doc":"\/**\n * Retrieve or display nonce hidden field for forms.\n *\n * The nonce field is used to validate that the contents of the form came from\n * the location on the current site and not somewhere else. The nonce does not\n * offer absolute protection, but should protect against most cases. It is very\n * important to use nonce field in forms.\n *\n * The $action and $name are optional, but if you want to have better security,\n * it is strongly suggested to set those two parameters. It is easier to just\n * call the function without any parameters, because validation of the nonce\n * doesn't require any parameters, but since crackers know what the default is\n * it won't be difficult for them to find a way around your nonce and cause\n * damage.\n *\n * The input name will be whatever $name value you gave. The input value will be\n * the nonce creation value.\n *\n * @package WordPress\n * @subpackage Security\n * @since 2.0.4\n *\n * @param string $action Optional. Action name.\n * @param string $name Optional. Nonce name.\n * @param bool $referer Optional, default true. Whether to set the referer field for validation.\n * @param bool $echo Optional, default true. Whether to display or return hidden form field.\n * @return string Nonce field.\n *\/","file":"functions.php","line":1208,"missingDoc":false,"filters":[],"uses":{"esc_attr":[1209],"wp_create_nonce":[1210],"wp_referer_field":[1213]},"used_by":{"_WP_Editors::wp_link_dialog":[812],"wp_comment_form_unfiltered_html_nonce":[817],"signup_nonce_fields":[1624]}},"WP_Embed::__construct":{"doc":"\/**\n * Constructor\n *\/","file":"class-wp-embed.php","line":18,"missingDoc":false,"filters":[],"uses":{"add_filter":[20,26],"add_shortcode":[23],"add_action":[29,32]},"used_by":[]},"add_shortcode":{"doc":"\/**\n * Add hook for shortcode tag.\n *\n * There can only be one hook for each shortcode. Which means that if another\n * plugin has a similar shortcode, it will override yours or yours will override\n * theirs depending on which order the plugins are included and\/or ran.\n *\n * Simplest example of a shortcode tag using the API:\n *\n * <code>\n * \/\/ [footag foo=\"bar\"]\n * function footag_func($atts) {\n * \treturn \"foo = {$atts[foo]}\";\n * }\n * add_shortcode('footag', 'footag_func');\n * <\/code>\n *\n * Example with nice attribute defaults:\n *\n * <code>\n * \/\/ [bartag foo=\"bar\"]\n * function bartag_func($atts) {\n * \textract(shortcode_atts(array(\n * \t\t'foo' => 'no foo',\n * \t\t'baz' => 'default baz',\n * \t), $atts));\n *\n * \treturn \"foo = {$foo}\";\n * }\n * add_shortcode('bartag', 'bartag_func');\n * <\/code>\n *\n * Example with enclosed content:\n *\n * <code>\n * \/\/ [baztag]content[\/baztag]\n * function baztag_func($atts, $content='') {\n * \treturn \"content = $content\";\n * }\n * add_shortcode('baztag', 'baztag_func');\n * <\/code>\n *\n * @since 2.5\n * @uses $shortcode_tags\n *\n * @param string $tag Shortcode tag to be searched in post content.\n * @param callable $func Hook to run when shortcode is found.\n *\/","file":"shortcodes.php","line":93,"missingDoc":false,"filters":[],"uses":{"is_callable":[96]},"used_by":{"WP_Embed::__construct":[23],"WP_Embed::run_shortcode":[57],"__main":[609,610,658]}},"WP_Embed::run_shortcode":{"doc":"\/**\n * Process the [embed] shortcode.\n *\n * Since the [embed] shortcode needs to be run earlier than other shortcodes,\n * this function removes all existing shortcodes, registers the [embed] shortcode,\n * calls {@link do_shortcode()}, and then re-registers the old shortcodes.\n *\n * @uses $shortcode_tags\n * @uses remove_all_shortcodes()\n * @uses add_shortcode()\n * @uses do_shortcode()\n *\n * @param string $content Content to parse\n * @return string Content with shortcode parsed\n *\/","file":"class-wp-embed.php","line":50,"missingDoc":false,"filters":[],"uses":{"remove_all_shortcodes":[55],"add_shortcode":[57],"do_shortcode":[60]},"used_by":[]},"remove_all_shortcodes":{"doc":"\/**\n * Clear all shortcodes.\n *\n * This function is simple, it clears all of the shortcode tags by replacing the\n * shortcodes global by a empty array. This is actually a very efficient method\n * for removing all shortcodes.\n *\n * @since 2.5\n * @uses $shortcode_tags\n *\/","file":"shortcodes.php","line":124,"missingDoc":false,"filters":[],"uses":[],"used_by":{"WP_Embed::run_shortcode":[55]}},"do_shortcode":{"doc":"\/**\n * Search content for shortcodes and filter shortcodes through their hooks.\n *\n * If there are no shortcode tags defined, then the content will be returned\n * without any filtering. This might cause issues when plugins are disabled but\n * the shortcode will still show up in the post or content.\n *\n * @since 2.5\n * @uses $shortcode_tags\n * @uses get_shortcode_regex() Gets the search pattern for searching shortcodes.\n *\n * @param string $content Content to search for shortcodes\n * @return string Content with shortcodes filtered out.\n *\/","file":"shortcodes.php","line":144,"missingDoc":false,"filters":[],"uses":{"is_array":[147],"get_shortcode_regex":[150],"preg_replace_callback":[151]},"used_by":{"WP_Embed::run_shortcode":[60],"img_caption_shortcode":[655]}},"WP_Embed::maybe_run_ajax_cache":{"doc":"\/**\n * If a post\/page was saved, then output JavaScript to make\n * an AJAX request that will call WP_Embed::cache_oembed().\n *\/","file":"class-wp-embed.php","line":72,"missingDoc":false,"filters":[],"uses":{"get_post":[73],"admin_url":[82]},"used_by":[]},"WP_Embed::register_handler":{"doc":"\/**\n * Register an embed handler. Do not use this function directly, use {@link wp_embed_register_handler()} instead.\n * This function should probably also only be used for sites that do not support oEmbed.\n *\n * @param string $id An internal ID\/name for the handler. Needs to be unique.\n * @param string $regex The regex that will be used to see if this handler should be used for a URL.\n * @param callback $callback The callback function that will be called if the regex is matched.\n * @param int $priority Optional. Used to specify the order in which the registered handlers will be tested (default: 10). Lower numbers correspond with earlier testing, and handlers with the same priority are tested in the order in which they were added to the action.\n *\/","file":"class-wp-embed.php","line":98,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Embed::unregister_handler":{"doc":"\/**\n * Unregister a previously registered embed handler. Do not use this function directly, use {@link wp_embed_unregister_handler()} instead.\n *\n * @param string $id The handler ID that should be removed.\n * @param int $priority Optional. The priority of the handler to be removed (default: 10).\n *\/","file":"class-wp-embed.php","line":111,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Embed::shortcode":{"doc":"\/**\n * The {@link do_shortcode()} callback function.\n *\n * Attempts to convert a URL into embed HTML. Starts by checking the URL against the regex of the registered embed handlers.\n * If none of the regex matches and it's enabled, then the URL will be given to the {@link WP_oEmbed} class.\n *\n * @uses wp_oembed_get()\n * @uses wp_parse_args()\n * @uses wp_embed_defaults()\n * @uses WP_Embed::maybe_make_link()\n * @uses get_option()\n * @uses author_can()\n * @uses wp_cache_get()\n * @uses wp_cache_set()\n * @uses get_post_meta()\n * @uses update_post_meta()\n *\n * @param array $attr Shortcode attributes.\n * @param string $url The URL attempting to be embedded.\n * @return string The embed HTML on success, otherwise the original URL.\n *\/","file":"class-wp-embed.php","line":137,"missingDoc":false,"filters":["'embed_handler_html'","'embed_oembed_html'","'embed_oembed_discover'","'embed_oembed_html'"],"uses":{"get_post":[138],"wp_parse_args":[144],"wp_embed_defaults":[144],"str_replace":[148],"ksort":[151],"call_user_func":[155],"preg_match":[154],"is_callable":[154],"md5":[169],"serialize":[169],"get_post_meta":[171],"maybe_make_link":[175,195],"author_can":[182],"wp_oembed_get":[183],"update_post_meta":[187]},"used_by":[]},"wp_oembed_get":{"doc":"\/**\n * Attempts to fetch the embed HTML for a provided URL using oEmbed.\n *\n * @since 2.9.0\n * @see WP_oEmbed\n *\n * @uses _wp_oembed_get_object()\n * @uses WP_oEmbed::get_html()\n *\n * @param string $url The URL that should be embedded.\n * @param array $args Additional arguments and parameters.\n * @return bool|string False on failure or the embed HTML on success.\n *\/","file":"media.php","line":1018,"missingDoc":false,"filters":[],"uses":{"_wp_oembed_get_object":[1020],"get_html":[1021]},"used_by":{"WP_Embed::shortcode":[183]}},"update_post_meta":{"doc":"\/**\n * Update post meta field based on post ID.\n *\n * Use the $prev_value parameter to differentiate between meta fields with the\n * same key and post ID.\n *\n * If the meta field for the post does not exist, it will be added.\n *\n * @since 1.5.0\n * @uses $wpdb\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/update_post_meta\n *\n * @param int $post_id Post ID.\n * @param string $meta_key Metadata key.\n * @param mixed $meta_value Metadata value.\n * @param mixed $prev_value Optional. Previous value to check before removing.\n * @return bool False on failure, true if success.\n *\/","file":"post.php","line":1817,"missingDoc":false,"filters":[],"uses":{"wp_is_post_revision":[1819],"update_metadata":[1822]},"used_by":{"WP_Embed::shortcode":[187],"wp_update_nav_menu_item":[372,373,374,375,376,380,381,382,385],"update_attached_file":[214],"wp_insert_post":[2939],"wp_update_attachment_metadata":[4195],"set_post_thumbnail":[5381]}},"WP_Embed::delete_oembed_caches":{"doc":"\/**\n * Delete all oEmbed caches.\n *\n * @param int $post_ID Post ID to delete the caches for.\n *\/","file":"class-wp-embed.php","line":203,"missingDoc":false,"filters":[],"uses":{"get_post_custom_keys":[204],"delete_post_meta":[210],"substr":[209]},"used_by":[]},"get_post_custom_keys":{"doc":"\/**\n * Retrieve meta field names for a post.\n *\n * If there are no meta fields, then nothing (null) will be returned.\n *\n * @since 1.2.0\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/get_post_custom_keys\n *\n * @param int $post_id post ID\n * @return array|null Either array of the keys, or null if keys could not be retrieved.\n *\/","file":"post.php","line":1869,"missingDoc":false,"filters":[],"uses":{"get_post_custom":[1870],"is_array":[1872],"array_keys":[1875]},"used_by":{"WP_Embed::delete_oembed_caches":[204],"the_meta":[743]}},"delete_post_meta":{"doc":"\/**\n * Remove metadata matching criteria from a post.\n *\n * You can match based on the key, or key and value. Removing based on key and\n * value, will keep from removing duplicate metadata with the same key. It also\n * allows removing all metadata matching key, if needed.\n *\n * @since 1.5.0\n * @uses $wpdb\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/delete_post_meta\n *\n * @param int $post_id post ID\n * @param string $meta_key Metadata name.\n * @param mixed $meta_value Optional. Metadata value.\n * @return bool False for failure. True for success.\n *\/","file":"post.php","line":1774,"missingDoc":false,"filters":[],"uses":{"wp_is_post_revision":[1776],"delete_metadata":[1779]},"used_by":{"WP_Embed::delete_oembed_caches":[210],"wp_scheduled_delete":[3486,3487],"wp_update_nav_menu_item":[387],"update_attached_file":[216],"wp_delete_post":[2319,2320],"wp_untrash_post":[2445,2446],"wp_untrash_post_comments":[2539],"wp_delete_attachment":[4088,4089],"wp_update_attachment_metadata":[4197],"wp_check_for_changed_slugs":[4438],"set_post_thumbnail":[5383],"delete_post_thumbnail":[5399]}},"WP_Embed::cache_oembed":{"doc":"\/**\n * Triggers a caching of all oEmbed results.\n *\n * @param int $post_ID Post ID to do the caching for.\n *\/","file":"class-wp-embed.php","line":219,"missingDoc":false,"filters":["'embed_cache_oembed_types'"],"uses":{"get_post":[220],"in_array":[222],"run_shortcode":[230],"autoembed":[231]},"used_by":[]},"WP_Embed::autoembed":{"doc":"\/**\n * Passes any unlinked URLs that are on their own line to {@link WP_Embed::shortcode()} for potential embedding.\n *\n * @uses WP_Embed::autoembed_callback()\n *\n * @param string $content The content to be searched.\n * @return string Potentially modified $content.\n *\/","file":"class-wp-embed.php","line":245,"missingDoc":false,"filters":[],"uses":{"preg_replace_callback":[246]},"used_by":[]},"WP_Embed::autoembed_callback":{"doc":"\/**\n * Callback function for {@link WP_Embed::autoembed()}.\n *\n * @uses WP_Embed::shortcode()\n *\n * @param array $match A regex match array.\n * @return string The embed HTML on success, otherwise the original URL.\n *\/","file":"class-wp-embed.php","line":257,"missingDoc":false,"filters":[],"uses":{"shortcode":[260]},"used_by":[]},"WP_Embed::maybe_make_link":{"doc":"\/**\n * Conditionally makes a hyperlink based on an internal class variable.\n *\n * @param string $url URL to potentially be linked.\n * @return string Linked URL or the original URL.\n *\/","file":"class-wp-embed.php","line":272,"missingDoc":false,"filters":["'embed_maybe_make_link'"],"uses":{"esc_attr":[273],"esc_html":[273]},"used_by":[]},"WP_Error::__construct":{"doc":"\/**\n * Constructor - Sets up error message.\n *\n * If code parameter is empty then nothing will be done. It is possible to\n * add multiple messages to the same code, but with other methods in the\n * class.\n *\n * All parameters are optional, but if the code parameter is set, then the\n * data parameter is optional.\n *\n * @since 2.1.0\n *\n * @param string|int $code Error code\n * @param string $message Error message\n * @param mixed $data Optional. Error data.\n * @return WP_Error\n *\/","file":"class-wp-error.php","line":57,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Error::get_error_codes":{"doc":"\/**\n * Retrieve all error codes.\n *\n * @since 2.1.0\n * @access public\n *\n * @return array List of error codes, if available.\n *\/","file":"class-wp-error.php","line":75,"missingDoc":false,"filters":[],"uses":{"array_keys":[79]},"used_by":[]},"WP_Error::get_error_code":{"doc":"\/**\n * Retrieve first error code available.\n *\n * @since 2.1.0\n * @access public\n *\n * @return string|int Empty string, if no error codes.\n *\/","file":"class-wp-error.php","line":90,"missingDoc":false,"filters":[],"uses":{"get_error_codes":[91]},"used_by":[]},"WP_Error::get_error_messages":{"doc":"\/**\n * Retrieve all error messages or error messages matching code.\n *\n * @since 2.1.0\n *\n * @param string|int $code Optional. Retrieve messages matching code, if exists.\n * @return array Error strings on success, or empty array on failure (if using code parameter).\n *\/","file":"class-wp-error.php","line":107,"missingDoc":false,"filters":[],"uses":{"array_merge":[112]},"used_by":[]},"WP_Error::get_error_message":{"doc":"\/**\n * Get single error message.\n *\n * This will get the first message available for the code. If no code is\n * given then the first code available will be used.\n *\n * @since 2.1.0\n *\n * @param string|int $code Optional. Error code to retrieve message.\n * @return string\n *\/","file":"class-wp-error.php","line":134,"missingDoc":false,"filters":[],"uses":{"get_error_code":[136],"get_error_messages":[137]},"used_by":[]},"WP_Error::get_error_data":{"doc":"\/**\n * Retrieve error data for error code.\n *\n * @since 2.1.0\n *\n * @param string|int $code Optional. Error code.\n * @return mixed Null, if no errors.\n *\/","file":"class-wp-error.php","line":151,"missingDoc":false,"filters":[],"uses":{"get_error_code":[153]},"used_by":[]},"WP_Error::add":{"doc":"\/**\n * Append more error messages to list of error messages.\n *\n * @since 2.1.0\n * @access public\n *\n * @param string|int $code Error code.\n * @param string $message Error message.\n * @param mixed $data Optional. Error data.\n *\/","file":"class-wp-error.php","line":170,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Error::add_data":{"doc":"\/**\n * Add data for error code.\n *\n * The error code can only contain one error data.\n *\n * @since 2.1.0\n *\n * @param mixed $data Error data.\n * @param string|int $code Error code.\n *\/","file":"class-wp-error.php","line":186,"missingDoc":false,"filters":[],"uses":{"get_error_code":[188]},"used_by":[]},"WP_HTTP_IXR_Client::__construct":{"doc":"","file":"class-wp-http-ixr-client.php","line":11,"missingDoc":true,"filters":[],"uses":{"parse_url":[14]},"used_by":[]},"WP_HTTP_IXR_Client::query":{"doc":"","file":"class-wp-http-ixr-client.php","line":33,"missingDoc":true,"filters":[],"uses":{"func_get_args":[34],"array_shift":[35],"getXml":[37],"htmlspecialchars":[56,73],"wp_remote_post":[58],"get_error_code":[61],"get_error_message":[62],"is_wp_error":[60],"wp_remote_retrieve_response_code":[68,67],"wp_remote_retrieve_body":[73,76],"parse":[77]},"used_by":[]},"wp_remote_post":{"doc":"\/**\n * Retrieve the raw response from the HTTP request using the POST method.\n *\n * @see wp_remote_request() For more information on the response array format.\n *\n * @since 2.7.0\n *\n * @param string $url Site URL to retrieve.\n * @param array $args Optional. Override the defaults.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/","file":"http.php","line":90,"missingDoc":false,"filters":[],"uses":{"_wp_http_get_object":[91],"post":[92]},"used_by":{"WP_HTTP_IXR_Client::query":[58],"trackback":[1918],"spawn_cron":[253],"wp_update_plugins":[205],"wp_update_themes":[310]}},"WP_Image_Editor_GD::__destruct":{"doc":"","file":"class-wp-image-editor-gd.php","line":21,"missingDoc":true,"filters":[],"uses":{"imagedestroy":[24]},"used_by":[]},"WP_Image_Editor_GD::test":{"doc":"\/**\n * Checks to see if current environment supports GD.\n *\n * @since 3.5.0\n * @access public\n *\n * @return boolean\n *\/","file":"class-wp-image-editor-gd.php","line":36,"missingDoc":false,"filters":[],"uses":{"extension_loaded":[37],"function_exists":[37,43],"in_array":[42]},"used_by":[]},"WP_Image_Editor_GD::supports_mime_type":{"doc":"\/**\n * Checks to see if editor supports the mime-type specified.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $mime_type\n * @return boolean\n *\/","file":"class-wp-image-editor-gd.php","line":60,"missingDoc":false,"filters":[],"uses":{"imagetypes":[61]},"used_by":[]},"WP_Image_Editor_GD::load":{"doc":"\/**\n * Loads image from $this->file into new GD Resource.\n *\n * @since 3.5.0\n * @access protected\n *\n * @return boolean|\\WP_Error\n *\/","file":"class-wp-image-editor-gd.php","line":82,"missingDoc":false,"filters":["'image_memory_limit'"],"uses":{"__":[87,94,98],"is_file":[86],"preg_match":[86],"ini_set":[90],"imagecreatefromstring":[91],"file_get_contents":[91],"is_resource":[93],"getimagesize":[96],"update_size":[100]},"used_by":[]},"WP_Image_Editor_GD::update_size":{"doc":"\/**\n * Sets or updates current image size.\n *\n * @since 3.5.0\n * @access protected\n *\n * @param int $width\n * @param int $height\n *\/","file":"class-wp-image-editor-gd.php","line":115,"missingDoc":false,"filters":[],"uses":{"imagesx":[117],"imagesy":[120]},"used_by":[]},"WP_Image_Editor_GD::resize":{"doc":"\/**\n * Resizes current image.\n * Wraps _resize, since _resize returns a GD Resource.\n *\n * @since 3.5.0\n * @access public\n *\n * @param int $max_w\n * @param int $max_h\n * @param boolean $crop\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor-gd.php","line":137,"missingDoc":false,"filters":[],"uses":{"_resize":[141],"imagedestroy":[144],"is_wp_error":[148],"is_resource":[143],"__":[151]},"used_by":[]},"WP_Image_Editor_GD::_resize":{"doc":"","file":"class-wp-image-editor-gd.php","line":154,"missingDoc":true,"filters":[],"uses":{"image_resize_dimensions":[155],"__":[157,169],"wp_imagecreatetruecolor":[161],"imagecopyresampled":[162],"update_size":[165],"is_resource":[164]},"used_by":[]},"image_resize_dimensions":{"doc":"\/**\n * Retrieve calculated resized dimensions for use in WP_Image_Editor.\n *\n * Calculate dimensions and coordinates for a resized image that fits within a\n * specified width and height. If $crop is true, the largest matching central\n * portion of the image will be cropped out and resized to the required size.\n *\n * @since 2.5.0\n * @uses apply_filters() Calls 'image_resize_dimensions' on $orig_w, $orig_h, $dest_w, $dest_h and\n *\t\t$crop to provide custom resize dimensions.\n *\n * @param int $orig_w Original width.\n * @param int $orig_h Original height.\n * @param int $dest_w New width.\n * @param int $dest_h New height.\n * @param bool $crop Optional, default is false. Whether to crop image or resize.\n * @return bool|array False on failure. Returned array matches parameters for imagecopyresampled() PHP function.\n *\/","file":"media.php","line":319,"missingDoc":false,"filters":["'image_resize_dimensions'"],"uses":{"min":[335,336],"intval":[339,343],"max":[346],"round":[348,349],"floor":[351,352],"wp_constrain_dimensions":[361]},"used_by":{"WP_Image_Editor_GD::_resize":[155],"WP_Image_Editor_Imagick::resize":[221],"image_get_intermediate_size":[456]}},"wp_imagecreatetruecolor":{"doc":"\/**\n * Create new GD image resource with transparency support\n * @TODO: Deprecate if possible.\n *\n * @since 2.9.0\n *\n * @param int $width Image width\n * @param int $height Image height\n * @return image resource\n *\/","file":"media.php","line":927,"missingDoc":false,"filters":[],"uses":{"imagecreatetruecolor":[928],"imagealphablending":[930],"imagesavealpha":[931],"is_resource":[929],"function_exists":[929,929]},"used_by":{"WP_Image_Editor_GD::_resize":[161],"WP_Image_Editor_GD::crop":[230],"WP_Image_Editor_GD::flip":[289]}},"WP_Image_Editor_GD::multi_resize":{"doc":"\/**\n * Processes current image and saves to disk\n * multiple sizes from single source.\n *\n * @since 3.5.0\n * @access public\n *\n * @param array $sizes { {'width'=>int, 'height'=>int, 'crop'=>bool}, ... }\n * @return array\n *\/","file":"class-wp-image-editor-gd.php","line":182,"missingDoc":false,"filters":[],"uses":{"_resize":[187],"_save":[190],"imagedestroy":[192],"is_wp_error":[194,189]},"used_by":[]},"WP_Image_Editor_GD::crop":{"doc":"\/**\n * Crops Image.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string|int $src The source file or Attachment ID.\n * @param int $src_x The start x position to crop from.\n * @param int $src_y The start y position to crop from.\n * @param int $src_w The width to crop.\n * @param int $src_h The height to crop.\n * @param int $dst_w Optional. The destination width.\n * @param int $dst_h Optional. The destination height.\n * @param boolean $src_abs Optional. If the source crop points are absolute.\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor-gd.php","line":222,"missingDoc":false,"filters":[],"uses":{"wp_imagecreatetruecolor":[230],"imageantialias":[238],"function_exists":[237],"imagecopyresampled":[240],"imagedestroy":[243],"update_size":[245],"is_resource":[242],"__":[249]},"used_by":[]},"WP_Image_Editor_GD::rotate":{"doc":"\/**\n * Rotates current image counter-clockwise by $angle.\n * Ported from image-edit.php\n *\n * @since 3.5.0\n * @access public\n *\n * @param float $angle\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor-gd.php","line":262,"missingDoc":false,"filters":[],"uses":{"imagerotate":[264],"imagedestroy":[267],"update_size":[269],"is_resource":[266],"function_exists":[263],"__":[273]},"used_by":[]},"WP_Image_Editor_GD::flip":{"doc":"\/**\n * Flips current image.\n *\n * @since 3.5.0\n * @access public\n *\n * @param boolean $horz Horizontal Flip\n * @param boolean $vert Vertical Flip\n * @returns boolean|WP_Error\n *\/","file":"class-wp-image-editor-gd.php","line":286,"missingDoc":false,"filters":[],"uses":{"wp_imagecreatetruecolor":[289],"imagedestroy":[298],"imagecopyresampled":[297],"is_resource":[291],"__":[303]},"used_by":[]},"WP_Image_Editor_GD::save":{"doc":"\/**\n * Saves current in-memory image to file.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $destfilename\n * @param string $mime_type\n * @return array|WP_Error {'path'=>string, 'file'=>string, 'width'=>int, 'height'=>int, 'mime-type'=>string}\n *\/","file":"class-wp-image-editor-gd.php","line":316,"missingDoc":false,"filters":[],"uses":{"_save":[317],"is_wp_error":[319]},"used_by":[]},"WP_Image_Editor_GD::_save":{"doc":"","file":"class-wp-image-editor-gd.php","line":327,"missingDoc":true,"filters":["'jpeg_quality'","'image_make_intermediate_size'"],"uses":{"get_output_format":[328],"generate_filename":[331],"__":[335,343,347,350],"make_image":[334,342,346],"imagetruecolortopalette":[340],"imagecolorstotal":[340],"function_exists":[339],"imageistruecolor":[339],"stat":[354],"dirname":[354],"chmod":[356],"wp_basename":[360]},"used_by":[]},"wp_basename":{"doc":"\/**\n * i18n friendly version of basename()\n *\n * @since 3.1.0\n *\n * @param string $path A path.\n * @param string $suffix If the filename ends in suffix this will also be cut off.\n * @return string\n *\/","file":"formatting.php","line":3254,"missingDoc":false,"filters":[],"uses":{"urldecode":[3255],"basename":[3255],"str_replace":[3255],"urlencode":[3255]},"used_by":{"WP_Image_Editor_GD::_save":[360],"WP_Image_Editor_Imagick::_save":[432],"WP_Image_Editor::get_output_format":[265],"WP_Image_Editor::generate_filename":[291],"image_downsize":[145,161],"wp_get_attachment_image_src":[518],"wp_prepare_attachment_for_js":[1388],"WP_Query::parse_tax_query":[1713],"WP_Query::get_posts":[2133,2145]}},"WP_Image_Editor_GD::stream":{"doc":"\/**\n * Returns stream of current image.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $mime_type\n *\/","file":"class-wp-image-editor-gd.php","line":375,"missingDoc":false,"filters":[],"uses":{"get_output_format":[376],"header":[380,383,386],"imagepng":[381],"imagegif":[384],"imagejpeg":[387]},"used_by":[]},"WP_Image_Editor_Imagick::__destruct":{"doc":"","file":"class-wp-image-editor-imagick.php","line":21,"missingDoc":true,"filters":[],"uses":{"clear":[24],"destroy":[25]},"used_by":[]},"WP_Image_Editor_Imagick::test":{"doc":"\/**\n * Checks to see if current environment supports Imagick.\n *\n * We require Imagick 2.2.0 or greater, based on whether the queryFormats()\n * method can be called statically.\n *\n * @since 3.5.0\n * @access public\n *\n * @return boolean\n *\/","file":"class-wp-image-editor-imagick.php","line":40,"missingDoc":false,"filters":[],"uses":{"extension_loaded":[43],"class_exists":[43,43],"version_compare":[46],"phpversion":[46],"defined":[70],"array_diff":[73],"get_class_methods":[73]},"used_by":[]},"WP_Image_Editor_Imagick::supports_mime_type":{"doc":"\/**\n * Checks to see if editor supports the mime-type specified.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $mime_type\n * @return boolean\n *\/","file":"class-wp-image-editor-imagick.php","line":88,"missingDoc":false,"filters":[],"uses":{"strtoupper":[89],"method_exists":[96]},"used_by":[]},"WP_Image_Editor_Imagick::load":{"doc":"\/**\n * Loads image from $this->file into new Imagick Object.\n *\n * @since 3.5.0\n * @access protected\n *\n * @return boolean|WP_Error True if loaded; WP_Error on failure.\n *\/","file":"class-wp-image-editor-imagick.php","line":115,"missingDoc":false,"filters":["'image_memory_limit'"],"uses":{"__":[120,129],"is_file":[119],"preg_match":[119],"ini_set":[123],"valid":[128],"setIteratorIndex":[133],"is_callable":[132],"get_mime_type":[135],"getImageFormat":[135],"getMessage":[138],"update_size":[141],"is_wp_error":[142],"set_quality":[145]},"used_by":[]},"WP_Image_Editor_Imagick::set_quality":{"doc":"\/**\n * Sets Image Compression quality on a 1-100% scale.\n *\n * @since 3.5.0\n * @access public\n *\n * @param int $quality Compression Quality. Range: [1,100]\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor-imagick.php","line":157,"missingDoc":false,"filters":["'jpeg_quality'"],"uses":{"setImageCompressionQuality":[163,167],"setImageCompression":[164],"getMessage":[171]},"used_by":[]},"WP_Image_Editor_Imagick::update_size":{"doc":"\/**\n * Sets or updates current image size.\n *\n * @since 3.5.0\n * @access protected\n *\n * @param int $width\n * @param int $height\n *\/","file":"class-wp-image-editor-imagick.php","line":186,"missingDoc":false,"filters":[],"uses":{"getImageGeometry":[190],"__":[193]},"used_by":[]},"WP_Image_Editor_Imagick::resize":{"doc":"\/**\n * Resizes current image.\n *\n * @since 3.5.0\n * @access public\n *\n * @param int $max_w\n * @param int $max_h\n * @param boolean $crop\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor-imagick.php","line":217,"missingDoc":false,"filters":[],"uses":{"image_resize_dimensions":[221],"__":[223],"crop":[227],"scaleImage":[235],"getMessage":[238],"update_size":[241]},"used_by":[]},"WP_Image_Editor_Imagick::multi_resize":{"doc":"\/**\n * Processes current image and saves to disk\n * multiple sizes from single source.\n *\n * @since 3.5.0\n * @access public\n *\n * @param array $sizes { {'width'=>int, 'height'=>int, 'crop'=>bool}, ... }\n * @return array\n *\/","file":"class-wp-image-editor-imagick.php","line":254,"missingDoc":false,"filters":[],"uses":{"getImage":[257,261],"resize":[263],"_save":[266],"clear":[268],"destroy":[269],"is_wp_error":[272,265]},"used_by":[]},"WP_Image_Editor_Imagick::crop":{"doc":"\/**\n * Crops Image.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string|int $src The source file or Attachment ID.\n * @param int $src_x The start x position to crop from.\n * @param int $src_y The start y position to crop from.\n * @param int $src_w The width to crop.\n * @param int $src_h The height to crop.\n * @param int $dst_w Optional. The destination width.\n * @param int $dst_h Optional. The destination height.\n * @param boolean $src_abs Optional. If the source crop points are absolute.\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor-imagick.php","line":302,"missingDoc":false,"filters":[],"uses":{"cropImage":[309],"setImagePage":[310],"scaleImage":[320],"update_size":[321,327],"getMessage":[325]},"used_by":[]},"WP_Image_Editor_Imagick::rotate":{"doc":"\/**\n * Rotates current image counter-clockwise by $angle.\n *\n * @since 3.5.0\n * @access public\n *\n * @param float $angle\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor-imagick.php","line":339,"missingDoc":false,"filters":[],"uses":{"rotateImage":[345],"getMessage":[348],"update_size":[350]},"used_by":[]},"WP_Image_Editor_Imagick::flip":{"doc":"\/**\n * Flips current image.\n *\n * @since 3.5.0\n * @access public\n *\n * @param boolean $horz Horizontal Flip\n * @param boolean $vert Vertical Flip\n * @returns boolean|WP_Error\n *\/","file":"class-wp-image-editor-imagick.php","line":363,"missingDoc":false,"filters":[],"uses":{"flipImage":[366],"flopImage":[369],"getMessage":[372]},"used_by":[]},"WP_Image_Editor_Imagick::save":{"doc":"\/**\n * Saves current image to file.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $destfilename\n * @param string $mime_type\n * @return array|WP_Error {'path'=>string, 'file'=>string, 'width'=>int, 'height'=>int, 'mime-type'=>string}\n *\/","file":"class-wp-image-editor-imagick.php","line":387,"missingDoc":false,"filters":[],"uses":{"_save":[388],"setImageFormat":[395],"strtoupper":[395],"get_extension":[395],"getMessage":[398],"is_wp_error":[390]},"used_by":[]},"WP_Image_Editor_Imagick::_save":{"doc":"","file":"class-wp-image-editor-imagick.php","line":405,"missingDoc":true,"filters":["'image_make_intermediate_size'"],"uses":{"get_output_format":[406],"generate_filename":[409],"getImageFormat":[413],"setImageFormat":[415,419],"strtoupper":[415],"get_extension":[415],"make_image":[416],"getMessage":[422],"stat":[426],"dirname":[426],"chmod":[428],"wp_basename":[432]},"used_by":[]},"WP_Image_Editor_Imagick::stream":{"doc":"\/**\n * Streams current image to browser.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $mime_type\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor-imagick.php","line":448,"missingDoc":false,"filters":[],"uses":{"get_output_format":[449],"setImageFormat":[453,460],"strtoupper":[453],"header":[456],"getImageBlob":[457],"get_extension":[460],"getMessage":[463]},"used_by":[]},"WP_Image_Editor::__construct":{"doc":"\/**\n * Each instance handles a single file.\n *\/","file":"class-wp-image-editor.php","line":24,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::test":{"doc":"\/**\n * Checks to see if current environment supports the editor chosen.\n * Must be overridden in a sub-class.\n *\n * @since 3.5.0\n * @access public\n * @abstract\n *\n * @param array $args\n * @return boolean\n *\/","file":"class-wp-image-editor.php","line":39,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::supports_mime_type":{"doc":"\/**\n * Checks to see if editor supports the mime-type specified.\n * Must be overridden in a sub-class.\n *\n * @since 3.5.0\n * @access public\n * @abstract\n *\n * @param string $mime_type\n * @return boolean\n *\/","file":"class-wp-image-editor.php","line":54,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::load":{"doc":"\/**\n * Loads image from $this->file into editor.\n *\n * @since 3.5.0\n * @access protected\n * @abstract\n *\n * @return boolean|WP_Error True if loaded; WP_Error on failure.\n *\/","file":"class-wp-image-editor.php","line":67,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::save":{"doc":"\/**\n * Saves current image to file.\n *\n * @since 3.5.0\n * @access public\n * @abstract\n *\n * @param string $destfilename\n * @param string $mime_type\n * @return array|WP_Error {'path'=>string, 'file'=>string, 'width'=>int, 'height'=>int, 'mime-type'=>string}\n *\/","file":"class-wp-image-editor.php","line":80,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::resize":{"doc":"\/**\n * Resizes current image.\n *\n * @since 3.5.0\n * @access public\n * @abstract\n *\n * @param int $max_w\n * @param int $max_h\n * @param boolean $crop\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor.php","line":94,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::multi_resize":{"doc":"\/**\n * Processes current image and saves to disk\n * multiple sizes from single source.\n *\n * @since 3.5.0\n * @access public\n * @abstract\n *\n * @param array $sizes { {'width'=>int, 'height'=>int, 'crop'=>bool}, ... }\n * @return array\n *\/","file":"class-wp-image-editor.php","line":107,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::crop":{"doc":"\/**\n * Crops Image.\n *\n * @since 3.5.0\n * @access public\n * @abstract\n *\n * @param string|int $src The source file or Attachment ID.\n * @param int $src_x The start x position to crop from.\n * @param int $src_y The start y position to crop from.\n * @param int $src_w The width to crop.\n * @param int $src_h The height to crop.\n * @param int $dst_w Optional. The destination width.\n * @param int $dst_h Optional. The destination height.\n * @param boolean $src_abs Optional. If the source crop points are absolute.\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor.php","line":126,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::rotate":{"doc":"\/**\n * Rotates current image counter-clockwise by $angle.\n *\n * @since 3.5.0\n * @access public\n * @abstract\n *\n * @param float $angle\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor.php","line":138,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::flip":{"doc":"\/**\n * Flips current image.\n *\n * @since 3.5.0\n * @access public\n * @abstract\n *\n * @param boolean $horz Horizontal Flip\n * @param boolean $vert Vertical Flip\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor.php","line":151,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::stream":{"doc":"\/**\n * Streams current image to browser.\n *\n * @since 3.5.0\n * @access public\n * @abstract\n *\n * @param string $mime_type\n * @return boolean|WP_Error\n *\/","file":"class-wp-image-editor.php","line":163,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::get_size":{"doc":"\/**\n * Gets dimensions of image.\n *\n * @since 3.5.0\n * @access public\n *\n * @return array {'width'=>int, 'height'=>int}\n *\/","file":"class-wp-image-editor.php","line":173,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::update_size":{"doc":"\/**\n * Sets current image size.\n *\n * @since 3.5.0\n * @access protected\n *\n * @param int $width\n * @param int $height\n *\/","file":"class-wp-image-editor.php","line":186,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Image_Editor::set_quality":{"doc":"\/**\n * Sets Image Compression quality on a 1-100% scale.\n *\n * @since 3.5.0\n * @access public\n *\n * @param int $quality Compression Quality. Range: [1,100]\n * @return boolean\n *\/","file":"class-wp-image-editor.php","line":203,"missingDoc":false,"filters":["'wp_editor_set_quality'"],"uses":[],"used_by":[]},"WP_Image_Editor::get_output_format":{"doc":"\/**\n * Returns preferred mime-type and extension based on provided\n * file's extension and mime, or current file's extension and mime.\n *\n * Will default to $this->default_mime_type if requested is not supported.\n *\n * Provides corrected filename only if filename is provided.\n *\n * @since 3.5.0\n * @access protected\n *\n * @param string $filename\n * @param string $mime_type\n * @return array { filename|null, extension, mime-type }\n *\/","file":"class-wp-image-editor.php","line":224,"missingDoc":false,"filters":["'image_editor_default_mime_type'"],"uses":{"get_extension":[230,254],"strtolower":[234,239],"pathinfo":[234,239,259],"get_mime_type":[235],"supports_mime_type":[252],"trailingslashit":[265],"wp_basename":[265]},"used_by":[]},"WP_Image_Editor::generate_filename":{"doc":"\/**\n * Builds an output filename based on current file, and adding proper suffix\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $suffix\n * @param string $dest_path\n * @param string $extension\n * @return string filename\n *\/","file":"class-wp-image-editor.php","line":282,"missingDoc":false,"filters":[],"uses":{"get_suffix":[285],"pathinfo":[287],"wp_basename":[291],"strtolower":[292],"is_null":[294],"realpath":[294],"trailingslashit":[297]},"used_by":[]},"WP_Image_Editor::get_suffix":{"doc":"\/**\n * Builds and returns proper suffix for file based on height and width.\n *\n * @since 3.5.0\n * @access public\n *\n * @return string suffix\n *\/","file":"class-wp-image-editor.php","line":308,"missingDoc":false,"filters":[],"uses":{"get_size":[309]},"used_by":[]},"WP_Image_Editor::make_image":{"doc":"\/**\n * Either calls editor's save function or handles file as a stream.\n *\n * @since 3.5.0\n * @access protected\n *\n * @param string|stream $filename\n * @param callable $function\n * @param array $arguments\n * @return boolean\n *\/","file":"class-wp-image-editor.php","line":326,"missingDoc":false,"filters":[],"uses":{"ob_start":[331],"wp_is_stream":[329],"call_user_func_array":[334],"ob_get_contents":[337],"fopen":[339],"fwrite":[344],"fclose":[345],"ob_end_clean":[349]},"used_by":[]},"wp_is_stream":{"doc":"\/**\n * Test if a given path is a stream URL\n *\n * @param string $path The resource path or URL\n * @return bool True if the path is a stream URL\n *\/","file":"functions.php","line":3866,"missingDoc":false,"filters":[],"uses":{"stream_get_wrappers":[3867],"join":[3868],"preg_match":[3870]},"used_by":{"WP_Image_Editor::make_image":[329],"wp_mkdir_p":[1318]}},"WP_Image_Editor::get_mime_type":{"doc":"\/**\n * Returns first matched mime-type from extension,\n * as mapped from wp_get_mime_types()\n *\n * @since 3.5.0\n * @access protected\n *\n * @param string $extension\n * @return string|boolean\n *\/","file":"class-wp-image-editor.php","line":365,"missingDoc":false,"filters":[],"uses":{"wp_get_mime_types":[369],"array_keys":[370],"preg_match":[373]},"used_by":[]},"wp_get_mime_types":{"doc":"\/**\n * Retrieve list of mime types and file extensions.\n *\n * @since 3.5.0\n *\n * @uses apply_filters() Calls 'mime_types' on returned array. This filter should\n * be used to add types, not remove them. To remove types use the upload_mimes filter.\n *\n * @return array Array of mime types keyed by the file extension regex corresponding to those types.\n *\/","file":"functions.php","line":1904,"missingDoc":false,"filters":["'mime_types'"],"uses":[],"used_by":{"WP_Image_Editor::get_mime_type":[369],"WP_Image_Editor::get_extension":[392],"do_enclose":[461],"get_allowed_mime_types":[2003]}},"WP_Image_Editor::get_extension":{"doc":"\/**\n * Returns first matched extension from Mime-type,\n * as mapped from wp_get_mime_types()\n *\n * @since 3.5.0\n * @access protected\n *\n * @param string $mime_type\n * @return string|boolean\n *\/","file":"class-wp-image-editor.php","line":391,"missingDoc":false,"filters":[],"uses":{"explode":[392],"array_search":[392],"wp_get_mime_types":[392]},"used_by":[]},"WP_Theme::__construct":{"doc":"\/**\n * Constructor for WP_Theme.\n *\n * @param string $theme_dir Directory of the theme within the theme_root.\n * @param string $theme_root Theme root.\n * @param WP_Error|null $_child If this theme is a parent theme, the child may be passed for validation purposes.\n *\/","file":"class-wp-theme.php","line":167,"missingDoc":false,"filters":["'wp_cache_themes_persistently'"],"uses":{"wp_cache_add_global_groups":[174],"is_int":[175],"wp_cache_add_non_persistent_groups":[178],"basename":[187,227],"dirname":[188,186,246],"in_array":[186,186],"md5":[191],"cache_get":[194],"file_exists":[205,207,213,235,247,243],"__":[208,210,214,218,236,255,267,271],"cache_add":[212,220,237,256,268,272,286],"add":[214],"is_readable":[216],"get_file_data":[223],"array_search":[226],"is_array":[196,243,281],"search_theme_directories":[249],"sprintf":[255,267,271],"is_a":[265]},"used_by":[]},"get_file_data":{"doc":"\/**\n * Retrieve metadata from a file.\n *\n * Searches for metadata in the first 8kiB of a file, such as a plugin or theme.\n * Each piece of metadata must be on its own line. Fields can not span multiple\n * lines, the value will get cut at the end of the first line.\n *\n * If the file data is not within that first 8kiB, then the author should correct\n * their plugin file and move the data headers to the top.\n *\n * @see http:\/\/codex.wordpress.org\/File_Header\n *\n * @since 2.9.0\n * @param string $file Path to the file\n * @param array $default_headers List of headers, in the format array('HeaderKey' => 'Header Name')\n * @param string $context If specified adds filter hook \"extra_{$context}_headers\"\n *\/","file":"functions.php","line":3528,"missingDoc":false,"filters":["\"extra_{$context}_headers\""],"uses":{"fopen":[3530],"fread":[3533],"fclose":[3536],"str_replace":[3539],"array_combine":[3542],"array_merge":[3543],"_cleanup_header_comment":[3550],"preg_match":[3549],"preg_quote":[3549]},"used_by":{"WP_Theme::__construct":[223]}},"search_theme_directories":{"doc":"\/**\n * Search all registered theme directories for complete and valid themes.\n *\n * @since 2.9.0\n *\n * @param bool $force Optional. Whether to force a new directory scan. Defaults to false.\n * @return array Valid themes found\n *\/","file":"theme.php","line":328,"missingDoc":false,"filters":["'wp_cache_themes_persistently'"],"uses":{"str_replace":[346],"strpos":[345],"get_site_transient":[352,426],"is_array":[353],"is_int":[365],"scandir":[375,392],"is_dir":[379,396],"file_exists":[398,381],"asort":[417],"array_flip":[420],"set_site_transient":[427]},"used_by":{"WP_Theme::__construct":[249],"wp_get_themes":[33],"wp_clean_themes_cache":[116],"get_theme_roots":[290]}},"WP_Theme::__toString":{"doc":"\/**\n * When converting the object to a string, the theme name is returned.\n *\n * @return string Theme name, ready for display (translated)\n *\/","file":"class-wp-theme.php","line":295,"missingDoc":false,"filters":[],"uses":{"display":[296]},"used_by":[]},"WP_Theme::__isset":{"doc":"\/**\n * __isset() magic method for properties formerly returned by current_theme_info()\n *\/","file":"class-wp-theme.php","line":302,"missingDoc":false,"filters":[],"uses":{"in_array":[308]},"used_by":[]},"WP_Theme::__get":{"doc":"\/**\n * __get() magic method for properties formerly returned by current_theme_info()\n *\/","file":"class-wp-theme.php","line":314,"missingDoc":false,"filters":[],"uses":{"get":[318,320,322,339],"parent":[322,322],"get_template_directory":[324],"get_stylesheet_directory":[326],"get_template":[328],"get_stylesheet":[330],"get_screenshot":[332],"display":[335,337],"get_theme_root":[341],"get_theme_root_uri":[343],"offsetGet":[346]},"used_by":[]},"get_theme_root":{"doc":"\/**\n * Retrieve path to themes directory.\n *\n * Does not have trailing slash.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'theme_root' filter on path.\n *\n * @param string $stylesheet_or_template The stylesheet or template name of the theme\n * @return string Theme path.\n *\/","file":"theme.php","line":443,"missingDoc":false,"filters":["'theme_root'"],"uses":{"in_array":[449],"get_raw_theme_root":[446]},"used_by":{"WP_Theme::__get":[341],"WP_Theme::offsetGet":[418],"get_stylesheet_directory":[160],"get_template_directory":[253]}},"get_theme_root_uri":{"doc":"\/**\n * Retrieve URI for themes directory.\n *\n * Does not have trailing slash.\n *\n * @since 1.5.0\n *\n * @param string $stylesheet_or_template Optional. The stylesheet or template name of the theme.\n * \tDefault is to leverage the main theme root.\n * @param string $theme_root Optional. The theme root for which calculations will be based, preventing\n * \tthe need for a get_raw_theme_root() call.\n * @return string Themes URI.\n *\/","file":"theme.php","line":471,"missingDoc":false,"filters":["'theme_root_uri'"],"uses":{"get_raw_theme_root":[475],"content_url":[481,489,492],"str_replace":[481,483],"strpos":[482,484,484,480],"site_url":[483],"plugins_url":[485],"basename":[485],"in_array":[478],"get_option":[495]},"used_by":{"WP_Theme::__get":[343],"WP_Theme::offsetGet":[420],"WP_Theme::get_stylesheet_directory_uri":[799],"WP_Theme::get_template_directory_uri":[815,817],"WP_Theme::get_theme_root_uri":[852],"get_stylesheet_directory_uri":[175],"get_template_directory_uri":[269]}},"WP_Theme::offsetSet":{"doc":"\/**\n * Method to implement ArrayAccess for keys formerly returned by get_themes()\n *\/","file":"class-wp-theme.php","line":353,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Theme::offsetUnset":{"doc":"\/**\n * Method to implement ArrayAccess for keys formerly returned by get_themes()\n *\/","file":"class-wp-theme.php","line":358,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Theme::offsetExists":{"doc":"\/**\n * Method to implement ArrayAccess for keys formerly returned by get_themes()\n *\/","file":"class-wp-theme.php","line":363,"missingDoc":false,"filters":[],"uses":{"in_array":[370]},"used_by":[]},"WP_Theme::offsetGet":{"doc":"\/**\n * Method to implement ArrayAccess for keys formerly returned by get_themes().\n *\n * Author, Author Name, Author URI, and Description did not previously return\n * translated data. We are doing so now as it is safe to do. However, as\n * Name and Title could have been used as the key for get_themes(), both remain\n * untranslated for back compatibility. This means that ['Name'] is not ideal,\n * and care should be taken to use $theme->display('Name') to get a properly\n * translated header.\n *\/","file":"class-wp-theme.php","line":383,"missingDoc":false,"filters":[],"uses":{"get":[389,400,416,422],"display":[391,393,395,397],"get_template":[402],"get_stylesheet":[404],"get_files":[406,408],"get_template_directory":[410],"get_stylesheet_directory":[412],"get_screenshot":[414],"get_theme_root":[418],"get_theme_root_uri":[420],"parent":[422,422]},"used_by":[]},"WP_Theme::errors":{"doc":"\/**\n * Returns errors property.\n *\n * @since 3.4.0\n * @access public\n *\n * @return WP_Error|bool WP_Error if there are errors, or false.\n *\/","file":"class-wp-theme.php","line":436,"missingDoc":false,"filters":[],"uses":{"is_wp_error":[437]},"used_by":[]},"WP_Theme::exists":{"doc":"\/**\n * Whether the theme exists.\n *\n * A theme with errors exists. A theme with the error of 'theme_not_found',\n * meaning that the theme's directory was not found, does not exist.\n *\n * @since 3.4.0\n * @access public\n *\n * @return bool Whether the theme exists.\n *\/","file":"class-wp-theme.php","line":451,"missingDoc":false,"filters":[],"uses":{"errors":[452,452],"in_array":[452],"get_error_codes":[452]},"used_by":[]},"WP_Theme::parent":{"doc":"\/**\n * Returns reference to the parent theme.\n *\n * @since 3.4.0\n * @access public\n *\n * @return WP_Theme|bool Parent theme, or false if the current theme is not a child theme.\n *\/","file":"class-wp-theme.php","line":463,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Theme::cache_add":{"doc":"\/**\n * Adds theme data to cache.\n *\n * Cache entries keyed by the theme and the type of data.\n *\n * @access private\n * @since 3.4.0\n *\n * @param string $key Type of data to store (theme, screenshot, headers, page_templates)\n * @param string $data Data to store\n * @return bool Return value from wp_cache_add()\n *\/","file":"class-wp-theme.php","line":479,"missingDoc":false,"filters":[],"uses":{"wp_cache_add":[480]},"used_by":[]},"WP_Theme::cache_get":{"doc":"\/**\n * Gets theme data from cache.\n *\n * Cache entries are keyed by the theme and the type of data.\n *\n * @access private\n * @since 3.4.0\n *\n * @param string $key Type of data to retrieve (theme, screenshot, headers, page_templates)\n * @return mixed Retrieved data\n *\/","file":"class-wp-theme.php","line":494,"missingDoc":false,"filters":[],"uses":{"wp_cache_get":[495]},"used_by":[]},"WP_Theme::cache_delete":{"doc":"\/**\n * Clears the cache for the theme.\n *\n * @access public\n * @since 3.4.0\n *\/","file":"class-wp-theme.php","line":504,"missingDoc":false,"filters":[],"uses":{"wp_cache_delete":[506],"__construct":[509]},"used_by":[]},"__construct":{"doc":"\/**\n * Create a new cache object\n *\n * @param string $location Location string (from SimplePie::$cache_location)\n * @param string $name Unique ID for the cache\n * @param string $type Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data\n *\/","file":"SimplePie\/Cache\/Base.php","line":77,"missingDoc":false,"filters":[],"uses":[],"used_by":{"WP_Theme::cache_delete":[509],"WP_Meta_Query::parse_query_vars":[688],"SimplePie_File::__construct":[143,225]}},"WP_Theme::get":{"doc":"\/**\n * Get a raw, unformatted theme header.\n *\n * The header is sanitized, but is not translated, and is not marked up for display.\n * To get a theme header for display, use the display() method.\n *\n * Use the get_template() method, not the 'Template' header, for finding the template.\n * The 'Template' header is only good for what was written in the style.css, while\n * get_template() takes into account where WordPress actually located the theme and\n * whether it is actually valid.\n *\n * @access public\n * @since 3.4.0\n *\n * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.\n * @return string String on success, false on failure.\n *\/","file":"class-wp-theme.php","line":529,"missingDoc":false,"filters":[],"uses":{"cache_get":[534],"is_array":[535],"sanitize_header":[545,548],"array_keys":[544],"cache_add":[546]},"used_by":[]},"WP_Theme::display":{"doc":"\/**\n * Gets a theme header, formatted and translated for display.\n *\n * @access public\n * @since 3.4.0\n *\n * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.\n * @param bool $markup Optional. Whether to mark up the header. Defaults to true.\n * @param bool $translate Optional. Whether to translate the header. Defaults to true.\n * @return string Processed header, false on failure.\n *\/","file":"class-wp-theme.php","line":565,"missingDoc":false,"filters":[],"uses":{"get":[566],"load_textdomain":[568],"translate_header":[572],"markup_header":[575]},"used_by":[]},"load_textdomain":{"doc":"\/**\n * Loads a MO file into the domain $domain.\n *\n * If the domain already exists, the translations will be merged. If both\n * sets have the same string, the translation from the original value will be taken.\n *\n * On success, the .mo file will be placed in the $l10n global by $domain\n * and will be a MO object.\n *\n * @since 1.5.0\n * @uses $l10n Gets list of domain translated string objects\n *\n * @param string $domain Unique identifier for retrieving translated strings\n * @param string $mofile Path to the .mo file\n * @return bool True on success, false on failure\n *\/","file":"l10n.php","line":326,"missingDoc":false,"filters":["'override_load_textdomain'","'load_textdomain'","'load_textdomain_mofile'"],"uses":{"is_readable":[339],"import_from_file":[342],"merge_with":[345]},"used_by":{"WP_Theme::display":[568],"WP_Theme::get_page_templates":[943],"wp_timezone_choice":[3341],"load_default_textdomain":[388,391,396,399],"load_plugin_textdomain":[429],"load_muplugin_textdomain":[444],"load_theme_textdomain":[467,472],"wp_load_translations_early":[749,751]}},"WP_Theme::sanitize_header":{"doc":"\/**\n * Sanitize a theme header.\n *\n * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.\n * @param string $value Value to sanitize.\n *\/","file":"class-wp-theme.php","line":586,"missingDoc":false,"filters":[],"uses":{"wp_kses":[602,615],"esc_url_raw":[619],"array_filter":[622],"array_map":[622],"explode":[622],"strip_tags":[622]},"used_by":[]},"wp_kses":{"doc":"\/**\n * Filters content and keeps only allowable HTML elements.\n *\n * This function makes sure that only the allowed HTML element names, attribute\n * names and attribute values plus only sane HTML entities will occur in\n * $string. You have to remove any slashes from PHP's magic quotes before you\n * call this function.\n *\n * The default allowed protocols are 'http', 'https', 'ftp', 'mailto', 'news',\n * 'irc', 'gopher', 'nntp', 'feed', 'telnet, 'mms', 'rtsp' and 'svn'. This\n * covers all common link protocols, except for 'javascript' which should not\n * be allowed for untrusted users.\n *\n * @since 1.0.0\n *\n * @param string $string Content to filter through kses\n * @param array $allowed_html List of allowed HTML elements\n * @param array $allowed_protocols Optional. Allowed protocol in links.\n * @return string Filtered content with only allowed HTML elements\n *\/","file":"kses.php","line":476,"missingDoc":false,"filters":[],"uses":{"wp_allowed_protocols":[478],"wp_kses_no_null":[479],"wp_kses_js_entities":[480],"wp_kses_normalize_entities":[481],"wp_kses_hook":[482],"wp_kses_split":[483]},"used_by":{"WP_Theme::sanitize_header":[602,615],"wp_kses_split2":[612],"wp_filter_kses":[1257],"wp_kses_data":[1270],"wp_filter_post_kses":[1285],"wp_kses_post":[1300],"wp_filter_nohtml_kses":[1312]}},"WP_Theme::markup_header":{"doc":"\/**\n * Mark up a theme header.\n *\n * @access private\n * @since 3.4.0\n *\n * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.\n * @param string $value Value to mark up.\n * @param string $translate Whether the header has been translated.\n * @return string Value, marked up.\n *\/","file":"class-wp-theme.php","line":640,"missingDoc":false,"filters":[],"uses":{"get_stylesheet":[644],"wptexturize":[647],"esc_attr__":[653],"sprintf":[654],"display":[654],"__":[656,663],"get":[650],"implode":[665],"esc_url":[669]},"used_by":[]},"wptexturize":{"doc":"\/**\n * Replaces common plain text characters into formatted entities\n *\n * As an example,\n * <code>\n * 'cause today's effort makes it worth tomorrow's \"holiday\"...\n * <\/code>\n * Becomes:\n * <code>\n * &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221;&#8230;\n * <\/code>\n * Code within certain html blocks are skipped.\n *\n * @since 0.71\n * @uses $wp_cockneyreplace Array of formatted entities for certain common phrases\n *\n * @param string $text The text to be formatted\n * @return string The string replaced with html entities\n *\/","file":"formatting.php","line":29,"missingDoc":false,"filters":["'no_texturize_tags'","'no_texturize_shortcodes'"],"uses":{"_x":[37,39,42,45,47,50,52,55,57],"array_keys":[64,98],"array_values":[65,99],"array_merge":[73,74],"implode":[104,105,130],"preg_split":[110],"_wptexturize_pushpop_element":[119,121],"str_replace":[124],"preg_replace":[126,128]},"used_by":{"WP_Theme::markup_header":[647],"trackback_rdf":[758],"get_archives_link":[826],"gallery_shortcode":[781]}},"esc_attr__":{"doc":"\/**\n * Retrieves the translation of $text and escapes it for safe use in an attribute.\n * If there is no translation, or the domain isn't loaded, the original text is returned.\n *\n * @see translate() An alias of translate()\n * @see esc_attr()\n * @since 2.8.0\n *\n * @param string $text Text to translate\n * @param string $domain Optional. Domain to retrieve the translated text\n * @return string Translated text\n *\/","file":"l10n.php","line":112,"missingDoc":false,"filters":[],"uses":{"esc_attr":[113],"translate":[113]},"used_by":{"WP_Theme::markup_header":[653],"WP_Widget_RSS::widget":[783],"wp_timezone_choice":[3421,3429],"get_search_form":[164],"__main":[232],"edit_comment_link":[1009],"edit_bookmark_link":[1050],"get_the_password_form":[1227]}},"WP_Theme::translate_header":{"doc":"\/**\n * Translate a theme header.\n *\n * @access private\n * @since 3.4.0\n *\n * @param string $header Theme header. Name, Description, Author, Version, ThemeURI, AuthorURI, Status, Tags.\n * @param string $value Value to translate.\n * @return string Translated value.\n *\/","file":"class-wp-theme.php","line":686,"missingDoc":false,"filters":[],"uses":{"translate":[692,714],"get":[692,714],"function_exists":[695],"get_theme_feature_list":[701]},"used_by":[]},"translate":{"doc":"\/**\n * Retrieves the translation of $text. If there is no translation, or\n * the domain isn't loaded, the original text is returned.\n *\n * @see __() Don't use translate() directly, use __()\n * @since 2.2.0\n * @uses apply_filters() Calls 'gettext' on domain translated text\n *\t\twith the untranslated text as second parameter.\n *\n * @param string $text Text to translate.\n * @param string $domain Domain to retrieve the translated text.\n * @return string Translated text\n *\/","file":"l10n.php","line":67,"missingDoc":false,"filters":["'gettext'"],"uses":{"get_translations_for_domain":[68],"translate":[69]},"used_by":{"WP_Theme::translate_header":[692,714],"_c":[1795],"translate_with_context":[1814],"wp_timezone_choice":[3366,3367,3368],"translate":[69],"translate_with_gettext_context":[82],"__":[97],"esc_attr__":[113],"esc_html__":[129],"_e":[142],"esc_attr_e":[156],"esc_html_e":[170]}},"WP_Theme::get_stylesheet":{"doc":"\/**\n * The directory name of the theme's \"stylesheet\" files, inside the theme root.\n *\n * In the case of a child theme, this is directory name of the the child theme.\n * Otherwise, get_stylesheet() is the same as get_template().\n *\n * @since 3.4.0\n * @access public\n *\n * @return string Stylesheet\n *\/","file":"class-wp-theme.php","line":730,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Theme::get_template":{"doc":"\/**\n * The directory name of the theme's \"template\" files, inside the theme root.\n *\n * In the case of a child theme, this is the directory name of the parent theme.\n * Otherwise, the get_template() is the same as get_stylesheet().\n *\n * @since 3.4.0\n * @access public\n *\n * @return string Template\n *\/","file":"class-wp-theme.php","line":745,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Theme::get_stylesheet_directory":{"doc":"\/**\n * Returns the absolute path to the directory of a theme's \"stylesheet\" files.\n *\n * In the case of a child theme, this is the absolute path to the directory\n * of the child theme's files.\n *\n * @since 3.4.0\n * @access public\n *\n * @return string Absolute path of the stylesheet directory.\n *\/","file":"class-wp-theme.php","line":760,"missingDoc":false,"filters":[],"uses":{"errors":[761,761],"in_array":[761],"get_error_codes":[761]},"used_by":[]},"WP_Theme::get_template_directory":{"doc":"\/**\n * Returns the absolute path to the directory of a theme's \"template\" files.\n *\n * In the case of a child theme, this is the absolute path to the directory\n * of the parent theme's files.\n *\n * @since 3.4.0\n * @access public\n *\n * @return string Absolute path of the template directory.\n *\/","file":"class-wp-theme.php","line":778,"missingDoc":false,"filters":[],"uses":{"parent":[780,779]},"used_by":[]},"WP_Theme::get_stylesheet_directory_uri":{"doc":"\/**\n * Returns the URL to the directory of a theme's \"stylesheet\" files.\n *\n * In the case of a child theme, this is the URL to the directory of the\n * child theme's files.\n *\n * @since 3.4.0\n * @access public\n *\n * @return string URL to the stylesheet directory.\n *\/","file":"class-wp-theme.php","line":798,"missingDoc":false,"filters":[],"uses":{"get_theme_root_uri":[799],"str_replace":[799],"rawurlencode":[799]},"used_by":[]},"WP_Theme::get_template_directory_uri":{"doc":"\/**\n * Returns the URL to the directory of a theme's \"template\" files.\n *\n * In the case of a child theme, this is the URL to the directory of the\n * parent theme's files.\n *\n * @since 3.4.0\n * @access public\n *\n * @return string URL to the template directory.\n *\/","file":"class-wp-theme.php","line":813,"missingDoc":false,"filters":[],"uses":{"get_theme_root_uri":[815,817],"parent":[815,814],"str_replace":[819],"rawurlencode":[819]},"used_by":[]},"WP_Theme::get_theme_root":{"doc":"\/**\n * The absolute path to the directory of the theme root.\n *\n * This is typically the absolute path to wp-content\/themes.\n *\n * @since 3.4.0\n * @access public\n *\n * @return string Theme root.\n *\/","file":"class-wp-theme.php","line":832,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Theme::get_theme_root_uri":{"doc":"\/**\n * Returns the URL to the directory of the theme root.\n *\n * This is typically the absolute URL to wp-content\/themes. This forms the basis\n * for all other URLs returned by WP_Theme, so we pass it to the public function\n * get_theme_root_uri() and allow it to run the theme_root_uri filter.\n *\n * @uses get_theme_root_uri()\n *\n * @since 3.4.0\n * @access public\n *\n * @return string Theme root URI.\n *\/","file":"class-wp-theme.php","line":850,"missingDoc":false,"filters":[],"uses":{"get_theme_root_uri":[852]},"used_by":[]},"WP_Theme::get_screenshot":{"doc":"\/**\n * Returns the main screenshot file for the theme.\n *\n * The main screenshot is called screenshot.png. gif and jpg extensions are also allowed.\n *\n * Screenshots for a theme must be in the stylesheet directory. (In the case of child\n * themes, parent theme screenshots are not inherited.)\n *\n * @since 3.4.0\n * @access public\n *\n * @param string $uri Type of URL to return, either 'relative' or an absolute URI. Defaults to absolute URI.\n * @return mixed Screenshot file. False if the theme does not have a screenshot.\n *\/","file":"class-wp-theme.php","line":870,"missingDoc":false,"filters":[],"uses":{"cache_get":[871],"get_stylesheet_directory_uri":[875,885],"cache_add":[882,889],"file_exists":[881],"get_stylesheet_directory":[881]},"used_by":[]},"WP_Theme::get_files":{"doc":"\/**\n * Return files in the theme's directory.\n *\n * @since 3.4.0\n * @access public\n *\n * @param mixed $type Optional. Array of extensions to return. Defaults to all files (null).\n * @param int $depth Optional. How deep to search for files. Defaults to a flat scan (0 depth). -1 depth is infinite.\n * @param bool $search_parent Optional. Whether to return parent files. Defaults to false.\n * @return array Array of files, keyed by the path to the file relative to the theme's directory, with the values\n * \tbeing absolute paths.\n *\/","file":"class-wp-theme.php","line":905,"missingDoc":false,"filters":[],"uses":{"get_stylesheet_directory":[906],"get_template_directory":[909],"parent":[908]},"used_by":[]},"WP_Theme::get_page_templates":{"doc":"\/**\n * Returns the theme's page templates.\n *\n * @since 3.4.0\n * @access public\n *\n * @return array Array of page templates, keyed by filename, with the value of the translated header name.\n *\/","file":"class-wp-theme.php","line":922,"missingDoc":false,"filters":[],"uses":{"errors":[924,924],"get_error_codes":[924],"cache_get":[927],"get_files":[932],"preg_match":[935],"file_get_contents":[935],"_cleanup_header_comment":[937],"cache_add":[940],"is_array":[929],"translate_header":[945],"load_textdomain":[943],"get_page_templates":[950],"parent":[950,949]},"used_by":[]},"_cleanup_header_comment":{"doc":"\/**\n * Strip close comment and close php tags from file headers used by WP.\n * See http:\/\/core.trac.wordpress.org\/ticket\/8497\n *\n * @since 2.8.0\n *\n * @param string $str\n * @return string\n *\/","file":"functions.php","line":3462,"missingDoc":false,"filters":[],"uses":{"trim":[3463],"preg_replace":[3463]},"used_by":{"WP_Theme::get_page_templates":[937],"get_file_data":[3550]}},"WP_Theme::scandir":{"doc":"\/**\n * Scans a directory for files of a certain extension.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $path Absolute path to search.\n * @param mixed  Array of extensions to find, string of a single extension, or null for all extensions.\n * @param int $depth How deep to search for files. Optional, defaults to a flat scan (0 depth). -1 depth is infinite.\n * @param string $relative_path The basename of the absolute path. Used to control the returned path\n * \tfor the found files, particularly when this function recurses to lower depths.\n *\/","file":"class-wp-theme.php","line":967,"missingDoc":false,"filters":[],"uses":{"is_dir":[968,986],"implode":[973],"trailingslashit":[976],"scandir":[980],"array_merge_recursive":[990],"preg_match":[991]},"used_by":[]},"WP_Theme::load_textdomain":{"doc":"\/**\n * Loads the theme's textdomain.\n *\n * Translation files are not inherited from the parent theme. Todo: if this fails for the\n * child theme, it should probably try to load the parent theme's translations.\n *\n * @since 3.4.0\n * @access public\n *\n * @return True if the textdomain was successfully loaded or has already been loaded. False if\n * \tno textdomain was specified in the file headers, or if the domain could not be loaded.\n *\/","file":"class-wp-theme.php","line":1011,"missingDoc":false,"filters":[],"uses":{"get":[1015,1027],"is_textdomain_loaded":[1021],"get_stylesheet_directory":[1026],"load_theme_textdomain":[1032]},"used_by":[]},"is_textdomain_loaded":{"doc":"\/**\n * Whether there are translations for the domain\n *\n * @since 3.0.0\n * @param string $domain\n * @return bool Whether there are translations\n *\/","file":"l10n.php","line":515,"missingDoc":false,"filters":[],"uses":[],"used_by":{"WP_Theme::load_textdomain":[1021]}},"load_theme_textdomain":{"doc":"\/**\n * Loads the theme's translated strings.\n *\n * If the current locale exists as a .mo file in the theme's root directory, it\n * will be included in the translated strings by the $domain.\n *\n * The .mo files must be named based on the locale exactly.\n *\n * @since 1.5.0\n *\n * @param string $domain Unique identifier for retrieving translated strings\n *\/","file":"l10n.php","line":459,"missingDoc":false,"filters":["'theme_locale'"],"uses":{"get_locale":[460],"get_template_directory":[463],"load_textdomain":[467,472]},"used_by":{"WP_Theme::load_textdomain":[1032],"load_child_theme_textdomain":[490]}},"WP_Theme::is_allowed":{"doc":"\/**\n * Whether the theme is allowed (multisite only).\n *\n * @since 3.4.0\n * @access public\n *\n * @param string $check Optional. Whether to check only the 'network'-wide settings, the 'site'\n * \tsettings, or 'both'. Defaults to 'both'.\n * @param int $blog_id Optional. Ignored if only network-wide settings are checked. Defaults to current blog.\n * @return bool Whether the theme is allowed for the network. Returns true in single-site.\n *\/","file":"class-wp-theme.php","line":1047,"missingDoc":false,"filters":[],"uses":{"is_multisite":[1048],"get_stylesheet":[1053,1059]},"used_by":[]},"WP_Theme::get_allowed":{"doc":"\/**\n * Returns array of stylesheet names of themes allowed on the site or network.\n *\n * @since 3.4.0\n * @access public\n *\n * @param int $blog_id Optional. Defaults to current blog.\n * @return array Array of stylesheet names.\n *\/","file":"class-wp-theme.php","line":1075,"missingDoc":false,"filters":["'allowed_themes'"],"uses":[],"used_by":[]},"WP_Theme::get_allowed_on_network":{"doc":"\/**\n * Returns array of stylesheet names of themes allowed on the network.\n *\n * @since 3.4.0\n * @access public\n *\n * @return array Array of stylesheet names.\n *\/","file":"class-wp-theme.php","line":1088,"missingDoc":false,"filters":[],"uses":{"get_site_option":[1091]},"used_by":[]},"WP_Theme::get_allowed_on_site":{"doc":"\/**\n * Returns array of stylesheet names of themes allowed on the site.\n *\n * @since 3.4.0\n * @access public\n *\n * @param int $blog_id Optional. Defaults to current blog.\n * @return array Array of stylesheet names.\n *\/","file":"class-wp-theme.php","line":1104,"missingDoc":false,"filters":[],"uses":{"get_current_blog_id":[1108,1113],"is_multisite":[1107],"get_option":[1116,1119,1127,1130],"switch_to_blog":[1118,1129,1151],"restore_current_blog":[1120,1131,1154],"wp_get_themes":[1138],"get":[1140],"is_array":[1134],"update_option":[1148,1152],"delete_option":[1149,1153],"is_admin":[1146]},"used_by":[]},"wp_get_themes":{"doc":"\/**\n * Returns an array of WP_Theme objects based on the arguments.\n *\n * Despite advances over get_themes(), this function is quite expensive, and grows\n * linearly with additional themes. Stick to wp_get_theme() if possible.\n *\n * @since 3.4.0\n *\n * @param array $args The search arguments. Optional.\n * - errors      mixed  True to return themes with errors, false to return themes without errors, null\n *                      to return all themes. Defaults to false.\n * - allowed     mixed  (Multisite) True to return only allowed themes for a site. False to return only\n *                      disallowed themes for a site. 'site' to return only site-allowed themes. 'network'\n *                      to return only network-allowed themes. Null to return all themes. Defaults to null.\n * - blog_id     int    (Multisite) The blog ID used to calculate which themes are allowed. Defaults to 0,\n *                      synonymous for the current blog.\n * @return Array of WP_Theme objects.\n *\/","file":"theme.php","line":27,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[31],"search_theme_directories":[33],"get_stylesheet":[38],"get_raw_theme_root":[40],"in_array":[41],"count":[35],"array_intersect_key":[53,55,57],"array_diff_key":[59],"is_multisite":[50],"errors":[74]},"used_by":{"WP_Theme::get_allowed_on_site":[1138],"get_themes":[2932],"wp_clean_themes_cache":[117],"wp_update_themes":[239]}},"delete_option":{"doc":"\/**\n * Removes option by name. Prevents removal of protected WordPress options.\n *\n * @package WordPress\n * @subpackage Option\n * @since 1.2.0\n *\n * @uses do_action() Calls 'delete_option' hook before option is deleted.\n * @uses do_action() Calls 'deleted_option' and 'delete_option_$option' hooks on success.\n *\n * @param string $option Name of option to remove. Expected to not be SQL-escaped.\n * @return bool True, if option is successfully deleted. False on failure.\n *\/","file":"option.php","line":360,"missingDoc":false,"filters":["'delete_option'","\"delete_option_{$option}\"","'deleted_option'"],"uses":{"wp_protect_special_option":[363],"get_row":[366],"prepare":[366],"is_null":[367],"delete":[370],"wp_load_alloptions":[373],"wp_cache_set":[376],"is_array":[374],"wp_cache_delete":[379],"defined":[371]},"used_by":{"WP_Theme::get_allowed_on_site":[1149,1153],"WP_Widget_Recent_Posts::update":[601],"WP_Widget_Recent_Comments::update":[713],"delete_blog_option":[447,450],"maybe_add_existing_user_to_blog":[1683],"delete_transient":[413,415],"get_transient":[459,460],"delete_site_option":[863],"wp_delete_post":[2340,2343],"WP_Rewrite::flush_rules":[1886],"clean_term_cache":[2627],"switch_theme":[686,687],"get_theme_mods":[755],"remove_theme_mods":[837,843]}},"WP_Theme::sort_by_name":{"doc":"\/**\n * Sort themes by name.\n *\n * @since 3.4.0\n * @access public\n *\/","file":"class-wp-theme.php","line":1168,"missingDoc":false,"filters":[],"uses":{"uasort":[1170,1172],"strpos":[1169],"get_locale":[1169]},"used_by":[]},"WP_Theme::_name_sort":{"doc":"\/**\n * Callback function for usort() to naturally sort themes by name.\n *\n * Accesses the Name header directly from the class for maximum speed.\n * Would choke on HTML but we don't care enough to slow it down with strip_tags().\n *\n * @since 3.4.0\n * @access private\n *\/","file":"class-wp-theme.php","line":1185,"missingDoc":false,"filters":[],"uses":{"strnatcasecmp":[1186]},"used_by":[]},"WP_Theme::_name_sort_i18n":{"doc":"\/**\n * Name sort (with translation).\n *\n * @since 3.4.0\n * @access private\n *\/","file":"class-wp-theme.php","line":1195,"missingDoc":false,"filters":[],"uses":{"strnatcasecmp":[1197],"display":[1197,1197]},"used_by":[]},"Walker::start_lvl":{"doc":"\/**\n * Starts the list before the elements are added.\n *\n * Additional parameters are used in child classes. The args parameter holds\n * additional values that may be used with the child class methods. This\n * method is called at the start of the output list.\n *\n * @since 2.1.0\n * @abstract\n *\n * @param string $output Passed by reference. Used to append additional content.\n *\/","file":"class-wp-walker.php","line":55,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Walker::end_lvl":{"doc":"\/**\n * Ends the list of after the elements are added.\n *\n * Additional parameters are used in child classes. The args parameter holds\n * additional values that may be used with the child class methods. This\n * method finishes the list at the end of output of the elements.\n *\n * @since 2.1.0\n * @abstract\n *\n * @param string $output Passed by reference. Used to append additional content.\n *\/","file":"class-wp-walker.php","line":69,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Walker::start_el":{"doc":"\/**\n * Start the element output.\n *\n * Additional parameters are used in child classes. The args parameter holds\n * additional values that may be used with the child class methods. Includes\n * the element output also.\n *\n * @since 2.1.0\n * @abstract\n *\n * @param string $output Passed by reference. Used to append additional content.\n *\/","file":"class-wp-walker.php","line":83,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Walker::end_el":{"doc":"\/**\n * Ends the element output, if needed.\n *\n * Additional parameters are used in child classes. The args parameter holds\n * additional values that may be used with the child class methods.\n *\n * @since 2.1.0\n * @abstract\n *\n * @param string $output Passed by reference. Used to append additional content.\n *\/","file":"class-wp-walker.php","line":96,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Walker::display_element":{"doc":"\/**\n * Traverse elements to create list from elements.\n *\n * Display one element if the element doesn't have any children otherwise,\n * display the element and its children. Will only traverse up to the max\n * depth and no ignore elements under that depth. It is possible to set the\n * max depth to include all depths, see walk() method.\n *\n * This method shouldn't be called directly, use the walk() method instead.\n *\n * @since 2.5.0\n *\n * @param object $element Data object\n * @param array $children_elements List of elements to continue traversing.\n * @param int $max_depth Max depth to traverse.\n * @param int $depth Depth of current element.\n * @param array $args\n * @param string $output Passed by reference. Used to append additional content.\n * @return null Null on failure with no changes to parameters.\n *\/","file":"class-wp-walker.php","line":118,"missingDoc":false,"filters":[],"uses":{"is_array":[126],"array_merge":[128,141,151,156],"call_user_func_array":[129,142,152,157],"display_element":[144]},"used_by":[]},"Walker::walk":{"doc":"\/**\n * Display array of elements hierarchically.\n *\n * It is a generic function which does not assume any existing order of\n * elements. max_depth = -1 means flatly display every element. max_depth =\n * 0 means display all levels. max_depth > 0  specifies the number of\n * display levels.\n *\n * @since 2.1.0\n *\n * @param array $elements\n * @param int $max_depth\n * @return string\n *\/","file":"class-wp-walker.php","line":174,"missingDoc":false,"filters":[],"uses":{"array_slice":[176,217],"func_get_args":[176],"display_element":[192,231,241],"count":[237]},"used_by":[]},"Walker::paged_walk":{"doc":"\/**\n * paged_walk() - produce a page of nested elements\n *\n * Given an array of hierarchical elements, the maximum depth, a specific page number,\n * and number of elements per page, this function first determines all top level root elements\n * belonging to that page, then lists them and all of their children in hierarchical order.\n *\n * @package WordPress\n * @since 2.7\n * @param int $max_depth = 0 means display all levels; $max_depth > 0 specifies the number of display levels.\n * @param int $page_num the specific page number, beginning with 1.\n * @return XHTML of the specified page of elements\n *\/","file":"class-wp-walker.php","line":260,"missingDoc":false,"filters":[],"uses":{"array_slice":[266],"func_get_args":[266],"count":[274,325,358],"ceil":[287,327],"array_reverse":[293,332,339],"display_element":[306,355,362],"unset_children":[347]},"used_by":[]},"Walker::get_number_of_root_elements":{"doc":"","file":"class-wp-walker.php","line":368,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Walker::unset_children":{"doc":"","file":"class-wp-walker.php","line":381,"missingDoc":true,"filters":[],"uses":{"unset_children":[391],"is_array":[389]},"used_by":[]},"wp_xmlrpc_server::__construct":{"doc":"\/**\n * Register all of the XMLRPC methods that XMLRPC server understands.\n *\n * Sets up server and method property. Passes XMLRPC\n * methods through the 'xmlrpc_methods' filter to allow plugins to extend\n * or replace XMLRPC methods.\n *\n * @since 1.5.0\n *\n * @return wp_xmlrpc_server\n *\/","file":"class-wp-xmlrpc-server.php","line":35,"missingDoc":false,"filters":["'xmlrpc_methods'"],"uses":{"initialise_blog_option_info":[128]},"used_by":[]},"wp_xmlrpc_server::serve_request":{"doc":"","file":"class-wp-xmlrpc-server.php","line":132,"missingDoc":true,"filters":[],"uses":{"IXR_Server":[133]},"used_by":[]},"wp_xmlrpc_server::sayHello":{"doc":"\/**\n * Test XMLRPC API by saying, \"Hello!\" to client.\n *\n * @since 1.5.0\n *\n * @param array $args Method Parameters.\n * @return string\n *\/","file":"class-wp-xmlrpc-server.php","line":144,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wp_xmlrpc_server::addTwoNumbers":{"doc":"\/**\n * Test XMLRPC API by adding two numbers for client.\n *\n * @since 1.5.0\n *\n * @param array $args Method Parameters.\n * @return int\n *\/","file":"class-wp-xmlrpc-server.php","line":156,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wp_xmlrpc_server::login":{"doc":"\/**\n * Log user in.\n *\n * @since 2.8.0\n *\n * @param string $username User's username.\n * @param string $password User's password.\n * @return mixed WP_User object if authentication passed, false otherwise\n *\/","file":"class-wp-xmlrpc-server.php","line":171,"missingDoc":false,"filters":["'pre_option_enable_xmlrpc'","'option_enable_xmlrpc'","'xmlrpc_enabled'","'xmlrpc_login_error'"],"uses":{"sprintf":[181],"__":[181,188],"wp_authenticate":[185],"is_wp_error":[187],"wp_set_current_user":[193]},"used_by":[]},"wp_authenticate":{"doc":"\/**\n * Checks a user's login information and logs them in if it checks out.\n *\n * @since 2.5.0\n *\n * @param string $username User's username\n * @param string $password User's password\n * @return WP_Error|WP_User WP_User object if login successful, otherwise WP_Error object.\n *\/","file":"pluggable.php","line":470,"missingDoc":false,"filters":["'authenticate'","'wp_login_failed'"],"uses":{"sanitize_user":[471],"trim":[472],"__":[479],"is_wp_error":[484],"in_array":[484],"get_error_code":[484]},"used_by":{"wp_xmlrpc_server::login":[185],"user_pass_ok":[3318],"wp_login":[160],"wp_signon":[53]}},"wp_set_current_user":{"doc":"\/**\n * Changes the current user by ID or name.\n *\n * Set $id to null and specify a name if you do not know a user's ID.\n *\n * Some WordPress functionality is based on the current user and not based on\n * the signed in user. Therefore, it opens the ability to edit and perform\n * actions on users who aren't signed in.\n *\n * @since 2.0.3\n * @global object $current_user The current user object which holds the user data.\n * @uses do_action() Calls 'set_current_user' hook after setting the current user.\n *\n * @param int $id User ID\n * @param string $name User's username\n * @return WP_User Current user User object\n *\/","file":"pluggable.php","line":27,"missingDoc":false,"filters":["'set_current_user'"],"uses":{"setup_userdata":[35]},"used_by":{"wp_xmlrpc_server::login":[193],"set_current_user":[35],"get_currentuserinfo":[85,91,96,102,107]}},"wp_xmlrpc_server::login_pass_ok":{"doc":"\/**\n * Check user's credentials. Deprecated.\n *\n * @since 1.5.0\n * @deprecated 2.8.0\n * @deprecated use wp_xmlrpc_server::login\n * @see wp_xmlrpc_server::login\n *\n * @param string $username User's username.\n * @param string $password User's password.\n * @return bool Whether authentication passed.\n *\/","file":"class-wp-xmlrpc-server.php","line":209,"missingDoc":false,"filters":[],"uses":{"login":[210]},"used_by":[]},"wp_xmlrpc_server::escape":{"doc":"\/**\n * Sanitize string or array of strings for database.\n *\n * @since 1.5.2\n *\n * @param string|array $array Sanitize single string or array of strings.\n * @return string|array Type matches $array and sanitized for the database.\n *\/","file":"class-wp-xmlrpc-server.php","line":221,"missingDoc":false,"filters":[],"uses":{"escape":[225,229,233],"is_object":[230],"is_array":[228,224]},"used_by":[]},"wp_xmlrpc_server::get_custom_fields":{"doc":"\/**\n * Retrieve custom fields for post.\n *\n * @since 2.5.0\n *\n * @param int $post_id Post ID.\n * @return array Custom fields, if exist.\n *\/","file":"class-wp-xmlrpc-server.php","line":247,"missingDoc":false,"filters":[],"uses":{"current_user_can":[254],"has_meta":[252]},"used_by":[]},"wp_xmlrpc_server::set_custom_fields":{"doc":"\/**\n * Set custom fields for post.\n *\n * @since 2.5.0\n *\n * @param int $post_id Post ID.\n * @param array $fields Custom fields.\n *\/","file":"class-wp-xmlrpc-server.php","line":275,"missingDoc":false,"filters":[],"uses":{"get_metadata_by_mid":[281],"stripslashes":[283,292],"stripslashes_deep":[286],"update_metadata_by_mid":[288],"current_user_can":[287,289,292],"delete_metadata_by_mid":[290],"add_post_meta":[293]},"used_by":[]},"get_metadata_by_mid":{"doc":"\/**\n * Get meta data by meta ID\n *\n * @since 3.3.0\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int $meta_id ID for a specific meta row\n * @return object Meta object or false.\n *\/","file":"meta.php","line":348,"missingDoc":false,"filters":[],"uses":{"absint":[354],"_get_meta_table":[357],"get_row":[362],"prepare":[362],"maybe_unserialize":[368]},"used_by":{"wp_xmlrpc_server::set_custom_fields":[281],"update_metadata_by_mid":[404],"delete_metadata_by_mid":[485]}},"update_metadata_by_mid":{"doc":"\/**\n * Update meta data by meta ID\n *\n * @since 3.3.0\n *\n * @uses get_metadata_by_mid() Calls get_metadata_by_mid() to fetch the meta key, value\n *\t\tand object_id of the given meta_id.\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int $meta_id ID for a specific meta row\n * @param string $meta_value Metadata value\n * @param string $meta_key Optional, you can provide a meta key to update it\n * @return bool True on successful update, false on failure.\n *\/","file":"meta.php","line":387,"missingDoc":false,"filters":["\"update_{$meta_type}_meta\"","'update_postmeta'","\"updated_{$meta_type}_meta\"","'updated_postmeta'"],"uses":{"absint":[394],"_get_meta_table":[397],"esc_sql":[400],"is_string":[413],"sanitize_meta":[419],"maybe_serialize":[420],"update":[438],"wp_cache_delete":[441],"get_metadata_by_mid":[404]},"used_by":{"wp_xmlrpc_server::set_custom_fields":[288]}},"delete_metadata_by_mid":{"doc":"\/**\n * Delete meta data by meta ID\n *\n * @since 3.3.0\n *\n * @uses get_metadata_by_mid() Calls get_metadata_by_mid() to fetch the meta key, value\n *\t\tand object_id of the given meta_id.\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int $meta_id ID for a specific meta row\n * @return bool True on successful delete, false on failure.\n *\/","file":"meta.php","line":467,"missingDoc":false,"filters":["\"delete_{$meta_type}_meta\"","\"delete_{$meta_type}meta\"","\"deleted_{$meta_type}_meta\"","\"deleted_{$meta_type}meta\""],"uses":{"absint":[474],"_get_meta_table":[477],"esc_sql":[481],"delete":[495],"wp_cache_delete":[498],"get_metadata_by_mid":[485]},"used_by":{"wp_xmlrpc_server::set_custom_fields":[290],"wp_delete_comment":[1017],"do_all_pings":[1715,1721],"do_enclose":[431],"wp_delete_post":[2364],"wp_delete_attachment":[4117]}},"add_post_meta":{"doc":"\/**\n * Add meta data field to a post.\n *\n * Post meta data is called \"Custom Fields\" on the Administration Screen.\n *\n * @since 1.5.0\n * @uses $wpdb\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/add_post_meta\n *\n * @param int $post_id Post ID.\n * @param string $meta_key Metadata name.\n * @param mixed $meta_value Metadata value.\n * @param bool $unique Optional, default is false. Whether the same key should not be added.\n * @return bool False for failure. True for success.\n *\/","file":"post.php","line":1750,"missingDoc":false,"filters":[],"uses":{"wp_is_post_revision":[1752],"add_metadata":[1755]},"used_by":{"wp_xmlrpc_server::set_custom_fields":[293],"wp_xmlrpc_server::add_enclosure_if_new":[4319],"do_enclose":[471],"wp_trash_post":[2409,2410],"wp_trash_post_comments":[2486],"wp_insert_attachment":[4047],"wp_check_for_changed_slugs":[4434],"_publish_post_hook":[4852,4853]}},"wp_xmlrpc_server::initialise_blog_option_info":{"doc":"\/**\n * Set up blog options property.\n *\n * Passes property through 'xmlrpc_blog_options' filter.\n *\n * @since 2.6.0\n *\/","file":"class-wp-xmlrpc-server.php","line":305,"missingDoc":false,"filters":["'xmlrpc_blog_options'"],"uses":{"__":[311,316,321,326,331,336,341,346,351,356,363,368,373,378,383,388,393,398,403,408,413,418,423,428,433],"current_theme_supports":[358]},"used_by":[]},"wp_xmlrpc_server::wp_getUsersBlogs":{"doc":"\/**\n * Retrieve the blogs of the user.\n *\n * @since 2.6.0\n *\n * @param array $args Method parameters. Contains:\n *  - username\n *  - password\n * @return array. Contains:\n *  - 'isAdmin'\n *  - 'url'\n *  - 'blogid'\n *  - 'blogName'\n *  - 'xmlrpc' - url of xmlrpc endpoint\n *\/","file":"class-wp-xmlrpc-server.php","line":457,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"array_unshift":[461],"blogger_getUsersBlogs":[462],"is_multisite":[460],"escape":[465],"login":[470],"get_blogs_of_user":[475],"switch_to_blog":[485],"current_user_can":[487],"home_url":[491],"get_option":[493],"site_url":[494],"restore_current_blog":[497]},"used_by":[]},"wp_xmlrpc_server::minimum_args":{"doc":"\/**\n * Checks if the method received at least the minimum number of arguments.\n *\n * @since 3.4.0\n *\n * @param string|array $args Sanitize single string or array of strings.\n * @param int $count Minimum number of arguments.\n * @return boolean if $args contains at least $count arguments.\n *\/","file":"class-wp-xmlrpc-server.php","line":512,"missingDoc":false,"filters":[],"uses":{"__":[514],"count":[513]},"used_by":[]},"wp_xmlrpc_server::_prepare_taxonomy":{"doc":"\/**\n * Prepares taxonomy data for return in an XML-RPC object.\n *\n * @access protected\n *\n * @param object $taxonomy The unprepared taxonomy data\n * @param array $fields The subset of taxonomy fields to return\n * @return array The prepared taxonomy data\n *\/","file":"class-wp-xmlrpc-server.php","line":530,"missingDoc":false,"filters":["'xmlrpc_prepare_taxonomy'"],"uses":{"in_array":[540,543,546],"array_unique":[547]},"used_by":[]},"wp_xmlrpc_server::_prepare_term":{"doc":"\/**\n * Prepares term data for return in an XML-RPC object.\n *\n * @access protected\n *\n * @param array|object $term The unprepared term data\n * @return array The prepared term data\n *\/","file":"class-wp-xmlrpc-server.php","line":560,"missingDoc":false,"filters":["'xmlrpc_prepare_term'"],"uses":{"get_object_vars":[563],"is_array":[562],"strval":[566,567,568,569],"intval":[572]},"used_by":[]},"wp_xmlrpc_server::_convert_date":{"doc":"\/**\n * Convert a WordPress date string to an IXR_Date object.\n *\n * @access protected\n *\n * @param string $date\n * @return IXR_Date\n *\/","file":"class-wp-xmlrpc-server.php","line":585,"missingDoc":false,"filters":[],"uses":{"mysql2date":[589]},"used_by":[]},"wp_xmlrpc_server::_convert_date_gmt":{"doc":"\/**\n * Convert a WordPress GMT date string to an IXR_Date object.\n *\n * @access protected\n *\n * @param string $date_gmt\n * @param string $date\n * @return IXR_Date\n *\/","file":"class-wp-xmlrpc-server.php","line":601,"missingDoc":false,"filters":[],"uses":{"get_gmt_from_date":[603],"mysql2date":[603],"_convert_date":[605]},"used_by":[]},"get_gmt_from_date":{"doc":"\/**\n * Returns a date in the GMT equivalent.\n *\n * Requires and returns a date in the Y-m-d H:i:s format. Simply subtracts the\n * value of the 'gmt_offset' option. Return format can be overridden using the\n * $format parameter. The DateTime and DateTimeZone classes are used to respect\n * time zone differences in DST.\n *\n * @since 1.2.0\n *\n * @uses get_option() to retrieve the the value of 'gmt_offset'.\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date (default is Y-m-d H:i:s)\n * @return string GMT version of the date provided.\n *\/","file":"formatting.php","line":1895,"missingDoc":false,"filters":[],"uses":{"preg_match":[1896],"date":[1898,1905],"get_option":[1900,1915],"date_default_timezone_set":[1902,1912],"date_create":[1903],"setTimezone":[1907],"getOffset":[1908],"modify":[1909],"gmdate":[1910,1915],"format":[1910],"gmmktime":[1914]},"used_by":{"wp_xmlrpc_server::_convert_date_gmt":[603],"wp_insert_comment":[1270],"wp_update_comment":[1512],"wp_insert_post":[2804],"_future_post_hook":[4828]}},"wp_xmlrpc_server::_prepare_post":{"doc":"\/**\n * Prepares post data for return in an XML-RPC object.\n *\n * @access protected\n *\n * @param array $post The unprepared post data\n * @param array $fields The subset of post type fields to return\n * @return array The prepared post data\n *\/","file":"class-wp-xmlrpc-server.php","line":617,"missingDoc":false,"filters":["'xmlrpc_prepare_post'"],"uses":{"strval":[619,635],"_convert_date":[624,626],"_convert_date_gmt":[625,627],"post_permalink":[637],"intval":[639],"is_sticky":[642],"get_post_thumbnail_id":[647],"current_theme_supports":[649],"_prepare_media_item":[650],"get_post":[650],"get_post_format":[658],"array_merge":[664,667],"array_intersect_key":[666],"array_flip":[666],"in_array":[663,670,672,681,684],"get_object_taxonomies":[673],"wp_get_object_terms":[674],"_prepare_term":[677],"get_custom_fields":[682],"get_post_meta":[686],"explode":[688],"trim":[689,690,691],"htmlspecialchars":[689]},"used_by":[]},"post_permalink":{"doc":"\/**\n * Retrieve permalink from post ID.\n *\n * @since 1.0.0\n *\n * @param int $post_id Optional. Post ID.\n * @param mixed $deprecated Not used.\n * @return string\n *\/","file":"link-template.php","line":221,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[223],"get_permalink":[225]},"used_by":{"wp_xmlrpc_server::_prepare_post":[637],"wp_xmlrpc_server::_prepare_page":[781],"wp_xmlrpc_server::mw_getPost":[4663],"wp_xmlrpc_server::mw_getRecentPosts":[4794]}},"is_sticky":{"doc":"\/**\n * Check if post is sticky.\n *\n * Sticky posts should remain at the top of The Loop. If the post ID is not\n * given, then The Loop ID for the current post will be used.\n *\n * @since 2.7.0\n *\n * @param int $post_id Optional. Post ID.\n * @return bool Whether post is sticky.\n *\/","file":"post.php","line":1912,"missingDoc":false,"filters":[],"uses":{"absint":[1913],"get_the_ID":[1916],"get_option":[1918],"is_array":[1920],"in_array":[1923]},"used_by":{"wp_xmlrpc_server::_prepare_post":[642],"wp_xmlrpc_server::mw_getPost":[4681],"sticky_class":[3190],"get_post_class":[345]}},"get_post_thumbnail_id":{"doc":"\/**\n * Retrieve Post Thumbnail ID.\n *\n * @since 2.9.0\n *\n * @param int $post_id Optional. Post ID.\n * @return int\n *\/","file":"post-thumbnail-template.php","line":32,"missingDoc":false,"filters":[],"uses":{"get_the_ID":[33],"get_post_meta":[34]},"used_by":{"wp_xmlrpc_server::_prepare_post":[647],"wp_xmlrpc_server::mw_getPost":[4729],"wp_xmlrpc_server::mw_getRecentPosts":[4841],"has_post_thumbnail":[21],"update_post_thumbnail_cache":[65],"get_the_post_thumbnail":[87]}},"get_post_format":{"doc":"\/**\n * Retrieve the format slug for a post\n *\n * @since 3.1.0\n *\n * @param int|object $post A post\n *\n * @return mixed The format if successful. False if no format is set. WP_Error if errors.\n *\/","file":"post.php","line":765,"missingDoc":false,"filters":[],"uses":{"get_post":[766],"post_type_supports":[768],"get_the_terms":[771],"array_shift":[776],"str_replace":[778]},"used_by":{"wp_xmlrpc_server::_prepare_post":[658],"wp_xmlrpc_server::mw_getPost":[4676],"wp_xmlrpc_server::mw_getRecentPosts":[4807],"get_post_class":[332],"get_body_class":[438]}},"get_object_taxonomies":{"doc":"\/**\n * Return all of the taxonomy names that are of $object_type.\n *\n * It appears that this function can be used to find all of the names inside of\n * $wp_taxonomies global variable.\n *\n * <code><?php $taxonomies = get_object_taxonomies('post'); ?><\/code> Should\n * result in <code>Array('category', 'post_tag')<\/code>\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wp_taxonomies\n *\n * @param array|string|object $object Name of the type of taxonomy object, or an object (row from posts)\n * @param string $output The type of output to return, either taxonomy 'names' or 'objects'. 'names' is the default.\n * @return array The names of all taxonomy of $object_type.\n *\/","file":"taxonomy.php","line":165,"missingDoc":false,"filters":[],"uses":{"get_attachment_taxonomies":[170],"is_object":[168],"array_intersect":[178]},"used_by":{"wp_xmlrpc_server::_prepare_post":[673],"wp_xmlrpc_server::_prepare_post_type":[735],"wp_xmlrpc_server::_insert_post":[1109],"get_attachment_taxonomies":[882],"_wp_menu_item_classes_by_context":[268],"wp_delete_post":[2322],"wp_delete_attachment":[4107],"_update_term_count_on_transition_post_status":[5535],"WP_Query::get_posts":[2227],"clean_object_term_cache":[2569],"update_object_term_cache":[2687],"get_the_taxonomies":[3106],"get_post_taxonomies":[3142],"is_object_in_taxonomy":[3206]}},"wp_xmlrpc_server::_prepare_post_type":{"doc":"\/**\n * Prepares post data for return in an XML-RPC object.\n *\n * @access protected\n *\n * @param object $post_type Post type object\n * @param array $fields The subset of post fields to return\n * @return array The prepared post type data\n *\/","file":"class-wp-xmlrpc-server.php","line":707,"missingDoc":false,"filters":["'xmlrpc_prepare_post_type'"],"uses":{"get_all_post_type_supports":[716],"in_array":[719,723,728,734],"get_object_taxonomies":[735]},"used_by":[]},"get_all_post_type_supports":{"doc":"\/**\n * Get all the post type features\n *\n * @since 3.4.0\n * @param string $post_type The post type\n * @return array\n *\/","file":"post.php","line":1615,"missingDoc":false,"filters":[],"uses":[],"used_by":{"wp_xmlrpc_server::_prepare_post_type":[716]}},"wp_xmlrpc_server::_prepare_media_item":{"doc":"\/**\n * Prepares media item data for return in an XML-RPC object.\n *\n * @access protected\n *\n * @param object $media_item The unprepared media item data\n * @param string $thumbnail_size The image size to use for the thumbnail URL\n * @return array The prepared media item data\n *\/","file":"class-wp-xmlrpc-server.php","line":749,"missingDoc":false,"filters":["'xmlrpc_prepare_media_item'"],"uses":{"strval":[751],"_convert_date_gmt":[752],"wp_get_attachment_url":[754],"wp_get_attachment_metadata":[758],"image_downsize":[761]},"used_by":[]},"wp_get_attachment_url":{"doc":"\/**\n * Retrieve the URL for an attachment.\n *\n * @since 2.1.0\n *\n * @param int $post_id Attachment ID.\n * @return string\n *\/","file":"post.php","line":4208,"missingDoc":false,"filters":["'wp_get_attachment_url'"],"uses":{"get_post":[4210],"str_replace":[4220],"strpos":[4221,4222,4219],"substr":[4222],"wp_upload_dir":[4218],"get_post_meta":[4217],"get_the_guid":[4229]},"used_by":{"wp_xmlrpc_server::_prepare_media_item":[754],"get_the_attachment_link":[1897],"get_attachment_icon_src":[1937],"image_downsize":[141],"image_get_intermediate_size":[475],"wp_prepare_attachment_for_js":[1324],"wp_get_attachment_link":[1165],"wp_get_attachment_thumb_url":[4273],"_delete_attachment_theme_mod":[1590]}},"wp_get_attachment_metadata":{"doc":"\/**\n * Retrieve attachment meta field for attachment ID.\n *\n * @since 2.1.0\n *\n * @param int $post_id Attachment ID\n * @param bool $unfiltered Optional, default is false. If true, filters are not run.\n * @return string|bool Attachment meta field. False on failure.\n *\/","file":"post.php","line":4167,"missingDoc":false,"filters":["'wp_get_attachment_metadata'"],"uses":{"get_post":[4169],"get_post_meta":[4172]},"used_by":{"wp_xmlrpc_server::_prepare_media_item":[758],"image_downsize":[142],"image_get_intermediate_size":[433],"wp_prepare_attachment_for_js":[1318],"wp_delete_attachment":[4091],"wp_get_attachment_thumb_file":[4251],"get_uploaded_header_images":[1010]}},"image_downsize":{"doc":"\/**\n * Scale an image to fit a particular size (such as 'thumb' or 'medium').\n *\n * Array with image url, width, height, and whether is intermediate size, in\n * that order is returned on success is returned. $is_intermediate is true if\n * $url is a resized image, false if it is the original.\n *\n * The URL might be the original image, or it might be a resized version. This\n * function won't create a new resized copy, it will just return an already\n * resized one if it exists.\n *\n * A plugin may use the 'image_downsize' filter to hook into and offer image\n * resizing services for images. The hook must return an array with the same\n * elements that are returned in the function. The first element being the URL\n * to the new image that was resized.\n *\n * @since 2.5.0\n * @uses apply_filters() Calls 'image_downsize' on $id and $size to provide\n *\t\tresize services.\n *\n * @param int $id Attachment ID for image.\n * @param array|string $size Optional, default is 'medium'. Size of image, either array or string.\n * @return bool|array False on failure, array on success.\n *\/","file":"media.php","line":136,"missingDoc":false,"filters":["'image_downsize'"],"uses":{"wp_attachment_is_image":[138],"wp_get_attachment_url":[141],"wp_get_attachment_metadata":[142],"wp_basename":[145,161],"str_replace":[153,161],"wp_get_attachment_thumb_file":[160],"getimagesize":[160],"image_get_intermediate_size":[152],"image_constrain_size_for_editor":[175]},"used_by":{"wp_xmlrpc_server::_prepare_media_item":[761],"get_image_tag":[230],"wp_get_attachment_image_src":[511],"wp_get_attachment_thumb_url":[4276]}},"wp_xmlrpc_server::_prepare_page":{"doc":"\/**\n * Prepares page data for return in an XML-RPC object.\n *\n * @access protected\n *\n * @param object $page The unprepared page data\n * @return array The prepared page data\n *\/","file":"class-wp-xmlrpc-server.php","line":778,"missingDoc":false,"filters":["'xmlrpc_prepare_page'"],"uses":{"get_extended":[780],"post_permalink":[781],"get_post":[786],"comments_open":[791],"pings_open":[792],"_convert_date":[795],"_convert_date_gmt":[796],"get_cat_name":[801],"wp_get_post_categories":[800],"get_userdata":[805],"get_page_template_slug":[807],"get_custom_fields":[834]},"used_by":[]},"get_extended":{"doc":"\/**\n * Get extended entry info (<!--more-->).\n *\n * There should not be any space after the second dash and before the word\n * 'more'. There can be text or space(s) after the word 'more', but won't be\n * referenced.\n *\n * The returned array has 'main', 'extended', and 'more_text' keys. Main has the text before\n * the <code><!--more--><\/code>. The 'extended' key has the content after the\n * <code><!--more--><\/code> comment. The 'more_text' key has the custom \"Read More\" text.\n *\n * @since 1.0.0\n *\n * @param string $post Post content.\n * @return array Post before ('main'), after ('extended'), and custom readmore ('more_text').\n *\/","file":"post.php","line":352,"missingDoc":false,"filters":[],"uses":{"explode":[355],"preg_match":[354],"preg_replace":[364,365,366]},"used_by":{"wp_xmlrpc_server::_prepare_page":[780],"wp_xmlrpc_server::mw_getPost":[4662],"wp_xmlrpc_server::mw_getRecentPosts":[4793]}},"comments_open":{"doc":"\/**\n * Whether the current post is open for comments.\n *\n * @since 1.5.0\n * @uses $post\n *\n * @param int $post_id An optional post ID to check instead of the current post.\n * @return bool True if the comments are open\n *\/","file":"comment-template.php","line":772,"missingDoc":false,"filters":["'comments_open'"],"uses":{"get_post":[774]},"used_by":{"wp_xmlrpc_server::_prepare_page":[791],"comments_popup_link":[980],"get_comment_reply_link":[1053],"get_post_reply_link":[1106],"comment_form":[1551],"feed_links_extra":[1644],"__main":[65,44,54]}},"pings_open":{"doc":"\/**\n * Whether the current post is open for pings.\n *\n * @since 1.5.0\n * @uses $post\n *\n * @param int $post_id An optional post ID to check instead of the current post.\n * @return bool True if pings are accepted\n *\/","file":"comment-template.php","line":789,"missingDoc":false,"filters":["'pings_open'"],"uses":{"get_post":[791]},"used_by":{"wp_xmlrpc_server::_prepare_page":[792],"wp_xmlrpc_server::pingback_ping":[5368],"comments_popup_link":[980],"feed_links_extra":[1644],"__main":[37]}},"wp_get_post_categories":{"doc":"\/**\n * Retrieve the list of categories for a post.\n *\n * Compatibility layer for themes and plugins. Also an easy layer of abstraction\n * away from the complexity of the taxonomy layer.\n *\n * @since 2.1.0\n *\n * @uses wp_get_object_terms() Retrieves the categories. Args details can be found here.\n *\n * @param int $post_id Optional. The Post ID.\n * @param array $args Optional. Overwrite the defaults.\n * @return array\n *\/","file":"post.php","line":2558,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[2562],"wp_get_object_terms":[2564]},"used_by":{"wp_xmlrpc_server::_prepare_page":[800],"wp_xmlrpc_server::blogger_getPost":[3747],"wp_xmlrpc_server::blogger_getRecentPosts":[3801],"wp_xmlrpc_server::mw_getPost":[4648],"wp_xmlrpc_server::mw_getRecentPosts":[4778],"wp_xmlrpc_server::mt_getPostCategories":[5117],"wp_xmlrpc_server::mt_publishPost":[5275],"wp_get_post_cats":[748]}},"get_page_template_slug":{"doc":"\/**\n * Get the specific template name for a page.\n *\n * @since 3.4.0\n *\n * @param int $post_id The page ID to check. Defaults to the current post, when used in the loop.\n * @return string|bool Page template filename. Returns an empty string when the default page template\n * \tis in use. Returns false if the post is not a page.\n *\/","file":"post-template.php","line":1273,"missingDoc":false,"filters":[],"uses":{"get_post":[1274],"get_post_meta":[1277]},"used_by":{"wp_xmlrpc_server::_prepare_page":[807],"get_body_class":[504],"is_page_template":[1250],"get_page_template":[238]}},"wp_xmlrpc_server::_prepare_comment":{"doc":"\/**\n * Prepares comment data for return in an XML-RPC object.\n *\n * @access protected\n *\n * @param object $comment The unprepared comment data\n * @return array The prepared comment data\n *\/","file":"class-wp-xmlrpc-server.php","line":849,"missingDoc":false,"filters":["'xmlrpc_prepare_comment'"],"uses":{"_convert_date":[851],"_convert_date_gmt":[852],"get_comment_link":[870],"get_the_title":[872]},"used_by":[]},"get_comment_link":{"doc":"\/**\n * Retrieve the link to a given comment.\n *\n * @since 1.5.0\n * @uses $comment\n *\n * @param object|string|int $comment Comment to retrieve.\n * @param array $args Optional args.\n * @return string The permalink to the given comment.\n *\/","file":"comment-template.php","line":472,"missingDoc":false,"filters":["'get_comment_link'"],"uses":{"get_comment":[475],"is_array":[478],"wp_parse_args":[485],"get_option":[488,487],"get_query_var":[497],"get_page_of_comment":[497],"user_trailingslashit":[500],"trailingslashit":[500],"get_permalink":[500,502,504],"add_query_arg":[502],"using_permalinks":[499]},"used_by":{"wp_xmlrpc_server::_prepare_comment":[870],"Walker_Comment::start_el":[1361],"WP_Widget_Recent_Comments::widget":[694],"__main":[80],"comment_link":[242]}},"wp_xmlrpc_server::_prepare_user":{"doc":"\/**\n * Prepares user data for return in an XML-RPC object.\n *\n * @access protected\n *\n * @param WP_User $user The unprepared user object\n * @param array $fields The subset of user fields to return\n * @return array The prepared user data\n *\/","file":"class-wp-xmlrpc-server.php","line":892,"missingDoc":false,"filters":["'xmlrpc_prepare_user'"],"uses":{"strval":[893],"_convert_date":[899],"array_merge":[910,914,917],"in_array":[912,909],"array_intersect_key":[916],"array_flip":[916]},"used_by":[]},"wp_xmlrpc_server::wp_newPost":{"doc":"\/**\n * Create a new post for any registered post type.\n *\n * @since 3.4.0\n *\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - array   $content_struct\n *      $content_struct can contain:\n *      - post_type (default: 'post')\n *      - post_status (default: 'draft')\n *      - post_title\n *      - post_author\n *      - post_excerpt\n *      - post_content\n *      - post_date_gmt | post_date\n *      - post_format\n *      - post_password\n *      - comment_status - can be 'open' | 'closed'\n *      - ping_status - can be 'open' | 'closed'\n *      - sticky\n *      - post_thumbnail - ID of a media item to use as the post thumbnail\/featured image\n *      - custom_fields - array, with each element containing 'key' and 'value'\n *      - terms - array, with taxonomy names as keys and arrays of term IDs as values\n *      - terms_names - array, with taxonomy names as keys and arrays of term names as values\n *      - enclosure\n *      - any other fields supported by wp_insert_post()\n * @return string post_id\n *\/","file":"class-wp-xmlrpc-server.php","line":954,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[955],"escape":[958],"login":[965],"_insert_post":[972]},"used_by":[]},"wp_xmlrpc_server::_is_greater_than_one":{"doc":"\/**\n * Helper method for filtering out elements from an array.\n *\n * @since 3.4.0\n *\n * @param int $count Number to compare to one.\n *\/","file":"class-wp-xmlrpc-server.php","line":982,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wp_xmlrpc_server::_insert_post":{"doc":"\/**\n * Helper method for wp_newPost and wp_editPost, containing shared logic.\n *\n * @since 3.4.0\n * @uses wp_insert_post()\n *\n * @param WP_User $user The post author if post_author isn't set in $content_struct.\n * @param array $content_struct Post data to insert.\n *\/","file":"class-wp-xmlrpc-server.php","line":995,"missingDoc":false,"filters":["'xmlrpc_wp_insert_post_data'"],"uses":{"wp_parse_args":[999],"get_post_type_object":[1001],"__":[1003,1009,1011,1013,1016,1025,1030,1039,1044,1049,1082,1087,1100,1121,1124,1131,1144,1147,1166,1173,1217],"get_post":[1008,1099],"current_user_can":[1010,1015,1015,1024,1029,1038,1043,1086,1123,1146,1172],"get_post_type":[1012],"get_post_status_object":[1033],"absint":[1041,1099],"get_userdata":[1046],"rtrim":[1063],"getIso":[1063,1065],"get_date_from_gmt":[1069],"iso8601_to_datetime":[1069,1070],"get_default_post_to_edit":[1074],"unstick_post":[1084,1091],"stick_post":[1089],"delete_post_thumbnail":[1098],"set_post_thumbnail":[1101],"set_custom_fields":[1106],"get_object_taxonomies":[1109],"array_keys":[1116,1140,1160],"array_key_exists":[1120,1143],"get_term_by":[1128,1168],"is_array":[1115,1139],"get_terms":[1152],"array_count_values":[1155],"array_filter":[1158],"is_taxonomy_hierarchical":[1151],"in_array":[1165],"wp_insert_term":[1176],"get_error_message":[1178,1199,1214],"is_wp_error":[1177,1198,1213],"set_post_format":[1196],"add_enclosure_if_new":[1206],"attach_uploads":[1208],"wp_update_post":[1212],"wp_insert_post":[1212],"strval":[1219]},"used_by":[]},"get_date_from_gmt":{"doc":"\/**\n * Converts a GMT date into the correct format for the blog.\n *\n * Requires and returns in the Y-m-d H:i:s format. Simply adds the value of\n * gmt_offset.Return format can be overridden using the $format parameter\n *\n * @since 1.2.0\n *\n * @param string $string The date to be converted.\n * @param string $format The format string for the returned date (default is Y-m-d H:i:s)\n * @return string Formatted date relative to the GMT offset.\n *\/","file":"formatting.php","line":1932,"missingDoc":false,"filters":[],"uses":{"preg_match":[1933],"gmmktime":[1934],"gmdate":[1935],"get_option":[1935]},"used_by":{"wp_xmlrpc_server::_insert_post":[1069],"wp_xmlrpc_server::wp_editComment":[2903],"wp_xmlrpc_server::mw_newPost":[4240],"wp_xmlrpc_server::mw_editPost":[4558]}},"iso8601_to_datetime":{"doc":"\/**\n * Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt].\n *\n * @since 1.5.0\n *\n * @param string $date_string Date and time in ISO 8601 format {@link http:\/\/en.wikipedia.org\/wiki\/ISO_8601}.\n * @param string $timezone Optional. If set to GMT returns the time minus gmt_offset. Default is 'user'.\n * @return string The date and time in MySQL DateTime format - Y-m-d H:i:s.\n *\/","file":"formatting.php","line":1969,"missingDoc":false,"filters":[],"uses":{"strtolower":[1970],"preg_match":[1974],"iso8601_timezone_to_offset":[1977],"get_option":[1979],"gmmktime":[1982],"gmdate":[1985],"preg_replace":[1988]},"used_by":{"wp_xmlrpc_server::_insert_post":[1069,1070],"wp_xmlrpc_server::wp_editComment":[2903,2904],"wp_xmlrpc_server::mw_newPost":[4240,4241],"wp_xmlrpc_server::mw_editPost":[4558,4559]}},"unstick_post":{"doc":"\/**\n * Unstick a post.\n *\n * Sticky posts should be displayed at the top of the front page.\n *\n * @since 2.7.0\n *\n * @param int $post_id Post ID.\n *\/","file":"post.php","line":2085,"missingDoc":false,"filters":[],"uses":{"get_option":[2086],"is_array":[2088],"in_array":[2091],"array_search":[2094],"array_splice":[2098],"update_option":[2100]},"used_by":{"wp_xmlrpc_server::_insert_post":[1084,1091],"wp_xmlrpc_server::mw_newPost":[4267],"wp_xmlrpc_server::mw_editPost":[4580],"wp_delete_post":[2346]}},"stick_post":{"doc":"\/**\n * Make a post sticky.\n *\n * Sticky posts should be displayed at the top of the front page.\n *\n * @since 2.7.0\n *\n * @param int $post_id Post ID.\n *\/","file":"post.php","line":2064,"missingDoc":false,"filters":[],"uses":{"get_option":[2065],"is_array":[2067],"in_array":[2070],"update_option":[2073]},"used_by":{"wp_xmlrpc_server::_insert_post":[1089],"wp_xmlrpc_server::mw_newPost":[4265],"wp_xmlrpc_server::mw_editPost":[4578]}},"delete_post_thumbnail":{"doc":"\/**\n * Removes a post thumbnail.\n *\n * @since 3.3.0\n *\n * @param int|object $post Post ID or object where thumbnail should be removed from.\n * @return bool True on success, false on failure.\n *\/","file":"post.php","line":5396,"missingDoc":false,"filters":[],"uses":{"get_post":[5397],"delete_post_meta":[5399]},"used_by":{"wp_xmlrpc_server::_insert_post":[1098],"wp_xmlrpc_server::mw_editPost":[4589]}},"set_post_thumbnail":{"doc":"\/**\n * Sets a post thumbnail.\n *\n * @since 3.1.0\n *\n * @param int|object $post Post ID or object where thumbnail should be attached.\n * @param int $thumbnail_id Thumbnail to attach.\n * @return bool True on success, false on failure.\n *\/","file":"post.php","line":5376,"missingDoc":false,"filters":[],"uses":{"get_post":[5377,5379],"absint":[5378],"update_post_meta":[5381],"delete_post_meta":[5383],"wp_get_attachment_image":[5380]},"used_by":{"wp_xmlrpc_server::_insert_post":[1101],"wp_xmlrpc_server::mw_newPost":[4274],"wp_xmlrpc_server::mw_editPost":[4591]}},"is_taxonomy_hierarchical":{"doc":"\/**\n * Whether the taxonomy object is hierarchical.\n *\n * Checks to make sure that the taxonomy is an object first. Then Gets the\n * object, and finally returns the hierarchical value in the object.\n *\n * A false return value might also mean that the taxonomy does not exist.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses taxonomy_exists() Checks whether taxonomy exists\n * @uses get_taxonomy() Used to get the taxonomy object\n *\n * @param string $taxonomy Name of taxonomy object\n * @return bool Whether the taxonomy is hierarchical\n *\/","file":"taxonomy.php","line":252,"missingDoc":false,"filters":[],"uses":{"taxonomy_exists":[253],"get_taxonomy":[256]},"used_by":{"wp_xmlrpc_server::_insert_post":[1151],"_wp_menu_item_classes_by_context":[269,295],"wp_set_post_terms":[3211],"WP_Tax_Query::clean_query":[754],"get_terms":[1210],"wp_delete_term":[1793],"wp_insert_term":[2089],"wp_unique_term_slug":[2279],"_get_term_hierarchy":[2764],"_pad_term_counts":[2857],"get_ancestors":[3233]}},"wp_insert_term":{"doc":"\/**\n * Adds a new term to the database. Optionally marks it as an alias of an existing term.\n *\n * Error handling is assigned for the nonexistence of the $taxonomy and $term\n * parameters before inserting. If both the term id and taxonomy exist\n * previously, then an array will be returned that contains the term id and the\n * contents of what is returned. The keys of the array are 'term_id' and\n * 'term_taxonomy_id' containing numeric values.\n *\n * It is assumed that the term does not yet exist or the above will apply. The\n * term will be first added to the term table and then related to the taxonomy\n * if everything is well. If everything is correct, then several actions will be\n * run prior to a filter and then several actions will be run after the filter\n * is run.\n *\n * The arguments decide how the term is handled based on the $args parameter.\n * The following is a list of the available overrides and the defaults.\n *\n * 'alias_of'. There is no default, but if added, expected is the slug that the\n * term will be an alias of. Expected to be a string.\n *\n * 'description'. There is no default. If exists, will be added to the database\n * along with the term. Expected to be a string.\n *\n * 'parent'. Expected to be numeric and default is 0 (zero). Will assign value\n * of 'parent' to the term.\n *\n * 'slug'. Expected to be a string. There is no default.\n *\n * If 'slug' argument exists then the slug will be checked to see if it is not\n * a valid term. If that check succeeds (it is not a valid term), then it is\n * added and the term id is given. If it fails, then a check is made to whether\n * the taxonomy is hierarchical and the parent argument is not empty. If the\n * second check succeeds, the term will be inserted and the term id will be\n * given.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n * @uses $wpdb\n *\n * @uses apply_filters() Calls 'pre_insert_term' hook with term and taxonomy as parameters.\n * @uses do_action() Calls 'create_term' hook with the term id and taxonomy id as parameters.\n * @uses do_action() Calls 'create_$taxonomy' hook with term id and taxonomy id as parameters.\n * @uses apply_filters() Calls 'term_id_filter' hook with term id and taxonomy id as parameters.\n * @uses do_action() Calls 'created_term' hook with the term id and taxonomy id as parameters.\n * @uses do_action() Calls 'created_$taxonomy' hook with term id and taxonomy id as parameters.\n *\n * @param string $term The term to add or update.\n * @param string $taxonomy The taxonomy to which to add the term\n * @param array|string $args Change the values of the inserted term\n * @return array|WP_Error The Term ID and Term Taxonomy ID\n *\/","file":"taxonomy.php","line":2041,"missingDoc":false,"filters":["'pre_insert_term'","'edit_terms'","'edited_terms'","'edit_terms'","'edited_terms'","'create_term'","\"create_{$taxonomy}\"","'term_id_filter'","'created_term'","\"created_{$taxonomy}\""],"uses":{"__":[2045,2052,2055,2093,2097,2104,2108,2114],"taxonomy_exists":[2044],"is_wp_error":[2048],"is_int":[2051],"trim":[2054],"wp_parse_args":[2058],"sanitize_term":[2061],"extract":[2062],"stripslashes":[2065,2066],"sanitize_title":[2069,2120],"get_row":[2073,2087],"prepare":[2073,2087,2126],"get_var":[2079,2126],"update":[2081,2122],"compact":[2081,2096,2103,2113,2122,2122,2131],"get_terms":[2091],"wp_unique_term_slug":[2095,2102,2112],"insert":[2096,2103,2113,2131],"in_array":[2092],"term_exists":[2106,2089,2086],"is_taxonomy_hierarchical":[2089],"clean_term_cache":[2139]},"used_by":{"wp_xmlrpc_server::_insert_post":[1176],"wp_xmlrpc_server::wp_newTerm":[1583],"wp_update_nav_menu_object":[235],"wp_set_object_terms":[2198]}},"set_post_format":{"doc":"\/**\n * Assign a format to a post\n *\n * @since 3.1.0\n *\n * @param int|object $post The post for which to assign a format\n * @param string $format  A format to assign. Use an empty string or array to remove all formats from the post.\n * @return mixed WP_Error on error. Array of affected term IDs on success.\n *\/","file":"post.php","line":804,"missingDoc":false,"filters":[],"uses":{"get_post":[805],"__":[808],"sanitize_key":[811],"in_array":[812],"array_keys":[812],"get_post_format_slugs":[812],"wp_set_post_terms":[818]},"used_by":{"wp_xmlrpc_server::_insert_post":[1196],"wp_xmlrpc_server::mw_newPost":[4289],"wp_xmlrpc_server::mw_editPost":[4606]}},"wp_update_post":{"doc":"\/**\n * Update a post with new post data.\n *\n * The date does not have to be set for drafts. You can set the date and it will\n * not be overridden.\n *\n * @since 1.0.0\n *\n * @param array|object $postarr Post data. Arrays are expected to be escaped, objects are not.\n * @param bool $wp_error Optional. Allow return of WP_Error on failure.\n * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success.\n *\/","file":"post.php","line":2968,"missingDoc":false,"filters":[],"uses":{"get_object_vars":[2971],"add_magic_quotes":[2972,2979],"is_object":[2969],"get_post":[2976],"is_array":[2982],"count":[2983],"in_array":[2989],"array_merge":[2996],"current_time":[2999],"wp_insert_attachment":[3004],"wp_insert_post":[3006]},"used_by":{"wp_xmlrpc_server::_insert_post":[1212],"wp_xmlrpc_server::blogger_editPost":[3942],"wp_xmlrpc_server::mw_editPost":[4568],"wp_xmlrpc_server::mt_publishPost":[5279],"wp_update_nav_menu_item":[393],"wp_restore_post_revision":[5160],"wp_check_post_hierarchy_for_loops":[5311]}},"wp_insert_post":{"doc":"\/**\n * Insert a post.\n *\n * If the $postarr parameter has 'ID' set to a value, then post will be updated.\n *\n * You can set the post date manually, but setting the values for 'post_date'\n * and 'post_date_gmt' keys. You can close the comments or open the comments by\n * setting the value for 'comment_status' key.\n *\n * The defaults for the parameter $postarr are:\n *     'post_status'   - Default is 'draft'.\n *     'post_type'     - Default is 'post'.\n *     'post_author'   - Default is current user ID ($user_ID). The ID of the user who added the post.\n *     'ping_status'   - Default is the value in 'default_ping_status' option.\n *                       Whether the attachment can accept pings.\n *     'post_parent'   - Default is 0. Set this for the post it belongs to, if any.\n *     'menu_order'    - Default is 0. The order it is displayed.\n *     'to_ping'       - Whether to ping.\n *     'pinged'        - Default is empty string.\n *     'post_password' - Default is empty string. The password to access the attachment.\n *     'guid'          - Global Unique ID for referencing the attachment.\n *     'post_content_filtered' - Post content filtered.\n *     'post_excerpt'  - Post excerpt.\n *\n * @since 1.0.0\n * @uses $wpdb\n * @uses $user_ID\n * @uses do_action() Calls 'pre_post_update' on post ID if this is an update.\n * @uses do_action() Calls 'edit_post' action on post ID and post data if this is an update.\n * @uses do_action() Calls 'save_post' and 'wp_insert_post' on post id and post data just before returning.\n * @uses apply_filters() Calls 'wp_insert_post_data' passing $data, $postarr prior to database update or insert.\n * @uses wp_transition_post_status()\n *\n * @param array $postarr Elements that make up post to insert.\n * @param bool $wp_error Optional. Allow return of WP_Error on failure.\n * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success.\n *\/","file":"post.php","line":2700,"missingDoc":false,"filters":["'wp_insert_post_empty_content'","'wp_insert_post_parent'","'wp_insert_post_data'","'pre_post_update'","'edit_post'","'post_updated'","'save_post'","'wp_insert_post'"],"uses":{"get_option":[2704,2749,2831,2834],"wp_parse_args":[2709],"sanitize_post":[2713],"extract":[2716],"get_post_field":[2722,2762,2780,2920],"post_type_supports":[2727,2728,2728],"__":[2731,2797,2872,2888,2935],"array_filter":[2743,2914],"count":[2746],"is_array":[2746,2913],"get_post":[2763,2928,2946],"current_user_can":[2767,2915],"sanitize_title":[2774,2779,2783,2899],"in_array":[2773,2803,2898],"strtolower":[2780],"urlencode":[2780],"current_time":[2788,2810,2811],"substr":[2791,2792,2793],"wp_checkdate":[2794],"get_gmt_from_date":[2804],"gmdate":[2818,2822],"mysql2date":[2819,2819,2823,2823],"sanitize_trackback_urls":[2837],"compact":[2850,2863],"array_keys":[2850],"wp_unique_post_slug":[2860],"stripslashes_deep":[2865],"update":[2870,2900,2924],"stripslashes":[2878],"get_var":[2882],"prepare":[2882],"insert":[2886],"wp_set_post_categories":[2904],"is_object_in_taxonomy":[2903,2906],"wp_set_post_tags":[2907],"get_taxonomy":[2912],"wp_set_post_terms":[2916],"get_permalink":[2924],"clean_post_cache":[2926],"get_page_templates":[2932],"wp_get_theme":[2932],"update_post_meta":[2939],"wp_transition_post_status":[2942]},"used_by":{"wp_xmlrpc_server::_insert_post":[1212],"wp_xmlrpc_server::blogger_newPost":[3884],"wp_xmlrpc_server::mw_newPost":[4291],"wp_update_nav_menu_item":[360],"wp_trash_post":[2413],"wp_untrash_post":[2448],"wp_update_post":[3006],"_wp_put_post_revision":[5081]}},"wp_xmlrpc_server::wp_editPost":{"doc":"\/**\n * Edit a post for any registered post type.\n *\n * The $content_struct parameter only needs to contain fields that\n * should be changed. All other fields will retain their existing values.\n *\n * @since 3.4.0\n *\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - int     $post_id\n *  - array   $content_struct\n * @return true on success\n *\/","file":"class-wp-xmlrpc-server.php","line":1238,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[1239],"escape":[1242,1277],"login":[1250],"get_post":[1255],"__":[1258,1263],"mysql2date":[1262],"getTimestamp":[1262],"_convert_date":[1268,1275],"array_merge":[1278],"_insert_post":[1280]},"used_by":[]},"wp_xmlrpc_server::wp_deletePost":{"doc":"\/**\n * Delete a post for any registered post type.\n *\n * @since 3.4.0\n *\n * @uses wp_delete_post()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - int     $post_id\n * @return true on success\n *\/","file":"class-wp-xmlrpc-server.php","line":1300,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[1301],"escape":[1304],"login":[1311],"get_post":[1316],"__":[1318,1322,1327],"get_post_type_object":[1320],"current_user_can":[1321],"wp_delete_post":[1324]},"used_by":[]},"wp_delete_post":{"doc":"\/**\n * Trashes or deletes a post or page.\n *\n * When the post and page is permanently deleted, everything that is tied to it is deleted also.\n * This includes comments, post meta fields, and terms associated with the post.\n *\n * The post or page is moved to trash instead of permanently deleted unless trash is\n * disabled, item is already in the trash, or $force_delete is true.\n *\n * @since 1.0.0\n * @uses do_action() on 'delete_post' before deletion unless post type is 'attachment'.\n * @uses do_action() on 'deleted_post' after deletion unless post type is 'attachment'.\n * @uses wp_delete_attachment() if post type is 'attachment'.\n * @uses wp_trash_post() if item should be trashed.\n *\n * @param int $postid Post ID.\n * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.\n * @return mixed False on failure\n *\/","file":"post.php","line":2305,"missingDoc":false,"filters":["'before_delete_post'","'delete_post'","'deleted_post'","'after_delete_post'"],"uses":{"get_row":[2308],"prepare":[2308,2329,2350,2358,2362],"wp_trash_post":[2312],"get_post_status":[2311],"wp_delete_attachment":[2315],"delete_post_meta":[2319,2320],"wp_delete_object_term_relationships":[2322],"get_object_taxonomies":[2322],"get_results":[2330],"update":[2332,2356],"is_post_type_hierarchical":[2327,2372],"update_option":[2339],"delete_option":[2340,2343],"get_option":[2338,2342],"unstick_post":[2346],"get_col":[2350,2358,2362],"wp_delete_post_revision":[2353],"wp_delete_comment":[2360],"delete_metadata_by_mid":[2364],"delete":[2367],"clean_post_cache":[2370,2374],"wp_clear_scheduled_hook":[2377]},"used_by":{"wp_xmlrpc_server::wp_deletePost":[1324],"wp_xmlrpc_server::wp_deletePage":[2389],"wp_xmlrpc_server::blogger_deletePost":[3983],"wp_scheduled_delete":[3489],"wp_delete_nav_menu":[185],"_wp_delete_post_menu_item":[720],"_wp_delete_tax_menu_item":[739],"wp_trash_post":[2399],"wp_delete_post_revision":[5189],"wp_delete_auto_drafts":[5429]}},"wp_xmlrpc_server::wp_getPost":{"doc":"\/**\n * Retrieve a post.\n *\n * @since 3.4.0\n *\n * The optional $fields parameter specifies what fields will be included\n * in the response array. This should be a list of field names. 'post_id' will\n * always be included in the response regardless of the value of $fields.\n *\n * Instead of, or in addition to, individual field names, conceptual group\n * names can be used to specify multiple fields. The available conceptual\n * groups are 'post' (all basic fields), 'taxonomies', 'custom_fields',\n * and 'enclosure'.\n *\n * @uses get_post()\n * @param array $args Method parameters. Contains:\n *  - int     $post_id\n *  - string  $username\n *  - string  $password\n *  - array   $fields optional\n * @return array contains (based on $fields parameter):\n *  - 'post_id'\n *  - 'post_title'\n *  - 'post_date'\n *  - 'post_date_gmt'\n *  - 'post_modified'\n *  - 'post_modified_gmt'\n *  - 'post_status'\n *  - 'post_type'\n *  - 'post_name'\n *  - 'post_author'\n *  - 'post_password'\n *  - 'post_excerpt'\n *  - 'post_content'\n *  - 'link'\n *  - 'comment_status'\n *  - 'ping_status'\n *  - 'sticky'\n *  - 'custom_fields'\n *  - 'terms'\n *  - 'categories'\n *  - 'tags'\n *  - 'enclosure'\n *\/","file":"class-wp-xmlrpc-server.php","line":1376,"missingDoc":false,"filters":["'xmlrpc_default_post_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[1377],"escape":[1380],"login":[1392],"get_post":[1397],"__":[1400,1404],"get_post_type_object":[1402],"current_user_can":[1403],"_prepare_post":[1406]},"used_by":[]},"wp_xmlrpc_server::wp_getPosts":{"doc":"\/**\n * Retrieve posts.\n *\n * @since 3.4.0\n *\n * The optional $filter parameter modifies the query used to retrieve posts.\n * Accepted keys are 'post_type', 'post_status', 'number', 'offset',\n * 'orderby', and 'order'.\n *\n * The optional $fields parameter specifies what fields will be included\n * in the response array.\n *\n * @uses wp_get_recent_posts()\n * @see wp_getPost() for more on $fields\n * @see get_posts() for more on $filter values\n *\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - array   $filter optional\n *  - array   $fields optional\n * @return array contains a collection of posts.\n *\/","file":"class-wp-xmlrpc-server.php","line":1433,"missingDoc":false,"filters":["'xmlrpc_default_post_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[1434],"escape":[1437],"login":[1449],"get_post_type_object":[1457,1461,1498],"__":[1459,1465],"current_user_can":[1464,1499],"absint":[1473,1476],"wp_get_recent_posts":[1489],"_prepare_post":[1502]},"used_by":[]},"wp_get_recent_posts":{"doc":"\/**\n * Retrieve number of recent posts.\n *\n * @since 1.0.0\n * @uses wp_parse_args()\n * @uses get_posts()\n *\n * @param string $deprecated Deprecated.\n * @param array $args Optional. Overrides defaults.\n * @param string $output Optional.\n * @return unknown.\n *\/","file":"post.php","line":2630,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[2633],"__":[2633],"absint":[2634],"is_numeric":[2632],"wp_parse_args":[2647],"get_posts":[2649],"get_object_vars":[2654]},"used_by":{"wp_xmlrpc_server::wp_getPosts":[1489],"wp_xmlrpc_server::blogger_getRecentPosts":[3789],"wp_xmlrpc_server::mw_getRecentPosts":[4762],"wp_xmlrpc_server::mt_getRecentPostTitles":[5016]}},"wp_xmlrpc_server::wp_newTerm":{"doc":"\/**\n * Create a new term.\n *\n * @since 3.4.0\n *\n * @uses wp_insert_term()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - array   $content_struct\n *      The $content_struct must contain:\n *      - 'name'\n *      - 'taxonomy'\n *      Also, it can optionally contain:\n *      - 'parent'\n *      - 'description'\n *      - 'slug'\n * @return string term_id\n *\/","file":"class-wp-xmlrpc-server.php","line":1528,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[1529],"escape":[1532],"login":[1539],"__":[1545,1550,1559,1563,1572,1589],"taxonomy_exists":[1544],"get_taxonomy":[1547],"current_user_can":[1549],"trim":[1557],"get_term":[1566],"get_error_message":[1569,1586],"is_wp_error":[1568,1585],"wp_insert_term":[1583],"strval":[1591]},"used_by":[]},"wp_xmlrpc_server::wp_editTerm":{"doc":"\/**\n * Edit a term.\n *\n * @since 3.4.0\n *\n * @uses wp_update_term()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - string  $term_id\n *  - array   $content_struct\n *      The $content_struct must contain:\n *      - 'taxonomy'\n *      Also, it can optionally contain:\n *      - 'name'\n *      - 'parent'\n *      - 'description'\n *      - 'slug'\n * @return bool True, on success.\n *\/","file":"class-wp-xmlrpc-server.php","line":1615,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[1616],"escape":[1619],"login":[1627],"__":[1633,1638,1651,1657,1662,1671,1688],"taxonomy_exists":[1632],"get_taxonomy":[1635],"current_user_can":[1637],"get_term":[1645,1665],"get_error_message":[1648,1668,1685],"is_wp_error":[1647,1667,1684],"trim":[1654],"wp_update_term":[1682]},"used_by":[]},"wp_update_term":{"doc":"\/**\n * Update term based on arguments provided.\n *\n * The $args will indiscriminately override all values with the same field name.\n * Care must be taken to not override important information need to update or\n * update will fail (or perhaps create a new term, neither would be acceptable).\n *\n * Defaults will set 'alias_of', 'description', 'parent', and 'slug' if not\n * defined in $args already.\n *\n * 'alias_of' will create a term group, if it doesn't already exist, and update\n * it for the $term.\n *\n * If the 'slug' argument in $args is missing, then the 'name' in $args will be\n * used. It should also be noted that if you set 'slug' and it isn't unique then\n * a WP_Error will be passed back. If you don't pass any slug, then a unique one\n * will be created for you.\n *\n * For what can be overrode in $args, check the term scheme can contain and stay\n * away from the term keys.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wpdb\n * @uses do_action() Will call both 'edit_term' and 'edit_$taxonomy' twice.\n * @uses apply_filters() Will call the 'term_id_filter' filter and pass the term\n *\tid and taxonomy id.\n *\n * @param int $term_id The ID of the term\n * @param string $taxonomy The context in which to relate the term to the object.\n * @param array|string $args Overwrite term field values\n * @return array|WP_Error Returns Term ID and Taxonomy Term ID\n *\/","file":"taxonomy.php","line":2349,"missingDoc":false,"filters":["'edit_terms'","'edited_terms'","'wp_update_term_parent'","'edit_terms'","'edited_terms'","'edit_term_taxonomy'","'edited_term_taxonomy'","'edit_term'","\"edit_{$taxonomy}\"","'term_id_filter'","'edited_term'","\"edited_{$taxonomy}\""],"uses":{"__":[2353,2379,2412],"taxonomy_exists":[2352],"get_term":[2358],"is_wp_error":[2360],"add_magic_quotes":[2364],"array_merge":[2367],"wp_parse_args":[2370],"sanitize_term":[2371],"extract":[2372],"stripslashes":[2375,2376],"trim":[2378],"sanitize_title":[2384,2417],"get_row":[2388],"prepare":[2388,2405,2422],"get_var":[2394,2405,2422],"update":[2396,2415,2418,2424],"compact":[2396,2402,2415,2415,2418,2418,2424],"array_keys":[2402],"wp_unique_term_slug":[2410],"sprintf":[2412],"clean_term_cache":[2432]},"used_by":{"wp_xmlrpc_server::wp_editTerm":[1682],"wp_update_nav_menu_object":[250],"wp_check_term_hierarchy_for_loops":[3298]}},"wp_xmlrpc_server::wp_deleteTerm":{"doc":"\/**\n * Delete a term.\n *\n * @since 3.4.0\n *\n * @uses wp_delete_term()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - string  $taxnomy_name\n *  - string     $term_id\n * @return boolean|IXR_Error If it suceeded true else a reason why not\n *\/","file":"class-wp-xmlrpc-server.php","line":1707,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[1708],"escape":[1711],"login":[1719],"__":[1725,1730,1738,1746],"taxonomy_exists":[1724],"get_taxonomy":[1727],"current_user_can":[1729],"get_term":[1732],"get_error_message":[1735,1743],"is_wp_error":[1734,1742],"wp_delete_term":[1740]},"used_by":[]},"wp_delete_term":{"doc":"\/**\n * Removes a term from the database.\n *\n * If the term is a parent of other terms, then the children will be updated to\n * that term's parent.\n *\n * The $args 'default' will only override the terms found, if there is only one\n * term found. Any other and the found terms are used.\n *\n * The $args 'force_default' will force the term supplied as default to be\n * assigned even if the object was not going to be termless\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wpdb\n * @uses do_action() Calls both 'delete_term' and 'delete_$taxonomy' action\n *\thooks, passing term object, term id. 'delete_term' gets an additional\n *\tparameter with the $taxonomy parameter.\n *\n * @param int $term Term ID\n * @param string $taxonomy Taxonomy Name\n * @param array|string $args Optional. Change 'default' term id and override found term ids.\n * @return bool|WP_Error Returns false if not term; true if completes delete action.\n *\/","file":"taxonomy.php","line":1763,"missingDoc":false,"filters":["'edit_term_taxonomies'","'edited_term_taxonomies'","'delete_term_taxonomy'","'deleted_term_taxonomy'","'delete_term'","\"delete_{$taxonomy}\""],"uses":{"term_exists":[1768,1788],"is_wp_error":[1770,1795],"get_option":[1778],"wp_parse_args":[1783],"extract":[1784],"get_term":[1794,1826],"get_col":[1799,1805],"update":[1801],"compact":[1801,1801],"is_taxonomy_hierarchical":[1793],"prepare":[1805,1833],"wp_get_object_terms":[1808],"array_diff":[1812],"array_merge":[1814],"count":[1809],"array_map":[1816],"wp_set_object_terms":[1817],"get_taxonomy":[1821],"clean_object_term_cache":[1823],"delete":[1829,1834],"get_var":[1833],"clean_term_cache":[1836]},"used_by":{"wp_xmlrpc_server::wp_deleteTerm":[1740],"wp_xmlrpc_server::wp_deleteCategory":[2659],"wp_delete_nav_menu":[189],"wp_delete_category":[1855]}},"wp_xmlrpc_server::wp_getTerm":{"doc":"\/**\n * Retrieve a term.\n *\n * @since 3.4.0\n *\n * @uses get_term()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - string  $taxonomy\n *  - string  $term_id\n * @return array contains:\n *  - 'term_id'\n *  - 'name'\n *  - 'slug'\n *  - 'term_group'\n *  - 'term_taxonomy_id'\n *  - 'taxonomy'\n *  - 'description'\n *  - 'parent'\n *  - 'count'\n *\/","file":"class-wp-xmlrpc-server.php","line":1774,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[1775],"escape":[1778],"login":[1786],"__":[1792,1797,1805],"taxonomy_exists":[1791],"get_taxonomy":[1794],"current_user_can":[1796],"get_term":[1799],"get_error_message":[1802],"is_wp_error":[1801],"_prepare_term":[1807]},"used_by":[]},"wp_xmlrpc_server::wp_getTerms":{"doc":"\/**\n * Retrieve all terms for a taxonomy.\n *\n * @since 3.4.0\n *\n * The optional $filter parameter modifies the query used to retrieve terms.\n * Accepted keys are 'number', 'offset', 'orderby', 'order', 'hide_empty', and 'search'.\n *\n * @uses get_terms()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - string  $taxonomy\n *  - array   $filter optional\n * @return array terms\n *\/","file":"class-wp-xmlrpc-server.php","line":1827,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[1828],"escape":[1831],"login":[1839],"__":[1845,1850],"taxonomy_exists":[1844],"get_taxonomy":[1847],"current_user_can":[1849],"absint":[1855,1858],"get_terms":[1875],"get_error_message":[1878],"is_wp_error":[1877],"_prepare_term":[1883]},"used_by":[]},"wp_xmlrpc_server::wp_getTaxonomy":{"doc":"\/**\n * Retrieve a taxonomy.\n *\n * @since 3.4.0\n *\n * @uses get_taxonomy()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - string  $taxonomy\n * @return array (@see get_taxonomy())\n *\/","file":"class-wp-xmlrpc-server.php","line":1902,"missingDoc":false,"filters":["'xmlrpc_default_taxonomy_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[1903],"escape":[1906],"login":[1918],"__":[1924,1929],"taxonomy_exists":[1923],"get_taxonomy":[1926],"current_user_can":[1928],"_prepare_taxonomy":[1931]},"used_by":[]},"wp_xmlrpc_server::wp_getTaxonomies":{"doc":"\/**\n * Retrieve all taxonomies.\n *\n * @since 3.4.0\n *\n * @uses get_taxonomies()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n * @return array taxonomies\n *\/","file":"class-wp-xmlrpc-server.php","line":1946,"missingDoc":false,"filters":["'xmlrpc_default_taxonomy_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[1947],"escape":[1950],"login":[1962],"get_taxonomies":[1967],"current_user_can":[1974],"_prepare_taxonomy":[1977]},"used_by":[]},"get_taxonomies":{"doc":"\/**\n * Get a list of registered taxonomy objects.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 3.0.0\n * @uses $wp_taxonomies\n * @see register_taxonomy\n *\n * @param array $args An array of key => value arguments to match against the taxonomy objects.\n * @param string $output The type of output to return, either taxonomy 'names' or 'objects'. 'names' is the default.\n * @param string $operator The logical operation to perform. 'or' means only one element\n *  from the array needs to match; 'and' means all elements must match. The default is 'and'.\n * @return array A list of taxonomy names or objects\n *\/","file":"taxonomy.php","line":138,"missingDoc":false,"filters":[],"uses":{"wp_filter_object_list":[143]},"used_by":{"wp_xmlrpc_server::wp_getTaxonomies":[1967],"WP_Widget_Tag_Cloud::form":[1071],"get_taxonomies_for_attachments":[902]}},"wp_xmlrpc_server::wp_getUser":{"doc":"\/**\n * Retrieve a user.\n *\n * The optional $fields parameter specifies what fields will be included\n * in the response array. This should be a list of field names. 'user_id' will\n * always be included in the response regardless of the value of $fields.\n *\n * Instead of, or in addition to, individual field names, conceptual group\n * names can be used to specify multiple fields. The available conceptual\n * groups are 'basic' and 'all'.\n *\n * @uses get_userdata()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - int     $user_id\n *  - array   $fields optional\n * @return array contains (based on $fields parameter):\n *  - 'user_id'\n *  - 'username'\n *  - 'first_name'\n *  - 'last_name'\n *  - 'registered'\n *  - 'bio'\n *  - 'email'\n *  - 'nickname'\n *  - 'nicename'\n *  - 'url'\n *  - 'display_name'\n *  - 'roles'\n *\/","file":"class-wp-xmlrpc-server.php","line":2015,"missingDoc":false,"filters":["'xmlrpc_default_user_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[2016],"escape":[2019],"login":[2031],"__":[2037,2042],"current_user_can":[2036],"get_userdata":[2039],"_prepare_user":[2044]},"used_by":[]},"wp_xmlrpc_server::wp_getUsers":{"doc":"\/**\n * Retrieve users.\n *\n * The optional $filter parameter modifies the query used to retrieve users.\n * Accepted keys are 'number' (default: 50), 'offset' (default: 0), 'role',\n * 'who', 'orderby', and 'order'.\n *\n * The optional $fields parameter specifies what fields will be included\n * in the response array.\n *\n * @uses get_users()\n * @see wp_getUser() for more on $fields and return values\n *\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - array   $filter optional\n *  - array   $fields optional\n * @return array users data\n *\/","file":"class-wp-xmlrpc-server.php","line":2068,"missingDoc":false,"filters":["'xmlrpc_default_user_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[2069],"escape":[2072],"login":[2084],"__":[2090,2106],"current_user_can":[2089,2119],"absint":[2094,2095],"get_role":[2105],"get_users":[2115],"_prepare_user":[2120]},"used_by":[]},"wp_xmlrpc_server::wp_getProfile":{"doc":"\/**\n * Retrieve information about the requesting user.\n *\n * @uses get_userdata()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - array   $fields optional\n * @return array (@see wp_getUser)\n *\/","file":"class-wp-xmlrpc-server.php","line":2136,"missingDoc":false,"filters":["'xmlrpc_default_user_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[2137],"escape":[2140],"login":[2151],"__":[2157],"current_user_can":[2156],"get_userdata":[2159],"_prepare_user":[2161]},"used_by":[]},"wp_xmlrpc_server::wp_editProfile":{"doc":"\/**\n * Edit user's profile.\n *\n * @uses wp_update_user()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - array   $content_struct\n *      It can optionally contain:\n *      - 'first_name'\n *      - 'last_name'\n *      - 'website'\n *      - 'display_name'\n *      - 'nickname'\n *      - 'nicename'\n *      - 'bio'\n * @return bool True, on success.\n *\/","file":"class-wp-xmlrpc-server.php","line":2183,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[2184],"escape":[2187],"login":[2194],"__":[2200,2234],"current_user_can":[2199],"wp_update_user":[2228],"get_error_message":[2231],"is_wp_error":[2230]},"used_by":[]},"wp_update_user":{"doc":"\/**\n * Update an user in the database.\n *\n * It is possible to update a user's password by specifying the 'user_pass'\n * value in the $userdata parameter array.\n *\n * If $userdata does not contain an 'ID' key, then a new user will be created\n * and the new user's ID will be returned.\n *\n * If current user's password is being updated, then the cookies will be\n * cleared.\n *\n * @since 2.0.0\n * @see wp_insert_user() For what fields can be set in $userdata\n * @uses wp_insert_user() Used to update existing user or add new one if user doesn't exist already\n *\n * @param mixed $userdata An array of user data or a user object of type stdClass or WP_User.\n * @return int|WP_Error The updated user's ID or a WP_Error object if the user could not be updated.\n *\/","file":"user.php","line":1445,"missingDoc":false,"filters":[],"uses":{"get_object_vars":[1447],"is_a":[1448,1446],"to_array":[1449,1458],"get_userdata":[1454],"__":[1456],"get_user_meta":[1462],"_get_additional_user_keys":[1461],"add_magic_quotes":[1466],"wp_hash_password":[1471],"wp_cache_delete":[1474],"array_merge":[1477],"wp_insert_user":[1478],"wp_get_current_user":[1481],"wp_clear_auth_cookie":[1484],"wp_set_auth_cookie":[1485]},"used_by":{"wp_xmlrpc_server::wp_editProfile":[2228]}},"wp_xmlrpc_server::wp_getPage":{"doc":"\/**\n * Retrieve page.\n *\n * @since 2.2.0\n *\n * @param array $args Method parameters. Contains:\n *  - blog_id\n *  - page_id\n *  - username\n *  - password\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":2251,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2252],"login":[2259],"get_post":[2263],"__":[2265,2268,2278],"current_user_can":[2267],"_prepare_page":[2274]},"used_by":[]},"wp_xmlrpc_server::wp_getPages":{"doc":"\/**\n * Retrieve Pages.\n *\n * @since 2.2.0\n *\n * @param array $args Method parameters. Contains:\n *  - blog_id\n *  - username\n *  - password\n *  - num_pages\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":2294,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2295],"login":[2302],"__":[2306],"current_user_can":[2305,2318],"get_posts":[2310],"count":[2311],"_prepare_page":[2319]},"used_by":[]},"wp_xmlrpc_server::wp_newPage":{"doc":"\/**\n * Create new page.\n *\n * @since 2.2.0\n *\n * @param array $args Method parameters. See {@link wp_xmlrpc_server::mw_newPost()}\n * @return unknown\n *\/","file":"class-wp-xmlrpc-server.php","line":2338,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2340,2341],"login":[2345],"mw_newPost":[2354]},"used_by":[]},"wp_xmlrpc_server::wp_deletePage":{"doc":"\/**\n * Delete page.\n *\n * @since 2.2.0\n *\n * @param array $args Method parameters.\n * @return bool True, if success.\n *\/","file":"class-wp-xmlrpc-server.php","line":2365,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_wp_deletePage'"],"uses":{"escape":[2366],"login":[2373],"get_post":[2380],"__":[2382,2386,2391],"current_user_can":[2385],"wp_delete_post":[2389]},"used_by":[]},"wp_xmlrpc_server::wp_editPage":{"doc":"\/**\n * Edit page.\n *\n * @since 2.2.0\n *\n * @param array $args Method parameters.\n * @return unknown\n *\/","file":"class-wp-xmlrpc-server.php","line":2406,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2409,2410,2411],"login":[2415],"get_post":[2421],"__":[2423,2427],"current_user_can":[2426],"mw_editPost":[2442]},"used_by":[]},"wp_xmlrpc_server::wp_getPageList":{"doc":"\/**\n * Retrieve page list.\n *\n * @since 2.2.0\n *\n * @param array $args Method parameters.\n * @return unknown\n *\/","file":"class-wp-xmlrpc-server.php","line":2453,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2456],"login":[2462],"__":[2466],"current_user_can":[2465],"get_results":[2471],"count":[2484],"_convert_date":[2486],"_convert_date_gmt":[2487]},"used_by":[]},"wp_xmlrpc_server::wp_getAuthors":{"doc":"\/**\n * Retrieve authors list.\n *\n * @since 2.2.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":2505,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2507],"login":[2513],"__":[2517],"current_user_can":[2516],"get_users":[2522]},"used_by":[]},"wp_xmlrpc_server::wp_getTags":{"doc":"\/**\n * Get list of all tags\n *\n * @since 2.7.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":2541,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2542],"login":[2548],"__":[2552],"current_user_can":[2551],"esc_html":[2564,2565],"get_tag_link":[2564],"get_tag_feed_link":[2565],"get_tags":[2558]},"used_by":[]},"get_tag_feed_link":{"doc":"\/**\n * Retrieve permalink for feed of tag.\n *\n * @since 2.3.0\n *\n * @param int $tag_id Tag ID.\n * @param string $feed Optional. Feed type.\n * @return string\n *\/","file":"link-template.php","line":640,"missingDoc":false,"filters":[],"uses":{"get_term_feed_link":[641]},"used_by":{"wp_xmlrpc_server::wp_getTags":[2565],"feed_links_extra":[1657]}},"wp_xmlrpc_server::wp_newCategory":{"doc":"\/**\n * Create new category.\n *\n * @since 2.2.0\n *\n * @param array $args Method parameters.\n * @return int Category ID.\n *\/","file":"class-wp-xmlrpc-server.php","line":2582,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_wp_newCategory'"],"uses":{"escape":[2583],"login":[2590],"__":[2597,2625,2627],"current_user_can":[2596],"wp_insert_category":[2620],"get_error_data":[2623],"get_error_code":[2622],"is_wp_error":[2621]},"used_by":[]},"wp_xmlrpc_server::wp_deleteCategory":{"doc":"\/**\n * Remove category.\n *\n * @since 2.5.0\n *\n * @param array $args Method parameters.\n * @return mixed See {@link wp_delete_term()} for return info.\n *\/","file":"class-wp-xmlrpc-server.php","line":2643,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_wp_deleteCategory'"],"uses":{"escape":[2644],"login":[2651],"__":[2657],"current_user_can":[2656],"wp_delete_term":[2659]},"used_by":[]},"wp_xmlrpc_server::wp_suggestCategories":{"doc":"\/**\n * Retrieve category list.\n *\n * @since 2.2.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":2675,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2676],"login":[2684],"__":[2688],"current_user_can":[2687],"get_categories":[2694]},"used_by":[]},"wp_xmlrpc_server::wp_getComment":{"doc":"\/**\n * Retrieve comment.\n *\n * @since 2.7.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":2712,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2713],"login":[2720],"__":[2724,2729],"current_user_can":[2723],"get_comment":[2728],"_prepare_comment":[2731]},"used_by":[]},"wp_xmlrpc_server::wp_getComments":{"doc":"\/**\n * Retrieve comments.\n *\n * Besides the common blog_id, username, and password arguments, it takes a filter\n * array as last argument.\n *\n * Accepted 'filter' keys are 'status', 'post_id', 'offset', and 'number'.\n *\n * The defaults are as follows:\n * - 'status' - Default is ''. Filter by status (e.g., 'approve', 'hold')\n * - 'post_id' - Default is ''. The post where the comment is posted. Empty string shows all comments.\n * - 'number' - Default is 10. Total number of media items to retrieve.\n * - 'offset' - Default is 0. See {@link WP_Query::query()} for more.\n *\n * @since 2.7.0\n *\n * @param array $args Method parameters.\n * @return array. Contains a collection of comments. See {@link wp_xmlrpc_server::wp_getComment()} for a description of each item contents\n *\/","file":"class-wp-xmlrpc-server.php","line":2753,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[2754],"login":[2761],"__":[2765],"current_user_can":[2764],"absint":[2776,2780,2784],"get_comments":[2786],"_prepare_comment":[2791]},"used_by":[]},"get_comments":{"doc":"\/**\n * Retrieve a list of comments.\n *\n * The comment list can be for the blog as a whole or for an individual post.\n *\n * The list of comment arguments are 'status', 'orderby', 'comment_date_gmt',\n * 'order', 'number', 'offset', and 'post_id'.\n *\n * @since 2.7.0\n * @uses $wpdb\n *\n * @param mixed $args Optional. Array or string of options to override defaults.\n * @return array List of comments.\n *\/","file":"comment.php","line":182,"missingDoc":false,"filters":[],"uses":{"query":[184]},"used_by":{"wp_xmlrpc_server::wp_getComments":[2786],"comments_template":[885],"WP_Widget_Recent_Comments::widget":[682]}},"wp_xmlrpc_server::wp_deleteComment":{"doc":"\/**\n * Delete a comment.\n *\n * By default, the comment will be moved to the trash instead of deleted.\n * See {@link wp_delete_comment()} for more information on\n * this behavior.\n *\n * @since 2.7.0\n *\n * @param array $args Method parameters. Contains:\n *  - blog_id\n *  - username\n *  - password\n *  - comment_id\n * @return mixed {@link wp_delete_comment()}\n *\/","file":"class-wp-xmlrpc-server.php","line":2813,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_wp_deleteComment'"],"uses":{"escape":[2814],"login":[2821],"__":[2825,2828,2831],"current_user_can":[2824,2830],"get_comment":[2827],"wp_delete_comment":[2835]},"used_by":[]},"wp_delete_comment":{"doc":"\/**\n * Trashes or deletes a comment.\n *\n * The comment is moved to trash instead of permanently deleted unless trash is\n * disabled, item is already in the trash, or $force_delete is true.\n *\n * The post comment count will be updated if the comment was approved and has a\n * post ID available.\n *\n * @since 2.0.0\n * @uses $wpdb\n * @uses do_action() Calls 'delete_comment' hook on comment ID\n * @uses do_action() Calls 'deleted_comment' hook on comment ID after deletion, on success\n * @uses do_action() Calls 'wp_set_comment_status' hook on comment ID with 'delete' set for the second parameter\n * @uses wp_transition_comment_status() Passes new and old comment status along with $comment object\n *\n * @param int $comment_id Comment ID\n * @param bool $force_delete Whether to bypass trash and force deletion. Default is false.\n * @return bool False if delete comment query failure, true on success.\n *\/","file":"comment.php","line":997,"missingDoc":false,"filters":["'delete_comment'","'deleted_comment'","'wp_set_comment_status'"],"uses":{"get_comment":[999],"wp_trash_comment":[1003],"in_array":[1002],"wp_get_comment_status":[1002],"get_col":[1008,1015],"prepare":[1008,1015],"update":[1010],"clean_comment_cache":[1011,1027],"delete_metadata_by_mid":[1017],"delete":[1019],"wp_update_comment_count":[1025],"wp_transition_comment_status":[1030]},"used_by":{"wp_xmlrpc_server::wp_deleteComment":[2835],"wp_trash_comment":[1049],"wp_scheduled_delete":[3506],"wp_delete_post":[2360],"wp_delete_attachment":[4113]}},"wp_xmlrpc_server::wp_editComment":{"doc":"\/**\n * Edit comment.\n *\n * Besides the common blog_id, username, and password arguments, it takes a\n * comment_id integer and a content_struct array as last argument.\n *\n * The allowed keys in the content_struct array are:\n *  - 'author'\n *  - 'author_url'\n *  - 'author_email'\n *  - 'content'\n *  - 'date_created_gmt'\n *  - 'status'. Common statuses are 'approve', 'hold', 'spam'. See {@link get_comment_statuses()} for more details\n *\n * @since 2.7.0\n *\n * @param array $args. Contains:\n *  - blog_id\n *  - username\n *  - password\n *  - comment_id\n *  - content_struct\n * @return bool True, on success.\n *\/","file":"class-wp-xmlrpc-server.php","line":2867,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_wp_editComment'"],"uses":{"escape":[2868],"login":[2876],"__":[2880,2883,2886,2895,2927],"current_user_can":[2879,2885],"get_comment":[2882],"get_comment_statuses":[2891],"array_keys":[2892],"in_array":[2894],"rtrim":[2902],"getIso":[2902],"get_date_from_gmt":[2903],"iso8601_to_datetime":[2903,2904],"compact":[2920],"wp_update_comment":[2922],"get_error_message":[2924],"is_wp_error":[2923]},"used_by":[]},"get_comment_statuses":{"doc":"\/**\n * Retrieve all of the WordPress supported comment statuses.\n *\n * Comments have a limited set of valid status values, this provides the comment\n * status values and descriptions.\n *\n * @package WordPress\n * @subpackage Post\n * @since 2.7.0\n *\n * @return array List of comment statuses.\n *\/","file":"comment.php","line":418,"missingDoc":false,"filters":[],"uses":{"__":[420],"_x":[422,424]},"used_by":{"wp_xmlrpc_server::wp_editComment":[2891],"wp_xmlrpc_server::wp_getCommentStatusList":[3044]}},"wp_update_comment":{"doc":"\/**\n * Updates an existing comment in the database.\n *\n * Filters the comment and makes sure certain fields are valid before updating.\n *\n * @since 2.0.0\n * @uses $wpdb\n * @uses wp_transition_comment_status() Passes new and old comment status along with $comment object\n *\n * @param array $commentarr Contains information on the comment.\n * @return int Comment was updated if value is 1, or was not updated if value is 0.\n *\/","file":"comment.php","line":1491,"missingDoc":false,"filters":["'comment_save_pre'","'edit_comment'"],"uses":{"get_comment":[1495,1527],"esc_sql":[1498],"array_merge":[1503],"wp_filter_comment":[1505],"extract":[1508],"stripslashes_deep":[1508],"get_gmt_from_date":[1512],"compact":[1521,1522],"update":[1522],"clean_comment_cache":[1524],"wp_update_comment_count":[1525],"wp_transition_comment_status":[1528]},"used_by":{"wp_xmlrpc_server::wp_editComment":[2922]}},"wp_xmlrpc_server::wp_newComment":{"doc":"\/**\n * Create new comment.\n *\n * @since 2.7.0\n *\n * @param array $args Method parameters.\n * @return mixed {@link wp_new_comment()}\n *\/","file":"class-wp-xmlrpc-server.php","line":2942,"missingDoc":false,"filters":["'xmlrpc_allow_anonymous_comments'","'xmlrpc_call'","'xmlrpc_call_success_wp_newComment'"],"uses":{"escape":[2945,2981,2982,2983],"login":[2955],"__":[2960,2973,2976,3002,3004],"get_option":[2959,3000],"absint":[2968,3008],"url_to_postid":[2970],"is_numeric":[2967],"get_post":[2975],"is_email":[3003],"strlen":[3001],"wp_new_comment":[3014]},"used_by":[]},"url_to_postid":{"doc":"\/**\n * Examine a url and try to determine the post ID it represents.\n *\n * Checks are supposedly from the hosted site blog.\n *\n * @since 1.0.0\n *\n * @param string $url Permalink to check.\n * @return int Post ID, or 0 on failure.\n *\/","file":"rewrite.php","line":281,"missingDoc":false,"filters":["'url_to_postid'"],"uses":{"absint":[288],"preg_match":[287,346,344],"wp_rewrite_rules":[294],"explode":[301,305],"str_replace":[310,314,318,322,327],"strpos":[309,309,313,320,341],"home_url":[309,313,322,325,320],"using_index_permalinks":[317],"parse_url":[325],"trim":[331],"get_page_by_path":[348],"preg_replace":[354],"addslashes":[357],"parse_str":[361],"in_array":[364]},"used_by":{"wp_xmlrpc_server::wp_newComment":[2970],"wp_xmlrpc_server::pingback_ping":[5321,5364],"wp_xmlrpc_server::pingback_extensions_getPingbacks":[5473],"pingback":[1840],"is_local_attachment":[3858]}},"is_email":{"doc":"\/**\n * Verifies that an email is valid.\n *\n * Does not grok i18n domains. Not RFC compliant.\n *\n * @since 0.71\n *\n * @param string $email Email address to verify.\n * @param boolean $deprecated Deprecated.\n * @return string|bool Either false or the valid email address.\n *\/","file":"formatting.php","line":1790,"missingDoc":false,"filters":["'is_email'","'is_email'","'is_email'","'is_email'","'is_email'","'is_email'","'is_email'","'is_email'","'is_email'"],"uses":{"_deprecated_argument":[1792],"strlen":[1795],"strpos":[1800],"explode":[1805,1825],"preg_match":[1809,1815,1840],"trim":[1820,1835],"count":[1828]},"used_by":{"wp_xmlrpc_server::wp_newComment":[3003],"sanitize_option":[2762],"validate_email":[138],"wpmu_validate_user_signup":[471],"newblog_notify_siteadmin":[1017],"newuser_notify_siteadmin":[1056],"get_user_id_from_string":[1337]}},"wp_new_comment":{"doc":"\/**\n * Adds a new comment to the database.\n *\n * Filters new comment to ensure that the fields are sanitized and valid before\n * inserting comment into database. Calls 'comment_post' action with comment ID\n * and whether comment is approved by WordPress. Also has 'preprocess_comment'\n * filter for processing the comment data before the function handles it.\n *\n * We use REMOTE_ADDR here directly. If you are behind a proxy, you should ensure\n * that it is properly set, such as in wp-config.php, for your environment.\n * See {@link http:\/\/core.trac.wordpress.org\/ticket\/9235}\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'preprocess_comment' hook on $commentdata parameter array before processing\n * @uses do_action() Calls 'comment_post' hook on $comment_ID returned from adding the comment and if the comment was approved.\n * @uses wp_filter_comment() Used to filter comment before adding comment.\n * @uses wp_allow_comment() checks to see if comment is approved.\n * @uses wp_insert_comment() Does the actual comment insertion to the database.\n *\n * @param array $commentdata Contains information on the comment.\n * @return int The ID of the comment after adding.\n *\/","file":"comment.php","line":1377,"missingDoc":false,"filters":["'preprocess_comment'","'comment_post'"],"uses":{"absint":[1386],"wp_get_comment_status":[1387],"preg_replace":[1390],"substr":[1391],"current_time":[1393,1394],"wp_filter_comment":[1396],"wp_allow_comment":[1398],"wp_insert_comment":[1400],"wp_notify_moderator":[1406],"get_post":[1408],"wp_notify_postauthor":[1411],"get_option":[1410]},"used_by":{"wp_xmlrpc_server::wp_newComment":[3014],"wp_xmlrpc_server::pingback_ping":[5447]}},"wp_xmlrpc_server::wp_getCommentStatusList":{"doc":"\/**\n * Retrieve all of the comment status.\n *\n * @since 2.7.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3029,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3030],"login":[3036],"__":[3040],"current_user_can":[3039],"get_comment_statuses":[3044]},"used_by":[]},"wp_xmlrpc_server::wp_getCommentCount":{"doc":"\/**\n * Retrieve comment count.\n *\n * @since 2.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3055,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3056],"login":[3063],"__":[3067],"current_user_can":[3066],"wp_count_comments":[3071]},"used_by":[]},"wp_xmlrpc_server::wp_getPostStatusList":{"doc":"\/**\n * Retrieve post statuses.\n *\n * @since 2.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3088,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3089],"login":[3095],"__":[3099],"current_user_can":[3098],"get_post_statuses":[3103]},"used_by":[]},"get_post_statuses":{"doc":"\/**\n * Retrieve all of the WordPress supported post statuses.\n *\n * Posts have a limited set of valid status values, this provides the\n * post_status values and descriptions.\n *\n * @since 2.5.0\n *\n * @return array List of post statuses.\n *\/","file":"post.php","line":864,"missingDoc":false,"filters":[],"uses":{"__":[866,867,868,869]},"used_by":{"wp_xmlrpc_server::wp_getPostStatusList":[3103]}},"wp_xmlrpc_server::wp_getPageStatusList":{"doc":"\/**\n * Retrieve page statuses.\n *\n * @since 2.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3114,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3115],"login":[3121],"__":[3125],"current_user_can":[3124],"get_page_statuses":[3129]},"used_by":[]},"get_page_statuses":{"doc":"\/**\n * Retrieve all of the WordPress support page statuses.\n *\n * Pages have a limited set of valid status values, this provides the\n * post_status values and descriptions.\n *\n * @since 2.5.0\n *\n * @return array List of page statuses.\n *\/","file":"post.php","line":885,"missingDoc":false,"filters":[],"uses":{"__":[887,888,889]},"used_by":{"wp_xmlrpc_server::wp_getPageStatusList":[3129]}},"wp_xmlrpc_server::wp_getPageTemplates":{"doc":"\/**\n * Retrieve page templates.\n *\n * @since 2.6.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3140,"missingDoc":false,"filters":[],"uses":{"escape":[3141],"login":[3147],"__":[3151],"current_user_can":[3150],"get_page_templates":[3153]},"used_by":[]},"wp_xmlrpc_server::wp_getOptions":{"doc":"\/**\n * Retrieve blog options.\n *\n * @since 2.6.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3167,"missingDoc":false,"filters":[],"uses":{"escape":[3168],"login":[3175],"array_keys":[3180],"count":[3179],"_getOptions":[3182]},"used_by":[]},"wp_xmlrpc_server::_getOptions":{"doc":"\/**\n * Retrieve blog options value from list.\n *\n * @since 2.6.0\n *\n * @param array $options Options to retrieve.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3193,"missingDoc":false,"filters":[],"uses":{"get_option":[3200],"array_key_exists":[3196]},"used_by":[]},"wp_xmlrpc_server::wp_setOptions":{"doc":"\/**\n * Update blog options.\n *\n * @since 2.6.0\n *\n * @param array $args Method parameters.\n * @return unknown\n *\/","file":"class-wp-xmlrpc-server.php","line":3217,"missingDoc":false,"filters":[],"uses":{"escape":[3218],"login":[3225],"__":[3229],"current_user_can":[3228],"array_key_exists":[3233],"update_option":[3239],"_getOptions":[3243]},"used_by":[]},"wp_xmlrpc_server::wp_getMediaItem":{"doc":"\/**\n * Retrieve a media item by ID\n *\n * @since 3.1.0\n *\n * @param array $args Method parameters. Contains:\n *  - blog_id\n *  - username\n *  - password\n *  - attachment_id\n * @return array. Associative array containing:\n *  - 'date_created_gmt'\n *  - 'parent'\n *  - 'link'\n *  - 'thumbnail'\n *  - 'title'\n *  - 'caption'\n *  - 'description'\n *  - 'metadata'\n *\/","file":"class-wp-xmlrpc-server.php","line":3266,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3267],"login":[3274],"__":[3278,3283],"current_user_can":[3277],"get_post":[3282],"_prepare_media_item":[3285]},"used_by":[]},"wp_xmlrpc_server::wp_getMediaLibrary":{"doc":"\/**\n * Retrieves a collection of media library items (or attachments)\n *\n * Besides the common blog_id, username, and password arguments, it takes a filter\n * array as last argument.\n *\n * Accepted 'filter' keys are 'parent_id', 'mime_type', 'offset', and 'number'.\n *\n * The defaults are as follows:\n * - 'number' - Default is 5. Total number of media items to retrieve.\n * - 'offset' - Default is 0. See {@link WP_Query::query()} for more.\n * - 'parent_id' - Default is ''. The post where the media item is attached. Empty string shows all media items. 0 shows unattached media items.\n * - 'mime_type' - Default is ''. Filter by mime type (e.g., 'image\/jpeg', 'application\/pdf')\n *\n * @since 3.1.0\n *\n * @param array $args Method parameters. Contains:\n *  - blog_id\n *  - username\n *  - password\n *  - filter\n * @return array. Contains a collection of media items. See {@link wp_xmlrpc_server::wp_getMediaItem()} for a description of each item contents\n *\/","file":"class-wp-xmlrpc-server.php","line":3311,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3312],"login":[3319],"__":[3323],"current_user_can":[3322],"absint":[3327,3329,3330],"get_posts":[3332],"_prepare_media_item":[3337]},"used_by":[]},"wp_xmlrpc_server::wp_getPostFormats":{"doc":"\/**\n * Retrieves a list of post formats used by the site\n *\n * @since 3.1\n *\n * @param array $args Method parameters. Contains:\n *  - blog_id\n *  - username\n *  - password\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3353,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3354],"login":[3360],"__":[3364],"current_user_can":[3363],"get_post_format_strings":[3368],"get_theme_support":[3374],"current_theme_supports":[3373],"is_array":[3371]},"used_by":[]},"get_post_format_strings":{"doc":"\/**\n * Returns an array of post format slugs to their translated and pretty display versions\n *\n * @since 3.1.0\n *\n * @return array The array of translations\n *\/","file":"post.php","line":5323,"missingDoc":false,"filters":[],"uses":{"_x":[5325,5326,5327,5328,5329,5330,5331,5332,5333,5334]},"used_by":{"wp_xmlrpc_server::wp_getPostFormats":[3368],"wp_xmlrpc_server::mw_newPost":[4091],"wp_xmlrpc_server::mw_editPost":[4389],"get_post_format_slugs":[5347],"get_post_format_string":[5360]}},"wp_xmlrpc_server::wp_getPostType":{"doc":"\/**\n * Retrieves a post type\n *\n * @since 3.4.0\n *\n * @uses get_post_type_object()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - string  $post_type_name\n *  - array   $fields\n * @return array contains:\n *  - 'labels'\n *  - 'description'\n *  - 'capability_type'\n *  - 'cap'\n *  - 'map_meta_cap'\n *  - 'hierarchical'\n *  - 'menu_position'\n *  - 'taxonomies'\n *  - 'supports'\n *\/","file":"class-wp-xmlrpc-server.php","line":3410,"missingDoc":false,"filters":["'xmlrpc_default_posttype_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[3411],"escape":[3414],"login":[3426],"__":[3432,3437],"post_type_exists":[3431],"get_post_type_object":[3434],"current_user_can":[3436],"_prepare_post_type":[3439]},"used_by":[]},"post_type_exists":{"doc":"\/**\n * Checks if a post type is registered.\n *\n * @since 3.0.0\n * @uses get_post_type_object()\n *\n * @param string $post_type Post type name\n * @return bool Whether post type is registered.\n *\/","file":"post.php","line":1060,"missingDoc":false,"filters":[],"uses":{"get_post_type_object":[1061]},"used_by":{"wp_xmlrpc_server::wp_getPostType":[3431],"is_post_type_hierarchical":[1044],"get_ancestors":[3239]}},"wp_xmlrpc_server::wp_getPostTypes":{"doc":"\/**\n * Retrieves a post types\n *\n * @since 3.4.0\n *\n * @uses get_post_types()\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - array   $filter\n *  - array   $fields\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3456,"missingDoc":false,"filters":["'xmlrpc_default_posttype_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[3457],"escape":[3460],"login":[3472],"get_post_types":[3477],"current_user_can":[3482],"_prepare_post_type":[3485]},"used_by":[]},"wp_xmlrpc_server::wp_getRevisions":{"doc":"\/**\n * Retrieve revisions for a specific post.\n *\n * @since 3.5.0\n *\n * The optional $fields parameter specifies what fields will be included\n * in the response array.\n *\n * @uses wp_get_post_revisions()\n * @see wp_getPost() for more on $fields\n *\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - int     $post_id\n *  - array   $fields\n * @return array contains a collection of posts.\n *\/","file":"class-wp-xmlrpc-server.php","line":3510,"missingDoc":false,"filters":["'xmlrpc_default_revision_fields'","'xmlrpc_call'"],"uses":{"minimum_args":[3511],"escape":[3514],"login":[3526],"__":[3532,3535,3539],"get_post":[3531],"current_user_can":[3534,3549],"post_type_supports":[3538],"wp_get_post_revisions":[3541],"wp_is_post_autosave":[3553],"_prepare_post":[3556],"get_object_vars":[3556]},"used_by":[]},"wp_get_post_revisions":{"doc":"\/**\n * Returns all revisions of specified post.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @uses get_children()\n *\n * @param int|object $post_id Post ID or post object\n * @return array empty if no revisions\n *\/","file":"post.php","line":5211,"missingDoc":false,"filters":[],"uses":{"get_post":[5214],"wp_parse_args":[5218],"array_merge":[5219],"get_children":[5221]},"used_by":{"wp_xmlrpc_server::wp_getRevisions":[3541],"wp_list_post_revisions":[1368],"wp_save_post_revision":[4950]}},"wp_is_post_autosave":{"doc":"\/**\n * Determines if the specified post is an autosave.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @param int|object $post Post ID or post object.\n * @return bool|int False if not a revision, ID of autosave's parent otherwise\n *\/","file":"post.php","line":5046,"missingDoc":false,"filters":[],"uses":{"wp_get_post_revision":[5047]},"used_by":{"wp_xmlrpc_server::wp_getRevisions":[3553],"wp_xmlrpc_server::wp_restoreRevision":[3595],"wp_post_revision_title":[1316],"wp_list_post_revisions":[1385]}},"wp_xmlrpc_server::wp_restoreRevision":{"doc":"\/**\n * Restore a post revision\n *\n * @since 3.5.0\n *\n * @uses wp_restore_post_revision()\n *\n * @param array $args Method parameters. Contains:\n *  - int     $blog_id\n *  - string  $username\n *  - string  $password\n *  - int     $post_id\n * @return bool false if there was an error restoring, true if success.\n *\/","file":"class-wp-xmlrpc-server.php","line":3576,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"minimum_args":[3577],"escape":[3580],"login":[3587],"__":[3593,3596,3599,3602,3606],"wp_get_post_revision":[3592],"wp_is_post_autosave":[3595],"get_post":[3598],"current_user_can":[3601],"post_type_supports":[3605],"wp_restore_post_revision":[3608]},"used_by":[]},"wp_get_post_revision":{"doc":"\/**\n * Gets a post revision.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @uses get_post()\n *\n * @param int|object $post Post ID or post object\n * @param string $output Optional. OBJECT, ARRAY_A, or ARRAY_N.\n * @param string $filter Optional sanitation filter. @see sanitize_post()\n * @return mixed Null if error or post object if success\n *\/","file":"post.php","line":5104,"missingDoc":false,"filters":[],"uses":{"get_post":[5106],"get_object_vars":[5114,5117],"array_values":[5117]},"used_by":{"wp_xmlrpc_server::wp_restoreRevision":[3592],"wp_is_post_revision":[5031],"wp_is_post_autosave":[5047],"wp_restore_post_revision":[5143],"wp_delete_post_revision":[5186]}},"wp_restore_post_revision":{"doc":"\/**\n * Restores a post to the specified revision.\n *\n * Can restore a past revision using all fields of the post revision, or only selected fields.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @uses wp_get_post_revision()\n * @uses wp_update_post()\n * @uses do_action() Calls 'wp_restore_post_revision' on post ID and revision ID if wp_update_post()\n *  is successful.\n *\n * @param int|object $revision_id Revision ID or revision object.\n * @param array $fields Optional. What fields to restore from. Defaults to all.\n * @return mixed Null if error, false if no fields to restore, (int) post ID if success.\n *\/","file":"post.php","line":5142,"missingDoc":false,"filters":["'wp_restore_post_revision'"],"uses":{"wp_get_post_revision":[5143],"array_keys":[5147,5150],"_wp_post_revision_fields":[5147],"is_array":[5146],"array_intersect":[5150],"add_magic_quotes":[5158],"wp_update_post":[5160],"is_wp_error":[5161]},"used_by":{"wp_xmlrpc_server::wp_restoreRevision":[3608]}},"wp_xmlrpc_server::blogger_getUsersBlogs":{"doc":"\/**\n * Retrieve blogs that user owns.\n *\n * Will make more sense once we support multiple blogs.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3627,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"_multisite_getUsersBlogs":[3629],"is_multisite":[3628],"escape":[3631],"login":[3636],"current_user_can":[3641],"get_option":[3645,3647],"site_url":[3648]},"used_by":[]},"wp_xmlrpc_server::_multisite_getUsersBlogs":{"doc":"\/**\n * Private function for retrieving a users blogs for multisite setups\n *\n * @access protected\n *\/","file":"class-wp-xmlrpc-server.php","line":3659,"missingDoc":false,"filters":[],"uses":{"get_blog_details":[3660],"set_url_scheme":[3665],"query":[3666],"getResponse":[3667],"strpos":[3676]},"used_by":[]},"get_blog_details":{"doc":"\/**\n * Retrieve the details for a blog from the blogs table and blog options.\n *\n * @since MU\n *\n * @param int|string|array $fields A blog ID, a blog slug, or an array of fields to query against. Optional. If not specified the current blog ID is used.\n * @param bool $get_all Whether to retrieve all details or only the details in the blogs table. Default is true.\n * @return object Blog details.\n *\/","file":"ms-blogs.php","line":125,"missingDoc":false,"filters":["'blog_details'"],"uses":{"md5":[132,149,241],"wp_cache_get":[133,150,180,198,200],"substr":[137,136,154,153],"get_row":[138,140,155,157,218],"prepare":[138,140,155,157,218],"wp_cache_set":[143,160,221,227,239,242],"is_subdomain_install":[148],"get_current_blog_id":[170],"is_numeric":[171],"get_id_from_blogname":[172],"is_array":[128],"wp_cache_delete":[188,208],"is_object":[183,203],"switch_to_blog":[231],"get_option":[232,233,234],"restore_current_blog":[235]},"used_by":{"wp_xmlrpc_server::_multisite_getUsersBlogs":[3660],"get_blogaddress_by_id":[33],"refresh_blog_details":[256],"update_blog_details":[281],"get_blog_status":[706],"get_active_blog_for_user":[84,86,102],"add_user_to_blog":[190],"get_dashboard_blog":[1789,1791],"ms_site_check":[74],"__main":[55,76,101],"wp_authenticate_username_password":[99],"get_blogs_of_user":[712,741]}},"wp_xmlrpc_server::blogger_getUserInfo":{"doc":"\/**\n * Retrieve user's data.\n *\n * Gives your client some info about you, so you don't have to.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3693,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3695],"login":[3700],"__":[3704],"current_user_can":[3703]},"used_by":[]},"wp_xmlrpc_server::blogger_getPost":{"doc":"\/**\n * Retrieve post.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3727,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3729],"login":[3735],"get_post":[3738],"__":[3740,3743],"current_user_can":[3742],"implode":[3747],"wp_get_post_categories":[3747],"stripslashes":[3749,3751],"_convert_date":[3755]},"used_by":[]},"wp_xmlrpc_server::blogger_getRecentPosts":{"doc":"\/**\n * Retrieve list of recent posts.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":3771,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[3773],"absint":[3780],"login":[3784],"wp_get_recent_posts":[3789],"__":[3792],"current_user_can":[3797],"_convert_date":[3800],"implode":[3801],"wp_get_post_categories":[3801],"stripslashes":[3803,3805],"count":[3817],"array_push":[3818]},"used_by":[]},"wp_xmlrpc_server::blogger_getTemplate":{"doc":"\/**\n * Deprecated.\n *\n * @since 1.5.0\n * @deprecated 3.5.0\n *\/","file":"class-wp-xmlrpc-server.php","line":3830,"missingDoc":false,"filters":[],"uses":{"__":[3831]},"used_by":[]},"wp_xmlrpc_server::blogger_setTemplate":{"doc":"\/**\n * Deprecated.\n *\n * @since 1.5.0\n * @deprecated 3.5.0\n *\/","file":"class-wp-xmlrpc-server.php","line":3840,"missingDoc":false,"filters":[],"uses":{"__":[3841]},"used_by":[]},"wp_xmlrpc_server::blogger_newPost":{"doc":"\/**\n * Create new post.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return int\n *\/","file":"class-wp-xmlrpc-server.php","line":3852,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_blogger_newPost'"],"uses":{"escape":[3854],"login":[3862],"__":[3869,3889],"current_user_can":[3868,3868],"get_post_type_object":[3868],"xmlrpc_getposttitle":[3875],"xmlrpc_getpostcategory":[3876],"xmlrpc_removepostdata":[3877],"current_time":[3879,3880],"compact":[3882],"wp_insert_post":[3884],"get_error_message":[3886],"is_wp_error":[3885],"attach_uploads":[3891]},"used_by":[]},"xmlrpc_getposttitle":{"doc":"\/**\n * Retrieve post title from XMLRPC XML.\n *\n * If the title element is not part of the XML, then the default post title from\n * the $post_default_title will be used instead.\n *\n * @package WordPress\n * @subpackage XMLRPC\n * @since 0.71\n *\n * @global string $post_default_title Default XMLRPC post title.\n *\n * @param string $content XMLRPC XML Request content\n * @return string Post title\n *\/","file":"functions.php","line":341,"missingDoc":false,"filters":[],"uses":{"preg_match":[343]},"used_by":{"wp_xmlrpc_server::blogger_newPost":[3875],"wp_xmlrpc_server::blogger_editPost":[3936]}},"xmlrpc_getpostcategory":{"doc":"\/**\n * Retrieve the post category or categories from XMLRPC XML.\n *\n * If the category element is not found, then the default post category will be\n * used. The return type then would be what $post_default_category. If the\n * category is found, then it will always be an array.\n *\n * @package WordPress\n * @subpackage XMLRPC\n * @since 0.71\n *\n * @global string $post_default_category Default XMLRPC post category.\n *\n * @param string $content XMLRPC XML Request content\n * @return string|array List of categories or category name.\n *\/","file":"functions.php","line":367,"missingDoc":false,"filters":[],"uses":{"trim":[370],"explode":[371],"preg_match":[369]},"used_by":{"wp_xmlrpc_server::blogger_newPost":[3876],"wp_xmlrpc_server::blogger_editPost":[3937]}},"xmlrpc_removepostdata":{"doc":"\/**\n * XMLRPC XML content without title and category elements.\n *\n * @package WordPress\n * @subpackage XMLRPC\n * @since 0.71\n *\n * @param string $content XMLRPC XML Request content\n * @return string XMLRPC XML Request content without title and category elements.\n *\/","file":"functions.php","line":388,"missingDoc":false,"filters":[],"uses":{"preg_replace":[389,390],"trim":[391]},"used_by":{"wp_xmlrpc_server::blogger_newPost":[3877],"wp_xmlrpc_server::blogger_editPost":[3938]}},"current_time":{"doc":"\/**\n * Retrieve the current time based on specified type.\n *\n * The 'mysql' type will return the time in the format for MySQL DATETIME field.\n * The 'timestamp' type will return the current timestamp.\n *\n * If $gmt is set to either '1' or 'true', then both types will use GMT time.\n * if $gmt is false, the output is adjusted with the GMT offset in the WordPress option.\n *\n * @since 1.0.0\n *\n * @param string $type Either 'mysql' or 'timestamp'.\n * @param int|bool $gmt Optional. Whether to use GMT timezone. Default is false.\n * @return int|string String if $type is 'gmt', int if $type is 'timestamp'.\n *\/","file":"functions.php","line":59,"missingDoc":false,"filters":[],"uses":{"gmdate":[62,62],"time":[62,65,65],"get_option":[62,65]},"used_by":{"wp_xmlrpc_server::blogger_newPost":[3879,3880],"wp_xmlrpc_server::mw_newPost":[4243,4244],"wp_insert_comment":[1268],"wp_new_comment":[1393,1394],"date_i18n":[90],"wp_upload_dir":[1597],"get_calendar":[1124,1125,1242,1242,1242],"get_year_link":[341],"get_month_link":[363,365],"get_day_link":[389,391,393],"wpmu_update_blogs_date":[19],"update_blog_details":[288],"update_blog_status":[675],"wpmu_validate_user_signup":[493,507],"wpmu_validate_blog_signup":[612],"wpmu_signup_blog":[652],"wpmu_signup_user":[688],"wpmu_activate_signup":[861],"insert_blog":[1110],"wpmu_log_new_registrations":[1513],"wp_insert_post":[2788,2810,2811],"wp_update_post":[2999],"wp_insert_attachment":[3961,3963],"WP_Query::get_posts":[2715]}},"wp_xmlrpc_server::blogger_editPost":{"doc":"\/**\n * Edit a post.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return bool true when done.\n *\/","file":"class-wp-xmlrpc-server.php","line":3906,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_blogger_editPost'"],"uses":{"escape":[3908,3926],"login":[3916],"get_post":[3921],"__":[3924,3929,3934,3945],"current_user_can":[3928,3933],"extract":[3931],"xmlrpc_getposttitle":[3936],"xmlrpc_getpostcategory":[3937],"xmlrpc_removepostdata":[3938],"compact":[3940],"wp_update_post":[3942],"attach_uploads":[3947]},"used_by":[]},"wp_xmlrpc_server::blogger_deletePost":{"doc":"\/**\n * Remove a post.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return bool True when post is deleted.\n *\/","file":"class-wp-xmlrpc-server.php","line":3962,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_blogger_deletePost'"],"uses":{"escape":[3963],"login":[3970],"get_post":[3975],"__":[3978,3981,3986],"current_user_can":[3980],"wp_delete_post":[3983]},"used_by":[]},"wp_xmlrpc_server::mw_newPost":{"doc":"\/**\n * Create a new post.\n *\n * The 'content_struct' argument must contain:\n *  - title\n *  - description\n *  - mt_excerpt\n *  - mt_text_more\n *  - mt_keywords\n *  - mt_tb_ping_urls\n *  - categories\n *\n * Also, it can optionally contain:\n *  - wp_slug\n *  - wp_password\n *  - wp_page_parent_id\n *  - wp_page_order\n *  - wp_author_id\n *  - post_status | page_status - can be 'draft', 'private', 'publish', or 'pending'\n *  - mt_allow_comments - can be 'open' or 'closed'\n *  - mt_allow_pings - can be 'open' or 'closed'\n *  - date_created_gmt\n *  - dateCreated\n *  - wp_post_thumbnail\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters. Contains:\n *  - blog_id\n *  - username\n *  - password\n *  - content_struct\n *  - publish\n * @return int\n *\/","file":"class-wp-xmlrpc-server.php","line":4032,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_mw_newPost'"],"uses":{"escape":[4033],"login":[4041],"__":[4055,4066,4070,4079,4084,4092,4121,4125,4128,4133,4275,4296],"current_user_can":[4083,4085,4120,4124],"get_post_type_object":[4083],"sanitize_key":[4090],"array_key_exists":[4091],"get_post_format_strings":[4091],"get_userdata":[4131],"get_option":[4171,4184,4189,4202,4214,4219],"is_numeric":[4162,4193],"implode":[4229],"is_array":[4228,4251],"rtrim":[4235],"getIso":[4235,4237],"get_date_from_gmt":[4240],"iso8601_to_datetime":[4240,4241],"current_time":[4243,4244],"get_cat_ID":[4253],"compact":[4258],"get_default_post_to_edit":[4260],"stick_post":[4265],"unstick_post":[4267],"set_custom_fields":[4271],"set_post_thumbnail":[4274],"add_enclosure_if_new":[4282],"attach_uploads":[4284],"set_post_format":[4289],"wp_insert_post":[4291],"get_error_message":[4293],"is_wp_error":[4292],"strval":[4300]},"used_by":[]},"sanitize_key":{"doc":"\/**\n * Sanitize a string key.\n *\n * Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes and underscores are allowed.\n *\n * @since 3.0.0\n *\n * @param string $key String key\n * @return string Sanitized key\n *\/","file":"formatting.php","line":915,"missingDoc":false,"filters":["'sanitize_key'"],"uses":{"strtolower":[917],"preg_replace":[918]},"used_by":{"wp_xmlrpc_server::mw_newPost":[4090],"wp_xmlrpc_server::mw_editPost":[4388],"wp_update_nav_menu_item":[372,375,376],"has_post_format":[792],"set_post_format":[811],"register_post_status":[945],"register_post_type":[1234],"WP_Query::parse_query":[1654]}},"wp_xmlrpc_server::add_enclosure_if_new":{"doc":"","file":"class-wp-xmlrpc-server.php","line":4303,"missingDoc":true,"filters":[],"uses":{"get_post_custom":[4308],"add_post_meta":[4319],"is_array":[4304]},"used_by":[]},"get_post_custom":{"doc":"\/**\n * Retrieve post meta fields, based on post ID.\n *\n * The post meta fields are retrieved from the cache where possible,\n * so the function is optimized to be called more than once.\n *\n * @since 1.2.0\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/get_post_custom\n *\n * @param int $post_id Post ID.\n * @return array\n *\/","file":"post.php","line":1850,"missingDoc":false,"filters":[],"uses":{"absint":[1851],"get_the_ID":[1853],"get_post_meta":[1855]},"used_by":{"wp_xmlrpc_server::add_enclosure_if_new":[4308],"wp_xmlrpc_server::mw_getPost":[4685],"rss_enclosure":[389],"atom_enclosure":[425],"post_custom":[725],"get_post_custom_keys":[1870],"get_post_custom_values":[1896],"get_enclosed":[3316]}},"wp_xmlrpc_server::attach_uploads":{"doc":"\/**\n * Attach upload to a post.\n *\n * @since 2.1.0\n *\n * @param int $post_ID Post ID.\n * @param string $post_content Post Content for attachment.\n *\/","file":"class-wp-xmlrpc-server.php","line":4331,"missingDoc":false,"filters":[],"uses":{"get_results":[4335],"update":[4339],"strpos":[4338],"is_array":[4336]},"used_by":[]},"wp_xmlrpc_server::mw_editPost":{"doc":"\/**\n * Edit a post.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return bool True on success.\n *\/","file":"class-wp-xmlrpc-server.php","line":4352,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_call_success_mw_editPost'"],"uses":{"escape":[4354,4394],"login":[4362],"get_post":[4367],"__":[4373,4376,4380,4384,4390,4425,4429,4432,4535,4537,4573,4592],"current_user_can":[4375,4424,4428,4536,4534],"in_array":[4379],"sanitize_key":[4388],"array_key_exists":[4389],"get_post_format_strings":[4389],"extract":[4395],"get_option":[4448,4461,4477,4489],"is_numeric":[4439,4468],"get_cat_ID":[4506],"is_array":[4504,4546],"implode":[4547],"rtrim":[4553],"getIso":[4553,4555],"get_date_from_gmt":[4558],"iso8601_to_datetime":[4558,4559],"compact":[4566],"wp_update_post":[4568],"get_error_message":[4570],"is_wp_error":[4569],"stick_post":[4578],"unstick_post":[4580],"set_custom_fields":[4584],"delete_post_thumbnail":[4589],"set_post_thumbnail":[4591],"add_enclosure_if_new":[4599],"attach_uploads":[4601],"set_post_format":[4606]},"used_by":[]},"wp_xmlrpc_server::mw_getPost":{"doc":"\/**\n * Retrieve post.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":4621,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[4623],"login":[4629],"get_post":[4632],"__":[4634,4637,4733],"current_user_can":[4636],"_convert_date":[4642,4644],"_convert_date_gmt":[4643,4645],"wp_get_post_categories":[4648],"get_cat_name":[4650],"wp_get_post_tags":[4653],"implode":[4657],"get_extended":[4662],"post_permalink":[4663],"get_userdata":[4666],"get_post_format":[4676],"is_sticky":[4681],"explode":[4688],"trim":[4689,4690,4691],"htmlspecialchars":[4689],"get_post_custom":[4685],"get_custom_fields":[4720],"get_post_thumbnail_id":[4729]},"used_by":[]},"wp_get_post_tags":{"doc":"\/**\n * Retrieve the tags for a post.\n *\n * There is only one default for this function, called 'fields' and by default\n * is set to 'all'. There are other defaults that can be overridden in\n * {@link wp_get_object_terms()}.\n *\n * @package WordPress\n * @subpackage Post\n * @since 2.3.0\n *\n * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here\n *\n * @param int $post_id Optional. The Post ID\n * @param array $args Optional. Overwrite the defaults\n * @return array List of post tags.\n *\/","file":"post.php","line":2585,"missingDoc":false,"filters":[],"uses":{"wp_get_post_terms":[2586]},"used_by":{"wp_xmlrpc_server::mw_getPost":[4653],"wp_xmlrpc_server::mw_getRecentPosts":[4783]}},"wp_xmlrpc_server::mw_getRecentPosts":{"doc":"\/**\n * Retrieve list of recent posts.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":4745,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[4747],"absint":[4753],"login":[4757],"wp_get_recent_posts":[4762],"current_user_can":[4769],"_convert_date":[4772,4774],"_convert_date_gmt":[4773,4775],"wp_get_post_categories":[4778],"get_cat_name":[4780],"wp_get_post_tags":[4783],"implode":[4788],"get_extended":[4793],"post_permalink":[4794],"get_userdata":[4797],"get_post_format":[4807],"get_custom_fields":[4834],"count":[4840,4845],"get_post_thumbnail_id":[4841],"array_push":[4846]},"used_by":[]},"wp_xmlrpc_server::mw_getCategories":{"doc":"\/**\n * Retrieve the list of categories on a given blog.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":4860,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[4862],"login":[4868],"__":[4872],"current_user_can":[4871],"esc_html":[4885,4886],"get_category_link":[4885],"get_category_feed_link":[4886],"get_categories":[4878]},"used_by":[]},"get_category_feed_link":{"doc":"\/**\n * Retrieve the feed link for a category.\n *\n * Returns a link to the feed for all posts in a given category. A specific feed\n * can be requested or left blank to get the default feed.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.5.0\n *\n * @param int $cat_id ID of a category.\n * @param string $feed Optional. Feed type.\n * @return string Link to the feed for the category specified by $cat_id.\n*\/","file":"link-template.php","line":571,"missingDoc":false,"filters":[],"uses":{"get_term_feed_link":[572]},"used_by":{"wp_xmlrpc_server::mw_getCategories":[4886],"get_category_rss_link":[1178],"feed_links_extra":[1652]}},"wp_xmlrpc_server::mw_newMediaObject":{"doc":"\/**\n * Uploads a file, following your settings.\n *\n * Adapted from a patch by Johann Richard.\n *\n * @link http:\/\/mycvs.org\/archives\/2004\/06\/30\/file-upload-to-wordpress-in-ecto\/\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":4907,"missingDoc":false,"filters":["'xmlrpc_call'","'pre_upload_error'","'xmlrpc_call_success_mw_newMediaObject'","'wp_handle_upload'"],"uses":{"escape":[4911,4912],"sanitize_file_name":[4915],"login":[4919],"__":[4925,4952,4961],"current_user_can":[4924,4960],"get_row":[4934],"wp_delete_attachment":[4942],"preg_replace":[4946],"wp_upload_bits":[4950],"sprintf":[4952],"wp_insert_attachment":[4973],"wp_update_attachment_metadata":[4974],"wp_generate_attachment_metadata":[4974],"strval":[4979]},"used_by":[]},"sanitize_file_name":{"doc":"\/**\n * Sanitizes a filename replacing whitespace with dashes\n *\n * Removes special characters that are illegal in filenames on certain\n * operating systems and special characters requiring special escaping\n * to manipulate at the command line. Replaces spaces and consecutive\n * dashes with a single dash. Trim period, dash and underscore from beginning\n * and end of filename.\n *\n * @since 2.1.0\n *\n * @param string $filename The filename to be sanitized\n * @return string The sanitized filename\n *\/","file":"formatting.php","line":827,"missingDoc":false,"filters":["'sanitize_file_name_chars'","'sanitize_file_name'","'sanitize_file_name'"],"uses":{"chr":[829],"str_replace":[831],"preg_replace":[832],"trim":[833],"explode":[836],"count":[839],"array_shift":[843],"array_pop":[844],"get_allowed_mime_types":[845],"preg_match":[856,852]},"used_by":{"wp_xmlrpc_server::mw_newMediaObject":[4915],"wp_unique_filename":[1649]}},"wp_delete_attachment":{"doc":"\/**\n * Trashes or deletes an attachment.\n *\n * When an attachment is permanently deleted, the file will also be removed.\n * Deletion removes all post meta fields, taxonomy, comments, etc. associated\n * with the attachment (except the main post).\n *\n * The attachment is moved to the trash instead of permanently deleted unless trash\n * for media is disabled, item is already in the trash, or $force_delete is true.\n *\n * @since 2.0.0\n * @uses $wpdb\n * @uses do_action() Calls 'delete_attachment' hook on Attachment ID.\n *\n * @param int $post_id Attachment ID.\n * @param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.\n * @return mixed False on failure. Post data on success.\n *\/","file":"post.php","line":4076,"missingDoc":false,"filters":["'delete_attachment'","'delete_post'","'deleted_post'","'wp_delete_file'","'wp_delete_file'","'wp_delete_file'","'wp_delete_file'"],"uses":{"get_row":[4079,4127],"prepare":[4079,4111,4115,4127],"wp_trash_post":[4086],"delete_post_meta":[4088,4089],"wp_get_attachment_metadata":[4091],"get_post_meta":[4092],"get_attached_file":[4093],"image_get_intermediate_size":[4097],"get_intermediate_image_sizes":[4096],"delete_transient":[4102],"is_multisite":[4101],"wp_delete_object_term_relationships":[4106,4107],"get_object_taxonomies":[4107],"delete_metadata":[4109],"get_col":[4111,4115],"wp_delete_comment":[4113],"delete_metadata_by_mid":[4117],"delete":[4120],"wp_upload_dir":[4123],"str_replace":[4128],"basename":[4128],"unlink":[4130,4137,4144,4151],"path_join":[4130,4137,4142,4144],"dirname":[4142],"is_array":[4140],"clean_post_cache":[4153]},"used_by":{"wp_xmlrpc_server::mw_newMediaObject":[4942],"wp_delete_post":[2315]}},"wp_upload_bits":{"doc":"\/**\n * Create a file in the upload folder with given content.\n *\n * If there is an error, then the key 'error' will exist with the error message.\n * If success, then the key 'file' will have the unique file path, the 'url' key\n * will have the link to the new file. and the 'error' key will be set to false.\n *\n * This function will not move an uploaded file to the upload folder. It will\n * create a new file with the content in $bits parameter. If you move the upload\n * file, read the content of the uploaded file, and then you can give the\n * filename and content to this function, which will add it to the upload\n * folder.\n *\n * The permissions will be set on the new file automatically by this function.\n *\n * @since 2.0.0\n *\n * @param string $name\n * @param null $deprecated Never used. Set to null.\n * @param mixed $bits File content\n * @param string $time Optional. Time formatted in 'yyyy\/mm'.\n * @return array\n *\/","file":"functions.php","line":1715,"missingDoc":false,"filters":["'wp_upload_bits'"],"uses":{"_deprecated_argument":[1717],"__":[1720,1724,1746,1752],"wp_check_filetype":[1722],"current_user_can":[1723],"wp_upload_dir":[1726],"is_array":[1732],"wp_unique_filename":[1737],"str_replace":[1742],"basename":[1744],"strpos":[1741],"sprintf":[1746,1752],"wp_mkdir_p":[1740],"dirname":[1740,1759],"fopen":[1750],"fwrite":[1754],"fclose":[1755],"clearstatcache":[1756,1763],"stat":[1759],"chmod":[1762]},"used_by":{"wp_xmlrpc_server::mw_newMediaObject":[4950]}},"wp_insert_attachment":{"doc":"\/**\n * Insert an attachment.\n *\n * If you set the 'ID' in the $object parameter, it will mean that you are\n * updating and attempt to update the attachment. You can also set the\n * attachment name or title by setting the key 'post_name' or 'post_title'.\n *\n * You can set the dates for the attachment manually by setting the 'post_date'\n * and 'post_date_gmt' keys' values.\n *\n * By default, the comments will use the default settings for whether the\n * comments are allowed. You can close them manually or keep them open by\n * setting the value for the 'comment_status' key.\n *\n * The $object parameter can have the following:\n *     'post_status'   - Default is 'draft'. Can not be overridden, set the same as parent post.\n *     'post_type'     - Default is 'post', will be set to attachment. Can not override.\n *     'post_author'   - Default is current user ID. The ID of the user, who added the attachment.\n *     'ping_status'   - Default is the value in default ping status option. Whether the attachment\n *                       can accept pings.\n *     'post_parent'   - Default is 0. Can use $parent parameter or set this for the post it belongs\n *                       to, if any.\n *     'menu_order'    - Default is 0. The order it is displayed.\n *     'to_ping'       - Whether to ping.\n *     'pinged'        - Default is empty string.\n *     'post_password' - Default is empty string. The password to access the attachment.\n *     'guid'          - Global Unique ID for referencing the attachment.\n *     'post_content_filtered' - Attachment post content filtered.\n *     'post_excerpt'  - Attachment excerpt.\n *\n * @since 2.0.0\n * @uses $wpdb\n * @uses $user_ID\n * @uses do_action() Calls 'edit_attachment' on $post_ID if this is an update.\n * @uses do_action() Calls 'add_attachment' on $post_ID if this is not an update.\n *\n * @param string|array $object Arguments to override defaults.\n * @param string $file Optional filename.\n * @param int $parent Parent post ID.\n * @return int Attachment ID.\n *\/","file":"post.php","line":3907,"missingDoc":false,"filters":["'edit_attachment'","'add_attachment'"],"uses":{"get_option":[3911,3974,3977],"wp_parse_args":[3915],"sanitize_post":[3921],"extract":[3924],"in_array":[3931],"array_filter":[3935,4035],"count":[3938],"is_array":[3938,4034],"sanitize_title":[3953,3955,4020],"wp_unique_post_slug":[3958],"current_time":[3961,3963],"preg_replace":[3980],"compact":[4001,4021],"stripslashes_deep":[4002],"update":[4005,4021],"get_var":[4010],"prepare":[4010],"insert":[4015],"wp_set_post_categories":[4025],"is_object_in_taxonomy":[4024,4027],"wp_set_post_tags":[4028],"get_taxonomy":[4033],"wp_set_post_terms":[4037],"current_user_can":[4036],"update_attached_file":[4042],"clean_post_cache":[4044],"add_post_meta":[4047]},"used_by":{"wp_xmlrpc_server::mw_newMediaObject":[4973],"wp_update_post":[3004]}},"wp_update_attachment_metadata":{"doc":"\/**\n * Update metadata for an attachment.\n *\n * @since 2.1.0\n *\n * @param int $post_id Attachment ID.\n * @param array $data Attachment data.\n * @return int\n *\/","file":"post.php","line":4189,"missingDoc":false,"filters":["'wp_update_attachment_metadata'"],"uses":{"get_post":[4191],"update_post_meta":[4195],"delete_post_meta":[4197]},"used_by":{"wp_xmlrpc_server::mw_newMediaObject":[4974]}},"wp_xmlrpc_server::mt_getRecentPostTitles":{"doc":"\/**\n * Retrieve the post titles of recent posts.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":4999,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[5001],"absint":[5007],"login":[5011],"wp_get_recent_posts":[5016],"__":[5019],"current_user_can":[5026],"_convert_date":[5029],"_convert_date_gmt":[5030],"count":[5044],"array_push":[5045]},"used_by":[]},"wp_xmlrpc_server::mt_getCategoryList":{"doc":"\/**\n * Retrieve list of all categories on blog.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":5059,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[5061],"login":[5067],"__":[5071],"current_user_can":[5070],"get_categories":[5077]},"used_by":[]},"wp_xmlrpc_server::mt_getPostCategories":{"doc":"\/**\n * Retrieve post categories.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":5097,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[5099],"login":[5105],"__":[5109,5112],"get_post":[5108],"current_user_can":[5111],"wp_get_post_categories":[5117],"intval":[5117],"get_cat_name":[5122]},"used_by":[]},"wp_xmlrpc_server::mt_setPostCategories":{"doc":"\/**\n * Sets categories for a post.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return bool True on success.\n *\/","file":"class-wp-xmlrpc-server.php","line":5140,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[5142],"login":[5149],"__":[5155,5158],"get_post":[5154],"current_user_can":[5157],"wp_set_post_categories":[5165]},"used_by":[]},"wp_set_post_categories":{"doc":"\/**\n * Set categories for a post.\n *\n * If the post categories parameter is not set, then the default category is\n * going used.\n *\n * @since 2.1.0\n *\n * @param int $post_ID Post ID.\n * @param array $post_categories Optional. List of categories.\n * @return bool|mixed\n *\/","file":"post.php","line":3230,"missingDoc":false,"filters":[],"uses":{"get_post_type":[3232],"get_post_status":[3233],"get_option":[3237],"count":[3240],"reset":[3240],"is_array":[3235],"wp_set_post_terms":[3244]},"used_by":{"wp_xmlrpc_server::mt_setPostCategories":[5165],"wp_set_post_cats":[766],"wp_insert_post":[2904],"wp_insert_attachment":[4025]}},"wp_xmlrpc_server::mt_supportedMethods":{"doc":"\/**\n * Retrieve an array of methods supported by this server.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":5178,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":[],"used_by":[]},"wp_xmlrpc_server::mt_supportedTextFilters":{"doc":"\/**\n * Retrieve an empty array because we don't support per-post text filters.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n *\/","file":"class-wp-xmlrpc-server.php","line":5197,"missingDoc":false,"filters":["'xmlrpc_call'","'xmlrpc_text_filters'"],"uses":[],"used_by":[]},"wp_xmlrpc_server::mt_getTrackbackPings":{"doc":"\/**\n * Retrieve trackbacks sent to a given post.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return mixed\n *\/","file":"class-wp-xmlrpc-server.php","line":5210,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"intval":[5214],"get_post":[5218],"__":[5221],"get_results":[5223],"prepare":[5223],"substr":[5232],"strpos":[5232]},"used_by":[]},"wp_xmlrpc_server::mt_publishPost":{"doc":"\/**\n * Sets a post's publish status to 'publish'.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return int\n *\/","file":"class-wp-xmlrpc-server.php","line":5252,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[5254,5277],"login":[5260],"get_post":[5265],"__":[5267,5270],"current_user_can":[5269,5269],"wp_get_post_categories":[5275],"wp_update_post":[5279]},"used_by":[]},"wp_xmlrpc_server::pingback_ping":{"doc":"\/**\n * Retrieves a pingback and registers it.\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":5296,"missingDoc":false,"filters":["'xmlrpc_call'","'pre_remote_source'","'pingback_post'"],"uses":{"escape":[5301,5434,5439,5442],"str_replace":[5308,5309,5310,5313,5386,5418,5431],"strpos":[5313,5402],"get_option":[5313],"__":[5315,5355,5362,5365,5369,5373,5381,5393,5429,5450],"parse_url":[5320],"preg_match":[5323,5328,5339,5390,5403],"explode":[5325,5330,5397],"preg_replace":[5341,5345,5387,5388,5411,5422],"is_string":[5343],"prepare":[5346,5372],"like_escape":[5346],"get_var":[5347],"intval":[5335],"url_to_postid":[5321,5364],"get_post":[5359],"pings_open":[5368],"get_results":[5372],"sleep":[5376],"wp_remote_fopen":[5379],"strip_tags":[5395,5419,5423],"preg_quote":[5399,5421],"substr":[5415],"strlen":[5414],"trim":[5420],"esc_html":[5433],"compact":[5445],"wp_new_comment":[5447],"sprintf":[5450]},"used_by":[]},"wp_remote_fopen":{"doc":"\/**\n * HTTP request for URI to retrieve content.\n *\n * @since 1.5.1\n * @uses wp_remote_get()\n *\n * @param string $uri URI\/URL of web page to retrieve.\n * @return bool|string HTTP content. False on failure.\n *\/","file":"functions.php","line":753,"missingDoc":false,"filters":[],"uses":{"parse_url":[754],"is_array":[756],"wp_remote_get":[762],"is_wp_error":[764],"wp_remote_retrieve_body":[767]},"used_by":{"wp_xmlrpc_server::pingback_ping":[5379]}},"wp_xmlrpc_server::pingback_extensions_getPingbacks":{"doc":"\/**\n * Retrieve array of URLs that pingbacked the given URL.\n *\n * Specs on http:\/\/www.aquarionics.com\/misc\/archives\/blogite\/0198.html\n *\n * @since 1.5.0\n *\n * @param array $args Method parameters.\n * @return array\n *\/","file":"class-wp-xmlrpc-server.php","line":5463,"missingDoc":false,"filters":["'xmlrpc_call'"],"uses":{"escape":[5469],"url_to_postid":[5473],"__":[5476,5483],"get_post":[5479],"get_results":[5486],"prepare":[5486]},"used_by":[]},"WP::add_query_var":{"doc":"\/**\n * Add name to list of public query variables.\n *\n * @since 2.1.0\n *\n * @param string $qv Query variable name.\n *\/","file":"class-wp.php","line":93,"missingDoc":false,"filters":[],"uses":{"in_array":[94]},"used_by":[]},"WP::set_query_var":{"doc":"\/**\n * Set the value of a query variable.\n *\n * @since 2.3.0\n *\n * @param string $key Query variable name.\n * @param mixed $value Query variable value.\n *\/","file":"class-wp.php","line":106,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP::parse_request":{"doc":"\/**\n * Parse request to find correct WordPress query.\n *\n * Sets up the query variables based on the request. There are also many\n * filters and actions that can be used to further manipulate the result.\n *\n * @since 2.0.0\n *\n * @param array|string $extra_query_vars Set the extra query variables.\n *\/","file":"class-wp.php","line":120,"missingDoc":false,"filters":["'do_parse_request'","'query_vars'","'request'","'parse_request'"],"uses":{"parse_str":[132,230],"is_array":[129,265,290],"wp_rewrite_rules":[137],"explode":[148,151],"str_replace":[149,165,285],"parse_url":[154],"home_url":[154],"trim":[159,166,168,169,171,172,174],"preg_replace":[167,170,173,222],"preg_match":[178,207,204,205],"strpos":[201,241,238],"get_page_by_path":[209],"urldecode":[205],"addslashes":[225],"is_object":[269],"get_post_types":[289],"in_array":[291],"array_intersect":[294]},"used_by":[]},"get_page_by_path":{"doc":"\/**\n * Retrieves a page given its path.\n *\n * @since 2.1.0\n * @uses $wpdb\n *\n * @param string $page_path Page path\n * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT.\n * @param string $post_type Optional. Post type. Default page.\n * @return WP_Post|null WP_Post on success or null on failure\n *\/","file":"post.php","line":3452,"missingDoc":false,"filters":[],"uses":{"rawurlencode":[3455],"urldecode":[3455],"str_replace":[3456,3457],"explode":[3458],"trim":[3458],"array_map":[3459,3460],"implode":[3462],"escape_by_ref":[3464],"get_results":[3465],"array_reverse":[3467],"count":[3482],"get_post":[3491]},"used_by":{"WP::parse_request":[209],"WP_Query::parse_query":[1629],"WP_Query::get_posts":[2117,2123],"url_to_postid":[348]}},"WP::send_headers":{"doc":"\/**\n * Send additional HTTP headers for caching, content type, etc.\n *\n * Sets the X-Pingback header, 404 status (if 404), Content-type. If showing\n * a feed, it will also send last-modified, etag, and 304 status if needed.\n *\n * @since 2.0.0\n *\/","file":"class-wp.php","line":319,"missingDoc":false,"filters":["'wp_headers'","'send_headers'"],"uses":{"get_bloginfo":[320],"array_merge":[325,330],"wp_get_nocache_headers":[325,330],"is_user_logged_in":[324,329],"get_option":[331,331,336,336],"in_array":[332],"mysql2date":[350,352],"get_lastcommentmodified":[350],"get_lastpostmodified":[352],"md5":[353],"stripslashes":[359,359],"trim":[362],"strtotime":[364,367],"status_header":[380],"header_remove":[388],"stripos":[393],"headers_list":[392],"function_exists":[387],"header":[402]},"used_by":[]},"wp_get_nocache_headers":{"doc":"\/**\n * Gets the header information to prevent caching.\n *\n * The several different headers cover the different ways cache prevention is handled\n * by different browsers\n *\n * @since 2.8.0\n *\n * @uses apply_filters()\n * @return array The associative array of header names and field values.\n *\/","file":"functions.php","line":902,"missingDoc":false,"filters":["'nocache_headers'"],"uses":{"function_exists":[909]},"used_by":{"WP::send_headers":[325,330],"nocache_headers":[926]}},"get_lastcommentmodified":{"doc":"\/**\n * The date the last comment was modified.\n *\n * @since 1.5.0\n * @uses $wpdb\n *\n * @param string $timezone Which timezone to use in reference to 'gmt', 'blog',\n *\t\tor 'server' locations.\n * @return string Last comment modified date.\n *\/","file":"comment.php","line":440,"missingDoc":false,"filters":[],"uses":{"date":[447],"strtolower":[449],"get_var":[451,454,457],"prepare":[457]},"used_by":{"WP::send_headers":[350],"__main":[27,31]}},"get_lastpostmodified":{"doc":"\/**\n * Retrieve last post modified date depending on timezone.\n *\n * The server timezone is the default and is the difference between GMT and\n * server time. The 'blog' value is just when the last post was modified. The\n * 'gmt' is when the last post was modified in GMT time.\n *\n * @since 1.2.0\n * @uses apply_filters() Calls 'get_lastpostmodified' filter\n *\n * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'.\n * @return string The date the post was last modified.\n *\/","file":"post.php","line":4548,"missingDoc":false,"filters":["'get_lastpostmodified'"],"uses":{"_get_last_post_time":[4549],"get_lastpostdate":[4551]},"used_by":{"WP::send_headers":[352],"__main":[22,25,17,28]}},"status_header":{"doc":"\/**\n * Set HTTP status header.\n *\n * @since 2.0.0\n * @uses apply_filters() Calls 'status_header' on status header string, HTTP\n *\t\tHTTP code, HTTP code description, and protocol string as separate\n *\t\tparameters.\n *\n * @param int $header HTTP status code\n * @return unknown\n *\/","file":"functions.php","line":875,"missingDoc":false,"filters":["'status_header'"],"uses":{"get_status_header_desc":[876],"function_exists":[885],"header":[888]},"used_by":{"WP::send_headers":[380],"WP::handle_404":[508,517,523,530],"_default_wp_die_handler":[2106],"dead_db":[2761],"send_origin_headers":[308],"__main":[22,28,77],"wp_redirect":[875]}},"WP::build_query_string":{"doc":"\/**\n * Sets the query string property based off of the query variable property.\n *\n * The 'query_string' filter is deprecated, but still works. Plugins should\n * use the 'request' filter instead.\n *\n * @since 2.0.0\n *\/","file":"class-wp.php","line":418,"missingDoc":false,"filters":["'query_string'"],"uses":{"strlen":[422],"is_scalar":[423],"rawurlencode":[425],"array_keys":[420],"parse_str":[432],"has_filter":[430]},"used_by":[]},"WP::register_globals":{"doc":"\/**\n * Set up the WordPress Globals.\n *\n * The query_vars property will be extracted to the GLOBALS. So care should\n * be taken when naming global variables that might interfere with the\n * WordPress environment.\n *\n * @global string $query_string Query string for the loop.\n * @global int $more Only set, if single page or post.\n * @global int $single If single page or post. Only set, if single page or post.\n *\n * @since 2.0.0\n *\/","file":"class-wp.php","line":449,"missingDoc":false,"filters":[],"uses":{"is_single":[461],"is_page":[461]},"used_by":[]},"WP::init":{"doc":"\/**\n * Set up the current user.\n *\n * @since 2.0.0\n *\/","file":"class-wp.php","line":472,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[473]},"used_by":[]},"WP::query_posts":{"doc":"\/**\n * Set up the Loop based on the query variables.\n *\n * @uses WP::$query_vars\n * @since 2.0.0\n *\/","file":"class-wp.php","line":482,"missingDoc":false,"filters":[],"uses":{"build_query_string":[484],"query":[485]},"used_by":[]},"WP::handle_404":{"doc":"\/**\n * Set the Headers for 404, if nothing is found for requested URL.\n *\n * Issue a 404 if a request doesn't match any posts and doesn't match\n * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already\n * issued, and if the request was not a search or the homepage.\n *\n * Otherwise, issue a 200.\n *\n * @since 2.0.0\n *\/","file":"class-wp.php","line":499,"missingDoc":false,"filters":[],"uses":{"is_404":[503],"status_header":[508,517,523,530],"is_admin":[507],"is_robots":[507],"is_tag":[516],"is_category":[516],"is_tax":[516],"is_author":[516],"is_post_type_archive":[516],"get_queried_object":[516],"is_home":[522],"is_search":[522],"is_paged":[513],"set_404":[529],"nocache_headers":[531]},"used_by":[]},"is_post_type_archive":{"doc":"\/**\n * Is the query for an existing post type archive page?\n *\n * @see WP_Query::is_post_type_archive()\n * @since 3.1.0\n * @uses $wp_query\n *\n * @param mixed $post_types Optional. Post type or array of posts types to check against.\n * @return bool\n *\/","file":"query.php","line":160,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[164],"__":[164],"is_post_type_archive":[168]},"used_by":{"WP::handle_404":[516],"wp_title":[557],"post_type_archive_title":[654],"feed_links_extra":[1666],"get_body_class":[454,543],"is_post_type_archive":[168]}},"is_paged":{"doc":"\/**\n * Is the query for paged result and not for the first page?\n *\n * @see WP_Query::is_paged()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":508,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[512],"__":[512],"is_paged":[516]},"used_by":{"WP::handle_404":[513],"get_post_class":[345],"get_body_class":[420],"wp_page_menu":[903],"is_paged":[516],"__main":[42,27]}},"nocache_headers":{"doc":"\/**\n * Sets the headers to prevent caching for the different browsers.\n *\n * Different browsers support different nocache headers, so several headers must\n * be sent so that all of them get the point that no caching should occur.\n *\n * @since 2.0.0\n * @uses wp_get_nocache_headers()\n *\/","file":"functions.php","line":925,"missingDoc":false,"filters":[],"uses":{"wp_get_nocache_headers":[926],"header_remove":[932],"stripos":[937],"headers_list":[936],"function_exists":[931],"header":[945]},"used_by":{"WP::handle_404":[531],"_default_wp_die_handler":[2107],"dead_db":[2762],"auth_redirect":[783]}},"WP::main":{"doc":"\/**\n * Sets up all of the variables required by the WordPress environment.\n *\n * The action 'wp' has one parameter that references the WP object. It\n * allows for accessing the properties and methods to further manipulate the\n * object.\n *\n * @since 2.0.0\n *\n * @param string|array $query_args Passed to {@link parse_request()}\n *\/","file":"class-wp.php","line":545,"missingDoc":false,"filters":["'wp'"],"uses":{"init":[546],"parse_request":[547],"send_headers":[548],"query_posts":[549],"handle_404":[550],"register_globals":[551]},"used_by":[]},"query_posts":{"doc":"\/**\n * Set up The Loop with query parameters.\n *\n * This will override the current WordPress Loop and shouldn't be used more than\n * once. This must not be used within the WordPress Loop.\n *\n * @since 1.5.0\n * @uses $wp_query\n *\n * @param string $query\n * @return array List of posts\n *\/","file":"query.php","line":89,"missingDoc":false,"filters":[],"uses":{"query":[91]},"used_by":{"WP::main":[549]}},"WP_MatchesMapRegex::WP_MatchesMapRegex":{"doc":"\/**\n * constructor\n *\n * @param string $subject subject if regex\n * @param array  $matches data to use in map\n * @return self\n *\/","file":"class-wp.php","line":601,"missingDoc":false,"filters":[],"uses":{"_map":[604]},"used_by":[]},"WP_MatchesMapRegex::apply":{"doc":"\/**\n * Substitute substring matches in subject.\n *\n * static helper function to ease use\n *\n * @access public\n * @param string $subject subject\n * @param array  $matches data used for substitution\n * @return string\n *\/","file":"class-wp.php","line":617,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_MatchesMapRegex::_map":{"doc":"\/**\n * do the actual mapping\n *\n * @access private\n * @return string\n *\/","file":"class-wp.php","line":628,"missingDoc":false,"filters":[],"uses":{"preg_replace_callback":[630]},"used_by":[]},"WP_MatchesMapRegex::callback":{"doc":"\/**\n * preg_replace_callback hook\n *\n * @access public\n * @param  array $matches preg_replace regexp matches\n * @return string\n *\/","file":"class-wp.php","line":640,"missingDoc":false,"filters":[],"uses":{"intval":[641],"substr":[641],"urlencode":[642]},"used_by":[]},"WP_Dependencies::do_items":{"doc":"\/**\n * Do the dependencies\n *\n * Process the items passed to it or the queue. Processes all dependencies.\n *\n * @param mixed $handles (optional) items to be processed. (void) processes queue, (string) process that item, (array of strings) process those items\n * @return array Items that have been processed\n *\/","file":"class.wp-dependencies.php","line":36,"missingDoc":false,"filters":[],"uses":{"all_deps":[39],"do_item":[49],"in_array":[42]},"used_by":[]},"WP_Dependencies::do_item":{"doc":"","file":"class.wp-dependencies.php","line":59,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Dependencies::all_deps":{"doc":"\/**\n * Determines dependencies\n *\n * Recursively builds array of items to process taking dependencies into account. Does NOT catch infinite loops.\n *\n *\n * @param mixed $handles Accepts (string) dep name or (array of strings) dep names\n * @param bool $recursion Used internally when function calls itself\n *\/","file":"class.wp-dependencies.php","line":72,"missingDoc":false,"filters":[],"uses":{"explode":[77],"in_array":[79,81],"set_group":[84],"array_diff":[92],"array_keys":[92],"all_deps":[94]},"used_by":[]},"WP_Dependencies::add":{"doc":"\/**\n * Adds item\n *\n * Adds the item only if no item of that name already exists\n *\n * @param string $handle Script name\n * @param string $src Script url\n * @param array $deps (optional) Array of script names on which this script depends\n * @param string $ver (optional) Script version (used for cache busting)\n * @return array Hierarchical array of dependencies\n *\/","file":"class.wp-dependencies.php","line":127,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Dependencies::add_data":{"doc":"\/**\n * Adds extra data\n *\n * Adds data only if script has already been added.\n *\n * @param string $handle Script name\n * @param string $key\n * @param mixed $value\n * @return bool success\n *\/","file":"class.wp-dependencies.php","line":144,"missingDoc":false,"filters":[],"uses":{"add_data":[148]},"used_by":[]},"WP_Dependencies::get_data":{"doc":"\/**\n * Get extra data\n *\n * Gets data associated with a certain handle.\n *\n * @since WP 3.3\n *\n * @param string $handle Script name\n * @param string $key\n * @return mixed\n *\/","file":"class.wp-dependencies.php","line":162,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Dependencies::remove":{"doc":"","file":"class.wp-dependencies.php","line":172,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Dependencies::enqueue":{"doc":"","file":"class.wp-dependencies.php","line":177,"missingDoc":true,"filters":[],"uses":{"explode":[179],"in_array":[180]},"used_by":[]},"WP_Dependencies::dequeue":{"doc":"","file":"class.wp-dependencies.php","line":188,"missingDoc":true,"filters":[],"uses":{"explode":[190],"array_search":[191]},"used_by":[]},"WP_Dependencies::query":{"doc":"","file":"class.wp-dependencies.php","line":200,"missingDoc":true,"filters":[],"uses":{"in_array":[210,214,218]},"used_by":[]},"WP_Dependencies::set_group":{"doc":"","file":"class.wp-dependencies.php","line":223,"missingDoc":true,"filters":[],"uses":{"min":[227]},"used_by":[]},"_WP_Dependency::__construct":{"doc":"","file":"class.wp-dependencies.php","line":249,"missingDoc":true,"filters":[],"uses":{"func_get_args":[250],"is_array":[251]},"used_by":[]},"_WP_Dependency::add_data":{"doc":"","file":"class.wp-dependencies.php","line":255,"missingDoc":true,"filters":[],"uses":{"is_scalar":[256]},"used_by":[]},"WP_Scripts::__construct":{"doc":"","file":"class.wp-scripts.php","line":33,"missingDoc":true,"filters":[],"uses":{"init":[34],"add_action":[35]},"used_by":[]},"WP_Scripts::init":{"doc":"","file":"class.wp-scripts.php","line":38,"missingDoc":true,"filters":["'wp_default_scripts'"],"uses":[],"used_by":[]},"WP_Scripts::print_scripts":{"doc":"\/**\n * Prints scripts\n *\n * Prints the scripts passed to it or the print queue. Also prints all necessary dependencies.\n *\n * @param mixed $handles (optional) Scripts to be printed. (void) prints queue, (string) prints that script, (array of strings) prints those scripts.\n * @param int $group (optional) If scripts were queued in groups prints this group number.\n * @return array Scripts that have been printed\n *\/","file":"class.wp-scripts.php","line":51,"missingDoc":false,"filters":[],"uses":{"do_items":[52]},"used_by":[]},"WP_Scripts::print_scripts_l10n":{"doc":"","file":"class.wp-scripts.php","line":56,"missingDoc":true,"filters":[],"uses":{"_deprecated_function":[57],"print_extra_script":[58]},"used_by":[]},"WP_Scripts::print_extra_script":{"doc":"","file":"class.wp-scripts.php","line":61,"missingDoc":true,"filters":[],"uses":{"get_data":[62]},"used_by":[]},"WP_Scripts::do_item":{"doc":"","file":"class.wp-scripts.php","line":77,"missingDoc":true,"filters":["'script_loader_src'","'script_loader_src'"],"uses":{"array_diff":[87],"in_array":[86],"print_extra_script":[102,112],"in_default_dir":[101],"preg_match":[113],"strpos":[113],"add_query_arg":[118],"esc_url":[120]},"used_by":[]},"WP_Scripts::localize":{"doc":"\/**\n * Localizes a script\n *\n * Localizes only if the script has already been added\n *\/","file":"class.wp-scripts.php","line":135,"missingDoc":false,"filters":[],"uses":{"is_array":[136],"is_scalar":[142],"html_entity_decode":[145],"json_encode":[148],"get_data":[153],"add_data":[158]},"used_by":[]},"WP_Scripts::set_group":{"doc":"","file":"class.wp-scripts.php","line":161,"missingDoc":true,"filters":[],"uses":{"get_data":[166]},"used_by":[]},"WP_Scripts::all_deps":{"doc":"","file":"class.wp-scripts.php","line":174,"missingDoc":true,"filters":["'print_scripts_array'"],"uses":[],"used_by":[]},"WP_Scripts::do_head_items":{"doc":"","file":"class.wp-scripts.php","line":181,"missingDoc":true,"filters":[],"uses":{"do_items":[182]},"used_by":[]},"WP_Scripts::do_footer_items":{"doc":"","file":"class.wp-scripts.php","line":186,"missingDoc":true,"filters":[],"uses":{"do_items":[187]},"used_by":[]},"WP_Scripts::in_default_dir":{"doc":"","file":"class.wp-scripts.php","line":191,"missingDoc":true,"filters":[],"uses":{"strpos":[195,199]},"used_by":[]},"WP_Scripts::reset":{"doc":"","file":"class.wp-scripts.php","line":205,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Styles::__construct":{"doc":"","file":"class.wp-styles.php","line":31,"missingDoc":true,"filters":["'wp_default_styles'"],"uses":[],"used_by":[]},"WP_Styles::do_item":{"doc":"","file":"class.wp-styles.php","line":35,"missingDoc":true,"filters":["'style_loader_tag'","'style_loader_tag'"],"uses":{"get_data":[53],"in_default_dir":[49],"esc_attr":[60,66],"_css_href":[64,78,80],"str_replace":[78],"is_bool":[76],"print_inline_style":[90,93]},"used_by":[]},"WP_Styles::add_inline_style":{"doc":"","file":"class.wp-styles.php","line":99,"missingDoc":true,"filters":[],"uses":{"get_data":[103],"add_data":[109]},"used_by":[]},"WP_Styles::print_inline_style":{"doc":"","file":"class.wp-styles.php","line":112,"missingDoc":true,"filters":[],"uses":{"get_data":[113],"implode":[118]},"used_by":[]},"WP_Styles::all_deps":{"doc":"","file":"class.wp-styles.php","line":130,"missingDoc":true,"filters":["'print_styles_array'"],"uses":[],"used_by":[]},"WP_Styles::_css_href":{"doc":"","file":"class.wp-styles.php","line":137,"missingDoc":true,"filters":["'style_loader_src'"],"uses":{"is_bool":[138],"preg_match":[138],"strpos":[138],"add_query_arg":[143],"esc_url":[145]},"used_by":[]},"WP_Styles::in_default_dir":{"doc":"","file":"class.wp-styles.php","line":148,"missingDoc":true,"filters":[],"uses":{"strpos":[153]},"used_by":[]},"WP_Styles::do_footer_items":{"doc":"","file":"class.wp-styles.php","line":159,"missingDoc":true,"filters":[],"uses":{"do_items":[160]},"used_by":[]},"WP_Styles::reset":{"doc":"","file":"class.wp-styles.php","line":164,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"get_comment_author":{"doc":"\/**\n * Retrieve the author of the current comment.\n *\n * If the comment has an empty comment_author field, then 'Anonymous' person is\n * assumed.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'get_comment_author' hook on the comment author\n *\n * @param int $comment_ID The ID of the comment for which to retrieve the author. Optional.\n * @return string The comment author\n *\/","file":"comment-template.php","line":23,"missingDoc":false,"filters":["'get_comment_author'"],"uses":{"get_comment":[24],"get_userdata":[27],"__":[30]},"used_by":{"comment_author":[47],"get_comment_author_link":[150],"comment_form_title":[1205,1205],"get_comment_author_rss":[257]}},"comment_author":{"doc":"\/**\n * Displays the author of the current comment.\n *\n * @since 0.71\n * @uses apply_filters() Calls 'comment_author' on comment author before displaying\n *\n * @param int $comment_ID The ID of the comment for which to print the author. Optional.\n *\/","file":"comment-template.php","line":46,"missingDoc":false,"filters":["'comment_author'"],"uses":{"get_comment_author":[47]},"used_by":[]},"get_comment_author_email":{"doc":"\/**\n * Retrieve the email of the author of the current comment.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls the 'get_comment_author_email' hook on the comment author email\n * @uses $comment\n *\n * @param int $comment_ID The ID of the comment for which to get the author's email. Optional.\n * @return string The current comment author's email\n *\/","file":"comment-template.php","line":61,"missingDoc":false,"filters":["'get_comment_author_email'"],"uses":{"get_comment":[62]},"used_by":{"comment_author_email":[81]}},"comment_author_email":{"doc":"\/**\n * Display the email of the author of the current global $comment.\n *\n * Care should be taken to protect the email address and assure that email\n * harvesters do not capture your commentors' email address. Most assume that\n * their email address will not appear in raw form on the blog. Doing so will\n * enable anyone, including those that people don't want to get the email\n * address and use it for their own means good and bad.\n *\n * @since 0.71\n * @uses apply_filters() Calls 'author_email' hook on the author email\n *\n * @param int $comment_ID The ID of the comment for which to print the author's email. Optional.\n *\/","file":"comment-template.php","line":80,"missingDoc":false,"filters":["'author_email'"],"uses":{"get_comment_author_email":[81]},"used_by":[]},"comment_author_email_link":{"doc":"\/**\n * Display the html email link to the author of the current comment.\n *\n * Care should be taken to protect the email address and assure that email\n * harvesters do not capture your commentors' email address. Most assume that\n * their email address will not appear in raw form on the blog. Doing so will\n * enable anyone, including those that people don't want to get the email\n * address and use it for their own means good and bad.\n *\n * @since 0.71\n * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email\n * @uses get_comment_author_email_link() For generating the link\n * @global object $comment The current Comment row object\n *\n * @param string $linktext The text to display instead of the comment author's email address\n * @param string $before The text or HTML to display before the email link.\n * @param string $after The text or HTML to display after the email link.\n *\/","file":"comment-template.php","line":102,"missingDoc":false,"filters":[],"uses":{"get_comment_author_email_link":[103]},"used_by":[]},"get_comment_author_email_link":{"doc":"\/**\n * Return the html email link to the author of the current comment.\n *\n * Care should be taken to protect the email address and assure that email\n * harvesters do not capture your commentors' email address. Most assume that\n * their email address will not appear in raw form on the blog. Doing so will\n * enable anyone, including those that people don't want to get the email\n * address and use it for their own means good and bad.\n *\n * @since 2.7\n * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email\n * @global object $comment The current Comment row object\n *\n * @param string $linktext The text to display instead of the comment author's email address\n * @param string $before The text or HTML to display before the email link.\n * @param string $after The text or HTML to display after the email link.\n *\/","file":"comment-template.php","line":124,"missingDoc":false,"filters":["'comment_email'"],"uses":[],"used_by":{"comment_author_email_link":[103]}},"get_comment_author_link":{"doc":"\/**\n * Retrieve the html link to the url of the author of the current comment.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'get_comment_author_link' hook on the complete link HTML or author\n *\n * @param int $comment_ID The ID of the comment for which to get the author's link. Optional.\n * @return string Comment Author name or HTML link for author's URL\n *\/","file":"comment-template.php","line":147,"missingDoc":false,"filters":["'get_comment_author_link'"],"uses":{"get_comment_author_url":[149],"get_comment_author":[150]},"used_by":{"comment_author_link":[168],"Walker_Comment::start_el":[1354],"WP_Widget_Recent_Comments::widget":[694],"__main":[56]}},"get_comment_author_url":{"doc":"\/**\n * Retrieve the url of the author of the current comment.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'get_comment_author_url' hook on the comment author's URL\n *\n * @param int $comment_ID The ID of the comment for which to get the author's URL. Optional.\n * @return string\n *\/","file":"comment-template.php","line":207,"missingDoc":false,"filters":["'get_comment_author_url'"],"uses":{"get_comment":[208],"esc_url":[210]},"used_by":{"get_comment_author_link":[149],"comment_author_url":[224],"get_comment_author_url_link":[246],"__main":[61,61]}},"comment_author_link":{"doc":"\/**\n * Display the html link to the url of the author of the current comment.\n *\n * @since 0.71\n * @see get_comment_author_link() Echoes result\n *\n * @param int $comment_ID The ID of the comment for which to print the author's link. Optional.\n *\/","file":"comment-template.php","line":167,"missingDoc":false,"filters":[],"uses":{"get_comment_author_link":[168]},"used_by":[]},"get_comment_author_IP":{"doc":"\/**\n * Retrieve the IP address of the author of the current comment.\n *\n * @since 1.5.0\n * @uses $comment\n * @uses apply_filters()\n *\n * @param int $comment_ID The ID of the comment for which to get the author's IP address. Optional.\n * @return string The comment author's IP address.\n *\/","file":"comment-template.php","line":181,"missingDoc":false,"filters":["'get_comment_author_IP'"],"uses":{"get_comment":[182]},"used_by":{"comment_author_IP":[195]}},"comment_author_IP":{"doc":"\/**\n * Display the IP address of the author of the current comment.\n *\n * @since 0.71\n * @see get_comment_author_IP() Echoes Result\n *\n * @param int $comment_ID The ID of the comment for which to print the author's IP address. Optional.\n *\/","file":"comment-template.php","line":194,"missingDoc":false,"filters":[],"uses":{"get_comment_author_IP":[195]},"used_by":[]},"comment_author_url":{"doc":"\/**\n * Display the url of the author of the current comment.\n *\n * @since 0.71\n * @uses apply_filters()\n * @uses get_comment_author_url() Retrieves the comment author's URL\n *\n * @param int $comment_ID The ID of the comment for which to print the author's URL. Optional.\n *\/","file":"comment-template.php","line":223,"missingDoc":false,"filters":["'comment_url'"],"uses":{"get_comment_author_url":[224]},"used_by":[]},"get_comment_author_url_link":{"doc":"\/**\n * Retrieves the HTML link of the url of the author of the current comment.\n *\n * $linktext parameter is only used if the URL does not exist for the comment\n * author. If the URL does exist then the URL will be used and the $linktext\n * will be ignored.\n *\n * Encapsulate the HTML link between the $before and $after. So it will appear\n * in the order of $before, link, and finally $after.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls the 'get_comment_author_url_link' on the complete HTML before returning.\n *\n * @param string $linktext The text to display instead of the comment author's email address\n * @param string $before The text or HTML to display before the email link.\n * @param string $after The text or HTML to display after the email link.\n * @return string The HTML link between the $before and $after parameters\n *\/","file":"comment-template.php","line":245,"missingDoc":false,"filters":["'get_comment_author_url_link'"],"uses":{"get_comment_author_url":[246],"str_replace":[248,249],"substr":[251,250]},"used_by":{"comment_author_url_link":[267]}},"comment_author_url_link":{"doc":"\/**\n * Displays the HTML link of the url of the author of the current comment.\n *\n * @since 0.71\n * @see get_comment_author_url_link() Echoes result\n *\n * @param string $linktext The text to display instead of the comment author's email address\n * @param string $before The text or HTML to display before the email link.\n * @param string $after The text or HTML to display after the email link.\n *\/","file":"comment-template.php","line":266,"missingDoc":false,"filters":[],"uses":{"get_comment_author_url_link":[267]},"used_by":[]},"comment_class":{"doc":"\/**\n * Generates semantic classes for each comment element\n *\n * @since 2.7.0\n *\n * @param string|array $class One or more classes to add to the class list\n * @param int $comment_id An optional comment ID\n * @param int $post_id An optional post ID\n * @param bool $echo Whether comment_class should echo or return\n *\/","file":"comment-template.php","line":280,"missingDoc":false,"filters":[],"uses":{"join":[282],"get_comment_class":[282]},"used_by":{"Walker_Comment::start_el":[1348]}},"get_comment_class":{"doc":"\/**\n * Returns the classes for the comment div as an array\n *\n * @since 2.7.0\n *\n * @param string|array $class One or more classes to add to the class list\n * @param int $comment_id An optional comment ID\n * @param int $post_id An optional post ID\n * @return array Array of classes\n *\/","file":"comment-template.php","line":299,"missingDoc":false,"filters":["'comment_class'"],"uses":{"get_comment":[302],"sanitize_html_class":[313],"get_post":[315],"get_userdata":[310],"preg_split":[352],"is_array":[351],"array_merge":[353],"array_map":[356]},"used_by":{"comment_class":[282]}},"sanitize_html_class":{"doc":"\/**\n * Sanitizes a html classname to ensure it only contains valid characters\n *\n * Strips the string down to A-Z,a-z,0-9,_,-. If this results in an empty\n * string then it will return the alternative value supplied.\n *\n * @todo Expand to support the full range of CDATA that a class attribute can contain.\n *\n * @since 2.8.0\n *\n * @param string $class The classname to be sanitized\n * @param string $fallback Optional. The value to return if the sanitization end's up as an empty string.\n * \tDefaults to an empty string.\n * @return string The sanitized value\n *\/","file":"formatting.php","line":1053,"missingDoc":false,"filters":["'sanitize_html_class'"],"uses":{"preg_replace":[1055,1058]},"used_by":{"get_comment_class":[313],"gallery_shortcode":[765],"get_post_class":[335,356,365],"get_body_class":[433,441,456,461,468,475,481,482,504]}},"get_comment_date":{"doc":"\/**\n * Retrieve the comment date of the current comment.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'get_comment_date' hook with the formatted date and the $d parameter respectively\n * @uses $comment\n *\n * @param string $d The format of the date (defaults to user's config)\n * @param int $comment_ID The ID of the comment for which to get the date. Optional.\n * @return string The comment's date\n *\/","file":"comment-template.php","line":372,"missingDoc":false,"filters":["'get_comment_date'"],"uses":{"get_comment":[373],"mysql2date":[375,377],"get_option":[375]},"used_by":{"comment_date":[390],"Walker_Comment::start_el":[1364],"__main":[56]}},"comment_date":{"doc":"\/**\n * Display the comment date of the current comment.\n *\n * @since 0.71\n *\n * @param string $d The format of the date (defaults to user's config)\n * @param int $comment_ID The ID of the comment for which to print the date. Optional.\n *\/","file":"comment-template.php","line":389,"missingDoc":false,"filters":[],"uses":{"get_comment_date":[390]},"used_by":[]},"get_comment_excerpt":{"doc":"\/**\n * Retrieve the excerpt of the current comment.\n *\n * Will cut each word and only output the first 20 words with '...' at the end.\n * If the word count is less than 20, then no truncating is done and no '...'\n * will appear.\n *\n * @since 1.5.0\n * @uses $comment\n * @uses apply_filters() Calls 'get_comment_excerpt' on truncated comment\n *\n * @param int $comment_ID The ID of the comment for which to get the excerpt. Optional.\n * @return string The maybe truncated comment with 20 words or less\n *\/","file":"comment-template.php","line":407,"missingDoc":false,"filters":["'get_comment_excerpt'"],"uses":{"get_comment":[408],"strip_tags":[409],"explode":[410],"count":[415,411]},"used_by":{"comment_excerpt":[435]}},"comment_excerpt":{"doc":"\/**\n * Display the excerpt of the current comment.\n *\n * @since 1.2.0\n * @uses apply_filters() Calls 'comment_excerpt' hook before displaying excerpt\n *\n * @param int $comment_ID The ID of the comment for which to print the excerpt. Optional.\n *\/","file":"comment-template.php","line":434,"missingDoc":false,"filters":["'comment_excerpt'"],"uses":{"get_comment_excerpt":[435]},"used_by":[]},"get_comment_ID":{"doc":"\/**\n * Retrieve the comment id of the current comment.\n *\n * @since 1.5.0\n * @uses $comment\n * @uses apply_filters() Calls the 'get_comment_ID' hook for the comment ID\n *\n * @return int The comment ID\n *\/","file":"comment-template.php","line":447,"missingDoc":false,"filters":["'get_comment_ID'"],"uses":[],"used_by":{"comment_ID":[459],"comment_form_title":[1205],"__main":[56]}},"comment_ID":{"doc":"\/**\n * Displays the comment id of the current comment.\n *\n * @since 0.71\n * @see get_comment_ID() Echoes Result\n *\/","file":"comment-template.php","line":458,"missingDoc":false,"filters":[],"uses":{"get_comment_ID":[459]},"used_by":{"Walker_Comment::start_el":[1348,1350],"__main":[54]}},"get_page_of_comment":{"doc":"\/**\n * Calculate what page number a comment will appear on for comment paging.\n *\n * @since 2.7.0\n * @uses get_comment() Gets the full comment of the $comment_ID parameter.\n * @uses get_option() Get various settings to control function and defaults.\n * @uses get_page_of_comment() Used to loop up to top level comment.\n *\n * @param int $comment_ID Comment ID.\n * @param array $args Optional args.\n * @return int|null Comment page number or null on error.\n *\/","file":"comment.php","line":825,"missingDoc":false,"filters":[],"uses":{"get_comment":[828],"wp_parse_args":[832],"get_query_var":[835],"get_option":[834,845,844],"get_page_of_comment":[852],"get_var":[863],"prepare":[863],"ceil":[870]},"used_by":{"get_comment_link":[497],"get_page_of_comment":[852]}},"get_comments_link":{"doc":"\/**\n * Retrieves the link to the current post comments.\n *\n * @since 1.5.0\n *\n * @param int $post_id Optional post id\n * @return string The link to the comments\n *\/","file":"comment-template.php","line":518,"missingDoc":false,"filters":[],"uses":{"get_permalink":[519]},"used_by":{"comments_link":[535],"comments_link_feed":[201]}},"comments_link":{"doc":"\/**\n * Displays the link to the current post comments.\n *\n * @since 0.71\n *\n * @param string $deprecated Not Used\n * @param bool $deprecated_2 Not Used\n *\/","file":"comment-template.php","line":530,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[532,534],"get_comments_link":[535]},"used_by":{"comments_popup_link":[1002]}},"get_comments_number":{"doc":"\/**\n * Retrieve the amount of comments a post has.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls the 'get_comments_number' hook on the number of comments\n *\n * @param int $post_id The Post ID\n * @return int The number of comments a post has\n *\/","file":"comment-template.php","line":547,"missingDoc":false,"filters":["'get_comments_number'"],"uses":{"absint":[548],"get_the_ID":[551],"get_post":[553]},"used_by":{"comments_number":[577],"comments_popup_link":[978],"__main":[50,51,52,55,26,27]}},"get_the_ID":{"doc":"\/**\n * Retrieve the ID of the current item in the WordPress Loop.\n *\n * @since 2.1.0\n * @uses $post\n *\n * @return int\n *\/","file":"post-template.php","line":28,"missingDoc":false,"filters":[],"uses":{"get_post":[29]},"used_by":{"get_comments_number":[551],"get_trackback_url":[710],"comments_popup_link":[971],"get_comment_id_fields":[1166],"WP_Widget_Recent_Posts::widget":[574],"get_post_comments_feed_link":[469],"the_ID":[17],"get_post_thumbnail_id":[33],"get_the_post_thumbnail":[86],"get_post_custom":[1853],"is_sticky":[1916]}},"comments_number":{"doc":"\/**\n * Display the language string for the number of comments the current post has.\n *\n * @since 0.71\n * @uses apply_filters() Calls the 'comments_number' hook on the output and number of comments respectively.\n *\n * @param string $zero Text for no comments\n * @param string $one Text for one comment\n * @param string $more Text for more than one comment\n * @param string $deprecated Not used.\n *\/","file":"comment-template.php","line":573,"missingDoc":false,"filters":["'comments_number'"],"uses":{"_deprecated_argument":[575],"get_comments_number":[577],"str_replace":[580],"number_format_i18n":[580],"__":[580,582,584]},"used_by":{"comments_popup_link":[1014]}},"get_comment_text":{"doc":"\/**\n * Retrieve the text of the current comment.\n *\n * @since 1.5.0\n * @uses $comment\n *\n * @param int $comment_ID The ID of the comment for which to get the text. Optional.\n * @return string The comment content\n *\/","file":"comment-template.php","line":598,"missingDoc":false,"filters":["'get_comment_text'"],"uses":{"get_comment":[599]},"used_by":{"comment_text":[614],"comment_text_rss":[281]}},"comment_text":{"doc":"\/**\n * Displays the text of the current comment.\n *\n * @since 0.71\n * @uses apply_filters() Passes the comment content through the 'comment_text' hook before display\n * @uses get_comment_text() Gets the comment content\n *\n * @param int $comment_ID The ID of the comment for which to print the text. Optional.\n *\/","file":"comment-template.php","line":612,"missingDoc":false,"filters":["'comment_text'"],"uses":{"get_comment":[613],"get_comment_text":[614]},"used_by":{"Walker_Comment::start_el":[1368],"__main":[71,58,55]}},"get_comment_time":{"doc":"\/**\n * Retrieve the comment time of the current comment.\n *\n * @since 1.5.0\n * @uses $comment\n * @uses apply_filter() Calls 'get_comment_time' hook with the formatted time, the $d parameter, and $gmt parameter passed.\n *\n * @param string $d Optional. The format of the time (defaults to user's config)\n * @param bool $gmt Whether to use the GMT date\n * @param bool $translate Whether to translate the time (for use in feeds)\n * @return string The formatted time\n *\/","file":"comment-template.php","line":629,"missingDoc":false,"filters":["'get_comment_time'"],"uses":{"mysql2date":[633,635],"get_option":[633]},"used_by":{"comment_time":[647],"Walker_Comment::start_el":[1364],"__main":[66,67,51,56]}},"comment_time":{"doc":"\/**\n * Display the comment time of the current comment.\n *\n * @since 0.71\n *\n * @param string $d Optional. The format of the time (defaults to user's config)\n *\/","file":"comment-template.php","line":646,"missingDoc":false,"filters":[],"uses":{"get_comment_time":[647]},"used_by":[]},"get_comment_type":{"doc":"\/**\n * Retrieve the comment type of the current comment.\n *\n * @since 1.5.0\n * @uses $comment\n * @uses apply_filters() Calls the 'get_comment_type' hook on the comment type\n *\n * @param int $comment_ID The ID of the comment for which to get the type. Optional.\n * @return string The comment type\n *\/","file":"comment-template.php","line":660,"missingDoc":false,"filters":["'get_comment_type'"],"uses":{"get_comment":[661]},"used_by":{"comment_type":[681]}},"comment_type":{"doc":"\/**\n * Display the comment type of the current comment.\n *\n * @since 0.71\n *\n * @param string $commenttxt The string to display for comment type\n * @param string $trackbacktxt The string to display for trackback type\n * @param string $pingbacktxt The string to display for pingback type\n *\/","file":"comment-template.php","line":677,"missingDoc":false,"filters":[],"uses":{"_x":[678],"__":[679,680],"get_comment_type":[681]},"used_by":{"__main":[56]}},"get_trackback_url":{"doc":"\/**\n * Retrieve The current post's trackback URL.\n *\n * There is a check to see if permalink's have been enabled and if so, will\n * retrieve the pretty path. If permalinks weren't enabled, the ID of the\n * current post is used and appended to the correct page to go to.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'trackback_url' on the resulting trackback URL\n *\n * @return string The trackback URL after being filtered\n *\/","file":"comment-template.php","line":706,"missingDoc":false,"filters":["'trackback_url'"],"uses":{"trailingslashit":[708],"get_permalink":[708],"user_trailingslashit":[708],"get_option":[710,707],"get_the_ID":[710]},"used_by":{"trackback_url":[728,730],"trackback_rdf":[759],"__main":[38]}},"trackback_url":{"doc":"\/**\n * Displays the current post's trackback URL.\n *\n * @since 0.71\n * @uses get_trackback_url() Gets the trackback url for the current post\n *\n * @param bool $deprecated_echo Remove backwards compat in 2.5\n * @return void|string Should only be used to echo the trackback URL, use get_trackback_url() for the result instead.\n *\/","file":"comment-template.php","line":724,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[726],"__":[726],"get_trackback_url":[728,730]},"used_by":[]},"trackback_rdf":{"doc":"\/**\n * Generates and displays the RDF for the trackback information of current post.\n *\n * Deprecated in 3.0.0, and restored in 3.0.1.\n *\n * @since 0.71\n *\n * @param int $deprecated Not used (Was $timezone = 0)\n *\/","file":"comment-template.php","line":742,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[744],"stripos":[746],"the_permalink":[753,756],"str_replace":[758],"wptexturize":[758],"strip_tags":[758],"get_the_title":[758],"get_trackback_url":[759]},"used_by":[]},"the_permalink":{"doc":"\/**\n * Display the permalink for the current post.\n *\n * @since 1.2.0\n * @uses apply_filters() Calls 'the_permalink' filter on the permalink string.\n *\/","file":"link-template.php","line":15,"missingDoc":false,"filters":["'the_permalink'"],"uses":{"get_permalink":[16]},"used_by":{"trackback_rdf":[753,756],"WP_Widget_Recent_Posts::widget":[574],"permalink_link":[864]}},"wp_comment_form_unfiltered_html_nonce":{"doc":"\/**\n * Displays form token for unfiltered comments.\n *\n * Will only display nonce token if the current user has permissions for\n * unfiltered html. Won't display the token for other users.\n *\n * The function was backported to 2.0.10 and was added to versions 2.1.3 and\n * above. Does not exist in versions prior to 2.0.10 in the 2.0 branch and in\n * the 2.1 branch, prior to 2.1.3. Technically added in 2.2.0.\n *\n * Backported to 2.0.10.\n *\n * @since 2.1.3\n * @uses $post Gets the ID of the current post for the token\n *\/","file":"comment-template.php","line":812,"missingDoc":false,"filters":[],"uses":{"get_post":[813],"wp_nonce_field":[817],"current_user_can":[816]},"used_by":[]},"comments_template":{"doc":"\/**\n * Loads the comment template specified in $file.\n *\n * Will not display the comments template if not on single post or page, or if\n * the post does not have comments.\n *\n * Uses the WordPress database object to query for the comments. The comments\n * are passed through the 'comments_array' filter hook with the list of comments\n * and the post ID respectively.\n *\n * The $file path is passed through a filter hook called, 'comments_template'\n * which includes the TEMPLATEPATH and $file combined. Tries the $filtered path\n * first and if it fails it will require the default comment template from the\n * default theme. If either does not exist, then the WordPress process will be\n * halted. It is advised for that reason, that the default theme is not deleted.\n *\n * @since 1.5.0\n * @global array $comment List of comment objects for the current post\n * @uses $wpdb\n * @uses $post\n * @uses $withcomments Will not try to get the comments if the post has none.\n *\n * @param string $file Optional, default '\/comments.php'. The file to load\n * @param bool $separate_comments Optional, whether to separate the comments by comment type. Default is false.\n * @return null Returns null if no comments appear\n *\/","file":"comment-template.php","line":848,"missingDoc":false,"filters":["'comments_array'","'comments_template'"],"uses":{"is_single":[851],"is_page":[851],"get_option":[857,903,902],"wp_get_current_commenter":[864],"esc_url":[879],"get_results":[883,887],"prepare":[883,887],"get_comments":[885],"wp_specialchars_decode":[887],"count":[893],"update_comment_cache":[894],"separate_comments":[897],"set_query_var":[903],"get_comment_pages_count":[903],"get_query_var":[902],"define":[908],"defined":[907],"file_exists":[913,911]},"used_by":[]},"wp_get_current_commenter":{"doc":"\/**\n * Get current commenter's name, email, and URL.\n *\n * Expects cookies content to already be sanitized. User of this function might\n * wish to recheck the returned array for validity.\n *\n * @see sanitize_comment_cookies() Use to sanitize cookies\n *\n * @since 2.0.4\n *\n * @return array Comment author, email, url respectively.\n *\/","file":"comment.php","line":1231,"missingDoc":false,"filters":["'wp_get_current_commenter'"],"uses":{"compact":[1246]},"used_by":{"comments_template":[864],"comment_form":[1517],"__main":[43]}},"wp_specialchars_decode":{"doc":"\/**\n * Converts a number of HTML entities into their special characters.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to decode \" entities,\n * or ENT_QUOTES to do both \" and '. Default is ENT_NOQUOTES where no quotes are decoded.\n *\n * @since 2.8\n *\n * @param string $string The text which is to be decoded.\n * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old _wp_specialchars() values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES.\n * @return string The decoded text without HTML entities.\n *\/","file":"formatting.php","line":451,"missingDoc":false,"filters":[],"uses":{"strlen":[454],"strpos":[459],"in_array":[466],"array_merge":[479,480,482,483,485,486],"preg_replace":[493],"array_keys":[493],"array_values":[493],"strtr":[496]},"used_by":{"comments_template":[887],"_wp_specialchars":[416],"wp_notify_postauthor":[1014],"wp_notify_moderator":[1113],"wp_password_change_notification":[1182],"wp_new_user_notification":[1205]}},"update_comment_cache":{"doc":"\/**\n * Updates the comment cache of given comments.\n *\n * Will add the comments in $comments to the cache. If comment ID already exists\n * in the comment cache then it will not be updated. The comment is added to the\n * cache using the comment group with the key using the ID of the comments.\n *\n * @since 2.3.0\n * @package WordPress\n * @subpackage Cache\n *\n * @param array $comments Array of comment row objects\n *\/","file":"comment.php","line":1992,"missingDoc":false,"filters":[],"uses":{"wp_cache_add":[1994]},"used_by":{"comments_template":[894]}},"separate_comments":{"doc":"\/**\n * Separates an array of comments into an array keyed by comment_type.\n *\n * @since 2.7.0\n *\n * @param array $comments Array of comments\n * @return array Array of comments keyed by comment_type.\n *\/","file":"comment.php","line":753,"missingDoc":false,"filters":[],"uses":{"count":[755]},"used_by":{"comments_template":[897],"wp_list_comments":[1431,1443]}},"set_query_var":{"doc":"\/**\n * Set query variable.\n *\n * @see WP_Query::set()\n * @since 2.2.0\n * @uses $wp_query\n *\n * @param string $var Query variable key.\n * @param mixed $value\n * @return null\n *\/","file":"query.php","line":71,"missingDoc":false,"filters":[],"uses":{"set":[74]},"used_by":{"comments_template":[903],"wp_list_comments":[1473]}},"get_comment_pages_count":{"doc":"\/**\n * Calculate the total number of comment pages.\n *\n * @since 2.7.0\n * @uses get_query_var() Used to fill in the default for $per_page parameter.\n * @uses get_option() Used to fill in defaults for parameters.\n * @uses Walker_Comment\n *\n * @param array $comments Optional array of comment objects. Defaults to $wp_query->comments\n * @param int $per_page Optional comments per page.\n * @param boolean $threaded Optional control over flat or threaded comments.\n * @return int Number of comment pages.\n *\/","file":"comment.php","line":781,"missingDoc":false,"filters":[],"uses":{"is_array":[787],"get_query_var":[794],"get_option":[796,801],"ceil":[805,807],"get_number_of_root_elements":[805],"count":[807]},"used_by":{"comments_template":[903],"wp_list_comments":[1472],"get_next_comments_link":[1738],"paginate_comments_links":[1815]}},"comments_popup_script":{"doc":"\/**\n * Displays the JS popup script to show a comment.\n *\n * If the $file parameter is empty, then the home page is assumed. The defaults\n * for the window are 400px by 400px.\n *\n * For the comment link popup to work, this function has to be called or the\n * normal comment link will be assumed.\n *\n * @since 0.71\n * @global string $wpcommentspopupfile The URL to use for the popup window\n * @global int $wpcommentsjavascript Whether to use JavaScript. Set when function is called\n *\n * @param int $width Optional. The width of the popup window\n * @param int $height Optional. The height of the popup window\n * @param string $file Optional. Sets the location of the popup window\n *\/","file":"comment-template.php","line":936,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"comments_popup_link":{"doc":"\/**\n * Displays the link to the comments popup window for the current post ID.\n *\n * Is not meant to be displayed on single posts and pages. Should be used on the\n * lists of posts\n *\n * @since 0.71\n * @uses $wpcommentspopupfile\n * @uses $wpcommentsjavascript\n * @uses $post\n *\n * @param string $zero The string to display when no comments\n * @param string $one The string to display when only one comment is available\n * @param string $more The string to display when there are more than one comment\n * @param string $css_class The CSS class to use for comments\n * @param string $none The string to display when comments have been turned off\n * @return null Returns null on single posts and pages.\n *\/","file":"comment-template.php","line":968,"missingDoc":false,"filters":["'comments_popup_link_attributes'"],"uses":{"get_the_ID":[971],"__":[973,974,975,976,986,1013],"get_comments_number":[978],"esc_attr":[981,1013],"comments_open":[980],"pings_open":[980],"post_password_required":[985],"home_url":[993],"get_option":[995],"get_permalink":[1000],"comments_link":[1002],"the_title_attribute":[1009],"sprintf":[1013],"comments_number":[1014]},"used_by":[]},"post_password_required":{"doc":"\/**\n * Whether post requires password and correct password has been provided.\n *\n * @since 2.7.0\n *\n * @param int|object $post An optional post. Global $post used if not provided.\n * @return bool false if a password is not required or the correct password cookie is present, true otherwise.\n *\/","file":"post-template.php","line":569,"missingDoc":false,"filters":[],"uses":{"get_post":[572],"stripslashes":[586],"CheckPassword":[588]},"used_by":{"comments_popup_link":[985],"__main":[68,53,47,16],"rss_enclosure":[386],"atom_enclosure":[422],"get_the_content":[192],"get_the_excerpt":[266],"get_post_class":[341]}},"the_title_attribute":{"doc":"\/**\n * Sanitize the current title when retrieving or displaying.\n *\n * Works like {@link the_title()}, except the parameters can be in a string or\n * an array. See the function for what can be override in the $args parameter.\n *\n * The title before it is displayed will have the tags stripped and {@link\n * esc_attr()} before it is passed to the user or displayed. The default\n * as with {@link the_title()}, is to display the title.\n *\n * @since 2.3.0\n *\n * @param string|array $args Optional. Override the defaults.\n * @return string|null Null on failure or display. String when echo is false.\n *\/","file":"post-template.php","line":71,"missingDoc":false,"filters":[],"uses":{"get_the_title":[72],"strlen":[74],"wp_parse_args":[78],"extract":[79],"esc_attr":[82],"strip_tags":[82]},"used_by":{"comments_popup_link":[1009],"the_shortlink":[2430]}},"get_comment_reply_link":{"doc":"\/**\n * Retrieve HTML content for reply to comment link.\n *\n * The default arguments that can be override are 'add_below', 'respond_id',\n * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be\n * used, if the user must log in or register first before posting a comment. The\n * 'reply_text' will be used, if they can post a reply. The 'add_below' and\n * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function\n * parameters.\n *\n * @since 2.7.0\n *\n * @param array $args Optional. Override default options.\n * @param int $comment Optional. Comment being replied to.\n * @param int $post Optional. Post that the comment is going to be displayed on.\n * @return string|bool|null Link to show comment form, if successful. False, if comments are closed.\n *\/","file":"comment-template.php","line":1035,"missingDoc":false,"filters":["'comment_reply_link'"],"uses":{"__":[1038,1039],"wp_parse_args":[1041],"extract":[1046],"get_comment":[1048],"get_post":[1051],"comments_open":[1053],"esc_url":[1059,1061],"wp_login_url":[1059],"get_permalink":[1059],"add_query_arg":[1061],"get_option":[1058]},"used_by":{"comment_reply_link":[1077]}},"wp_login_url":{"doc":"\/**\n * Returns the Log In URL.\n *\n * Returns the URL that allows the user to log in to the site\n *\n * @since 2.7.0\n * @uses site_url() To generate the log in URL\n * @uses apply_filters() calls 'login_url' hook on final login url\n *\n * @param string $redirect Path to redirect to on login.\n * @param bool $force_reauth Whether to force reauthorization, even if a cookie is present. Default is false.\n * @return string A log in URL.\n *\/","file":"general-template.php","line":237,"missingDoc":false,"filters":["'login_url'"],"uses":{"site_url":[238],"add_query_arg":[241,244],"urlencode":[241]},"used_by":{"get_comment_reply_link":[1059],"get_post_reply_link":[1110],"comment_form":[1536],"wp_loginout":[189],"wpmu_welcome_user_notification":[1292],"auth_redirect":[787],"wp_new_user_notification":[1218],"__main":[65]}},"comment_reply_link":{"doc":"\/**\n * Displays the HTML content for reply to comment link.\n *\n * @since 2.7.0\n * @see get_comment_reply_link() Echoes result\n *\n * @param array $args Optional. Override default options.\n * @param int $comment Optional. Comment being replied to.\n * @param int $post Optional. Post that the comment is going to be displayed on.\n * @return string|bool|null Link to show comment form, if successful. False, if comments are closed.\n *\/","file":"comment-template.php","line":1076,"missingDoc":false,"filters":[],"uses":{"get_comment_reply_link":[1077]},"used_by":{"Walker_Comment::start_el":[1371]}},"get_post_reply_link":{"doc":"\/**\n * Retrieve HTML content for reply to post link.\n *\n * The default arguments that can be override are 'add_below', 'respond_id',\n * 'reply_text', 'login_text', and 'depth'. The 'login_text' argument will be\n * used, if the user must log in or register first before posting a comment. The\n * 'reply_text' will be used, if they can post a reply. The 'add_below' and\n * 'respond_id' arguments are for the JavaScript moveAddCommentForm() function\n * parameters.\n *\n * @since 2.7.0\n *\n * @param array $args Optional. Override default options.\n * @param int|object $post Optional. Post that the comment is going to be displayed on. Defaults to current post.\n * @return string|bool|null Link to show comment form, if successful. False, if comments are closed.\n *\/","file":"comment-template.php","line":1096,"missingDoc":false,"filters":["'post_comments_link'"],"uses":{"__":[1099,1100],"wp_parse_args":[1102],"extract":[1103],"get_post":[1104],"comments_open":[1106],"wp_login_url":[1110],"get_permalink":[1110,1112],"get_option":[1109]},"used_by":{"post_reply_link":[1127]}},"post_reply_link":{"doc":"\/**\n * Displays the HTML content for reply to post link.\n * @since 2.7.0\n * @see get_post_reply_link()\n *\n * @param array $args Optional. Override default options.\n * @param int|object $post Optional. Post that the comment is going to be displayed on.\n * @return string|bool|null Link to show comment form, if successful. False, if comments are closed.\n *\/","file":"comment-template.php","line":1126,"missingDoc":false,"filters":[],"uses":{"get_post_reply_link":[1127]},"used_by":[]},"get_cancel_comment_reply_link":{"doc":"\/**\n * Retrieve HTML content for cancel comment reply link.\n *\n * @since 2.7.0\n *\n * @param string $text Optional. Text to display for cancel reply link.\n *\/","file":"comment-template.php","line":1137,"missingDoc":false,"filters":["'cancel_comment_reply_link'"],"uses":{"__":[1139],"esc_html":[1142],"remove_query_arg":[1142]},"used_by":{"cancel_comment_reply_link":[1154]}},"cancel_comment_reply_link":{"doc":"\/**\n * Display HTML content for cancel comment reply link.\n *\n * @since 2.7.0\n *\n * @param string $text Optional. Text to display for cancel reply link.\n *\/","file":"comment-template.php","line":1153,"missingDoc":false,"filters":[],"uses":{"get_cancel_comment_reply_link":[1154]},"used_by":{"comment_form":[1554],"__main":[61]}},"get_comment_id_fields":{"doc":"\/**\n * Retrieve hidden input HTML for replying to comments.\n *\n * @since 3.0.0\n *\n * @return string Hidden input HTML for replying to comments\n *\/","file":"comment-template.php","line":1164,"missingDoc":false,"filters":["'comment_id_fields'"],"uses":{"get_the_ID":[1166]},"used_by":{"comment_id_fields":[1181]}},"comment_id_fields":{"doc":"\/**\n * Output hidden input HTML for replying to comments.\n *\n * @since 2.7.0\n * @see get_comment_id_fields() Echoes result\n *\/","file":"comment-template.php","line":1180,"missingDoc":false,"filters":[],"uses":{"get_comment_id_fields":[1181]},"used_by":{"comment_form":[1578],"__main":[92]}},"comment_form_title":{"doc":"\/**\n * Display text based on comment reply status. Only affects users with Javascript disabled.\n *\n * @since 2.7.0\n *\n * @param string $noreplytext Optional. Text to display when not replying to a comment.\n * @param string $replytext Optional. Text to display when replying to a comment. Accepts \"%s\" for the author of the comment being replied to.\n * @param string $linktoparent Optional. Boolean to control making the author's name a link to their comment.\n *\/","file":"comment-template.php","line":1193,"missingDoc":false,"filters":[],"uses":{"__":[1196,1197],"get_comment":[1204],"get_comment_ID":[1205],"get_comment_author":[1205,1205],"printf":[1206]},"used_by":{"comment_form":[1554],"__main":[58]}},"Walker_Comment::start_lvl":{"doc":"\/**\n * @see Walker::start_lvl()\n * @since 2.7.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param int $depth Depth of comment.\n * @param array $args Uses 'style' argument for type of HTML list.\n *\/","file":"comment-template.php","line":1240,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Walker_Comment::end_lvl":{"doc":"\/**\n * @see Walker::end_lvl()\n * @since 2.7.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param int $depth Depth of comment.\n * @param array $args Will only append content if style argument value is 'ol' or 'ul'.\n *\/","file":"comment-template.php","line":1264,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Walker_Comment::display_element":{"doc":"\/**\n * This function is designed to enhance Walker::display_element() to\n * display children of higher nesting levels than selected inline on\n * the highest depth level displayed. This prevents them being orphaned\n * at the end of the comment list.\n *\n * Example: max_depth = 2, with 5 levels of nested content.\n * 1\n *  1.1\n *    1.1.1\n *    1.1.1.1\n *    1.1.1.1.1\n *    1.1.2\n *    1.1.2.1\n * 2\n *  2.2\n *\n *\/","file":"comment-template.php","line":1298,"missingDoc":false,"filters":[],"uses":{"display_element":[1312]},"used_by":[]},"Walker_Comment::start_el":{"doc":"\/**\n * @see Walker::start_el()\n * @since 2.7.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $comment Comment data object.\n * @param int $depth Depth of comment in reference to parents.\n * @param array $args\n *\/","file":"comment-template.php","line":1328,"missingDoc":false,"filters":[],"uses":{"call_user_func":[1334],"extract":[1338],"comment_class":[1348],"comment_ID":[1348,1350],"get_avatar":[1353],"printf":[1354,1364],"__":[1354,1364,1364],"get_comment_author_link":[1354],"_e":[1357],"htmlspecialchars":[1361],"get_comment_link":[1361],"get_comment_date":[1364],"get_comment_time":[1364],"edit_comment_link":[1364],"comment_text":[1368],"comment_reply_link":[1371],"array_merge":[1371]},"used_by":[]},"edit_comment_link":{"doc":"\/**\n * Display or retrieve edit comment link with formatting.\n *\n * @since 1.0.0\n *\n * @param string $link Optional. Anchor text.\n * @param string $before Optional. Display before edit link.\n * @param string $after Optional. Display after edit link.\n * @return string|null HTML content, if $echo is set to false.\n *\/","file":"link-template.php","line":1000,"missingDoc":false,"filters":["'edit_comment_link'"],"uses":{"current_user_can":[1003],"__":[1007],"get_edit_comment_link":[1009],"esc_attr__":[1009]},"used_by":{"Walker_Comment::start_el":[1364]}},"Walker_Comment::end_el":{"doc":"\/**\n * @see Walker::end_el()\n * @since 2.7.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $comment\n * @param int $depth Depth of comment.\n * @param array $args\n *\/","file":"comment-template.php","line":1388,"missingDoc":false,"filters":[],"uses":{"call_user_func":[1390]},"used_by":[]},"wp_list_comments":{"doc":"\/**\n * List comments\n *\n * Used in the comments.php template to list comments for a particular post\n *\n * @since 2.7.0\n * @uses Walker_Comment\n *\n * @param string|array $args Formatting options\n * @param array $comments Optional array of comment objects. Defaults to $wp_query->comments\n *\/","file":"comment-template.php","line":1412,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[1423],"separate_comments":[1431,1443],"get_query_var":[1453,1469],"get_option":[1452,1462,1461,1472,1482],"get_comment_pages_count":[1472],"set_query_var":[1473],"intval":[1477],"extract":[1484],"paged_walk":[1489]},"used_by":{"__main":[35]}},"comment_form":{"doc":"\/**\n * Outputs a complete commenting form for use within a template.\n * Most strings and form fields may be controlled through the $args array passed\n * into the function, while you may also choose to use the comment_form_default_fields\n * filter to modify the array of default fields if you'd just like to add a new\n * one or remove a single field. All fields are also individually passed through\n * a filter of the form comment_form_field_$name where $name is the key used\n * in the array of fields.\n *\n * @since 3.0.0\n * @param array $args Options for strings, fields etc in the form\n * @param mixed $post_id Post ID to generate the form for, uses the current post if null\n * @return void\n *\/","file":"comment-template.php","line":1509,"missingDoc":false,"filters":["'comment_form_default_fields'","'the_permalink'","'the_permalink'","'comment_form_defaults'","'comment_form_before'","'comment_form_must_log_in_after'","'comment_form_top'","'comment_form_logged_in'","'comment_form_logged_in_after'","'comment_form_before_fields'","\"comment_form_field_{$name}\"","'comment_form_after_fields'","'comment_form_field_comment'","'comment_form'","'comment_form_after'","'comment_form_comments_closed'"],"uses":{"wp_get_current_commenter":[1517],"wp_get_current_user":[1518],"exists":[1519],"get_option":[1521,1555],"__":[1524,1526,1528,1532,1536,1537,1538,1539,1542,1543,1544,1545],"esc_attr":[1525,1527,1529,1559,1577,1577],"sprintf":[1532,1536,1537,1539],"_x":[1535],"wp_login_url":[1536],"get_permalink":[1536,1537],"get_edit_user_link":[1537],"wp_logout_url":[1537],"allowed_tags":[1539],"wp_parse_args":[1548],"comment_form_title":[1554],"cancel_comment_reply_link":[1554],"site_url":[1559],"is_user_logged_in":[1561,1555],"comment_id_fields":[1578],"comments_open":[1551]},"used_by":[]},"get_edit_user_link":{"doc":"\/**\n * Retrieve edit user link\n *\n * @since 3.5.0\n *\n * @param int $user_id Optional. User ID. Defaults to the current user.\n * @return string URL to edit user page or empty string.\n *\/","file":"link-template.php","line":1062,"missingDoc":false,"filters":["'get_edit_user_link'"],"uses":{"get_current_user_id":[1064,1074],"current_user_can":[1066],"get_userdata":[1069],"get_edit_profile_url":[1075],"add_query_arg":[1077],"self_admin_url":[1077]},"used_by":{"comment_form":[1537],"__main":[71,72]}},"allowed_tags":{"doc":"\/**\n * Display all of the allowed tags in HTML format with attributes.\n *\n * This is useful for displaying in the comment area, which elements and\n * attributes are supported. As well as any plugins which want to display it.\n *\n * @since 1.0.1\n * @uses $allowedtags\n *\n * @return string HTML allowed tags entity encoded.\n *\/","file":"general-template.php","line":1298,"missingDoc":false,"filters":[],"uses":{"count":[1303],"htmlentities":[1310]},"used_by":{"comment_form":[1539],"__main":[67,87]}},"check_comment":{"doc":"\/**\n * Checks whether a comment passes internal checks to be allowed to add.\n *\n * If comment moderation is set in the administration, then all comments,\n * regardless of their type and whitelist will be set to false. If the number of\n * links exceeds the amount in the administration, then the check fails. If any\n * of the parameter contents match the blacklist of words, then the check fails.\n *\n * If the number of links exceeds the amount in the administration, then the\n * check fails. If any of the parameter contents match the blacklist of words,\n * then the check fails.\n *\n * If the comment author was approved before, then the comment is\n * automatically whitelisted.\n *\n * If none of the checks fail, then the failback is to set the check to pass\n * (return true).\n *\n * @since 1.2.0\n * @uses $wpdb\n *\n * @param string $author Comment Author's name\n * @param string $email Comment Author's email\n * @param string $url Comment Author's URL\n * @param string $comment Comment contents\n * @param string $user_ip Comment Author's IP address\n * @param string $user_agent Comment Author's User Agent\n * @param string $comment_type Comment type, either user submitted comment,\n *\t\ttrackback, or pingback\n * @return bool Whether the checks passed (true) and the comments should be\n *\t\tdisplayed or set to moderated\n *\/","file":"comment.php","line":41,"missingDoc":false,"filters":["'comment_text'","'comment_max_links_url'"],"uses":{"get_option":[44,50,57,83],"preg_match_all":[51],"trim":[57,62],"explode":[59],"preg_quote":[70],"preg_match":[73,74,75,76,77,78],"get_var":[86],"strpos":[88]},"used_by":{"wp_allow_comment":[696]}},"get_approved_comments":{"doc":"\/**\n * Retrieve the approved comments for post $post_id.\n *\n * @since 2.0.0\n * @uses $wpdb\n *\n * @param int $post_id The ID of the post\n * @return array $comments The approved comments\n *\/","file":"comment.php","line":108,"missingDoc":false,"filters":[],"uses":{"get_results":[110],"prepare":[110]},"used_by":{"__main":[45]}},"WP_Comment_Query::query":{"doc":"\/**\n * Execute the query\n *\n * @since 3.1.0\n *\n * @param string|array $query_vars\n * @return int|array\n *\/","file":"comment.php","line":210,"missingDoc":false,"filters":["'pre_get_comments'"],"uses":{"wp_parse_args":[241],"parse_query_vars":[245],"extract":[248],"md5":[251],"serialize":[251],"compact":[251,350,365],"array_keys":[251],"wp_cache_get":[252,257],"wp_cache_set":[254],"absint":[260,310,311],"prepare":[267,331,333,335,341,344,346,354],"strtoupper":[271],"is_array":[274],"preg_split":[274],"array_intersect":[297],"implode":[305],"get_search_sql":[348],"array_filter":[350],"get_sql":[358],"apply_filters_ref_array":[365,378],"get_var":[375],"get_results":[377],"wp_cache_add":[380]},"used_by":[]},"apply_filters_ref_array":{"doc":"\/**\n * Execute functions hooked on a specific filter hook, specifying arguments in an array.\n *\n * @see apply_filters() This function is identical, but the arguments passed to the\n * functions hooked to <tt>$tag<\/tt> are supplied using an array.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 3.0.0\n * @global array $wp_filter Stores all of the filters\n * @global array $merged_filters Merges the filter hooks using this function.\n * @global array $wp_current_filter stores the list of current filters with the current one last\n *\n * @param string $tag The name of the filter hook.\n * @param array $args The arguments supplied to the functions hooked to <tt>$tag<\/tt>\n * @return mixed The filtered value after all hooked functions are applied to it.\n *\/","file":"plugin.php","line":200,"missingDoc":false,"filters":[],"uses":{"func_get_args":[206],"_wp_call_all_hook":[207],"array_pop":[212,234],"ksort":[221],"reset":[225],"next":[232],"call_user_func_array":[230],"array_slice":[230],"is_null":[229],"current":[228]},"used_by":{"WP_Comment_Query::query":[365,378],"WP_Meta_Query::get_sql":[830],"WP_Query::get_posts":[2209,2523,2524,2555,2556,2557,2558,2559,2585,2586,2587,2588,2589,2590,2591,2594,2604,2605,2606,2607,2608,2609,2610,2613,2630,2683,2686,2687,2688,2690,2692,2727,2772],"WP_Query::set_found_posts":[2809,2813]}},"WP_Comment_Query::get_search_sql":{"doc":"","file":"comment.php","line":395,"missingDoc":true,"filters":[],"uses":{"esc_sql":[396],"like_escape":[396],"implode":[402]},"used_by":[]},"esc_sql":{"doc":"\/**\n * Escapes data for use in a MySQL query\n *\n * This is just a handy shortcut for $wpdb->escape(), for completeness' sake\n *\n * @since 2.8.0\n * @param string $sql Unescaped SQL data\n * @return string The cleaned $sql\n *\/","file":"formatting.php","line":2558,"missingDoc":false,"filters":[],"uses":{"escape":[2560]},"used_by":{"WP_Comment_Query::get_search_sql":[396],"wp_update_comment":[1498],"addslashes_gpc":[1401],"wp_rel_nofollow":[1697],"add_metadata":[43],"update_metadata":[113],"delete_metadata":[196],"update_metadata_by_mid":[400],"delete_metadata_by_mid":[481],"update_meta_cache":[531],"WP_Meta_Query::get_sql":[709],"wp_unique_post_slug":[3118],"WP_Query::get_posts":[2196],"WP_Tax_Query::transform_query":[788],"_pad_term_counts":[2874],"_update_post_term_count":[2934],"WP_User_Query::prepare_query":[401],"WP_User_Query::get_search_sql":[612],"wp_create_user":[1507,1508]}},"get_comment_count":{"doc":"\/**\n * The amount of comments in a post or total comments.\n *\n * A lot like {@link wp_count_comments()}, in that they both return comment\n * stats (albeit with different types). The {@link wp_count_comments()} actual\n * caches, but this function does not.\n *\n * @since 2.0.0\n * @uses $wpdb\n *\n * @param int $post_id Optional. Comment amount in post if > 0, else total comments blog wide.\n * @return array The amount of spam, approved, awaiting moderation, and total comments.\n *\/","file":"comment.php","line":479,"missingDoc":false,"filters":[],"uses":{"prepare":[486],"get_results":[489]},"used_by":[]},"add_comment_meta":{"doc":"\/**\n * Add meta data field to a comment.\n *\n * @since 2.9.0\n * @uses add_metadata\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/add_comment_meta\n *\n * @param int $comment_id Comment ID.\n * @param string $meta_key Metadata name.\n * @param mixed $meta_value Metadata value.\n * @param bool $unique Optional, default is false. Whether the same key should not be added.\n * @return bool False for failure. True for success.\n *\/","file":"comment.php","line":542,"missingDoc":false,"filters":[],"uses":{"add_metadata":[543]},"used_by":{"wp_trash_comment":[1057,1058],"wp_spam_comment":[1113]}},"add_metadata":{"doc":"\/**\n * Add metadata for the specified object.\n *\n * @since 2.9.0\n * @uses $wpdb WordPress database object for queries.\n * @uses do_action() Calls 'added_{$meta_type}_meta' with meta_id of added metadata entry,\n * \t\tobject ID, meta key, and meta value\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int $object_id ID of the object metadata is for\n * @param string $meta_key Metadata key\n * @param string $meta_value Metadata value\n * @param bool $unique Optional, default is false. Whether the specified metadata key should be\n * \t\tunique for the object. If true, and the object already has a value for the specified\n * \t\tmetadata key, no change will be made\n * @return bool The meta ID on successful update, false on failure.\n *\/","file":"meta.php","line":31,"missingDoc":false,"filters":["\"add_{$meta_type}_metadata\"","\"add_{$meta_type}_meta\"","\"added_{$meta_type}_meta\""],"uses":{"absint":[35],"_get_meta_table":[38],"esc_sql":[43],"stripslashes":[46],"stripslashes_deep":[47],"sanitize_meta":[48],"get_var":[54],"prepare":[54],"maybe_serialize":[60],"insert":[64],"wp_cache_delete":[75]},"used_by":{"add_comment_meta":[543],"update_metadata":[136],"add_post_meta":[1755],"add_user_meta":[800]}},"delete_comment_meta":{"doc":"\/**\n * Remove metadata matching criteria from a comment.\n *\n * You can match based on the key, or key and value. Removing based on key and\n * value, will keep from removing duplicate metadata with the same key. It also\n * allows removing all metadata matching key, if needed.\n *\n * @since 2.9.0\n * @uses delete_metadata\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/delete_comment_meta\n *\n * @param int $comment_id comment ID\n * @param string $meta_key Metadata name.\n * @param mixed $meta_value Optional. Metadata value.\n * @return bool False for failure. True for success.\n *\/","file":"comment.php","line":562,"missingDoc":false,"filters":[],"uses":{"delete_metadata":[563]},"used_by":{"wp_untrash_comment":[1087,1088],"wp_unspam_comment":[1142],"wp_scheduled_delete":[3503,3504]}},"delete_metadata":{"doc":"\/**\n * Delete metadata for the specified object.\n *\n * @since 2.9.0\n * @uses $wpdb WordPress database object for queries.\n * @uses do_action() Calls 'deleted_{$meta_type}_meta' after deleting with meta_id of\n * \t\tdeleted metadata entries, object ID, meta key, and meta value\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int $object_id ID of the object metadata is for\n * @param string $meta_key Metadata key\n * @param string $meta_value Optional. Metadata value. If specified, only delete metadata entries\n * \t\twith this value. Otherwise, delete all entries with the specified meta_key.\n * @param bool $delete_all Optional, default is false. If true, delete matching metadata entries\n * \t\tfor all objects, ignoring the specified object_id. Otherwise, only delete matching\n * \t\tmetadata entries for the specified object_id.\n * @return bool True on successful delete, false on failure.\n *\/","file":"meta.php","line":184,"missingDoc":false,"filters":["\"delete_{$meta_type}_metadata\"","\"delete_{$meta_type}_meta\"","'delete_postmeta'","\"deleted_{$meta_type}_meta\"","'deleted_postmeta'"],"uses":{"absint":[188],"_get_meta_table":[191],"esc_sql":[196],"stripslashes":[199],"stripslashes_deep":[200],"maybe_serialize":[207],"prepare":[209,212,215,222],"get_col":[217,222],"count":[218],"implode":[230],"query":[232],"wp_cache_delete":[239,242]},"used_by":{"delete_comment_meta":[563],"install_blog":[1168,1169],"delete_post_meta":[1779],"delete_post_meta_by_key":[1835],"wp_delete_attachment":[4109],"delete_user_meta":[820]}},"get_comment_meta":{"doc":"\/**\n * Retrieve comment meta field for a comment.\n *\n * @since 2.9.0\n * @uses get_metadata\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/get_comment_meta\n *\n * @param int $comment_id Comment ID.\n * @param string $key Optional. The meta key to retrieve. By default, returns data for all keys.\n * @param bool $single Whether to return a single value.\n * @return mixed Will be an array if $single is false. Will be value of meta data field if $single\n *  is true.\n *\/","file":"comment.php","line":579,"missingDoc":false,"filters":[],"uses":{"get_metadata":[580]},"used_by":{"wp_untrash_comment":[1082],"wp_unspam_comment":[1137]}},"get_metadata":{"doc":"\/**\n * Retrieve metadata for the specified object.\n *\n * @since 2.9.0\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int $object_id ID of the object metadata is for\n * @param string $meta_key Optional. Metadata key. If not specified, retrieve all metadata for\n * \t\tthe specified object.\n * @param bool $single Optional, default is false. If true, return only the first value of the\n * \t\tspecified meta_key. This parameter has no effect if meta_key is not specified.\n * @return string|array Single metadata value, or array of values\n *\/","file":"meta.php","line":267,"missingDoc":false,"filters":["\"get_{$meta_type}_metadata\""],"uses":{"absint":[271],"is_array":[276],"wp_cache_get":[282],"update_meta_cache":[285],"maybe_unserialize":[294],"array_map":[296]},"used_by":{"get_comment_meta":[580],"update_metadata":[128],"get_post_meta":[1796],"get_user_meta":[837]}},"update_comment_meta":{"doc":"\/**\n * Update comment meta field based on comment ID.\n *\n * Use the $prev_value parameter to differentiate between meta fields with the\n * same key and comment ID.\n *\n * If the meta field for the comment does not exist, it will be added.\n *\n * @since 2.9.0\n * @uses update_metadata\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/update_comment_meta\n *\n * @param int $comment_id Comment ID.\n * @param string $meta_key Metadata key.\n * @param mixed $meta_value Metadata value.\n * @param mixed $prev_value Optional. Previous value to check before removing.\n * @return bool False on failure, true if success.\n *\/","file":"comment.php","line":601,"missingDoc":false,"filters":[],"uses":{"update_metadata":[602]},"used_by":[]},"update_metadata":{"doc":"\/**\n * Update metadata for the specified object. If no value already exists for the specified object\n * ID and metadata key, the metadata will be added.\n *\n * @since 2.9.0\n * @uses $wpdb WordPress database object for queries.\n * @uses do_action() Calls 'update_{$meta_type}_meta' before updating metadata with meta_id of\n * \t\tmetadata entry to update, object ID, meta key, and meta value\n * @uses do_action() Calls 'updated_{$meta_type}_meta' after updating metadata with meta_id of\n * \t\tupdated metadata entry, object ID, meta key, and meta value\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int $object_id ID of the object metadata is for\n * @param string $meta_key Metadata key\n * @param string $meta_value Metadata value\n * @param string $prev_value Optional. If specified, only update existing metadata entries with\n * \t\tthe specified value. Otherwise, update all entries.\n * @return bool True on successful update, false on failure.\n *\/","file":"meta.php","line":101,"missingDoc":false,"filters":["\"update_{$meta_type}_metadata\"","\"update_{$meta_type}_meta\"","'update_postmeta'","\"updated_{$meta_type}_meta\"","'updated_postmeta'"],"uses":{"absint":[105],"_get_meta_table":[108],"esc_sql":[113],"stripslashes":[117],"stripslashes_deep":[119],"sanitize_meta":[120],"get_metadata":[128],"count":[129],"add_metadata":[136],"get_var":[135],"prepare":[135],"maybe_serialize":[139,145],"compact":[141],"update":[154],"wp_cache_delete":[156]},"used_by":{"update_comment_meta":[602],"update_post_meta":[1822],"update_user_meta":[859]}},"wp_set_comment_cookies":{"doc":"\/**\n * Sets the cookies used to store an unauthenticated commentator's identity. Typically used\n * to recall previous comments by this commentator that are still held in moderation.\n *\n * @param object $comment Comment object.\n * @param object $user Comment author's object.\n *\n * @since 3.4.0\n *\/","file":"comment.php","line":614,"missingDoc":false,"filters":["'comment_cookie_lifetime'"],"uses":{"exists":[615],"setcookie":[619,620,621],"time":[619,620,621],"esc_url":[621]},"used_by":[]},"sanitize_comment_cookies":{"doc":"\/**\n * Sanitizes the cookies sent to the user already.\n *\n * Will only do anything if the cookies have already been created for the user.\n * Mostly used after cookies had been sent to use elsewhere.\n *\n * @since 2.0.4\n *\/","file":"comment.php","line":632,"missingDoc":false,"filters":["'pre_comment_author_name'","'pre_comment_author_email'","'pre_comment_author_url'"],"uses":{"stripslashes":[635,642,649],"esc_attr":[636,643]},"used_by":[]},"wp_allow_comment":{"doc":"\/**\n * Validates whether this comment is allowed to be made.\n *\n * @since 2.0.0\n * @uses $wpdb\n * @uses apply_filters() Calls 'pre_comment_approved' hook on the type of comment\n * @uses apply_filters() Calls 'comment_duplicate_trigger' hook on commentdata.\n * @uses do_action() Calls 'check_comment_flood' hook on $comment_author_IP, $comment_author_email, and $comment_date_gmt\n *\n * @param array $commentdata Contains information on the comment\n * @return mixed Signifies the approval status (0|1|'spam')\n *\/","file":"comment.php","line":666,"missingDoc":false,"filters":["'comment_duplicate_trigger'","'check_comment_flood'","'pre_comment_approved'"],"uses":{"extract":[668],"__":[679,681],"defined":[678],"wp_die":[681],"get_var":[676,688],"get_userdata":[687],"prepare":[688],"check_comment":[696],"wp_blacklist_check":[700],"has_cap":[691]},"used_by":{"wp_new_comment":[1398]}},"wp_blacklist_check":{"doc":"\/**\n * Does comment contain blacklisted characters or words.\n *\n * @since 1.5.0\n * @uses do_action() Calls 'wp_blacklist_check' hook for all parameters.\n *\n * @param string $author The author of the comment\n * @param string $email The email of the comment\n * @param string $url The url used in the comment\n * @param string $comment The comment content\n * @param string $user_ip The comment author IP address\n * @param string $user_agent The author's browser user agent\n * @return bool True if comment contains blacklisted content, false if comment does not\n *\/","file":"comment.php","line":887,"missingDoc":false,"filters":["'wp_blacklist_check'"],"uses":{"trim":[890,896],"get_option":[890],"explode":[893],"preg_quote":[903],"preg_match":[907,908,909,910,911,912]},"used_by":{"wp_allow_comment":[700]}},"check_comment_flood_db":{"doc":"\/**\n * Check whether comment flooding is occurring.\n *\n * Won't run, if current user can manage options, so to not block\n * administrators.\n *\n * @since 2.3.0\n * @uses $wpdb\n * @uses apply_filters() Calls 'comment_flood_filter' filter with first\n *\t\tparameter false, last comment timestamp, new comment timestamp.\n * @uses do_action() Calls 'comment_flood_trigger' action with parameters with\n *\t\tlast comment timestamp and new comment timestamp.\n *\n * @param string $ip Comment IP.\n * @param string $email Comment author email address.\n * @param string $date MySQL time string.\n *\/","file":"comment.php","line":725,"missingDoc":false,"filters":["'comment_flood_filter'","'comment_flood_trigger'"],"uses":{"current_user_can":[727],"gmdate":[729],"time":[729],"mysql2date":[731,732],"__":[738,740],"defined":[737],"wp_die":[740],"get_var":[730],"prepare":[730]},"used_by":[]},"wp_trash_comment":{"doc":"\/**\n * Moves a comment to the Trash\n *\n * If trash is disabled, comment is permanently deleted.\n *\n * @since 2.9.0\n * @uses do_action() on 'trash_comment' before trashing\n * @uses do_action() on 'trashed_comment' after trashing\n * @uses wp_delete_comment() if trash is disabled\n *\n * @param int $comment_id Comment ID.\n * @return mixed False on failure\n *\/","file":"comment.php","line":1047,"missingDoc":false,"filters":["'trash_comment'","'trashed_comment'"],"uses":{"wp_delete_comment":[1049],"get_comment":[1051],"add_comment_meta":[1057,1058],"time":[1058],"wp_set_comment_status":[1056]},"used_by":{"wp_delete_comment":[1003]}},"wp_get_comment_status":{"doc":"\/**\n * The status of a comment by ID.\n *\n * @since 1.0.0\n *\n * @param int $comment_id Comment ID\n * @return string|bool Status might be 'trash', 'approved', 'unapproved', 'spam'. False on failure.\n *\/","file":"comment.php","line":1158,"missingDoc":false,"filters":[],"uses":{"get_comment":[1159]},"used_by":{"wp_delete_comment":[1002],"wp_new_comment":[1387]}},"clean_comment_cache":{"doc":"\/**\n * Removes comment ID from the comment cache.\n *\n * @since 2.3.0\n * @package WordPress\n * @subpackage Cache\n *\n * @param int|array $ids Comment ID or array of comment IDs to remove from cache\n *\/","file":"comment.php","line":1967,"missingDoc":false,"filters":[],"uses":{"wp_cache_delete":[1969],"wp_cache_incr":[1972],"wp_cache_get":[1974],"wp_cache_set":[1975],"function_exists":[1971]},"used_by":{"wp_delete_comment":[1011,1027],"wp_set_comment_status":[1467],"wp_update_comment":[1524],"wp_trash_post_comments":[2491],"wp_untrash_post_comments":[2537]}},"wp_update_comment_count":{"doc":"\/**\n * Updates the comment count for post(s).\n *\n * When $do_deferred is false (is by default) and the comments have been set to\n * be deferred, the post_id will be added to a queue, which will be updated at a\n * later date and only updated once per post ID.\n *\n * If the comments have not be set up to be deferred, then the post will be\n * updated. When $do_deferred is set to true, then all previous deferred post\n * IDs will be updated along with the current $post_id.\n *\n * @since 2.1.0\n * @see wp_update_comment_count_now() For what could cause a false return value\n *\n * @param int $post_id Post ID\n * @param bool $do_deferred Whether to process previously deferred post comment counts\n * @return bool True on success, false on failure\n *\/","file":"comment.php","line":1577,"missingDoc":false,"filters":[],"uses":{"array_unique":[1581],"wp_update_comment_count_now":[1583,1593],"wp_defer_comment_counting":[1588]},"used_by":{"wp_delete_comment":[1025],"wp_insert_comment":[1288],"wp_set_comment_status":[1474],"wp_update_comment":[1525],"wp_defer_comment_counting":[1553]}},"wp_transition_comment_status":{"doc":"\/**\n * Call hooks for when a comment status transition occurs.\n *\n * Calls hooks for comment status transitions. If the new comment status is not the same\n * as the previous comment status, then two hooks will be ran, the first is\n * 'transition_comment_status' with new status, old status, and comment data. The\n * next action called is 'comment_OLDSTATUS_to_NEWSTATUS' the NEWSTATUS is the\n * $new_status parameter and the OLDSTATUS is $old_status parameter; it has the\n * comment data.\n *\n * The final action will run whether or not the comment statuses are the same. The\n * action is named 'comment_NEWSTATUS_COMMENTTYPE', NEWSTATUS is from the $new_status\n * parameter and COMMENTTYPE is comment_type comment data.\n *\n * @since 2.7.0\n *\n * @param string $new_status New comment status.\n * @param string $old_status Previous comment status.\n * @param object $comment Comment data.\n *\/","file":"comment.php","line":1199,"missingDoc":false,"filters":["'transition_comment_status'","\"comment_{$old_status}_to_{$new_status}\"","\"comment_{$new_status}_{$comment->comment_type}\""],"uses":[],"used_by":{"wp_delete_comment":[1030],"wp_set_comment_status":[1472],"wp_update_comment":[1528]}},"wp_set_comment_status":{"doc":"\/**\n * Sets the status of a comment.\n *\n * The 'wp_set_comment_status' action is called after the comment is handled.\n * If the comment status is not in the list, then false is returned.\n *\n * @since 1.0.0\n * @uses wp_transition_comment_status() Passes new and old comment status along with $comment object\n *\n * @param int $comment_id Comment ID.\n * @param string $comment_status New comment status, either 'hold', 'approve', 'spam', or 'trash'.\n * @param bool $wp_error Whether to return a WP_Error object if there is a failure. Default is false.\n * @return bool False on failure or deletion and true on success.\n *\/","file":"comment.php","line":1431,"missingDoc":false,"filters":["'wp_set_comment_status'"],"uses":{"get_comment":[1444,1458,1469],"wp_notify_postauthor":[1445],"get_option":[1443],"__":[1462],"update":[1460],"clean_comment_cache":[1467],"wp_transition_comment_status":[1472],"wp_update_comment_count":[1474]},"used_by":{"wp_trash_comment":[1056],"wp_untrash_comment":[1086],"wp_spam_comment":[1112],"wp_unspam_comment":[1141]}},"wp_untrash_comment":{"doc":"\/**\n * Removes a comment from the Trash\n *\n * @since 2.9.0\n * @uses do_action() on 'untrash_comment' before untrashing\n * @uses do_action() on 'untrashed_comment' after untrashing\n *\n * @param int $comment_id Comment ID.\n * @return mixed False on failure\n *\/","file":"comment.php","line":1076,"missingDoc":false,"filters":["'untrash_comment'","'untrashed_comment'"],"uses":{"get_comment_meta":[1082],"delete_comment_meta":[1087,1088],"wp_set_comment_status":[1086]},"used_by":[]},"wp_spam_comment":{"doc":"\/**\n * Marks a comment as Spam\n *\n * @since 2.9.0\n * @uses do_action() on 'spam_comment' before spamming\n * @uses do_action() on 'spammed_comment' after spamming\n *\n * @param int $comment_id Comment ID.\n * @return mixed False on failure\n *\/","file":"comment.php","line":1106,"missingDoc":false,"filters":["'spam_comment'","'spammed_comment'"],"uses":{"get_comment":[1107],"add_comment_meta":[1113],"wp_set_comment_status":[1112]},"used_by":[]},"wp_unspam_comment":{"doc":"\/**\n * Removes a comment from the Spam\n *\n * @since 2.9.0\n * @uses do_action() on 'unspam_comment' before unspamming\n * @uses do_action() on 'unspammed_comment' after unspamming\n *\n * @param int $comment_id Comment ID.\n * @return mixed False on failure\n *\/","file":"comment.php","line":1131,"missingDoc":false,"filters":["'unspam_comment'","'unspammed_comment'"],"uses":{"get_comment_meta":[1137],"delete_comment_meta":[1142],"wp_set_comment_status":[1141]},"used_by":[]},"wp_insert_comment":{"doc":"\/**\n * Inserts a comment to the database.\n *\n * The available comment data key names are 'comment_author_IP', 'comment_date',\n * 'comment_date_gmt', 'comment_parent', 'comment_approved', and 'user_id'.\n *\n * @since 2.0.0\n * @uses $wpdb\n *\n * @param array $commentdata Contains information on the comment.\n * @return int The new comment's ID.\n *\/","file":"comment.php","line":1261,"missingDoc":false,"filters":["'wp_insert_comment'"],"uses":{"extract":[1263],"stripslashes_deep":[1263],"current_time":[1268],"get_gmt_from_date":[1270],"compact":[1282],"insert":[1283],"wp_update_comment_count":[1288],"get_comment":[1290],"wp_cache_incr":[1294],"wp_cache_get":[1296],"wp_cache_set":[1297],"function_exists":[1293]},"used_by":{"wp_new_comment":[1400]}},"wp_filter_comment":{"doc":"\/**\n * Filters and sanitizes comment data.\n *\n * Sets the comment data 'filtered' field to true when finished. This can be\n * checked as to whether the comment should be filtered and to keep from\n * filtering the same comment more than once.\n *\n * @since 2.0.0\n * @uses apply_filters() Calls 'pre_user_id' hook on comment author's user ID\n * @uses apply_filters() Calls 'pre_comment_user_agent' hook on comment author's user agent\n * @uses apply_filters() Calls 'pre_comment_author_name' hook on comment author's name\n * @uses apply_filters() Calls 'pre_comment_content' hook on the comment's content\n * @uses apply_filters() Calls 'pre_comment_user_ip' hook on comment author's IP\n * @uses apply_filters() Calls 'pre_comment_author_url' hook on comment author's URL\n * @uses apply_filters() Calls 'pre_comment_author_email' hook on comment author's email address\n *\n * @param array $commentdata Contains information on the comment.\n * @return array Parsed comment information.\n *\/","file":"comment.php","line":1322,"missingDoc":false,"filters":["'pre_user_id'","'pre_user_id'","'pre_comment_user_agent'","'pre_comment_author_name'","'pre_comment_content'","'pre_comment_user_ip'","'pre_comment_author_url'","'pre_comment_author_email'"],"uses":[],"used_by":{"wp_new_comment":[1396],"wp_update_comment":[1505]}},"wp_throttle_comment_flood":{"doc":"\/**\n * Whether comment should be blocked because of comment flood.\n *\n * @since 2.1.0\n *\n * @param bool $block Whether plugin has already blocked comment.\n * @param int $time_lastcomment Timestamp for last comment.\n * @param int $time_newcomment Timestamp for new comment.\n * @return bool Whether comment should be blocked.\n *\/","file":"comment.php","line":1347,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wp_notify_moderator":{"doc":"\/**\n * Notifies the moderator of the blog about a new comment that is awaiting approval.\n *\n * @since 1.0\n * @uses $wpdb\n *\n * @param int $comment_id Comment ID\n * @return bool Always returns true\n *\/","file":"pluggable.php","line":1094,"missingDoc":false,"filters":["'comment_moderation_text'","'comment_moderation_subject'","'comment_moderation_headers'"],"uses":{"get_option":[1097,1104,1105,1113],"get_comment":[1100],"get_post":[1101],"get_userdata":[1102],"user_can":[1105],"gethostbyaddr":[1108],"get_var":[1109],"wp_specialchars_decode":[1113],"sprintf":[1118,1120,1121,1125,1127,1128,1132,1134,1135,1136,1137,1142,1144,1146,1147,1149,1153],"__":[1118,1120,1121,1122,1125,1127,1128,1129,1132,1134,1135,1136,1137,1138,1142,1144,1146,1147,1153],"get_permalink":[1119,1126,1133],"admin_url":[1142,1144,1146,1147,1151],"_n":[1149],"number_format_i18n":[1150],"wp_mail":[1161]},"used_by":{"wp_new_comment":[1406]}},"wp_notify_postauthor":{"doc":"\/**\n * Notify an author of a comment\/trackback\/pingback to one of their posts.\n *\n * @since 1.0.0\n *\n * @param int $comment_id Comment ID\n * @param string $comment_type Optional. The comment type either 'comment' (default), 'trackback', or 'pingback'\n * @return bool False if user email does not exist. True on completion.\n *\/","file":"pluggable.php","line":989,"missingDoc":false,"filters":["'comment_notification_text'","'comment_notification_subject'","'comment_notification_headers'"],"uses":{"get_comment":[990],"get_post":[991],"get_userdata":[992],"is_user_member_of_blog":[995],"get_current_user_id":[1003],"gethostbyaddr":[1010],"wp_specialchars_decode":[1014],"get_option":[1014,1069],"sprintf":[1019,1021,1022,1023,1024,1028,1030,1032,1033,1037,1039,1041,1042,1043,1046,1049,1051,1053,1054],"__":[1019,1021,1022,1023,1024,1025,1026,1028,1030,1032,1033,1034,1035,1037,1039,1041,1042,1043,1044,1046,1049,1051,1053,1054],"get_permalink":[1048,1049],"admin_url":[1051,1053,1054],"preg_replace":[1056],"strtolower":[1056],"wp_mail":[1078]},"used_by":{"wp_new_comment":[1411],"wp_set_comment_status":[1445]}},"wp_defer_comment_counting":{"doc":"\/**\n * Whether to defer comment counting.\n *\n * When setting $defer to true, all post comment counts will not be updated\n * until $defer is set to false. When $defer is set to false, then all\n * previously deferred updated post comment counts will then be automatically\n * updated without having to call wp_update_comment_count() after.\n *\n * @since 2.5.0\n * @staticvar bool $_defer\n *\n * @param bool $defer\n * @return unknown\n *\/","file":"comment.php","line":1546,"missingDoc":false,"filters":[],"uses":{"wp_update_comment_count":[1553],"is_bool":[1549]},"used_by":{"wp_update_comment_count":[1588]}},"wp_update_comment_count_now":{"doc":"\/**\n * Updates the comment count for the post.\n *\n * @since 2.5.0\n * @uses $wpdb\n * @uses do_action() Calls 'wp_update_comment_count' hook on $post_id, $new, and $old\n * @uses do_action() Calls 'edit_posts' hook on $post_id and $post\n *\n * @param int $post_id Post ID\n * @return bool False on '0' $post_id or if post with ID does not exist. True on success.\n *\/","file":"comment.php","line":1609,"missingDoc":false,"filters":["'wp_update_comment_count'","'edit_post'"],"uses":{"get_post":[1614],"get_var":[1618],"prepare":[1618],"update":[1619],"clean_post_cache":[1621]},"used_by":{"wp_update_comment_count":[1583,1593]}},"clean_post_cache":{"doc":"\/**\n * Will clean the post in the cache.\n *\n * Cleaning means delete from the cache of the post. Will call to clean the term\n * object cache associated with the post ID.\n *\n * This function not run if $_wp_suspend_cache_invalidation is not empty. See\n * wp_suspend_cache_invalidation().\n *\n * @package WordPress\n * @subpackage Cache\n * @since 2.0.0\n *\n * @uses do_action() Calls 'clean_post_cache' on $id before adding children (if any).\n *\n * @param object|int $post The post object or ID to remove from the cache\n *\/","file":"post.php","line":4640,"missingDoc":false,"filters":["'clean_post_cache'","'clean_page_cache'"],"uses":{"get_post":[4646],"wp_cache_delete":[4650,4651,4655,4660,4663],"clean_object_term_cache":[4653],"is_post_type_hierarchical":[4659]},"used_by":{"wp_update_comment_count_now":[1621],"clean_page_cache":[3157],"set_post_type":[1669],"wp_delete_post":[2370,2374],"wp_insert_post":[2926],"wp_publish_post":[3029],"wp_insert_attachment":[4044],"wp_delete_attachment":[4153]}},"discover_pingback_server_uri":{"doc":"\/**\n * Finds a pingback server URI based on the given URL.\n *\n * Checks the HTML for the rel=\"pingback\" link and x-pingback headers. It does\n * a check for the x-pingback headers first and returns that, if available. The\n * check for the rel=\"pingback\" has more overhead than just the header.\n *\n * @since 1.5.0\n *\n * @param string $url URL to ping.\n * @param int $deprecated Not Used.\n * @return bool|string False on failure, string containing URI on success.\n *\/","file":"comment.php","line":1646,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[1648],"parse_url":[1654],"wp_upload_dir":[1660],"strpos":[1661,1684,1685,1689,1691],"wp_remote_head":[1664],"is_wp_error":[1666,1679],"wp_remote_retrieve_header":[1670,1669,1673],"preg_match":[1673],"wp_remote_get":[1677],"wp_remote_retrieve_body":[1682],"substr":[1693]},"used_by":{"pingback":[1854]}},"wp_upload_dir":{"doc":"\/**\n * Get an array containing the current upload directory's path and url.\n *\n * Checks the 'upload_path' option, which should be from the web root folder,\n * and if it isn't empty it will be used. If it is empty, then the path will be\n * 'WP_CONTENT_DIR\/uploads'. If the 'UPLOADS' constant is defined, then it will\n * override the 'upload_path' option and 'WP_CONTENT_DIR\/uploads' path.\n *\n * The upload URL path is set either by the 'upload_url_path' option or by using\n * the 'WP_CONTENT_URL' constant and appending '\/uploads' to the path.\n *\n * If the 'uploads_use_yearmonth_folders' is set to true (checkbox if checked in\n * the administration settings panel), then the time will be used. The format\n * will be year first and then month.\n *\n * If the path couldn't be created, then an error will be returned with the key\n * 'error' containing the error message. The error suggests that the parent\n * directory is not writable by the server.\n *\n * On success, the returned array will have many indices:\n * 'path' - base directory and sub directory or full path to upload directory.\n * 'url' - base url and sub directory or absolute URL to upload directory.\n * 'subdir' - sub directory if uploads use year\/month folders option is on.\n * 'basedir' - path without subdir.\n * 'baseurl' - URL path without subdir.\n * 'error' - set to false.\n *\n * @since 2.0.0\n * @uses apply_filters() Calls 'upload_dir' on returned array.\n *\n * @param string $time Optional. Time formatted in 'yyyy\/mm'.\n * @return array See above for description.\n *\/","file":"functions.php","line":1524,"missingDoc":false,"filters":["'upload_dir'"],"uses":{"get_option":[1525,1526,1537,1594],"trim":[1526],"strpos":[1530,1618],"path_join":[1532],"trailingslashit":[1541,1548,1586],"defined":[1546,1561,1569,1582,1552],"is_multisite":[1546,1552],"get_site_option":[1546,1554],"get_current_blog_id":[1562,1564],"ms_is_switched":[1569],"untrailingslashit":[1583],"is_main_site":[1552],"current_time":[1597],"substr":[1598,1599],"str_replace":[1619],"basename":[1621],"sprintf":[1623],"__":[1623],"wp_mkdir_p":[1617]},"used_by":{"discover_pingback_server_uri":[1660],"wp_upload_bits":[1726],"get_space_used":[1946],"get_attached_file":[188],"_wp_relative_upload_path":[233],"wp_delete_attachment":[4123],"wp_get_attachment_url":[4218]}},"wp_remote_head":{"doc":"\/**\n * Retrieve the raw response from the HTTP request using the HEAD method.\n *\n * @see wp_remote_request() For more information on the response array format.\n *\n * @since 2.7.0\n *\n * @param string $url Site URL to retrieve.\n * @param array $args Optional. Override the defaults.\n * @return WP_Error|array The response or WP_Error on failure.\n *\/","file":"http.php","line":106,"missingDoc":false,"filters":[],"uses":{"_wp_http_get_object":[107],"head":[108]},"used_by":{"discover_pingback_server_uri":[1664],"wp_get_http_headers":[546]}},"wp_remote_retrieve_header":{"doc":"\/**\n * Retrieve a single header by name from the raw response.\n *\n * @since 2.7.0\n *\n * @param array $response\n * @param string $header Header name to retrieve value from.\n * @return string The header value. Empty string on if incorrect parameter given, or if the header doesn't exist.\n *\/","file":"http.php","line":135,"missingDoc":false,"filters":[],"uses":{"is_wp_error":[136],"is_array":[136],"array_key_exists":[139]},"used_by":{"discover_pingback_server_uri":[1670,1669,1673]}},"do_all_pings":{"doc":"\/**\n * Perform all pingbacks, enclosures, trackbacks, and send to pingback services.\n *\n * @since 2.1.0\n * @uses $wpdb\n *\/","file":"comment.php","line":1710,"missingDoc":false,"filters":[],"uses":{"get_row":[1714,1720],"delete_metadata_by_mid":[1715,1721],"pingback":[1716],"do_enclose":[1722],"get_col":[1726],"do_trackbacks":[1729],"is_array":[1727],"generic_ping":[1732]},"used_by":[]},"pingback":{"doc":"\/**\n * Pings back the links found in a post.\n *\n * @since 0.71\n * @uses $wp_version\n * @uses IXR_Client\n *\n * @param string $content Post content to check for links.\n * @param int $post_ID Post ID.\n *\/","file":"comment.php","line":1808,"missingDoc":false,"filters":["'pre_ping'","'pingback_useragent'"],"uses":{"get_pung":[1816],"preg_match_all":[1828],"parse_url":[1842],"in_array":[1840],"url_to_postid":[1840],"is_local_attachment":[1841],"discover_pingback_server_uri":[1854],"set_time_limit":[1857],"get_permalink":[1859],"add_ping":[1869],"query":[1868]},"used_by":{"do_all_pings":[1716]}},"do_enclose":{"doc":"\/**\n * Check content for video and audio links to add as enclosures.\n *\n * Will not add enclosures that have already been added and will\n * remove enclosures that are no longer in the post. This is called as\n * pingbacks and trackbacks.\n *\n * @package WordPress\n * @since 1.5.0\n *\n * @uses $wpdb\n *\n * @param string $content Post Content\n * @param int $post_ID Post ID\n *\/","file":"functions.php","line":410,"missingDoc":false,"filters":[],"uses":{"get_enclosed":[418],"preg_match_all":[425],"get_col":[429],"prepare":[429,448],"like_escape":[429,448],"delete_metadata_by_mid":[431],"in_array":[428,436,470],"parse_url":[437,457],"pathinfo":[459],"preg_match":[462],"wp_get_mime_types":[461],"add_post_meta":[471],"substr":[470],"strpos":[470],"wp_get_http_headers":[450],"get_var":[448]},"used_by":{"do_all_pings":[1722]}},"do_trackbacks":{"doc":"\/**\n * Perform trackbacks.\n *\n * @since 1.5.0\n * @uses $wpdb\n *\n * @param int $post_id Post ID to do trackbacks on.\n *\/","file":"comment.php","line":1743,"missingDoc":false,"filters":["'the_content'","'the_excerpt'","'the_title'"],"uses":{"get_post":[1746],"get_to_ping":[1747],"get_pung":[1748],"update":[1750],"str_replace":[1758],"wp_html_excerpt":[1759],"strip_tags":[1762],"trim":[1766],"trackback":[1768],"query":[1771],"prepare":[1771],"in_array":[1767]},"used_by":{"do_all_pings":[1729]}},"generic_ping":{"doc":"\/**\n * Sends pings to all of the ping site services.\n *\n * @since 1.2.0\n *\n * @param int $post_id Post ID. Not actually used.\n * @return int Same as Post ID from parameter\n *\/","file":"comment.php","line":1785,"missingDoc":false,"filters":[],"uses":{"get_option":[1786],"explode":[1788],"trim":[1790],"weblog_ping":[1792]},"used_by":{"do_all_pings":[1732]}},"get_to_ping":{"doc":"\/**\n * Retrieve URLs that need to be pinged.\n *\n * @since 1.5.0\n * @uses $wpdb\n *\n * @param int $post_id Post ID\n * @return array\n *\/","file":"post.php","line":3360,"missingDoc":false,"filters":["'get_to_ping'"],"uses":{"get_var":[3362],"prepare":[3362],"sanitize_trackback_urls":[3363],"preg_split":[3364]},"used_by":{"do_trackbacks":[1747]}},"get_pung":{"doc":"\/**\n * Retrieve URLs already pinged for a post.\n *\n * @since 1.5.0\n * @uses $wpdb\n *\n * @param int $post_id Post ID.\n * @return array\n *\/","file":"post.php","line":3342,"missingDoc":false,"filters":["'get_pung'"],"uses":{"get_var":[3344],"prepare":[3344],"trim":[3345],"preg_split":[3346]},"used_by":{"do_trackbacks":[1748],"pingback":[1816]}},"trackback":{"doc":"\/**\n * Send a Trackback.\n *\n * Updates database when sending trackback to prevent duplicates.\n *\n * @since 0.71\n * @uses $wpdb\n *\n * @param string $trackback_url URL to send trackbacks.\n * @param string $title Title of post.\n * @param string $excerpt Excerpt of post.\n * @param int $ID Post ID.\n * @return mixed Database query from update.\n *\/","file":"comment.php","line":1903,"missingDoc":false,"filters":[],"uses":{"get_permalink":[1913],"get_option":[1914],"wp_remote_post":[1918],"is_wp_error":[1920],"query":[1923,1924],"prepare":[1923,1924]},"used_by":{"do_trackbacks":[1768],"trackback_url_list":[3395]}},"weblog_ping":{"doc":"\/**\n * Send a pingback.\n *\n * @since 1.2.0\n * @uses $wp_version\n * @uses IXR_Client\n *\n * @param string $server Host of blog to connect to.\n * @param string $path Path to send the ping.\n *\/","file":"comment.php","line":1937,"missingDoc":false,"filters":[],"uses":{"strlen":[1943],"trim":[1943],"trailingslashit":[1949],"home_url":[1949],"query":[1951,1950],"get_option":[1951,1950],"get_bloginfo":[1950]},"used_by":{"generic_ping":[1792]}},"is_local_attachment":{"doc":"\/**\n * Check if the attachment URI is local one and is really an attachment.\n *\n * @since 2.0.0\n *\n * @param string $url URL to check\n * @return bool True on success, false on failure.\n *\/","file":"post.php","line":3853,"missingDoc":false,"filters":[],"uses":{"strpos":[3854,3856],"home_url":[3854,3856],"get_post":[3859],"url_to_postid":[3858]},"used_by":{"pingback":[1841]}},"add_ping":{"doc":"\/**\n * Add a URL to those already pung.\n *\n * @since 1.5.0\n * @uses $wpdb\n *\n * @param int $post_id Post ID.\n * @param string $uri Ping URI.\n * @return int How many rows were updated.\n *\/","file":"post.php","line":3293,"missingDoc":false,"filters":["'add_ping'"],"uses":{"get_var":[3295],"prepare":[3295],"trim":[3296],"preg_split":[3297],"implode":[3299],"stripslashes":[3302],"update":[3303]},"used_by":{"pingback":[1869]}},"privacy_ping_filter":{"doc":"\/**\n * Check whether blog is public before returning sites.\n *\n * @since 2.1.0\n *\n * @param mixed $sites Will return if blog is public, will not return if not public.\n * @return mixed Empty string if blog is not public, returns $sites, if site is public.\n *\/","file":"comment.php","line":1882,"missingDoc":false,"filters":[],"uses":{"get_option":[1883]},"used_by":[]},"_close_comments_for_old_posts":{"doc":"\/**\n * Close comments on old posts on the fly, without any extra DB queries. Hooked to the_posts.\n *\n * @access private\n * @since 2.7.0\n *\n * @param object $posts Post data object.\n * @param object $query Query object.\n * @return object\n *\/","file":"comment.php","line":2011,"missingDoc":false,"filters":["'close_comments_for_post_types'"],"uses":{"is_singular":[2012],"get_option":[2012,2019],"in_array":[2016],"time":[2023],"strtotime":[2023]},"used_by":[]},"_close_comments_for_old_post":{"doc":"\/**\n * Close comments on an old post. Hooked to comments_open and pings_open.\n *\n * @access private\n * @since 2.7.0\n *\n * @param bool $open Comments open or closed\n * @param int $post_id Post ID\n * @return bool $open\n *\/","file":"comment.php","line":2041,"missingDoc":false,"filters":["'close_comments_for_post_types'"],"uses":{"get_option":[2045,2048],"get_post":[2052],"in_array":[2055],"time":[2058],"strtotime":[2058]},"used_by":[]},"_mb_substr":{"doc":"","file":"compat.php","line":22,"missingDoc":true,"filters":[],"uses":{"get_option":[25],"is_null":[27,31],"substr":[27,27],"in_array":[26],"preg_match_all":[30],"array_slice":[31,31],"implode":[32]},"used_by":{"mb_substr":[18]}},"hash_hmac":{"doc":"","file":"compat.php","line":36,"missingDoc":true,"filters":[],"uses":{"_hash_hmac":[37]},"used_by":{"wp_validate_auth_cookie":[549],"wp_generate_auth_cookie":[584],"wp_salt":[1376],"wp_hash":[1397]}},"_hash_hmac":{"doc":"","file":"compat.php","line":41,"missingDoc":true,"filters":[],"uses":{"pack":[50,57,60],"strlen":[49],"str_pad":[52],"chr":[52,54,55],"substr":[54,55],"str_repeat":[54,55]},"used_by":{"hash_hmac":[37]}},"_json_decode_object_helper":{"doc":"","file":"compat.php","line":91,"missingDoc":true,"filters":[],"uses":{"get_object_vars":[93],"is_object":[92],"is_array":[94],"array_map":[94]},"used_by":{"json_decode":[88]}},"wp_schedule_single_event":{"doc":"\/**\n * Schedules a hook to run only once.\n *\n * Schedules a hook which will be executed once by the WordPress actions core at\n * a time which you specify. The action will fire off when someone visits your\n * WordPress site, if the schedule time has passed.\n *\n * @since 2.1.0\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/wp_schedule_single_event\n *\n * @param int $timestamp Timestamp for when to run the event.\n * @param string $hook Action hook to execute when cron is run.\n * @param array $args Optional. Arguments to pass to the hook's callback function.\n *\/","file":"cron.php","line":22,"missingDoc":false,"filters":["'schedule_event'"],"uses":{"wp_next_scheduled":[24],"_get_cron_array":[28],"md5":[36],"serialize":[36],"uksort":[39],"_set_cron_array":[40]},"used_by":{"check_and_publish_future_post":[3065],"_future_post_hook":[4828],"_publish_post_hook":[4855]}},"wp_next_scheduled":{"doc":"\/**\n * Retrieve the next timestamp for a cron event.\n *\n * @since 2.1.0\n *\n * @param string $hook Action hook to execute when cron is run.\n * @param array $args Optional. Arguments to pass to the hook's callback function.\n * @return bool|int The UNIX timestamp of the next time the scheduled event will occur.\n *\/","file":"cron.php","line":176,"missingDoc":false,"filters":[],"uses":{"_get_cron_array":[177],"md5":[178],"serialize":[178]},"used_by":{"wp_schedule_single_event":[24],"wp_clear_scheduled_hook":[163],"wp_schedule_update_network_counts":[1916],"wp_schedule_update_checks":[421,424,427]}},"_get_cron_array":{"doc":"\/**\n * Retrieve cron info array option.\n *\n * @since 2.1.0\n * @access private\n *\n * @return array CRON info array.\n *\/","file":"cron.php","line":361,"missingDoc":false,"filters":[],"uses":{"get_option":[362],"is_array":[363],"_upgrade_cron_array":[367]},"used_by":{"wp_schedule_single_event":[28],"wp_schedule_event":[64],"wp_reschedule_event":[96],"wp_unschedule_event":[137],"wp_next_scheduled":[177],"spawn_cron":[217],"wp_cron":[269],"wp_get_schedule":[338]}},"_set_cron_array":{"doc":"\/**\n * Updates the CRON option with the new CRON array.\n *\n * @since 2.1.0\n * @access private\n *\n * @param array $cron Cron info array from {@link _get_cron_array()}.\n *\/","file":"cron.php","line":382,"missingDoc":false,"filters":[],"uses":{"update_option":[384]},"used_by":{"wp_schedule_single_event":[40],"wp_schedule_event":[81],"wp_unschedule_event":[144]}},"wp_schedule_event":{"doc":"\/**\n * Schedule a periodic event.\n *\n * Schedules a hook which will be executed by the WordPress actions core on a\n * specific interval, specified by you. The action will trigger when someone\n * visits your WordPress site, if the scheduled time has passed.\n *\n * Valid values for the recurrence are hourly, daily and twicedaily. These can\n * be extended using the cron_schedules filter in wp_get_schedules().\n *\n * Use wp_next_scheduled() to prevent duplicates\n *\n * @since 2.1.0\n *\n * @param int $timestamp Timestamp for when to run the event.\n * @param string $recurrence How often the event should recur.\n * @param string $hook Action hook to execute when cron is run.\n * @param array $args Optional. Arguments to pass to the hook's callback function.\n * @return bool|null False on failure, null when complete with scheduling event.\n *\/","file":"cron.php","line":63,"missingDoc":false,"filters":["'schedule_event'"],"uses":{"_get_cron_array":[64],"wp_get_schedules":[65],"md5":[77],"serialize":[77],"uksort":[80],"_set_cron_array":[81]},"used_by":{"wp_reschedule_event":[118],"wp_schedule_update_network_counts":[1917],"wp_schedule_update_checks":[422,425,428]}},"wp_get_schedules":{"doc":"\/**\n * Retrieve supported and filtered Cron recurrences.\n *\n * The supported recurrences are 'hourly' and 'daily'. A plugin may add more by\n * hooking into the 'cron_schedules' filter. The filter accepts an array of\n * arrays. The outer array has a key that is the name of the schedule or for\n * example 'weekly'. The value is an array with two keys, one is 'interval' and\n * the other is 'display'.\n *\n * The 'interval' is a number in seconds of when the cron job should run. So for\n * 'hourly', the time is 3600 or 60*60. For weekly, the value would be\n * 60*60*24*7 or 604800. The value of 'interval' would then be 604800.\n *\n * The 'display' is the description. For the 'weekly' key, the 'display' would\n * be <code>__('Once Weekly')<\/code>.\n *\n * For your plugin, you will be passed an array. you can easily add your\n * schedule by doing the following.\n * <code>\n * \/\/ filter parameter variable name is 'array'\n *\t$array['weekly'] = array(\n *\t\t'interval' => 604800,\n *\t\t'display' => __('Once Weekly')\n *\t);\n * <\/code>\n *\n * @since 2.1.0\n *\n * @return array\n *\/","file":"cron.php","line":319,"missingDoc":false,"filters":["'cron_schedules'"],"uses":{"__":[321,322,323],"array_merge":[325]},"used_by":{"wp_schedule_event":[65],"wp_reschedule_event":[97],"wp_cron":[277]}},"wp_reschedule_event":{"doc":"\/**\n * Reschedule a recurring event.\n *\n * @since 2.1.0\n *\n * @param int $timestamp Timestamp for when to run the event.\n * @param string $recurrence How often the event should recur.\n * @param string $hook Action hook to execute when cron is run.\n * @param array $args Optional. Arguments to pass to the hook's callback function.\n * @return bool|null False on failure. Null when event is rescheduled.\n *\/","file":"cron.php","line":95,"missingDoc":false,"filters":[],"uses":{"_get_cron_array":[96],"wp_get_schedules":[97],"md5":[98],"serialize":[98],"time":[111],"wp_schedule_event":[118]},"used_by":[]},"wp_unschedule_event":{"doc":"\/**\n * Unschedule a previously scheduled cron job.\n *\n * The $timestamp and $hook parameters are required, so that the event can be\n * identified.\n *\n * @since 2.1.0\n *\n * @param int $timestamp Timestamp for when to run the event.\n * @param string $hook Action hook, the execution of which will be unscheduled.\n * @param array $args Arguments to pass to the hook's callback function.\n * Although not passed to a callback function, these arguments are used\n * to uniquely identify the scheduled event, so they should be the same\n * as those used when originally scheduling the event.\n *\/","file":"cron.php","line":136,"missingDoc":false,"filters":[],"uses":{"_get_cron_array":[137],"md5":[138],"serialize":[138],"_set_cron_array":[144]},"used_by":{"wp_clear_scheduled_hook":[164]}},"wp_clear_scheduled_hook":{"doc":"\/**\n * Unschedule all cron jobs attached to a specific hook.\n *\n * @since 2.1.0\n *\n * @param string $hook Action hook, the execution of which will be unscheduled.\n * @param array $args Optional. Arguments that were to be pass to the hook's callback function.\n *\/","file":"cron.php","line":155,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[159],"__":[159],"array_slice":[160],"func_get_args":[160],"is_array":[158],"wp_next_scheduled":[163],"wp_unschedule_event":[164]},"used_by":{"wp_delete_post":[2377],"check_and_publish_future_post":[3064],"_transition_post_status":[4810],"_future_post_hook":[4827]}},"spawn_cron":{"doc":"\/**\n * Send request to run cron through HTTP request that doesn't halt page loading.\n *\n * @since 2.1.0\n *\n * @return null Cron could not be spawned, because it is not needed to run.\n *\/","file":"cron.php","line":195,"missingDoc":false,"filters":["'cron_request'","'https_local_ssl_verify'"],"uses":{"microtime":[198],"defined":[200,226,225],"get_transient":[207],"_get_cron_array":[217],"is_array":[218],"array_keys":[221],"sprintf":[229,244],"set_transient":[230,245],"ob_start":[232],"wp_redirect":[233],"add_query_arg":[233],"stripslashes":[233],"ob_end_flush":[237],"flush":[238],"site_url":[248],"wp_remote_post":[253]},"used_by":{"wp_cron":[283]}},"wp_cron":{"doc":"\/**\n * Run scheduled callbacks or spawn cron for all scheduled events.\n *\n * @since 2.1.0\n *\n * @return null When doesn't need to run Cron.\n *\/","file":"cron.php","line":263,"missingDoc":false,"filters":[],"uses":{"strpos":[266],"defined":[266],"_get_cron_array":[269],"microtime":[272],"array_keys":[273],"wp_get_schedules":[277],"call_user_func":[281],"spawn_cron":[283]},"used_by":[]},"wp_get_schedule":{"doc":"\/**\n * Retrieve Cron schedule for hook with arguments.\n *\n * @since 2.1.0\n *\n * @param string $hook Action hook to execute when cron is run.\n * @param array $args Optional. Arguments to pass to the hook's callback function.\n * @return string|bool False, if no schedule. Schedule on success.\n *\/","file":"cron.php","line":337,"missingDoc":false,"filters":[],"uses":{"_get_cron_array":[338],"md5":[339],"serialize":[339]},"used_by":[]},"_upgrade_cron_array":{"doc":"\/**\n * Upgrade a Cron info array.\n *\n * This function upgrades the Cron info array to version 2.\n *\n * @since 2.1.0\n * @access private\n *\n * @param array $cron Cron info array from {@link _get_cron_array()}.\n * @return array An upgraded Cron info array.\n *\/","file":"cron.php","line":398,"missingDoc":false,"filters":[],"uses":{"md5":[406],"serialize":[406],"update_option":[412]},"used_by":{"_get_cron_array":[367]}},"wp_initial_constants":{"doc":"\/**\n * Defines initial WordPress constants\n *\n * @see wp_debug_mode()\n *\n * @since 3.0.0\n *\/","file":"default-constants.php","line":15,"missingDoc":false,"filters":[],"uses":{"define":[21,23,28,49,53,58,62,65,71,74,78,79,80,81,82],"is_multisite":[20],"defined":[19,27,48,52,57,61,64,70,73],"ini_get":[43],"ini_set":[45],"intval":[44,44],"abs":[44],"function_exists":[42]},"used_by":[]},"wp_plugin_directory_constants":{"doc":"\/**\n * Defines plugin directory WordPress constants\n *\n * Defines must-use plugin directory constants, which may be overridden in the sunrise.php drop-in\n *\n * @since 3.0.0\n *\/","file":"default-constants.php","line":92,"missingDoc":false,"filters":[],"uses":{"define":[94,102,110,119,127,135,144],"get_option":[94],"defined":[93,101,109,118,126,134,143]},"used_by":[]},"wp_cookie_constants":{"doc":"\/**\n * Defines cookie related WordPress constants\n *\n * Defines constants after multisite is loaded. Cookie-related constants may be overridden in ms_network_cookies().\n * @since 3.0.0\n *\/","file":"default-constants.php","line":153,"missingDoc":false,"filters":[],"uses":{"get_site_option":[159],"define":[161,163,170,176,182,188,194,200,206,212,218,224,230],"md5":[161],"defined":[158,169,175,181,187,193,199,205,211,217,223,229],"preg_replace":[206,212,224],"get_option":[206,212]},"used_by":[]},"wp_ssl_constants":{"doc":"\/**\n * Defines cookie related WordPress constants\n *\n * @since 3.0.0\n *\/","file":"default-constants.php","line":238,"missingDoc":false,"filters":[],"uses":{"define":[243,250],"defined":[242,249],"force_ssl_admin":[244],"force_ssl_login":[251]},"used_by":[]},"force_ssl_admin":{"doc":"\/**\n * Whether to force SSL used for the Administration Screens.\n *\n * @since 2.6.0\n *\n * @param string|bool $force\n * @return bool True if forced, false if not forced.\n *\/","file":"functions.php","line":3132,"missingDoc":false,"filters":[],"uses":{"is_null":[3135]},"used_by":{"wp_ssl_constants":[244],"set_url_scheme":[2230,2232,2228],"auth_redirect":[745]}},"force_ssl_login":{"doc":"\/**\n * Whether SSL login should be forced.\n *\n * @since 2.6.0\n *\n * @param string|bool $force Optional.\n * @return bool True if forced, false if not forced.\n *\/","file":"functions.php","line":3112,"missingDoc":false,"filters":[],"uses":{"is_null":[3115]},"used_by":{"wp_ssl_constants":[251],"set_url_scheme":[2228]}},"wp_functionality_constants":{"doc":"\/**\n * Defines functionality related WordPress constants\n *\n * @since 3.0.0\n *\/","file":"default-constants.php","line":259,"missingDoc":false,"filters":[],"uses":{"define":[264,270,273,279],"defined":[263,269,272,278]},"used_by":[]},"wp_templating_constants":{"doc":"\/**\n * Defines templating related WordPress constants\n *\n * @since 3.0.0\n *\/","file":"default-constants.php","line":287,"missingDoc":false,"filters":[],"uses":{"define":[292,298,307],"get_template_directory":[292],"get_stylesheet_directory":[298],"defined":[306]},"used_by":[]},"WP_Widget_Pages::__construct":{"doc":"","file":"default-widgets.php","line":16,"missingDoc":true,"filters":[],"uses":{"__":[17,18]},"used_by":[]},"WP_Widget_Pages::widget":{"doc":"","file":"default-widgets.php","line":21,"missingDoc":true,"filters":["'widget_title'","'widget_pages_args'"],"uses":{"extract":[22],"__":[24],"wp_list_pages":[31]},"used_by":[]},"wp_list_pages":{"doc":"\/**\n * Retrieve or display list of pages in list (li) format.\n *\n * @since 1.5.0\n *\n * @param array|string $args Optional. Override default arguments.\n * @return string HTML content, if not displaying.\n *\/","file":"post-template.php","line":813,"missingDoc":false,"filters":["'wp_list_pages_excludes'","'wp_list_pages'"],"uses":{"get_option":[816],"__":[818],"wp_parse_args":[823],"extract":[824],"preg_replace":[830],"explode":[833],"implode":[834],"get_pages":[838],"get_queried_object_id":[846],"is_page":[845],"is_attachment":[845],"walk_page_tree":[847]},"used_by":{"WP_Widget_Pages::widget":[31],"wp_page_menu":[919],"__main":[55]}},"WP_Widget_Pages::update":{"doc":"","file":"default-widgets.php","line":46,"missingDoc":true,"filters":[],"uses":{"strip_tags":[48,55],"in_array":[49]},"used_by":[]},"WP_Widget_Pages::form":{"doc":"","file":"default-widgets.php","line":60,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[62],"esc_attr":[63,64],"get_field_id":[66,66,68,69,76,76],"_e":[66,68,70,71,72,76,78],"get_field_name":[66,69,76],"selected":[70,71,72]},"used_by":[]},"WP_Widget_Links::__construct":{"doc":"","file":"default-widgets.php","line":92,"missingDoc":true,"filters":[],"uses":{"__":[93,94]},"used_by":[]},"WP_Widget_Links::widget":{"doc":"","file":"default-widgets.php","line":97,"missingDoc":true,"filters":["'widget_links_args'"],"uses":{"extract":[98],"preg_replace":[109],"wp_list_bookmarks":[110]},"used_by":[]},"WP_Widget_Links::update":{"doc":"","file":"default-widgets.php","line":121,"missingDoc":true,"filters":[],"uses":{"in_array":[130],"intval":[133,134]},"used_by":[]},"WP_Widget_Links::form":{"doc":"","file":"default-widgets.php","line":139,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[142],"get_terms":[143],"intval":[144,153,179],"get_field_id":[148,149,159,160,168,169,170,171,172,173,174,175,178,179],"_e":[148,159,161,162,163,169,171,173,175,178],"get_field_name":[149,160,168,170,172,174,179],"_ex":[150,164],"selected":[154,161,162,163,164],"checked":[168,170,172,174]},"used_by":[]},"WP_Widget_Search::__construct":{"doc":"","file":"default-widgets.php","line":192,"missingDoc":true,"filters":[],"uses":{"__":[193,194]},"used_by":[]},"WP_Widget_Search::widget":{"doc":"","file":"default-widgets.php","line":197,"missingDoc":true,"filters":["'widget_title'"],"uses":{"extract":[198],"get_search_form":[206]},"used_by":[]},"get_search_form":{"doc":"\/**\n * Display search form.\n *\n * Will first attempt to locate the searchform.php file in either the child or\n * the parent, then load it. If it doesn't exist, then the default search form\n * will be displayed. The default search form is HTML, which will be displayed.\n * There is a filter applied to the search form HTML in order to edit or replace\n * it. The filter is 'get_search_form'.\n *\n * This function is primarily used by themes which want to hardcode the search\n * form into the sidebar and also by the search widget in WordPress.\n *\n * There is also an action that is called whenever the function is run called,\n * 'get_search_form'. This can be useful for outputting JavaScript that the\n * search relies on or various formatting that applies to the beginning of the\n * search. To give a few examples of what it can be used for.\n *\n * @since 2.7.0\n * @param boolean $echo Default to echo and not return the form.\n * @return string|null String when retrieving, null when displaying or if searchform.php exists.\n *\/","file":"general-template.php","line":152,"missingDoc":false,"filters":["'get_search_form'","'get_search_form'","'get_search_form'"],"uses":{"locate_template":[155],"esc_url":[161],"home_url":[161],"__":[162],"get_search_query":[163],"esc_attr__":[164]},"used_by":{"WP_Widget_Search::widget":[206],"__main":[17]}},"WP_Widget_Search::form":{"doc":"","file":"default-widgets.php","line":211,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[212],"get_field_id":[215,215],"_e":[215],"get_field_name":[215],"esc_attr":[215]},"used_by":[]},"WP_Widget_Search::update":{"doc":"","file":"default-widgets.php","line":219,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[221],"strip_tags":[222]},"used_by":[]},"WP_Widget_Archives::__construct":{"doc":"","file":"default-widgets.php","line":235,"missingDoc":true,"filters":[],"uses":{"__":[236,237]},"used_by":[]},"WP_Widget_Archives::widget":{"doc":"","file":"default-widgets.php","line":240,"missingDoc":true,"filters":["'widget_title'","'widget_archives_dropdown_args'","'widget_archives_args'"],"uses":{"extract":[241],"__":[244,252],"esc_attr":[252],"wp_get_archives":[252,257]},"used_by":[]},"wp_get_archives":{"doc":"\/**\n * Display archive links based on type and format.\n *\n * The 'type' argument offers a few choices and by default will display monthly\n * archive links. The other options for values are 'daily', 'weekly', 'monthly',\n * 'yearly', 'postbypost' or 'alpha'. Both 'postbypost' and 'alpha' display the\n * same archive link list, the difference between the two is that 'alpha'\n * will order by post title and 'postbypost' will order by post date.\n *\n * The date archives will logically display dates with links to the archive post\n * page. The 'postbypost' and 'alpha' values for 'type' argument will display\n * the post titles.\n *\n * The 'limit' argument will only display a limited amount of links, specified\n * by the 'limit' integer value. By default, there is no limit. The\n * 'show_post_count' argument will show how many posts are within the archive.\n * By default, the 'show_post_count' argument is set to false.\n *\n * For the 'format', 'before', and 'after' arguments, see {@link\n * get_archives_link()}. The values of these arguments have to do with that\n * function.\n *\n * @since 1.2.0\n *\n * @param string|array $args Optional. Override defaults.\n * @return string|null String when retrieving, null when displaying.\n *\/","file":"general-template.php","line":871,"missingDoc":false,"filters":["'getarchives_where'","'getarchives_join'","'the_title'"],"uses":{"wp_parse_args":[881],"extract":[882],"absint":[888],"strtoupper":[892],"get_option":[910,911,912,1005],"md5":[923,945,966,989,1019],"wp_cache_get":[924,946,967,990,1020],"get_results":[926,948,969,992,1022],"wp_cache_set":[928,950,971,994,1024],"get_month_link":[935],"sprintf":[937,958,979,1008],"__":[937],"get_month":[937],"get_archives_link":[940,961,983,1012,1036],"get_year_link":[957],"get_day_link":[978],"mysql2date":[980],"_wp_mysql_week":[987],"get_weekstartend":[1005],"date_i18n":[1006,1007],"home_url":[1008],"get_permalink":[1031],"strip_tags":[1033]},"used_by":{"WP_Widget_Archives::widget":[252,257],"get_archives":[786],"__main":[59]}},"WP_Widget_Archives::update":{"doc":"","file":"default-widgets.php","line":265,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[267],"strip_tags":[268]},"used_by":[]},"WP_Widget_Archives::form":{"doc":"","file":"default-widgets.php","line":275,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[276],"strip_tags":[277],"get_field_id":[281,281,283,283,285,285],"_e":[281,283,285],"get_field_name":[281,283,285],"esc_attr":[281]},"used_by":[]},"WP_Widget_Meta::__construct":{"doc":"","file":"default-widgets.php","line":300,"missingDoc":true,"filters":[],"uses":{"__":[301,302]},"used_by":[]},"WP_Widget_Meta::widget":{"doc":"","file":"default-widgets.php","line":305,"missingDoc":true,"filters":["'widget_title'"],"uses":{"extract":[306],"__":[307,316,317,318],"wp_register":[314],"wp_loginout":[315],"bloginfo":[316,317],"esc_attr":[316,317,318],"_e":[316,317,320],"esc_attr_e":[318],"wp_meta":[322]},"used_by":[]},"wp_register":{"doc":"\/**\n * Display the Registration or Admin link.\n *\n * Display a link which allows the user to navigate to the registration page if\n * not logged in and registration is enabled or to the dashboard if logged in.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'register' hook on register \/ admin link content.\n *\n * @param string $before Text to output before the link (defaults to <li>).\n * @param string $after Text to output after the link (defaults to <\/li>).\n * @param boolean $echo Default to echo and not return the link.\n * @return string|null String when retrieving, null when displaying.\n *\/","file":"general-template.php","line":337,"missingDoc":false,"filters":["'register'","'register'"],"uses":{"site_url":[341],"__":[341,345],"get_option":[340],"admin_url":[345],"is_user_logged_in":[339]},"used_by":{"WP_Widget_Meta::widget":[314],"__main":[71]}},"wp_loginout":{"doc":"\/**\n * Display the Log In\/Out link.\n *\n * Displays a link, which allows users to navigate to the Log In page to log in\n * or log out depending on whether they are currently logged in.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'loginout' hook on HTML link content.\n *\n * @param string $redirect Optional path to redirect to on login\/logout.\n * @param boolean $echo Default to echo and not return the link.\n * @return string|null String when retrieving, null when displaying.\n *\/","file":"general-template.php","line":187,"missingDoc":false,"filters":["'loginout'","'loginout'"],"uses":{"esc_url":[189,191],"wp_login_url":[189],"__":[189,191],"wp_logout_url":[191],"is_user_logged_in":[188]},"used_by":{"WP_Widget_Meta::widget":[315],"__main":[72]}},"bloginfo":{"doc":"\/**\n * Display information about the blog.\n *\n * @see get_bloginfo() For possible values for the parameter.\n * @since 0.71\n *\n * @param string $show What to display.\n *\/","file":"general-template.php","line":376,"missingDoc":false,"filters":[],"uses":{"get_bloginfo":[377]},"used_by":{"WP_Widget_Meta::widget":[316,317],"__main":[25,15,16,18,16,16,18,20,21,29,29,31,45,46]}},"wp_meta":{"doc":"\/**\n * Theme container function for the 'wp_meta' action.\n *\n * The 'wp_meta' action can have several purposes, depending on how you use it,\n * but one purpose might have been to allow for theme switching.\n *\n * @since 1.5.0\n * @link http:\/\/trac.wordpress.org\/ticket\/1458 Explanation of 'wp_meta' action.\n * @uses do_action() Calls 'wp_meta' hook.\n *\/","file":"general-template.php","line":364,"missingDoc":false,"filters":["'wp_meta'"],"uses":[],"used_by":{"WP_Widget_Meta::widget":[322],"__main":[76]}},"WP_Widget_Meta::update":{"doc":"","file":"default-widgets.php","line":328,"missingDoc":true,"filters":[],"uses":{"strip_tags":[330]},"used_by":[]},"WP_Widget_Meta::form":{"doc":"","file":"default-widgets.php","line":335,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[336],"strip_tags":[337],"get_field_id":[339,339],"_e":[339],"get_field_name":[339],"esc_attr":[339]},"used_by":[]},"WP_Widget_Calendar::__construct":{"doc":"","file":"default-widgets.php","line":351,"missingDoc":true,"filters":[],"uses":{"__":[352,353]},"used_by":[]},"WP_Widget_Calendar::widget":{"doc":"","file":"default-widgets.php","line":356,"missingDoc":true,"filters":["'widget_title'"],"uses":{"extract":[357],"get_calendar":[363]},"used_by":[]},"get_calendar":{"doc":"\/**\n * Display calendar with days that have posts as links.\n *\n * The calendar is cached, which will be retrieved, if it exists. If there are\n * no posts for the month, then it will not be displayed.\n *\n * @since 1.0.0\n * @uses calendar_week_mod()\n *\n * @param bool $initial Optional, default is true. Use initial calendar names.\n * @param bool $echo Optional, default is true. Set to false for return.\n * @return string|null String when retrieving, null when displaying.\n *\/","file":"general-template.php","line":1073,"missingDoc":false,"filters":["'get_calendar'","'get_calendar'","'the_title'","'get_calendar'","'get_calendar'"],"uses":{"md5":[1077],"is_array":[1079,1089],"wp_cache_get":[1078],"get_var":[1094,1116],"wp_cache_set":[1097,1264],"intval":[1103,1106,1110,1111,1114,1118,1122,1236],"get_option":[1106],"zeroise":[1110,1122],"substr":[1114,1118,1122],"strlen":[1119],"gmdate":[1124,1125,1242,1242,1242],"current_time":[1124,1125,1242,1242,1242],"mktime":[1128,1172,1180,1253,1257],"date":[1129,1148,1172,1180,1232,1236,1253,1257],"get_row":[1132,1138],"_x":[1146],"sprintf":[1148,1172,1180],"get_month":[1148,1172,1172,1180,1180],"get_weekday":[1155],"get_weekday_initial":[1159],"get_weekday_abbrev":[1159],"esc_attr":[1160,1172,1180,1220,1234,1248,1259],"get_month_link":[1172,1180],"__":[1172,1180],"get_month_abbrev":[1172,1180],"get_results":[1193,1211],"strpos":[1205],"stripos":[1205,1205],"calendar_week_mod":[1232,1253,1257],"get_day_link":[1248],"in_array":[1247]},"used_by":{"WP_Widget_Calendar::widget":[363]}},"WP_Widget_Calendar::update":{"doc":"","file":"default-widgets.php","line":368,"missingDoc":true,"filters":[],"uses":{"strip_tags":[370]},"used_by":[]},"WP_Widget_Calendar::form":{"doc":"","file":"default-widgets.php","line":375,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[376],"strip_tags":[377],"get_field_id":[379,380],"_e":[379],"get_field_name":[380],"esc_attr":[380]},"used_by":[]},"WP_Widget_Text::__construct":{"doc":"","file":"default-widgets.php","line":392,"missingDoc":true,"filters":[],"uses":{"__":[393,395]},"used_by":[]},"WP_Widget_Text::widget":{"doc":"","file":"default-widgets.php","line":398,"missingDoc":true,"filters":["'widget_title'","'widget_text'"],"uses":{"extract":[399],"wpautop":[404]},"used_by":[]},"wpautop":{"doc":"\/**\n * Replaces double line-breaks with paragraph elements.\n *\n * A group of regex replaces used to identify text formatted with newlines and\n * replace double line-breaks with HTML paragraph tags. The remaining\n * line-breaks after conversion become <<br \/>> tags, unless $br is set to '0'\n * or 'false'.\n *\n * @since 0.71\n *\n * @param string $pee The text which has to be formatted.\n * @param bool $br Optional. If set, this will convert all remaining line-breaks after paragraphing. Default true.\n * @return string Text which has been converted into correct paragraph tags.\n *\/","file":"formatting.php","line":188,"missingDoc":false,"filters":[],"uses":{"trim":[191,236],"explode":[197],"array_pop":[198],"strpos":[203,196,227],"substr":[212,214],"preg_replace":[221,224,225,228,229,231,237,238,239,240,241,243,244,247,250,251,252],"str_replace":[226,242,248,255],"preg_split":[233],"preg_replace_callback":[246],"array_keys":[255],"array_values":[255]},"used_by":{"WP_Widget_Text::widget":[404],"wp_richedit_pre":[2495]}},"WP_Widget_Text::update":{"doc":"","file":"default-widgets.php","line":409,"missingDoc":true,"filters":[],"uses":{"strip_tags":[411],"stripslashes":[415],"wp_filter_post_kses":[415],"addslashes":[415],"current_user_can":[412]},"used_by":[]},"wp_filter_post_kses":{"doc":"\/**\n * Sanitize content for allowed HTML tags for post content.\n *\n * Post content refers to the page contents of the 'post' type and not $_POST\n * data from forms.\n *\n * @since 2.0.0\n *\n * @param string $data Post content to filter, expected to be escaped with slashes\n * @return string Filtered post content with allowed HTML tags and attributes intact.\n *\/","file":"kses.php","line":1284,"missingDoc":false,"filters":[],"uses":{"addslashes":[1285],"wp_kses":[1285],"stripslashes":[1285]},"used_by":{"WP_Widget_Text::update":[415]}},"WP_Widget_Text::form":{"doc":"","file":"default-widgets.php","line":420,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[421],"strip_tags":[422],"esc_textarea":[423],"get_field_id":[425,426,428,430,430],"_e":[425,430],"get_field_name":[426,428,430],"esc_attr":[426],"checked":[430]},"used_by":[]},"esc_textarea":{"doc":"\/**\n * Escaping for textarea values.\n *\n * @since 3.1\n *\n * @param string $text\n * @return string\n *\/","file":"formatting.php","line":2699,"missingDoc":false,"filters":["'esc_textarea'"],"uses":{"htmlspecialchars":[2700]},"used_by":{"WP_Widget_Text::form":[423],"format_to_edit":[1300]}},"WP_Widget_Categories::__construct":{"doc":"","file":"default-widgets.php","line":442,"missingDoc":true,"filters":[],"uses":{"__":[443,444]},"used_by":[]},"WP_Widget_Categories::widget":{"doc":"","file":"default-widgets.php","line":447,"missingDoc":true,"filters":["'widget_title'","'widget_categories_dropdown_args'","'widget_categories_args'"],"uses":{"extract":[448],"__":[450,462],"wp_dropdown_categories":[463],"home_url":[471],"wp_list_categories":[484]},"used_by":[]},"WP_Widget_Categories::update":{"doc":"","file":"default-widgets.php","line":493,"missingDoc":true,"filters":[],"uses":{"strip_tags":[495]},"used_by":[]},"WP_Widget_Categories::form":{"doc":"","file":"default-widgets.php","line":503,"missingDoc":true,"filters":[],"uses":{"wp_parse_args":[505],"esc_attr":[506],"get_field_id":[511,512,514,515,517,518,520,521],"_e":[511,515,518,521],"get_field_name":[512,514,517,520],"checked":[514,517,520]},"used_by":[]},"WP_Widget_Recent_Posts::__construct":{"doc":"","file":"default-widgets.php","line":534,"missingDoc":true,"filters":[],"uses":{"__":[535,536],"add_action":[539,540,541]},"used_by":[]},"WP_Widget_Recent_Posts::widget":{"doc":"","file":"default-widgets.php","line":544,"missingDoc":true,"filters":["'widget_title'","'widget_posts_args'"],"uses":{"wp_cache_get":[545],"is_array":[547],"ob_start":[558],"extract":[559],"__":[561],"absint":[562],"have_posts":[572,567],"the_post":[572],"the_permalink":[574],"esc_attr":[574],"get_the_title":[574,574,574],"get_the_ID":[574],"the_title":[574],"the_ID":[574],"get_the_date":[576],"wp_reset_postdata":[584],"ob_get_flush":[588],"wp_cache_set":[589]},"used_by":[]},"have_posts":{"doc":"\/**\n * Whether current WordPress query has results to loop over.\n *\n * @see WP_Query::have_posts()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":740,"missingDoc":false,"filters":[],"uses":{"have_posts":[743]},"used_by":{"WP_Widget_Recent_Posts::widget":[572,567],"__main":[29,32,38,22,33,31,30],"have_posts":[743]}},"the_post":{"doc":"\/**\n * Iterate the post index in the loop.\n *\n * @see WP_Query::the_post()\n * @since 1.5.0\n * @uses $wp_query\n *\/","file":"query.php","line":782,"missingDoc":false,"filters":[],"uses":{"the_post":[785]},"used_by":{"WP_Widget_Recent_Posts::widget":[572],"__main":[29,32,38,22,33,31],"the_post":[785]}},"the_title":{"doc":"\/**\n * Display or retrieve the current post title with optional content.\n *\n * @since 0.71\n *\n * @param string $before Optional. Content to prepend to the title.\n * @param string $after Optional. Content to append to the title.\n * @param bool $echo Optional, default to true.Whether to display or return.\n * @return null|string Null on no title. String if $echo parameter is false.\n *\/","file":"post-template.php","line":42,"missingDoc":false,"filters":[],"uses":{"get_the_title":[43],"strlen":[45]},"used_by":{"WP_Widget_Recent_Posts::widget":[574],"__main":[14]}},"the_ID":{"doc":"\/**\n * Display the ID of the current item in the WordPress Loop.\n *\n * @since 0.71\n *\/","file":"post-template.php","line":16,"missingDoc":false,"filters":[],"uses":{"get_the_ID":[17]},"used_by":{"WP_Widget_Recent_Posts::widget":[574]}},"get_the_date":{"doc":"\/**\n * Retrieve the date the current $post was written.\n *\n * Unlike the_date() this function will always return the date.\n * Modify output with 'get_the_date' filter.\n *\n * @since 3.0.0\n *\n * @param string $d Optional. PHP date format defaults to the date_format option if not specified.\n * @return string|null Null if displaying, string if retrieving.\n *\/","file":"general-template.php","line":1375,"missingDoc":false,"filters":["'get_the_date'"],"uses":{"get_post":[1376],"mysql2date":[1380,1382],"get_option":[1380]},"used_by":{"WP_Widget_Recent_Posts::widget":[576],"the_date":[1349]}},"wp_reset_postdata":{"doc":"\/**\n * After looping through a separate query, this function restores\n * the $post global to the current post in the main query\n *\n * @since 3.0.0\n * @uses $wp_query\n *\/","file":"query.php","line":116,"missingDoc":false,"filters":[],"uses":{"setup_postdata":[120]},"used_by":{"WP_Widget_Recent_Posts::widget":[584],"wp_reset_query":[106]}},"WP_Widget_Recent_Posts::update":{"doc":"","file":"default-widgets.php","line":592,"missingDoc":true,"filters":[],"uses":{"strip_tags":[594],"flush_widget_cache":[597],"wp_cache_get":[599],"delete_option":[601]},"used_by":[]},"WP_Widget_Recent_Posts::flush_widget_cache":{"doc":"","file":"default-widgets.php","line":606,"missingDoc":true,"filters":[],"uses":{"wp_cache_delete":[607]},"used_by":[]},"WP_Widget_Recent_Posts::form":{"doc":"","file":"default-widgets.php","line":610,"missingDoc":true,"filters":[],"uses":{"esc_attr":[611],"absint":[612],"get_field_id":[615,616,618,619,621,622],"_e":[615,618,622],"get_field_name":[616,619,621],"checked":[621]},"used_by":[]},"WP_Widget_Recent_Comments::__construct":{"doc":"","file":"default-widgets.php","line":634,"missingDoc":true,"filters":[],"uses":{"__":[635,636],"add_action":[640,642,643],"is_active_widget":[639]},"used_by":[]},"is_active_widget":{"doc":"\/**\n * Whether widget is displayed on the front-end.\n *\n * Either $callback or $id_base can be used\n * $id_base is the first argument when extending WP_Widget class\n * Without the optional $widget_id parameter, returns the ID of the first sidebar\n * in which the first instance of the widget with the given callback or $id_base is found.\n * With the $widget_id parameter, returns the ID of the sidebar where\n * the widget with that callback\/$id_base AND that ID is found.\n *\n * NOTE: $widget_id and $id_base are the same for single widgets. To be effective\n * this function has to run after widgets have initialized, at action 'init' or later.\n *\n * @since 2.2.0\n *\n * @param string $callback Optional, Widget callback to check.\n * @param int $widget_id Optional, but needed for checking. Widget ID.\n * @param string $id_base Optional, the base ID of a widget created by extending WP_Widget.\n * @param bool $skip_inactive Optional, whether to check in 'wp_inactive_widgets'.\n * @return mixed false if widget is not active or id of sidebar in which the widget is active.\n *\/","file":"widgets.php","line":933,"missingDoc":false,"filters":[],"uses":{"wp_get_sidebars_widgets":[936],"_get_widget_id_base":[945],"is_array":[943,938]},"used_by":{"WP_Widget_Recent_Comments::__construct":[639]}},"WP_Widget_Recent_Comments::recent_comments_style":{"doc":"","file":"default-widgets.php","line":646,"missingDoc":true,"filters":["'show_recent_comments_widget_style'"],"uses":{"current_theme_supports":[647]},"used_by":[]},"WP_Widget_Recent_Comments::flush_widget_cache":{"doc":"","file":"default-widgets.php","line":655,"missingDoc":true,"filters":[],"uses":{"wp_cache_delete":[656]},"used_by":[]},"WP_Widget_Recent_Comments::widget":{"doc":"","file":"default-widgets.php","line":659,"missingDoc":true,"filters":["'widget_title'","'widget_comments_args'"],"uses":{"wp_cache_get":[662],"is_array":[664],"extract":[675],"__":[677],"absint":[679],"get_comments":[682],"array_unique":[690],"wp_list_pluck":[690],"_prime_post_caches":[691],"strpos":[691],"get_option":[691],"sprintf":[694],"_x":[694],"get_comment_author_link":[694],"esc_url":[694],"get_comment_link":[694],"get_the_title":[694],"wp_cache_set":[702]},"used_by":[]},"wp_list_pluck":{"doc":"\/**\n * Pluck a certain field out of each object in a list.\n *\n * @since 3.1.0\n *\n * @param array $list A list of objects or arrays\n * @param int|string $field A field from the object to place instead of the entire object\n * @return array\n *\/","file":"functions.php","line":2674,"missingDoc":false,"filters":[],"uses":{"is_object":[2676]},"used_by":{"WP_Widget_Recent_Comments::widget":[690],"wp_filter_object_list":[2616],"wp_enqueue_media":[1461],"WP_Post::__get":[627,637],"WP_Query::get_posts":[2225]}},"_prime_post_caches":{"doc":"\/**\n * Adds any posts from the given ids to the cache that do not already exist in cache\n *\n * @since 3.4.0\n *\n * @access private\n *\n * @param array $post_ids ID list\n * @param bool $update_term_cache Whether to update the term cache. Default is true.\n * @param bool $update_meta_cache Whether to update the meta cache. Default is true.\n *\/","file":"post.php","line":5552,"missingDoc":false,"filters":[],"uses":{"_get_non_cached_ids":[5555],"get_results":[5557],"sprintf":[5557],"join":[5557],"update_post_caches":[5559]},"used_by":{"WP_Widget_Recent_Comments::widget":[691],"update_post_thumbnail_cache":[70],"WP_Query::get_posts":[2668]}},"WP_Widget_Recent_Comments::update":{"doc":"","file":"default-widgets.php","line":705,"missingDoc":true,"filters":[],"uses":{"strip_tags":[707],"absint":[708],"flush_widget_cache":[709],"wp_cache_get":[711],"delete_option":[713]},"used_by":[]},"WP_Widget_Recent_Comments::form":{"doc":"","file":"default-widgets.php","line":718,"missingDoc":true,"filters":[],"uses":{"esc_attr":[719],"absint":[720],"get_field_id":[722,723,725,726],"_e":[722,725],"get_field_name":[723,726]},"used_by":[]},"WP_Widget_RSS::__construct":{"doc":"","file":"default-widgets.php","line":738,"missingDoc":true,"filters":[],"uses":{"__":[739,741]},"used_by":[]},"WP_Widget_RSS::widget":{"doc":"","file":"default-widgets.php","line":744,"missingDoc":true,"filters":["'widget_title'"],"uses":{"extract":[749],"stristr":[752,772],"substr":[753,773],"in_array":[759],"untrailingslashit":[759],"site_url":[759],"home_url":[759],"fetch_feed":[762],"esc_attr":[768],"strip_tags":[768,770,771,780],"html_entity_decode":[768],"get_description":[768],"get_option":[768],"esc_html":[770],"get_title":[770],"esc_url":[771,780],"get_permalink":[771],"is_wp_error":[767,791],"__":[777],"includes_url":[781],"esc_attr__":[783],"wp_widget_rss_output":[788],"__destruct":[792]},"used_by":[]},"fetch_feed":{"doc":"\/**\n * Build SimplePie object based on RSS or Atom feed from URL.\n *\n * @since 2.8\n *\n * @param string $url URL to retrieve feed\n * @return WP_Error|SimplePie WP_Error object on failure or SimplePie object on success\n *\/","file":"feed.php","line":526,"missingDoc":false,"filters":["'wp_feed_cache_transient_lifetime'","'wp_feed_options'"],"uses":{"set_sanitize_class":[531],"set_cache_class":[536],"set_file_class":[537],"set_feed_url":[539],"set_cache_duration":[540],"init":[542],"handle_content_type":[543],"error":[546,545]},"used_by":{"WP_Widget_RSS::widget":[762],"wp_widget_rss_output":[821,824],"wp_widget_rss_process":[1004]}},"wp_widget_rss_output":{"doc":"\/**\n * Display the RSS entries in a list.\n *\n * @since 2.5.0\n *\n * @param string|array|object $rss RSS url.\n * @param array $args Widget arguments.\n *\/","file":"default-widgets.php","line":819,"missingDoc":false,"filters":[],"uses":{"fetch_feed":[821,824],"is_array":[822],"is_object":[825,892],"is_string":[820],"sprintf":[831],"__":[831,847,861],"get_error_message":[831],"is_admin":[830],"current_user_can":[830],"is_wp_error":[829],"wp_parse_args":[836],"extract":[837],"__destruct":[848,905],"get_item_quantity":[846],"get_link":[855],"stristr":[856],"substr":[857,868,869,867],"esc_url":[858],"strip_tags":[858,859,863,894],"esc_attr":[859,863],"get_title":[859],"str_replace":[863],"html_entity_decode":[863],"get_description":[863],"get_option":[863,885],"wp_html_excerpt":[864],"esc_html":[872,894],"get_date":[882],"date_i18n":[885],"get_author":[891],"get_name":[893],"get_items":[854]},"used_by":{"WP_Widget_RSS::widget":[788]}},"WP_Widget_RSS::update":{"doc":"","file":"default-widgets.php","line":796,"missingDoc":true,"filters":[],"uses":{"wp_widget_rss_process":[798]},"used_by":[]},"wp_widget_rss_process":{"doc":"\/**\n * Process RSS feed widget data and optionally retrieve feed items.\n *\n * The feed widget can not have more than 20 items or it will reset back to the\n * default, which is 10.\n *\n * The resulting array has the feed title, feed url, feed link (from channel),\n * feed items, error (if any), and whether to show summary, author, and date.\n * All respectively in the order of the array elements.\n *\n * @since 2.5.0\n *\n * @param array $widget_rss RSS widget feed data. Expects unescaped data.\n * @param bool $check_feed Optional, default is true. Whether to check feed for errors.\n * @return array\n *\/","file":"default-widgets.php","line":993,"missingDoc":false,"filters":[],"uses":{"esc_url_raw":[997],"strip_tags":[997,998,1010],"trim":[998],"fetch_feed":[1004],"get_error_message":[1008],"esc_url":[1010],"get_permalink":[1010],"stristr":[1011],"substr":[1012],"__destruct":[1014],"is_wp_error":[1007],"compact":[1019]},"used_by":{"WP_Widget_RSS::update":[798]}},"WP_Widget_RSS::form":{"doc":"","file":"default-widgets.php","line":801,"missingDoc":true,"filters":[],"uses":{"wp_widget_rss_form":[807]},"used_by":[]},"wp_widget_rss_form":{"doc":"\/**\n * Display RSS widget options form.\n *\n * The options for what fields are displayed for the RSS form are all booleans\n * and are as follows: 'url', 'title', 'items', 'show_summary', 'show_author',\n * 'show_date'.\n *\n * @since 2.5.0\n *\n * @param array|string $args Values for input fields.\n * @param array $inputs Override default display options.\n *\/","file":"default-widgets.php","line":921,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[924],"extract":[925,926],"esc_attr":[928,929],"esc_url":[930],"sprintf":[939],"__":[939],"_e":[943,946,949,958,961,964],"selected":[953],"str_replace":[969],"array_keys":[967]},"used_by":{"WP_Widget_RSS::form":[807]}},"date_i18n":{"doc":"\/**\n * Retrieve the date in localized format, based on timestamp.\n *\n * If the locale specifies the locale month and weekday, then the locale will\n * take over the format for the date. If it isn't, then the date format string\n * will be used instead.\n *\n * @since 0.71\n *\n * @param string $dateformatstring Format to display the date.\n * @param int $unixtimestamp Optional. Unix timestamp.\n * @param bool $gmt Optional, default is false. Whether to convert to GMT for time.\n * @return string The date, translated if locale specifies it.\n *\/","file":"functions.php","line":84,"missingDoc":false,"filters":["'date_i18n'"],"uses":{"current_time":[90],"time":[92],"get_month":[105],"get_month_abbrev":[106],"get_weekday":[107],"get_weekday_abbrev":[108],"get_meridiem":[109,110],"preg_replace":[112,113,114,115,116,117,132],"backslashit":[112,113,114,115,116,117,132],"substr":[119,133],"strlen":[119,133],"implode":[122],"get_option":[124],"timezone_open":[126],"date_create":[127],"date_format":[130],"strpos":[129],"preg_match":[123]},"used_by":{"wp_widget_rss_output":[885],"mysql2date":[39],"wp_get_archives":[1006,1007],"wp_post_revision_title":[1310]}},"WP_Widget_Tag_Cloud::__construct":{"doc":"","file":"default-widgets.php","line":1029,"missingDoc":true,"filters":[],"uses":{"__":[1030,1031]},"used_by":[]},"WP_Widget_Tag_Cloud::widget":{"doc":"","file":"default-widgets.php","line":1034,"missingDoc":true,"filters":["'widget_title'","'widget_tag_cloud_args'"],"uses":{"extract":[1035],"_get_current_taxonomy":[1036],"__":[1041],"get_taxonomy":[1043],"wp_tag_cloud":[1053]},"used_by":[]},"WP_Widget_Tag_Cloud::update":{"doc":"","file":"default-widgets.php","line":1058,"missingDoc":true,"filters":[],"uses":{"strip_tags":[1059],"stripslashes":[1059,1060]},"used_by":[]},"WP_Widget_Tag_Cloud::form":{"doc":"","file":"default-widgets.php","line":1064,"missingDoc":true,"filters":[],"uses":{"_get_current_taxonomy":[1065],"get_field_id":[1067,1068,1069,1070],"_e":[1067,1069],"get_field_name":[1068,1070],"esc_attr":[1068,1076],"get_taxonomy":[1072],"selected":[1076],"get_taxonomies":[1071]},"used_by":[]},"WP_Widget_Tag_Cloud::_get_current_taxonomy":{"doc":"","file":"default-widgets.php","line":1081,"missingDoc":true,"filters":[],"uses":{"taxonomy_exists":[1082]},"used_by":[]},"WP_Nav_Menu_Widget::__construct":{"doc":"","file":"default-widgets.php","line":1096,"missingDoc":true,"filters":[],"uses":{"__":[1097,1098]},"used_by":[]},"WP_Nav_Menu_Widget::widget":{"doc":"","file":"default-widgets.php","line":1101,"missingDoc":true,"filters":["'widget_title'"],"uses":{"wp_get_nav_menu_object":[1103],"wp_nav_menu":[1115]},"used_by":[]},"wp_get_nav_menu_object":{"doc":"\/**\n * Returns a navigation menu object.\n *\n * @since 3.0.0\n *\n * @uses get_term\n * @uses get_term_by\n *\n * @param string $menu Menu id, slug or name\n * @return mixed false if $menu param isn't supplied or term does not exist, menu object if successful.\n *\/","file":"nav-menu.php","line":21,"missingDoc":false,"filters":[],"uses":{"get_term":[25],"get_term_by":[28,31]},"used_by":{"WP_Nav_Menu_Widget::widget":[1103],"wp_nav_menu":[148,152],"is_nav_menu":[53],"wp_delete_nav_menu":[178],"wp_update_nav_menu_object":[209],"wp_update_nav_menu_item":[277],"wp_get_nav_menu_items":[473]}},"wp_nav_menu":{"doc":"\/**\n * Displays a navigation menu.\n *\n * Optional $args contents:\n *\n * menu - The menu that is desired. Accepts (matching in order) id, slug, name. Defaults to blank.\n * menu_class - CSS class to use for the ul element which forms the menu. Defaults to 'menu'.\n * menu_id - The ID that is applied to the ul element which forms the menu. Defaults to the menu slug, incremented.\n * container - Whether to wrap the ul, and what to wrap it with. Defaults to 'div'.\n * container_class - the class that is applied to the container. Defaults to 'menu-{menu slug}-container'.\n * container_id - The ID that is applied to the container. Defaults to blank.\n * fallback_cb - If the menu doesn't exists, a callback function will fire. Defaults to 'wp_page_menu'. Set to false for no fallback.\n * before - Text before the link text.\n * after - Text after the link text.\n * link_before - Text before the link.\n * link_after - Text after the link.\n * echo - Whether to echo the menu or return it. Defaults to echo.\n * depth - how many levels of the hierarchy are to be included. 0 means all. Defaults to 0.\n * walker - allows a custom walker to be specified.\n * theme_location - the location in the theme to be used. Must be registered with register_nav_menu() in order to be selectable by the user.\n * items_wrap - How the list items should be wrapped. Defaults to a ul with an id and class. Uses printf() format with numbered placeholders.\n *\n * @since 3.0.0\n *\n * @param array $args Arguments\n *\/","file":"nav-menu-template.php","line":136,"missingDoc":false,"filters":["'wp_nav_menu_args'","'wp_nav_menu_container_allowedtags'","'wp_nav_menu_objects'","'wp_nav_menu_items'","\"wp_nav_menu_{$menu->slug}_items\"","'wp_nav_menu'"],"uses":{"wp_parse_args":[143],"wp_get_nav_menu_object":[148,152],"get_nav_menu_locations":[151],"wp_get_nav_menus":[156],"wp_get_nav_menu_items":[158,167],"is_wp_error":[166,177,181],"call_user_func":[179],"is_callable":[178],"esc_attr":[191,192,231,231],"in_array":[189,216],"_wp_menu_item_classes_by_context":[198],"walk_nav_menu_tree":[208],"preg_replace":[218],"preg_match":[217],"sprintf":[231]},"used_by":{"WP_Nav_Menu_Widget::widget":[1115]}},"WP_Nav_Menu_Widget::update":{"doc":"","file":"default-widgets.php","line":1120,"missingDoc":true,"filters":[],"uses":{"strip_tags":[1121],"stripslashes":[1121]},"used_by":[]},"WP_Nav_Menu_Widget::form":{"doc":"","file":"default-widgets.php","line":1126,"missingDoc":true,"filters":[],"uses":{"get_terms":[1131],"sprintf":[1135],"__":[1135],"admin_url":[1135],"get_field_id":[1140,1141,1144,1145],"_e":[1140,1144],"get_field_name":[1141,1145],"selected":[1149]},"used_by":[]},"wp_widgets_init":{"doc":"\/**\n * Register all of the default WordPress widgets on startup.\n *\n * Calls 'widgets_init' action after all of the WordPress widgets have been\n * registered.\n *\n * @since 2.2.0\n *\/","file":"default-widgets.php","line":1167,"missingDoc":false,"filters":["'widgets_init'"],"uses":{"is_blog_installed":[1168],"register_widget":[1171,1173,1175,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196],"get_option":[1177]},"used_by":[]},"is_blog_installed":{"doc":"\/**\n * Test whether blog is already installed.\n *\n * The cache will be checked first. If you have a cache plugin, which saves the\n * cache values, then this will work. If you use the default WordPress cache,\n * and the database goes away, then you might have problems.\n *\n * Checks for the option siteurl for whether WordPress is installed.\n *\n * @since 2.1.0\n * @uses $wpdb\n *\n * @return bool Whether blog is already installed.\n *\/","file":"functions.php","line":1104,"missingDoc":false,"filters":[],"uses":{"wp_cache_get":[1108],"suppress_errors":[1111,1120,1132,1157],"wp_load_alloptions":[1113],"defined":[1112,1129,1140,1142],"get_var":[1117],"wp_cache_set":[1123,1159],"tables":[1137],"get_results":[1145],"wp_load_translations_early":[1150],"sprintf":[1153],"__":[1153],"dead_db":[1154]},"used_by":{"wp_widgets_init":[1168],"wp_not_installed":[427,429]}},"register_widget":{"doc":"\/**\n * Register a widget\n *\n * Registers a WP_Widget widget\n *\n * @since 2.8.0\n *\n * @see WP_Widget\n * @see WP_Widget_Factory\n * @uses WP_Widget_Factory\n *\n * @param string $widget_class The name of a class that extends WP_Widget\n *\/","file":"widgets.php","line":428,"missingDoc":false,"filters":[],"uses":{"register":[431]},"used_by":{"wp_widgets_init":[1171,1173,1175,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196]}},"get_postdata":{"doc":"\/**\n * Entire Post data.\n *\n * @since 0.71\n * @deprecated 1.5.1\n * @deprecated Use get_post()\n * @see get_post()\n *\n * @param int $postid\n * @return array\n *\/","file":"deprecated.php","line":26,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[27],"get_post":[29]},"used_by":[]},"start_wp":{"doc":"\/**\n * Sets up the WordPress Loop.\n *\n * @since 1.0.1\n * @deprecated 1.5\n * @deprecated Use The Loop - {@link http:\/\/codex.wordpress.org\/The_Loop Use new WordPress Loop}\n *\/","file":"deprecated.php","line":59,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[62],"__":[62],"next_post":[65],"setup_postdata":[67],"get_post":[67]},"used_by":[]},"next_post":{"doc":"\/**\n * Prints link to the next post.\n *\n * @since 0.71\n * @deprecated 2.0\n * @deprecated Use next_post_link()\n * @see next_post_link()\n *\n * @param string $format\n * @param string $next\n * @param string $title\n * @param string $in_same_cat\n * @param int $limitnext\n * @param string $excluded_categories\n *\/","file":"deprecated.php","line":173,"missingDoc":false,"filters":["'the_title'"],"uses":{"_deprecated_function":[174],"get_next_post":[181],"get_permalink":[186],"str_replace":[190]},"used_by":{"start_wp":[65],"WP_Query::the_post":[2853]}},"setup_postdata":{"doc":"\/**\n * Set up global post data.\n *\n * @since 1.5.0\n *\n * @param object $post Post data.\n * @uses do_action_ref_array() Calls 'the_post'\n * @return bool True when finished.\n *\/","file":"query.php","line":3625,"missingDoc":false,"filters":["'the_post'"],"uses":{"get_userdata":[3630],"mysql2date":[3632,3633],"get_query_var":[3635],"is_single":[3638],"is_page":[3638],"is_feed":[3638],"str_replace":[3645,3646,3647],"explode":[3648],"count":[3649],"strpos":[3641]},"used_by":{"start_wp":[67],"wp_reset_postdata":[120],"WP_Query::the_post":[2854]}},"the_category_ID":{"doc":"\/**\n * Return or Print Category ID.\n *\n * @since 0.71\n * @deprecated 0.71\n * @deprecated use get_the_category()\n * @see get_the_category()\n *\n * @param bool $echo\n * @return null|int\n *\/","file":"deprecated.php","line":81,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[82],"get_the_category":[85]},"used_by":[]},"the_category_head":{"doc":"\/**\n * Print category with optional text before and after.\n *\n * @since 0.71\n * @deprecated 0.71\n * @deprecated use get_the_category_by_ID()\n * @see get_the_category_by_ID()\n *\n * @param string $before\n * @param string $after\n *\/","file":"deprecated.php","line":105,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[108],"get_the_category":[111],"get_the_category_by_ID":[115]},"used_by":[]},"previous_post":{"doc":"\/**\n * Prints link to the previous post.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use previous_post_link()\n * @see previous_post_link()\n *\n * @param string $format\n * @param string $previous\n * @param string $title\n * @param string $in_same_cat\n * @param int $limitprev\n * @param string $excluded_categories\n *\/","file":"deprecated.php","line":136,"missingDoc":false,"filters":["'the_title'"],"uses":{"_deprecated_function":[138],"get_previous_post":[145],"get_permalink":[150],"str_replace":[154]},"used_by":[]},"get_previous_post":{"doc":"\/**\n * Retrieve previous post that is adjacent to current post.\n *\n * @since 1.5.0\n *\n * @param bool $in_same_cat Optional. Whether post should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n * @return mixed Post object if successful. Null if global $post is not set. Empty string if no corresponding post exists.\n *\/","file":"link-template.php","line":1093,"missingDoc":false,"filters":[],"uses":{"get_adjacent_post":[1094]},"used_by":{"previous_post":[145]}},"get_next_post":{"doc":"\/**\n * Retrieve next post that is adjacent to current post.\n *\n * @since 1.5.0\n *\n * @param bool $in_same_cat Optional. Whether post should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n * @return mixed Post object if successful. Null if global $post is not set. Empty string if no corresponding post exists.\n *\/","file":"link-template.php","line":1106,"missingDoc":false,"filters":[],"uses":{"get_adjacent_post":[1107]},"used_by":{"next_post":[181]}},"user_can_create_post":{"doc":"\/**\n * Whether user can create a post.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $blog_id Not Used\n * @param int $category_id Not Used\n * @return bool\n *\/","file":"deprecated.php","line":207,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[208],"get_userdata":[210]},"used_by":{"user_can_set_post_date":[300]}},"user_can_create_draft":{"doc":"\/**\n * Whether user can create a post.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $blog_id Not Used\n * @param int $category_id Not Used\n * @return bool\n *\/","file":"deprecated.php","line":227,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[228],"get_userdata":[230]},"used_by":[]},"user_can_edit_post":{"doc":"\/**\n * Whether user can edit a post.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool\n *\/","file":"deprecated.php","line":247,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[248],"get_userdata":[250,252],"get_post":[251]},"used_by":{"user_can_delete_post":[280],"user_can_edit_post_date":[320],"user_can_edit_post_comments":[340]}},"user_can_delete_post":{"doc":"\/**\n * Whether user can delete a post.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool\n *\/","file":"deprecated.php","line":276,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[277],"user_can_edit_post":[280]},"used_by":[]},"user_can_set_post_date":{"doc":"\/**\n * Whether user can set new posts' dates.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $blog_id Not Used\n * @param int $category_id Not Used\n * @return bool\n *\/","file":"deprecated.php","line":296,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[297],"get_userdata":[299],"user_can_create_post":[300]},"used_by":[]},"user_can_edit_post_date":{"doc":"\/**\n * Whether user can delete a post.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool returns true if $user_id can edit $post_id's date\n *\/","file":"deprecated.php","line":316,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[317],"get_userdata":[319],"user_can_edit_post":[320]},"used_by":[]},"user_can_edit_post_comments":{"doc":"\/**\n * Whether user can delete a post.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool returns true if $user_id can edit $post_id's comments\n *\/","file":"deprecated.php","line":336,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[337],"user_can_edit_post":[340]},"used_by":{"user_can_delete_post_comments":[360]}},"user_can_delete_post_comments":{"doc":"\/**\n * Whether user can delete a post.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $post_id\n * @param int $blog_id Not Used\n * @return bool returns true if $user_id can delete $post_id's comments\n *\/","file":"deprecated.php","line":356,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[357],"user_can_edit_post_comments":[360]},"used_by":[]},"user_can_edit_user":{"doc":"\/**\n * Can user can edit other user.\n *\n * @since 1.5\n * @deprecated 2.0\n * @deprecated Use current_user_can()\n * @see current_user_can()\n *\n * @param int $user_id\n * @param int $other_user\n * @return bool\n *\/","file":"deprecated.php","line":375,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[376],"get_userdata":[378,379]},"used_by":[]},"get_linksbyname":{"doc":"\/**\n * Gets the links associated with category $cat_name.\n *\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param string $cat_name Optional. The category name to use. If no match is found uses all.\n * @param string $before Optional. The html to output before the link.\n * @param string $after Optional. The html to output after the link.\n * @param string $between Optional. The html to output between the link\/image and its description. Not used if no image or $show_images is true.\n * @param bool $show_images Optional. Whether to show images (if defined).\n * @param string $orderby Optional. The order to output the links. E.g. 'id', 'name', 'url', 'description' or 'rating'. Or maybe owner.\n *\t\tIf you start the name with an underscore the order will be reversed. You can also specify 'rand' as the order which will return links in a\n *\t\trandom order.\n * @param bool $show_description Optional. Whether to show the description if show_images=false\/not defined.\n * @param bool $show_rating Optional. Show rating stars\/chars.\n * @param int $limit\t\tOptional. Limit to X entries. If not specified, all entries are shown.\n * @param int $show_updated Optional. Whether to show last updated timestamp\n *\/","file":"deprecated.php","line":407,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[410],"get_term_by":[413],"get_links":[417]},"used_by":{"get_linksbyname_withrating":[564]}},"wp_get_linksbyname":{"doc":"\/**\n * Gets the links associated with the named category.\n *\n * @since 1.0.1\n * @deprecated 2.1\n * @deprecated Use wp_list_bookmarks()\n * @see wp_list_bookmarks()\n *\n * @param string $category The category to use.\n * @param string $args\n * @return bool|null\n *\/","file":"deprecated.php","line":432,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[433],"wp_parse_args":[446],"wp_list_bookmarks":[448]},"used_by":[]},"get_linkobjectsbyname":{"doc":"\/**\n * Gets an array of link objects associated with category $cat_name.\n *\n * <code>\n *\t$links = get_linkobjectsbyname('fred');\n *\tforeach ($links as $link) {\n * \t\techo '<li>'.$link->link_name.'<\/li>';\n *\t}\n * <\/code>\n *\n * @since 1.0.1\n * @deprecated 2.1\n * @deprecated Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param string $cat_name The category name to use. If no match is found uses all.\n * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url', 'description', or 'rating'.\n *\t\tOr maybe owner. If you start the name with an underscore the order will be reversed. You can also\n *\t\tspecify 'rand' as the order which will return links in a random order.\n * @param int $limit Limit to X entries. If not specified, all entries are shown.\n * @return unknown\n *\/","file":"deprecated.php","line":473,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[474],"get_term_by":[477],"get_linkobjects":[481]},"used_by":[]},"get_linkobjects":{"doc":"\/**\n * Gets an array of link objects associated with category n.\n *\n * Usage:\n * <code>\n *\t$links = get_linkobjects(1);\n *\tif ($links) {\n *\t\tforeach ($links as $link) {\n *\t\t\techo '<li>'.$link->link_name.'<br \/>'.$link->link_description.'<\/li>';\n *\t\t}\n *\t}\n * <\/code>\n *\n * Fields are:\n * <ol>\n *\t<li>link_id<\/li>\n *\t<li>link_url<\/li>\n *\t<li>link_name<\/li>\n *\t<li>link_image<\/li>\n *\t<li>link_target<\/li>\n *\t<li>link_category<\/li>\n *\t<li>link_description<\/li>\n *\t<li>link_visible<\/li>\n *\t<li>link_owner<\/li>\n *\t<li>link_rating<\/li>\n *\t<li>link_updated<\/li>\n *\t<li>link_rel<\/li>\n *\t<li>link_notes<\/li>\n * <\/ol>\n *\n * @since 1.0.1\n * @deprecated 2.1\n * @deprecated Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param int $category The category to use. If no category supplied uses all\n * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url',\n *\t\t'description', or 'rating'. Or maybe owner. If you start the name with an\n *\t\tunderscore the order will be reversed. You can also specify 'rand' as the\n *\t\torder which will return links in a random order.\n * @param int $limit Limit to X entries. If not specified, all entries are shown.\n * @return unknown\n *\/","file":"deprecated.php","line":527,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[528],"get_bookmarks":[530]},"used_by":{"get_linkobjectsbyname":[481]}},"get_linksbyname_withrating":{"doc":"\/**\n * Gets the links associated with category 'cat_name' and display rating stars\/chars.\n *\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param string $cat_name The category name to use. If no match is found uses all\n * @param string $before The html to output before the link\n * @param string $after The html to output after the link\n * @param string $between The html to output between the link\/image and its description. Not used if no image or show_images is true\n * @param bool $show_images Whether to show images (if defined).\n * @param string $orderby the order to output the links. E.g. 'id', 'name', 'url',\n *\t\t'description', or 'rating'. Or maybe owner. If you start the name with an\n *\t\tunderscore the order will be reversed. You can also specify 'rand' as the\n *\t\torder which will return links in a random order.\n * @param bool $show_description Whether to show the description if show_images=false\/not defined\n * @param int $limit Limit to X entries. If not specified, all entries are shown.\n * @param int $show_updated Whether to show last updated timestamp\n *\/","file":"deprecated.php","line":560,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[562],"get_linksbyname":[564]},"used_by":[]},"get_links_withrating":{"doc":"\/**\n * Gets the links associated with category n and display rating stars\/chars.\n *\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use get_bookmarks()\n * @see get_bookmarks()\n *\n * @param int $category The category to use. If no category supplied uses all\n * @param string $before The html to output before the link\n * @param string $after The html to output after the link\n * @param string $between The html to output between the link\/image and its description. Not used if no image or show_images == true\n * @param bool $show_images Whether to show images (if defined).\n * @param string $orderby The order to output the links. E.g. 'id', 'name', 'url',\n *\t\t'description', or 'rating'. Or maybe owner. If you start the name with an\n *\t\tunderscore the order will be reversed. You can also specify 'rand' as the\n *\t\torder which will return links in a random order.\n * @param bool $show_description Whether to show the description if show_images=false\/not defined.\n * @param string $limit Limit to X entries. If not specified, all entries are shown.\n * @param int $show_updated Whether to show last updated timestamp\n *\/","file":"deprecated.php","line":588,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[590],"get_links":[592]},"used_by":[]},"get_autotoggle":{"doc":"\/**\n * Gets the auto_toggle setting.\n *\n * @since 0.71\n * @deprecated 2.1\n * @deprecated No alternative function available\n *\n * @param int $id The category to get. If no category supplied uses 0\n * @return int Only returns 0.\n *\/","file":"deprecated.php","line":605,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[606]},"used_by":[]},"list_cats":{"doc":"\/**\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use wp_list_categories()\n * @see wp_list_categories()\n *\n * @param int $optionall\n * @param string $all\n * @param string $sort_column\n * @param string $sort_order\n * @param string $file\n * @param bool $list\n * @param int $optiondates\n * @param int $optioncount\n * @param int $hide_empty\n * @param int $use_desc_for_title\n * @param bool $children\n * @param int $child_of\n * @param int $categories\n * @param int $recurse\n * @param string $feed\n * @param string $feed_image\n * @param string $exclude\n * @param bool $hierarchical\n * @return unknown\n *\/","file":"deprecated.php","line":636,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[639],"compact":[641],"wp_list_cats":[643]},"used_by":[]},"wp_list_cats":{"doc":"\/**\n * @since 1.2\n * @deprecated 2.1\n * @deprecated Use wp_list_categories()\n * @see wp_list_categories()\n *\n * @param string|array $args\n * @return unknown\n *\/","file":"deprecated.php","line":655,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[656],"wp_parse_args":[658],"wp_list_categories":[675]},"used_by":{"list_cats":[643]}},"dropdown_cats":{"doc":"\/**\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use wp_dropdown_categories()\n * @see wp_dropdown_categories()\n *\n * @param int $optionall\n * @param string $all\n * @param string $orderby\n * @param string $order\n * @param int $show_last_update\n * @param int $show_count\n * @param int $hide_empty\n * @param bool $optionnone\n * @param int $selected\n * @param int $exclude\n * @return unknown\n *\/","file":"deprecated.php","line":696,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[699],"__":[707],"compact":[709],"add_query_arg":[711],"wp_dropdown_categories":[712]},"used_by":[]},"list_authors":{"doc":"\/**\n * @since 1.2\n * @deprecated 2.1\n * @deprecated Use wp_list_authors()\n * @see wp_list_authors()\n *\n * @param bool $optioncount\n * @param bool $exclude_admin\n * @param bool $show_fullname\n * @param bool $hide_empty\n * @param string $feed\n * @param string $feed_image\n * @return unknown\n *\/","file":"deprecated.php","line":729,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[730],"compact":[732],"wp_list_authors":[733]},"used_by":[]},"wp_get_post_cats":{"doc":"\/**\n * @since 1.0.1\n * @deprecated 2.1\n * @deprecated Use wp_get_post_categories()\n * @see wp_get_post_categories()\n *\n * @param int $blogid Not Used\n * @param int $post_ID\n * @return unknown\n *\/","file":"deprecated.php","line":746,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[747],"wp_get_post_categories":[748]},"used_by":[]},"wp_set_post_cats":{"doc":"\/**\n * Sets the categories that the post id belongs to.\n *\n * @since 1.0.1\n * @deprecated 2.1\n * @deprecated Use wp_set_post_categories()\n * @see wp_set_post_categories()\n *\n * @param int $blogid Not used\n * @param int $post_ID\n * @param array $post_categories\n * @return unknown\n *\/","file":"deprecated.php","line":764,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[765],"wp_set_post_categories":[766]},"used_by":[]},"get_archives":{"doc":"\/**\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use wp_get_archives()\n * @see wp_get_archives()\n *\n * @param string $type\n * @param string $limit\n * @param string $format\n * @param string $before\n * @param string $after\n * @param bool $show_post_count\n * @return unknown\n *\/","file":"deprecated.php","line":783,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[784],"compact":[785],"wp_get_archives":[786]},"used_by":[]},"get_author_link":{"doc":"\/**\n * Returns or Prints link to the author's posts.\n *\n * @since 1.2\n * @deprecated 2.1\n * @deprecated Use get_author_posts_url()\n * @see get_author_posts_url()\n *\n * @param bool $echo Optional.\n * @param int $author_id Required.\n * @param string $author_nicename Optional.\n * @return string|null\n *\/","file":"deprecated.php","line":802,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[803],"get_author_posts_url":[805]},"used_by":[]},"link_pages":{"doc":"\/**\n * Print list of pages based on arguments.\n *\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use wp_link_pages()\n * @see wp_link_pages()\n *\n * @param string $before\n * @param string $after\n * @param string $next_or_number\n * @param string $nextpagelink\n * @param string $previouspagelink\n * @param string $pagelink\n * @param string $more_file\n * @return string\n *\/","file":"deprecated.php","line":829,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[831],"compact":[833],"wp_link_pages":[834]},"used_by":[]},"wp_link_pages":{"doc":"\/**\n * The formatted output of a list of pages.\n *\n * Displays page links for paginated posts (i.e. includes the <!--nextpage-->.\n * Quicktag one or more times). This tag must be within The Loop.\n *\n * The defaults for overwriting are:\n * 'next_or_number' - Default is 'number' (string). Indicates whether page\n *      numbers should be used. Valid values are number and next.\n * 'nextpagelink' - Default is 'Next Page' (string). Text for link to next page.\n *      of the bookmark.\n * 'previouspagelink' - Default is 'Previous Page' (string). Text for link to\n *      previous page, if available.\n * 'pagelink' - Default is '%' (String).Format string for page numbers. The % in\n *      the parameter string will be replaced with the page number, so Page %\n *      generates \"Page 1\", \"Page 2\", etc. Defaults to %, just the page number.\n * 'before' - Default is '<p> Pages:' (string). The html or text to prepend to\n *      each bookmarks.\n * 'after' - Default is '<\/p>' (string). The html or text to append to each\n *      bookmarks.\n * 'link_before' - Default is '' (string). The html or text to prepend to each\n *      Pages link inside the <a> tag. Also prepended to the current item, which\n *      is not linked.\n * 'link_after' - Default is '' (string). The html or text to append to each\n *      Pages link inside the <a> tag. Also appended to the current item, which\n *      is not linked.\n *\n * @since 1.2.0\n * @access private\n *\n * @param string|array $args Optional. Overwrite the defaults.\n * @return string Formatted output in HTML.\n *\/","file":"post-template.php","line":631,"missingDoc":false,"filters":["'wp_link_pages_args'"],"uses":{"__":[633,635,636],"wp_parse_args":[640],"extract":[642],"str_replace":[651],"_wp_link_page":[654,666,671]},"used_by":{"link_pages":[834]}},"get_settings":{"doc":"\/**\n * Get value based on option.\n *\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use get_option()\n * @see get_option()\n *\n * @param string $option\n * @return string\n *\/","file":"deprecated.php","line":848,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[849],"get_option":[851]},"used_by":{"WP_Widget::_register":[128],"WP_Widget::display_callback":[175],"WP_Widget::update_callback":[195],"WP_Widget::form_callback":[254]}},"permalink_link":{"doc":"\/**\n * Print the permalink of the current post in the loop.\n *\n * @since 0.71\n * @deprecated 1.2\n * @deprecated Use the_permalink()\n * @see the_permalink()\n *\/","file":"deprecated.php","line":862,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[863],"the_permalink":[864]},"used_by":[]},"permalink_single_rss":{"doc":"\/**\n * Print the permalink to the RSS feed.\n *\n * @since 0.71\n * @deprecated 2.3\n * @deprecated Use the_permalink_rss()\n * @see the_permalink_rss()\n *\n * @param string $deprecated\n *\/","file":"deprecated.php","line":877,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[878],"the_permalink_rss":[879]},"used_by":[]},"the_permalink_rss":{"doc":"\/**\n * Display the permalink to the post for use in feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.3.0\n * @uses apply_filters() Call 'the_permalink_rss' on the post permalink\n *\/","file":"feed.php","line":190,"missingDoc":false,"filters":["'the_permalink_rss'"],"uses":{"esc_url":[191],"get_permalink":[191]},"used_by":{"permalink_single_rss":[879],"__main":[75,39,46,50,33,39,41,26,29,36]}},"wp_get_links":{"doc":"\/**\n * Gets the links associated with category.\n *\n * @see get_links() for argument information that can be used in $args\n * @since 1.0.1\n * @deprecated 2.1\n * @deprecated Use wp_list_bookmarks()\n * @see wp_list_bookmarks()\n *\n * @param string $args a query string\n * @return null|string\n *\/","file":"deprecated.php","line":894,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[895],"add_query_arg":[899],"strpos":[897],"wp_parse_args":[918],"wp_list_bookmarks":[920]},"used_by":[]},"get_linkrating":{"doc":"\/**\n * @since 1.0.1\n * @deprecated 2.1\n * @deprecated Use sanitize_bookmark_field()\n * @see sanitize_bookmark_field()\n *\n * @param object $link\n * @return unknown\n *\/","file":"deprecated.php","line":1113,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1114],"sanitize_bookmark_field":[1115]},"used_by":{"get_links":[1018]}},"get_links_list":{"doc":"\/**\n * Output entire list of links by category.\n *\n * Output a list of all links, listed by category, using the settings in\n * $wpdb->linkcategories and output it as a nested HTML unordered list.\n *\n * @since 1.0.1\n * @deprecated 2.1\n * @deprecated Use wp_list_bookmarks()\n * @see wp_list_bookmarks()\n *\n * @param string $order Sort link categories by 'name' or 'id'\n *\/","file":"deprecated.php","line":1042,"missingDoc":false,"filters":["'link_category'"],"uses":{"_deprecated_function":[1043],"strtolower":[1045],"substr":[1051,1049],"get_categories":[1057],"get_links":[1067]},"used_by":[]},"links_popup_script":{"doc":"\/**\n * Show the link to the links popup and the number of links.\n *\n * @since 0.71\n * @deprecated 2.1\n * @deprecated {@internal Use function instead is unknown}}\n *\n * @param string $text the text of the link\n * @param int $width the width of the popup window\n * @param int $height the height of the popup window\n * @param string $file the page to open in the popup window\n * @param bool $count the number of links in the db\n *\/","file":"deprecated.php","line":1088,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1089],"get_var":[1092]},"used_by":[]},"get_linkcatname":{"doc":"\/**\n * Gets the name of category by id.\n *\n * @since 0.71\n * @deprecated 2.1\n * @deprecated Use get_category()\n * @see get_category()\n *\n * @param int $id The category to get. If no category supplied uses 0\n * @return string\n *\/","file":"deprecated.php","line":1129,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1130],"wp_get_link_cats":[1137],"is_array":[1139],"get_category":[1144]},"used_by":[]},"comments_rss_link":{"doc":"\/**\n * Print RSS comment feed link.\n *\n * @since 1.0.1\n * @deprecated 2.5\n * @deprecated Use post_comments_feed_link()\n * @see post_comments_feed_link()\n *\n * @param string $link_text\n *\/","file":"deprecated.php","line":1158,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1159],"post_comments_feed_link":[1160]},"used_by":[]},"post_comments_feed_link":{"doc":"\/**\n * Display the comment feed link for a post.\n *\n * Prints out the comment feed link for a post. Link text is placed in the\n * anchor. If no link text is specified, default text is used. If no post ID is\n * specified, the current post is used.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.5.0\n *\n * @param string $link_text Descriptive text.\n * @param int $post_id Optional post ID. Default to current post.\n * @param string $feed Optional. Feed format.\n * @return string Link to the comment feed for the current post.\n*\/","file":"link-template.php","line":511,"missingDoc":false,"filters":["'post_comments_feed_link_html'"],"uses":{"esc_url":[512],"get_post_comments_feed_link":[512],"__":[514]},"used_by":{"comments_rss_link":[1160]}},"get_category_rss_link":{"doc":"\/**\n * Print\/Return link to category RSS2 feed.\n *\n * @since 1.2\n * @deprecated 2.5\n * @deprecated Use get_category_feed_link()\n * @see get_category_feed_link()\n *\n * @param bool $echo\n * @param int $cat_ID\n * @return string|null\n *\/","file":"deprecated.php","line":1175,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1176],"get_category_feed_link":[1178]},"used_by":[]},"get_author_rss_link":{"doc":"\/**\n * Print\/Return link to author RSS feed.\n *\n * @since 1.2\n * @deprecated 2.5\n * @deprecated Use get_author_feed_link()\n * @see get_author_feed_link()\n *\n * @param bool $echo\n * @param int $author_id\n * @return string|null\n *\/","file":"deprecated.php","line":1197,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1198],"get_author_feed_link":[1200]},"used_by":[]},"comments_rss":{"doc":"\/**\n * Return link to the post RSS feed.\n *\n * @since 1.5\n * @deprecated 2.2\n * @deprecated Use get_post_comments_feed_link()\n * @see get_post_comments_feed_link()\n *\n * @return string\n *\/","file":"deprecated.php","line":1216,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1217],"esc_url":[1218],"get_post_comments_feed_link":[1218]},"used_by":[]},"create_user":{"doc":"\/**\n * An alias of wp_create_user().\n *\n * @since 2.0\n * @deprecated 2.0\n * @deprecated Use wp_create_user()\n * @see wp_create_user()\n *\n * @param string $username The user's username.\n * @param string $password The user's password.\n * @param string $email The user's email (optional).\n * @return int The new user's ID.\n *\/","file":"deprecated.php","line":1234,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1235],"wp_create_user":[1236]},"used_by":[]},"wp_create_user":{"doc":"\/**\n * A simpler way of inserting an user into the database.\n *\n * Creates a new user with just the username, password, and email. For more\n * complex user creation use wp_insert_user() to specify more information.\n *\n * @since 2.0.0\n * @see wp_insert_user() More complete way to create a new user\n *\n * @param string $username The user's username.\n * @param string $password The user's password.\n * @param string $email The user's email (optional).\n * @return int The new user's ID.\n *\/","file":"user.php","line":1506,"missingDoc":false,"filters":[],"uses":{"esc_sql":[1507,1508],"compact":[1511],"wp_insert_user":[1512]},"used_by":{"create_user":[1236],"wpmu_create_user":[915]}},"gzip_compression":{"doc":"\/**\n * Unused function.\n *\n * @deprecated 2.5\n*\/","file":"deprecated.php","line":1244,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1245]},"used_by":[]},"get_commentdata":{"doc":"\/**\n * Retrieve an array of comment data about comment $comment_ID.\n *\n * @since 0.71\n * @deprecated 2.7\n * @deprecated Use get_comment()\n * @see get_comment()\n *\n * @param int $comment_ID The ID of the comment\n * @param int $no_cache Whether to use the cache (cast to bool)\n * @param bool $include_unapproved Whether to include unapproved comments\n * @return array The comment data\n *\/","file":"deprecated.php","line":1262,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1263],"get_comment":[1264]},"used_by":[]},"get_catname":{"doc":"\/**\n * Retrieve the category name by the category ID.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use get_cat_name()\n * @see get_cat_name()\n *\n * @param int $cat_ID Category ID\n * @return string category name\n *\/","file":"deprecated.php","line":1278,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1279],"get_cat_name":[1280]},"used_by":[]},"get_category_children":{"doc":"\/**\n * Retrieve category children list separated before and after the term IDs.\n *\n * @since 1.2.0\n * @deprecated 2.8\n * @deprecated Use get_term_children()\n * @see get_term_children()\n *\n * @param int $id Category ID to retrieve children.\n * @param string $before Optional. Prepend before category term ID.\n * @param string $after Optional, default is empty string. Append after category term ID.\n * @param array $visited Optional. Category Term IDs that have already been added.\n * @return string\n *\/","file":"deprecated.php","line":1297,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1298],"get_all_category_ids":[1304],"get_category":[1309],"is_wp_error":[1310],"get_category_children":[1315],"in_array":[1312]},"used_by":{"get_category_children":[1315]}},"get_the_author_description":{"doc":"\/**\n * Retrieve the description of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('description')\n * @see get_the_author_meta()\n *\n * @return string The author's description.\n *\/","file":"deprecated.php","line":1331,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1332],"get_the_author_meta":[1333]},"used_by":[]},"the_author_description":{"doc":"\/**\n * Display the description of the author of the current post.\n *\n * @since 1.0.0\n * @deprecated 2.8\n * @deprecated Use the_author_meta('description')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1344,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1345],"the_author_meta":[1346]},"used_by":[]},"get_the_author_login":{"doc":"\/**\n * Retrieve the login name of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('login')\n * @see get_the_author_meta()\n *\n * @return string The author's login name (username).\n *\/","file":"deprecated.php","line":1359,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1360],"get_the_author_meta":[1361]},"used_by":[]},"the_author_login":{"doc":"\/**\n * Display the login name of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('login')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1372,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1373],"the_author_meta":[1374]},"used_by":[]},"get_the_author_firstname":{"doc":"\/**\n * Retrieve the first name of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('first_name')\n * @see get_the_author_meta()\n *\n * @return string The author's first name.\n *\/","file":"deprecated.php","line":1387,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1388],"get_the_author_meta":[1389]},"used_by":[]},"the_author_firstname":{"doc":"\/**\n * Display the first name of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('first_name')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1400,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1401],"the_author_meta":[1402]},"used_by":[]},"get_the_author_lastname":{"doc":"\/**\n * Retrieve the last name of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('last_name')\n * @see get_the_author_meta()\n *\n * @return string The author's last name.\n *\/","file":"deprecated.php","line":1415,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1416],"get_the_author_meta":[1417]},"used_by":[]},"the_author_lastname":{"doc":"\/**\n * Display the last name of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('last_name')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1428,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1429],"the_author_meta":[1430]},"used_by":[]},"get_the_author_nickname":{"doc":"\/**\n * Retrieve the nickname of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('nickname')\n * @see get_the_author_meta()\n *\n * @return string The author's nickname.\n *\/","file":"deprecated.php","line":1443,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1444],"get_the_author_meta":[1445]},"used_by":[]},"the_author_nickname":{"doc":"\/**\n * Display the nickname of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('nickname')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1456,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1457],"the_author_meta":[1458]},"used_by":[]},"get_the_author_email":{"doc":"\/**\n * Retrieve the email of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('email')\n * @see get_the_author_meta()\n *\n * @return string The author's username.\n *\/","file":"deprecated.php","line":1471,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1472],"get_the_author_meta":[1473]},"used_by":[]},"the_author_email":{"doc":"\/**\n * Display the email of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('email')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1484,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1485],"the_author_meta":[1486]},"used_by":[]},"get_the_author_icq":{"doc":"\/**\n * Retrieve the ICQ number of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('icq')\n * @see get_the_author_meta()\n *\n * @return string The author's ICQ number.\n *\/","file":"deprecated.php","line":1499,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1500],"get_the_author_meta":[1501]},"used_by":[]},"the_author_icq":{"doc":"\/**\n * Display the ICQ number of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('icq')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1512,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1513],"the_author_meta":[1514]},"used_by":[]},"get_the_author_yim":{"doc":"\/**\n * Retrieve the Yahoo! IM name of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('yim')\n * @see get_the_author_meta()\n *\n * @return string The author's Yahoo! IM name.\n *\/","file":"deprecated.php","line":1527,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1528],"get_the_author_meta":[1529]},"used_by":[]},"the_author_yim":{"doc":"\/**\n * Display the Yahoo! IM name of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('yim')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1540,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1541],"the_author_meta":[1542]},"used_by":[]},"get_the_author_msn":{"doc":"\/**\n * Retrieve the MSN address of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('msn')\n * @see get_the_author_meta()\n *\n * @return string The author's MSN address.\n *\/","file":"deprecated.php","line":1555,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1556],"get_the_author_meta":[1557]},"used_by":[]},"the_author_msn":{"doc":"\/**\n * Display the MSN address of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('msn')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1568,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1569],"the_author_meta":[1570]},"used_by":[]},"get_the_author_aim":{"doc":"\/**\n * Retrieve the AIM address of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('aim')\n * @see get_the_author_meta()\n *\n * @return string The author's AIM address.\n *\/","file":"deprecated.php","line":1583,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1584],"get_the_author_meta":[1585]},"used_by":[]},"the_author_aim":{"doc":"\/**\n * Display the AIM address of the author of the current post.\n *\n * @since 0.71\n * @see the_author_meta()\n * @deprecated 2.8\n * @deprecated Use the_author_meta('aim')\n *\/","file":"deprecated.php","line":1596,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1597],"the_author_meta":[1598]},"used_by":[]},"get_author_name":{"doc":"\/**\n * Retrieve the specified author's preferred display name.\n *\n * @since 1.0.0\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('display_name')\n * @see get_the_author_meta()\n *\n * @param int $auth_id The ID of the author.\n * @return string The author's display name.\n *\/","file":"deprecated.php","line":1612,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1613],"get_the_author_meta":[1614]},"used_by":[]},"get_the_author_url":{"doc":"\/**\n * Retrieve the URL to the home page of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('url')\n * @see get_the_author_meta()\n *\n * @return string The URL to the author's page.\n *\/","file":"deprecated.php","line":1627,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1628],"get_the_author_meta":[1629]},"used_by":[]},"the_author_url":{"doc":"\/**\n * Display the URL to the home page of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('url')\n * @see the_author_meta()\n *\/","file":"deprecated.php","line":1640,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1641],"the_author_meta":[1642]},"used_by":[]},"get_the_author_ID":{"doc":"\/**\n * Retrieve the ID of the author of the current post.\n *\n * @since 1.5\n * @deprecated 2.8\n * @deprecated Use get_the_author_meta('ID')\n * @see get_the_author_meta()\n *\n * @return int The author's ID.\n *\/","file":"deprecated.php","line":1655,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1656],"get_the_author_meta":[1657]},"used_by":[]},"the_author_ID":{"doc":"\/**\n * Display the ID of the author of the current post.\n *\n * @since 0.71\n * @deprecated 2.8\n * @deprecated Use the_author_meta('ID')\n * @see the_author_meta()\n*\/","file":"deprecated.php","line":1668,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1669],"the_author_meta":[1670]},"used_by":[]},"the_content_rss":{"doc":"\/**\n * Display the post content for the feed.\n *\n * For encoding the html or the $encode_html parameter, there are three possible\n * values. '0' will make urls footnotes and use make_url_footnote(). '1' will\n * encode special characters and automatically display all of the content. The\n * value of '2' will strip all HTML tags from the content.\n *\n * Also note that you cannot set the amount of words and not set the html\n * encoding. If that is the case, then the html encoding will default to 2,\n * which will strip all HTML tags.\n *\n * To restrict the amount of words of the content, you can use the cut\n * parameter. If the content is less than the amount, then there won't be any\n * dots added to the end. If there is content left over, then dots will be added\n * and the rest of the content will be removed.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 0.71\n * @uses apply_filters() Calls 'the_content_rss' on the content before processing.\n * @see get_the_content() For the $more_link_text, $stripteaser, and $more_file\n *\t\tparameters.\n *\n * @deprecated 2.9.0\n * @deprecated Use the_content_feed()\n * @see the_content_feed()\n *\n * @param string $more_link_text Optional. Text to display when more content is available but not displayed.\n * @param int|bool $stripteaser Optional. Default is 0.\n * @param string $more_file Optional.\n * @param int $cut Optional. Amount of words to keep for the content.\n * @param int $encode_html Optional. How to encode the content.\n *\/","file":"deprecated.php","line":1707,"missingDoc":false,"filters":["'the_content_rss'"],"uses":{"_deprecated_function":[1708],"get_the_content":[1709],"esc_html":[1714],"make_url_footnote":[1717],"strip_tags":[1719],"explode":[1722],"count":[1727,1723],"str_replace":[1737]},"used_by":[]},"get_the_content":{"doc":"\/**\n * Retrieve the post content.\n *\n * @since 0.71\n *\n * @param string $more_link_text Optional. Content for when there is more text.\n * @param bool $stripteaser Optional. Strip teaser content before the more text. Default is false.\n * @return string\n *\/","file":"post-template.php","line":180,"missingDoc":false,"filters":["'the_content_more_link'"],"uses":{"get_post":[183],"__":[186],"get_the_password_form":[193],"post_password_required":[192],"count":[196,195,214],"explode":[200],"strip_tags":[202],"wp_kses_no_null":[202],"trim":[202],"preg_match":[199],"strpos":[208],"get_permalink":[219],"force_balance_tags":[220],"preg_replace_callback":[225]},"used_by":{"the_content_rss":[1709],"get_the_content_feed":[149],"wp_trim_excerpt":[2148],"the_content":[165]}},"make_url_footnote":{"doc":"\/**\n * Strip HTML and put links at the bottom of stripped content.\n *\n * Searches for all of the links, strips them out of the content, and places\n * them at the bottom of the content with numbers.\n *\n * @since 0.71\n * @deprecated 2.9.0\n *\n * @param string $content Content to get links\n * @return string HTML stripped out of content with links at the bottom.\n *\/","file":"deprecated.php","line":1753,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1754],"preg_match_all":[1755],"count":[1757],"str_replace":[1762],"strtolower":[1763,1763],"substr":[1763,1763],"get_option":[1763],"strip_tags":[1766]},"used_by":{"the_content_rss":[1717]}},"_c":{"doc":"\/**\n * Retrieve translated string with vertical bar context\n *\n * Quite a few times, there will be collisions with similar translatable text\n * found in more than two places but with different translated context.\n *\n * In order to use the separate contexts, the _c() function is used and the\n * translatable string uses a pipe ('|') which has the context the string is in.\n *\n * When the translated string is returned, it is everything before the pipe, not\n * including the pipe character. If there is no pipe in the translated text then\n * everything is returned.\n *\n * @since 2.2.0\n * @deprecated 2.9.0\n * @deprecated Use _x()\n * @see _x()\n *\n * @param string $text Text to translate\n * @param string $domain Optional. Domain to retrieve the translated text\n * @return string Translated context string without pipe\n *\/","file":"deprecated.php","line":1793,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1794],"before_last_bar":[1795],"translate":[1795]},"used_by":[]},"before_last_bar":{"doc":"","file":"l10n.php","line":72,"missingDoc":true,"filters":[],"uses":{"strrpos":[73],"substr":[77]},"used_by":{"_c":[1795],"translate_with_context":[1814],"_nc":[1831],"translate_user_role":[531]}},"translate_with_context":{"doc":"\/**\n * Translates $text like translate(), but assumes that the text\n * contains a context after its last vertical bar.\n *\n * @since 2.5\n * @uses translate()\n * @deprecated 3.0.0\n * @deprecated Use _x()\n * @see _x()\n *\n * @param string $text Text to translate\n * @param string $domain Domain to retrieve the translated text\n * @return string Translated text\n *\/","file":"deprecated.php","line":1812,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1813],"before_last_bar":[1814],"translate":[1814]},"used_by":[]},"_nc":{"doc":"\/**\n * A version of _n(), which supports contexts.\n * Strips everything from the translation after the last bar.\n *\n * @since 2.7.0\n * @deprecated 3.0.0\n * @deprecated Use _nx()\n * @see _nx()\n * @see _n() For parameters.\n * @see _c() For parameters. _c() is deprecated.\n *\n *\/","file":"deprecated.php","line":1829,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1830],"before_last_bar":[1831],"_n":[1831]},"used_by":[]},"__ngettext":{"doc":"\/**\n * Retrieve the plural or single form based on the amount.\n *\n * @since 1.2.0\n * @deprecated 2.8.0\n * @deprecated Use _n()\n * @see _n()\n *\/","file":"deprecated.php","line":1842,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1843],"func_get_args":[1844],"call_user_func_array":[1845]},"used_by":[]},"__ngettext_noop":{"doc":"\/**\n * Register plural strings in POT file, but don't translate them.\n *\n * @since 2.5\n * @deprecated 2.8.0\n * @deprecated Use _n_noop()\n * @see _n_noop()\n *\/","file":"deprecated.php","line":1856,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1857],"func_get_args":[1858],"call_user_func_array":[1859]},"used_by":[]},"get_alloptions":{"doc":"\/**\n * Retrieve all autoload options, or all options if no autoloaded ones exist.\n *\n * @since 1.0.0\n * @deprecated 3.0.0\n * @deprecated Use wp_load_alloptions())\n * @see wp_load_alloptions()\n *\n * @return array List of all options.\n *\/","file":"deprecated.php","line":1873,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1874],"wp_load_alloptions":[1875]},"used_by":[]},"wp_load_alloptions":{"doc":"\/**\n * Loads and caches all autoloaded options, if available or all options.\n *\n * @since 2.2.0\n * @package WordPress\n * @subpackage Option\n *\n * @return array List of all options.\n *\/","file":"option.php","line":135,"missingDoc":false,"filters":[],"uses":{"wp_cache_get":[139],"defined":[138,152],"is_multisite":[138,152],"suppress_errors":[144,147],"get_results":[146,145],"wp_cache_add":[153]},"used_by":{"get_alloptions":[1875],"_wp_specialchars":[393],"is_blog_installed":[1113],"get_option":[53],"update_option":[249],"add_option":[322],"delete_option":[373],"get_transient":[455]}},"get_the_attachment_link":{"doc":"\/**\n * Retrieve HTML content of attachment image with link.\n *\n * @since 2.0.0\n * @deprecated 2.5.0\n * @deprecated Use wp_get_attachment_link()\n * @see wp_get_attachment_link()\n *\n * @param int $id Optional. Post ID.\n * @param bool $fullsize Optional, default is false. Whether to use full size image.\n * @param array $max_dims Optional. Max image dimensions.\n * @param bool $permalink Optional, default is false. Whether to include permalink to image.\n * @return string\n *\/","file":"deprecated.php","line":1892,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1893],"get_post":[1895],"__":[1898],"wp_get_attachment_url":[1897],"get_attachment_link":[1901],"esc_attr":[1903],"get_attachment_innerHTML":[1905]},"used_by":[]},"get_attachment_innerHTML":{"doc":"\/**\n * Retrieve HTML content of image element.\n *\n * @since 2.0.0\n * @deprecated 2.5.0\n * @deprecated Use wp_get_attachment_image()\n * @see wp_get_attachment_image()\n *\n * @param int $id Optional. Post ID.\n * @param bool $fullsize Optional, default to false. Whether to have full size image.\n * @param array $max_dims Optional. Dimensions of image.\n * @return string\n *\/","file":"deprecated.php","line":2023,"missingDoc":false,"filters":["'attachment_innerHTML'"],"uses":{"_deprecated_function":[2024],"get_post":[2026],"get_attachment_icon":[2029],"esc_attr":[2032]},"used_by":{"get_the_attachment_link":[1905]}},"get_attachment_icon_src":{"doc":"\/**\n * Retrieve icon URL and Path.\n *\n * @since 2.1.0\n * @deprecated 2.5.0\n * @deprecated Use wp_get_attachment_image_src()\n * @see wp_get_attachment_image_src()\n *\n * @param int $id Optional. Post ID.\n * @param bool $fullsize Optional, default to false. Whether to have full image.\n * @return array Icon URL and full path to file, respectively.\n *\/","file":"deprecated.php","line":1921,"missingDoc":false,"filters":["'icon_dir'"],"uses":{"_deprecated_function":[1922],"get_post":[1924],"get_attached_file":[1927],"basename":[1932,1944],"wp_attachment_is_image":[1934],"wp_get_attachment_url":[1937],"wp_mime_type_icon":[1940],"get_template_directory":[1943],"wp_get_attachment_thumb_url":[1929]},"used_by":{"get_attachment_icon":[1972]}},"get_attached_file":{"doc":"\/**\n * Retrieve attached file path based on attachment ID.\n *\n * You can optionally send it through the 'get_attached_file' filter, but by\n * default it will just return the file path unfiltered.\n *\n * The function works by getting the single post meta name, named\n * '_wp_attached_file' and returning it. This is a convenience function to\n * prevent looking up the meta name and provide a mechanism for sending the\n * attached filename through a filter.\n *\n * @since 2.0.0\n * @uses apply_filters() Calls 'get_attached_file' on file path and attachment ID.\n *\n * @param int $attachment_id Attachment ID.\n * @param bool $unfiltered Whether to apply filters.\n * @return string|bool The file path to the attached file, or false if the attachment does not exist.\n *\/","file":"post.php","line":185,"missingDoc":false,"filters":["'get_attached_file'"],"uses":{"get_post_meta":[186],"strpos":[188],"preg_match":[188],"wp_upload_dir":[188]},"used_by":{"get_attachment_icon_src":[1927],"wp_load_image":[3222],"wp_delete_attachment":[4093],"wp_get_attachment_thumb_file":[4254],"wp_attachment_is_image":[4301]}},"wp_attachment_is_image":{"doc":"\/**\n * Check if the attachment is an image.\n *\n * @since 2.1.0\n *\n * @param int $post_id Attachment ID\n * @return bool\n *\/","file":"post.php","line":4296,"missingDoc":false,"filters":[],"uses":{"get_post":[4298],"get_attached_file":[4301],"preg_match":[4304],"strtolower":[4304],"substr":[4308],"in_array":[4308]},"used_by":{"get_attachment_icon_src":[1934],"image_downsize":[138]}},"wp_mime_type_icon":{"doc":"\/**\n * Retrieve the icon for a MIME type.\n *\n * @since 2.1.0\n *\n * @param string|int $mime MIME type or attachment ID.\n * @return string|bool\n *\/","file":"post.php","line":4321,"missingDoc":false,"filters":["'icon_dir'","'icon_dir_uri'","'icon_dirs'","'wp_mime_type_icon'"],"uses":{"wp_cache_get":[4323,4346],"is_numeric":[4322,4328,4391],"preg_replace":[4332,4377],"wp_ext2type":[4335],"get_post":[4330],"includes_url":[4350],"array_keys":[4354,4385],"array_shift":[4355,4356],"readdir":[4358],"basename":[4359,4377],"substr":[4360,4362,4380,4381],"is_dir":[4363],"in_array":[4362],"strtolower":[4362],"closedir":[4369],"opendir":[4357],"wp_cache_add":[4372,4392],"is_array":[4348],"strpos":[4380,4381],"str_replace":[4382],"wp_match_mime_types":[4385]},"used_by":{"get_attachment_icon_src":[1940],"wp_get_attachment_image_src":[516],"wp_prepare_attachment_for_js":[1345]}},"wp_get_attachment_thumb_url":{"doc":"\/**\n * Retrieve URL for an attachment thumbnail.\n *\n * @since 2.1.0\n *\n * @param int $post_id Attachment ID\n * @return string|bool False on failure. Thumbnail URL on success.\n *\/","file":"post.php","line":4269,"missingDoc":false,"filters":["'wp_get_attachment_thumb_url'"],"uses":{"get_post":[4271],"wp_get_attachment_url":[4273],"image_downsize":[4276],"wp_get_attachment_thumb_file":[4280],"str_replace":[4283],"basename":[4283,4283]},"used_by":{"get_attachment_icon_src":[1929]}},"get_attachment_icon":{"doc":"\/**\n * Retrieve HTML content of icon attachment image element.\n *\n * @since 2.0.0\n * @deprecated 2.5.0\n * @deprecated Use wp_get_attachment_image()\n * @see wp_get_attachment_image()\n *\n * @param int $id Optional. Post ID.\n * @param bool $fullsize Optional, default to false. Whether to have full size image.\n * @param array $max_dims Optional. Dimensions of image.\n * @return string HTML content.\n *\/","file":"deprecated.php","line":1966,"missingDoc":false,"filters":["'attachment_max_dims'","'attachment_icon'"],"uses":{"_deprecated_function":[1967],"get_post":[1969],"get_attachment_icon_src":[1972],"getimagesize":[1980],"file_exists":[1978],"esc_attr":[2003]},"used_by":{"get_attachment_innerHTML":[2029]}},"sanitize_url":{"doc":"\/**\n * Performs esc_url() for database or redirect usage.\n *\n * @since 2.3.1\n * @deprecated 2.8.0\n * @deprecated Use esc_url_raw()\n * @see esc_url_raw()\n *\n * @param string $url The URL to be cleaned.\n * @param array $protocols An array of acceptable protocols.\n * @return string The cleaned URL.\n *\/","file":"deprecated.php","line":2066,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2067],"esc_url_raw":[2068]},"used_by":[]},"clean_url":{"doc":"\/**\n * Checks and cleans a URL.\n *\n * A number of characters are removed from the URL. If the URL is for displaying\n * (the default behaviour) ampersands are also replaced. The 'clean_url' filter\n * is applied to the returned cleaned URL.\n *\n * @since 1.2.0\n * @deprecated 3.0.0\n * @deprecated Use esc_url()\n * @see Alias for esc_url()\n *\n * @param string $url The URL to be cleaned.\n * @param array $protocols Optional. An array of acceptable protocols.\n * @param string $context Optional. How the URL will be used. Default is 'display'.\n * @return string The cleaned $url after the 'clean_url' filter is applied.\n *\/","file":"deprecated.php","line":2088,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2090,2092],"esc_url":[2093]},"used_by":[]},"js_escape":{"doc":"\/**\n * Escape single quotes, specialchar double quotes, and fix line endings.\n *\n * The filter 'js_escape' is also applied by esc_js()\n *\n * @since 2.0.4\n * @deprecated 2.8.0\n * @deprecated Use esc_js()\n * @see esc_js()\n *\n * @param string $text The text to be escaped.\n * @return string Escaped text.\n *\/","file":"deprecated.php","line":2109,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2110],"esc_js":[2111]},"used_by":[]},"wp_specialchars":{"doc":"\/**\n * Escaping for HTML blocks.\n *\n * @deprecated 2.8.0\n * @deprecated Use esc_html()\n * @see esc_html()\n *\/","file":"deprecated.php","line":2121,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2122],"func_get_args":[2124],"call_user_func_array":[2125],"esc_html":[2127],"func_num_args":[2123]},"used_by":[]},"attribute_escape":{"doc":"\/**\n * Escaping for HTML attributes.\n *\n * @since 2.0.6\n * @deprecated 2.8.0\n * @deprecated Use esc_attr()\n * @see esc_attr()\n *\n * @param string $text\n * @return string\n *\/","file":"deprecated.php","line":2142,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2143],"esc_attr":[2144]},"used_by":[]},"register_sidebar_widget":{"doc":"\/**\n * Register widget for sidebar with backwards compatibility.\n *\n * Allows $name to be an array that accepts either three elements to grab the\n * first element and the third for the name or just uses the first element of\n * the array for the name.\n *\n * Passes to {@link wp_register_sidebar_widget()} after argument list and\n * backwards compatibility is complete.\n *\n * @since 2.2.0\n * @deprecated 2.8.0\n * @deprecated Use wp_register_sidebar_widget()\n * @see wp_register_sidebar_widget()\n *\n * @param string|int $name Widget ID.\n * @param callback $output_callback Run when widget is called.\n * @param string $classname Classname widget option.\n * @param mixed $params,... Widget parameters.\n *\/","file":"deprecated.php","line":2167,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2168],"sprintf":[2172],"count":[2171],"is_array":[2170],"sanitize_title":[2177],"is_string":[2179],"array_slice":[2181],"func_get_args":[2181],"array_merge":[2184],"call_user_func_array":[2186]},"used_by":[]},"unregister_sidebar_widget":{"doc":"\/**\n * Alias of {@link wp_unregister_sidebar_widget()}.\n *\n * @since 2.2.0\n * @deprecated 2.8.0\n * @deprecated Use wp_unregister_sidebar_widget()\n * @see wp_unregister_sidebar_widget()\n *\n * @param int|string $id Widget ID.\n *\/","file":"deprecated.php","line":2199,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2200],"wp_unregister_sidebar_widget":[2201]},"used_by":[]},"wp_unregister_sidebar_widget":{"doc":"\/**\n * Remove widget from sidebar.\n *\n * @since 2.2.0\n *\n * @param int|string $id Widget ID.\n *\/","file":"widgets.php","line":702,"missingDoc":false,"filters":["'wp_unregister_sidebar_widget'"],"uses":{"wp_register_sidebar_widget":[705],"wp_unregister_widget_control":[706]},"used_by":{"unregister_sidebar_widget":[2201]}},"register_widget_control":{"doc":"\/**\n * Registers widget control callback for customizing options.\n *\n * Allows $name to be an array that accepts either three elements to grab the\n * first element and the third for the name or just uses the first element of\n * the array for the name.\n *\n * Passes to {@link wp_register_widget_control()} after the argument list has\n * been compiled.\n *\n * @since 2.2.0\n * @deprecated 2.8.0\n * @deprecated Use wp_register_widget_control()\n * @see wp_register_widget_control()\n *\n * @param int|string $name Sidebar ID.\n * @param callback $control_callback Widget control callback to display and process form.\n * @param int $width Widget width.\n * @param int $height Widget height.\n *\/","file":"deprecated.php","line":2224,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2225],"sprintf":[2229],"count":[2228],"is_array":[2227],"sanitize_title":[2234],"array_slice":[2240],"func_get_args":[2240],"array_merge":[2243],"call_user_func_array":[2245]},"used_by":[]},"unregister_widget_control":{"doc":"\/**\n * Alias of {@link wp_unregister_widget_control()}.\n *\n * @since 2.2.0\n * @deprecated 2.8.0\n * @deprecated Use wp_unregister_widget_control()\n * @see wp_unregister_widget_control()\n *\n * @param int|string $id Widget ID.\n *\/","file":"deprecated.php","line":2258,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2259],"wp_unregister_widget_control":[2260]},"used_by":[]},"wp_unregister_widget_control":{"doc":"\/**\n * Remove control callback for widget.\n *\n * @since 2.2.0\n * @uses wp_register_widget_control() Unregisters by using empty callback.\n *\n * @param int|string $id Widget ID.\n *\/","file":"widgets.php","line":829,"missingDoc":false,"filters":[],"uses":{"wp_register_widget_control":[830]},"used_by":{"unregister_widget_control":[2260],"wp_unregister_sidebar_widget":[706]}},"delete_usermeta":{"doc":"\/**\n * Remove user meta data.\n *\n * @since 2.0.0\n * @deprecated 3.0.0\n * @deprecated Use delete_user_meta()\n * @see delete_user_meta()\n *\n * @param int $user_id User ID.\n * @param string $meta_key Metadata key.\n * @param mixed $meta_value Metadata value.\n * @return bool True deletion completed and false if user_id is not a number.\n *\/","file":"deprecated.php","line":2276,"missingDoc":false,"filters":["'delete_usermeta'","'deleted_usermeta'"],"uses":{"_deprecated_function":[2277],"is_numeric":[2279],"preg_replace":[2281],"serialize":[2284],"is_array":[2283],"is_object":[2283],"trim":[2285],"get_row":[2287],"prepare":[2287,2293,2295],"query":[2293,2295],"clean_user_cache":[2297],"wp_cache_delete":[2298]},"used_by":{"update_usermeta":[2390]}},"clean_user_cache":{"doc":"\/**\n * Clean all user caches\n *\n * @since 3.0.0\n *\n * @param WP_User|int $user User object or ID to be cleaned from the cache\n *\/","file":"user.php","line":1176,"missingDoc":false,"filters":[],"uses":{"is_numeric":[1177],"exists":[1180],"wp_cache_delete":[1183,1184,1185,1186]},"used_by":{"delete_usermeta":[2297],"update_usermeta":[2405]}},"get_usermeta":{"doc":"\/**\n * Retrieve user metadata.\n *\n * If $user_id is not a number, then the function will fail over with a 'false'\n * boolean return value. Other returned values depend on whether there is only\n * one item to be returned, which be that single item type. If there is more\n * than one metadata value, then it will be list of metadata values.\n *\n * @since 2.0.0\n * @deprecated 3.0.0\n * @deprecated Use get_user_meta()\n * @see get_user_meta()\n *\n * @param int $user_id User ID\n * @param string $meta_key Optional. Metadata key.\n * @return mixed\n *\/","file":"deprecated.php","line":2323,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2324],"preg_replace":[2332],"wp_cache_get":[2333],"get_col":[2338,2340],"prepare":[2338,2340],"array_map":[2350],"count":[2352]},"used_by":[]},"update_usermeta":{"doc":"\/**\n * Update metadata of user.\n *\n * There is no need to serialize values, they will be serialized if it is\n * needed. The metadata key can only be a string with underscores. All else will\n * be removed.\n *\n * Will remove the metadata, if the meta value is empty.\n *\n * @since 2.0.0\n * @deprecated 3.0.0\n * @deprecated Use update_user_meta()\n * @see update_user_meta()\n *\n * @param int $user_id User ID\n * @param string $meta_key Metadata key.\n * @param mixed $meta_value Metadata value.\n * @return bool True on successful update, false on failure.\n *\/","file":"deprecated.php","line":2377,"missingDoc":false,"filters":["'update_usermeta'","'added_usermeta'","'updated_usermeta'"],"uses":{"_deprecated_function":[2378],"is_numeric":[2380],"preg_replace":[2382],"stripslashes":[2386],"is_string":[2385],"maybe_serialize":[2387],"delete_usermeta":[2390],"get_row":[2393],"prepare":[2393],"insert":[2399],"compact":[2399,2401,2401],"update":[2401],"clean_user_cache":[2405],"wp_cache_delete":[2406]},"used_by":[]},"maybe_serialize":{"doc":"\/**\n * Serialize data, if needed.\n *\n * @since 2.0.5\n *\n * @param mixed $data Data that might be serialized.\n * @return mixed A scalar data\n *\/","file":"functions.php","line":314,"missingDoc":false,"filters":[],"uses":{"serialize":[316,321],"is_array":[315],"is_object":[315],"is_serialized":[320]},"used_by":{"update_usermeta":[2387],"add_metadata":[60],"update_metadata":[139,145],"delete_metadata":[207],"update_metadata_by_mid":[420],"update_option":[245],"add_option":[317],"add_site_option":[827],"update_site_option":[918]}},"get_users_of_blog":{"doc":"\/**\n * Get users for the blog.\n *\n * For setups that use the multi-blog feature. Can be used outside of the\n * multi-blog feature.\n *\n * @since 2.2.0\n * @deprecated 3.1.0\n * @uses $wpdb WordPress database object for queries\n * @uses $blog_id The Blog id of the blog for those that use more than one blog\n *\n * @param int $id Blog ID.\n * @return array List of users that are part of that Blog ID\n *\/","file":"deprecated.php","line":2430,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2431],"get_blog_prefix":[2436],"get_results":[2437]},"used_by":[]},"automatic_feed_links":{"doc":"\/**\n * Enable\/disable automatic general feed link outputting.\n *\n * @since 2.8.0\n * @deprecated 3.0.0\n * @deprecated Use add_theme_support( 'automatic-feed-links' )\n *\n * @param boolean $add Optional, default is true. Add or remove links. Defaults to true.\n *\/","file":"deprecated.php","line":2450,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2451],"add_theme_support":[2454],"remove_action":[2456]},"used_by":[]},"add_theme_support":{"doc":"\/**\n * Allows a theme to register its support of a certain feature\n *\n * Must be called in the theme's functions.php file to work.\n * If attached to a hook, it must be after_setup_theme.\n * The init hook may be too late for some features.\n *\n * @since 2.9.0\n * @param string $feature the feature being added\n *\/","file":"theme.php","line":1251,"missingDoc":false,"filters":[],"uses":{"array_slice":[1257],"func_get_args":[1257],"func_num_args":[1254],"array_intersect":[1262],"array_keys":[1262],"get_post_format_slugs":[1262],"is_array":[1261,1270,1347],"add_theme_support":[1266],"wp_parse_args":[1294,1299,1363,1366],"define":[1310,1315,1320,1325,1330,1371,1376],"defined":[1307,1312,1317,1322,1327,1368,1373]},"used_by":{"automatic_feed_links":[2454],"add_custom_image_header":[3033],"add_custom_background":[3072],"register_nav_menus":[76],"add_editor_style":[1209],"add_theme_support":[1266],"_custom_header_background_just_in_time":[1395,1409],"_remove_theme_support":[1483],"register_sidebar":[572]}},"get_profile":{"doc":"\/**\n * Retrieve user data based on field.\n *\n * @since 1.5.0\n * @deprecated 3.0.0\n * @deprecated Use get_the_author_meta()\n * @see get_the_author_meta()\n *\/","file":"deprecated.php","line":2467,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2468],"get_user_by":[2470],"get_the_author_meta":[2473]},"used_by":[]},"get_user_by":{"doc":"\/**\n * Retrieve user info by a given field\n *\n * @since 2.8.0\n *\n * @param string $field The field to retrieve the user with. id | slug | email | login\n * @param int|string $value A value for $field. A user ID, slug, email address, or login name.\n * @return bool|object False on failure, WP_User object on success\n *\/","file":"pluggable.php","line":135,"missingDoc":false,"filters":[],"uses":{"init":[142]},"used_by":{"get_profile":[2470],"is_site_admin":[51],"get_user_details":[106],"get_user_id_from_string":[1338,1344],"get_userdatabylogin":[52],"get_user_by_email":[69],"wp_setcookie":[91],"get_userdata":[121],"wp_validate_auth_cookie":[540],"get_pages":[3710],"WP_Query::get_posts":[2323],"wp_authenticate_username_password":[87],"username_exists":[1198],"email_exists":[1215]}},"get_usernumposts":{"doc":"\/**\n * Number of posts user has written.\n *\n * @since 0.71\n * @deprecated 3.0.0\n * @deprecated Use count_user_posts()\n * @see count_user_posts()\n *\/","file":"deprecated.php","line":2484,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2485],"count_user_posts":[2486]},"used_by":[]},"funky_javascript_callback":{"doc":"\/**\n * Callback used to change %uXXXX to &#YYY; syntax\n *\n * @since 2.8.0\n * @access private\n * @deprecated 3.0.0\n *\n * @param array $matches Single Match\n * @return string An HTML entity\n *\/","file":"deprecated.php","line":2499,"missingDoc":false,"filters":[],"uses":{"base_convert":[2500]},"used_by":[]},"funky_javascript_fix":{"doc":"\/**\n * Fixes javascript bugs in browsers.\n *\n * Converts unicode characters to HTML numbered entities.\n *\n * @since 1.5.0\n * @uses $is_macIE\n * @uses $is_winIE\n * @deprecated 3.0.0\n *\n * @param string $text Text to be made safe.\n * @return string Fixed text.\n *\/","file":"deprecated.php","line":2516,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2517],"preg_replace_callback":[2522]},"used_by":[]},"is_taxonomy":{"doc":"\/**\n * Checks that the taxonomy name exists.\n *\n * @since 2.3.0\n * @deprecated 3.0.0\n * @deprecated Use taxonomy_exists()\n * @see taxonomy_exists()\n *\n * @param string $taxonomy Name of taxonomy object\n * @return bool Whether the taxonomy exists.\n *\/","file":"deprecated.php","line":2540,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2541],"taxonomy_exists":[2542]},"used_by":[]},"is_term":{"doc":"\/**\n * Check if Term exists.\n *\n * @since 2.3.0\n * @deprecated 3.0.0\n * @deprecated Use term_exists()\n * @see term_exists()\n *\n * @param int|string $term The term to check\n * @param string $taxonomy The taxonomy name to use\n * @param int $parent ID of parent term under which to confine the exists search.\n * @return mixed Get the term id or Term Object, if exists.\n *\/","file":"deprecated.php","line":2558,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2559],"term_exists":[2560]},"used_by":[]},"term_exists":{"doc":"\/**\n * Check if Term exists.\n *\n * Formerly is_term(), introduced in 2.3.0.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 3.0.0\n *\n * @uses $wpdb\n *\n * @param int|string $term The term to check\n * @param string $taxonomy The taxonomy name to use\n * @param int $parent ID of parent term under which to confine the exists search.\n * @return mixed Returns 0 if the term does not exist. Returns the term ID if no taxonomy is specified\n * \tand the term ID exists. Returns an array of the term ID and the taxonomy if the pairing exists.\n *\/","file":"taxonomy.php","line":1481,"missingDoc":false,"filters":[],"uses":{"get_row":[1492,1518,1521],"prepare":[1492,1494,1518,1521,1524,1527],"get_var":[1494,1524,1527],"is_int":[1487],"trim":[1497],"stripslashes":[1497],"sanitize_title":[1499]},"used_by":{"is_term":[2560],"wp_delete_term":[1768,1788],"wp_insert_term":[2106,2089,2086],"wp_set_object_terms":[2194],"wp_unique_term_slug":[2274,2286]}},"is_plugin_page":{"doc":"\/**\n * Is the current admin page generated by a plugin?\n *\n * @since 1.5.0\n * @deprecated 3.1.0\n * @deprecated Use global $plugin_page and\/or get_plugin_page_hookname() hooks.\n *\n * @global $plugin_page\n *\n * @return bool\n *\/","file":"deprecated.php","line":2574,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2575]},"used_by":[]},"update_category_cache":{"doc":"\/**\n * Update the categories cache.\n *\n * This function does not appear to be used anymore or does not appear to be\n * needed. It might be a legacy function left over from when there was a need\n * for updating the category cache.\n *\n * @since 1.5.0\n * @deprecated 3.1.0\n *\n * @return bool Always return True\n *\/","file":"deprecated.php","line":2597,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2598]},"used_by":[]},"wp_timezone_supported":{"doc":"\/**\n * Check for PHP timezone support\n *\n * @since 2.9.0\n * @deprecated 3.2.0\n *\n * @return bool\n *\/","file":"deprecated.php","line":2611,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2612]},"used_by":[]},"the_editor":{"doc":"\/**\n * Display editor: TinyMCE, HTML, or both.\n *\n * @since 2.1.0\n * @deprecated 3.3.0\n * @deprecated Use wp_editor()\n * @see wp_editor()\n *\n * @param string $content Textarea content.\n * @param string $id Optional, default is 'content'. HTML ID attribute value.\n * @param string $prev_id Optional, not used\n * @param bool $media_buttons Optional, default is true. Whether to display media buttons.\n * @param int $tab_index Optional, not used\n *\/","file":"deprecated.php","line":2631,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2632],"wp_editor":[2634]},"used_by":[]},"wp_editor":{"doc":"\/**\n * Renders an editor.\n *\n * Using this function is the proper way to output all needed components for both TinyMCE and Quicktags.\n * _WP_Editors should not be used directly. See http:\/\/core.trac.wordpress.org\/ticket\/17144.\n *\n * NOTE: Once initialized the TinyMCE editor cannot be safely moved in the DOM. For that reason\n * running wp_editor() inside of a metabox is not a good idea unless only Quicktags is used.\n * On the post edit screen several actions can be used to include additional editors\n * containing TinyMCE: 'edit_page_form', 'edit_form_advanced' and 'dbx_post_sidebar'.\n * See http:\/\/core.trac.wordpress.org\/ticket\/19173 for more information.\n *\n * @see wp-includes\/class-wp-editor.php\n * @since 3.3.0\n *\n * @param string $content Initial content for the editor.\n * @param string $editor_id HTML ID attribute value for the textarea and TinyMCE. Can only be \/[a-z]+\/.\n * @param array $settings See _WP_Editors::editor().\n *\/","file":"general-template.php","line":1807,"missingDoc":false,"filters":[],"uses":{"class_exists":[1808]},"used_by":{"the_editor":[2634]}},"get_user_metavalues":{"doc":"\/**\n * Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users\n *\n * @since 3.0.0\n * @deprecated 3.3.0\n *\n * @param array $ids User ID numbers list.\n * @return array of arrays. The array is indexed by user_id, containing $metavalues object arrays.\n *\/","file":"deprecated.php","line":2647,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2648],"array_map":[2652],"update_meta_cache":[2656]},"used_by":[]},"update_meta_cache":{"doc":"\/**\n * Update the metadata cache for the specified objects.\n *\n * @since 2.9.0\n * @uses $wpdb WordPress database object for queries.\n *\n * @param string $meta_type Type of object metadata is for (e.g., comment, post, or user)\n * @param int|array $object_ids array or comma delimited list of object IDs to update cache for\n * @return mixed Metadata cache for the specified objects, or false on failure.\n *\/","file":"meta.php","line":524,"missingDoc":false,"filters":[],"uses":{"_get_meta_table":[528],"esc_sql":[531],"preg_replace":[536],"explode":[537],"is_array":[535,568,570],"array_map":[540],"wp_cache_get":[546],"join":[557],"get_results":[558],"prepare":[558],"intval":[563],"wp_cache_add":[581]},"used_by":{"get_user_metavalues":[2656],"get_metadata":[285],"metadata_exists":[329],"cache_users":[173],"update_postmeta_cache":[4736]}},"sanitize_user_object":{"doc":"\/**\n * Sanitize every user field.\n *\n * If the context is 'raw', then the user object or array will get minimal santization of the int fields.\n *\n * @since 2.3.0\n * @deprecated 3.3.0\n *\n * @param object|array $user The User Object or Array\n * @param string $context Optional, default is 'display'. How to sanitize user fields.\n * @return object|array The now sanitized User Object or Array (will be the same type as $user)\n *\/","file":"deprecated.php","line":2681,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2682],"get_object_vars":[2688],"sanitize_user_field":[2691,2699],"is_string":[2690],"is_numeric":[2690],"array_keys":[2689,2698],"is_a":[2687],"is_object":[2684]},"used_by":[]},"get_boundary_post_rel_link":{"doc":"\/**\n * Get boundary post relational link.\n *\n * Can either be start or end post relational link.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\n * @param string $title Optional. Link title format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param string $excluded_categories Optional. Excluded categories IDs.\n * @param bool $start Optional, default is true. Whether to display link to first or last post.\n * @return string\n *\/","file":"deprecated.php","line":2720,"missingDoc":false,"filters":["'the_title'","\"{$boundary}_post_rel_link\""],"uses":{"_deprecated_function":[2721],"get_boundary_post":[2723],"__":[2732,2732],"mysql2date":[2734],"get_option":[2734],"str_replace":[2736,2737],"esc_attr":[2741],"get_permalink":[2742]},"used_by":{"start_post_rel_link":[2761]}},"get_boundary_post":{"doc":"\/**\n * Retrieve boundary post.\n *\n * Boundary being either the first or last post by publish date within the constraints specified\n * by $in_same_cat or $excluded_categories.\n *\n * @since 2.8.0\n *\n * @param bool $in_same_cat Optional. Whether returned post should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n * @param bool $start Optional. Whether to retrieve first or last post.\n * @return object\n *\/","file":"link-template.php","line":1305,"missingDoc":false,"filters":[],"uses":{"get_post":[1306],"is_single":[1307],"is_attachment":[1307],"explode":[1312],"is_array":[1311],"wp_get_object_terms":[1316],"array_map":[1319],"array_diff":[1320],"implode":[1329],"array_merge":[1329],"get_posts":[1333]},"used_by":{"get_boundary_post_rel_link":[2723]}},"start_post_rel_link":{"doc":"\/**\n * Display relational link for the first post.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\n * @param string $title Optional. Link title format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param string $excluded_categories Optional. Excluded categories IDs.\n *\/","file":"deprecated.php","line":2758,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2759],"get_boundary_post_rel_link":[2761]},"used_by":[]},"get_index_rel_link":{"doc":"\/**\n * Get site index relational link.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\n * @return string\n *\/","file":"deprecated.php","line":2772,"missingDoc":false,"filters":["'index_rel_link'"],"uses":{"_deprecated_function":[2773],"esc_attr":[2775],"get_bloginfo":[2775,2775],"esc_url":[2775],"user_trailingslashit":[2775]},"used_by":{"index_rel_link":[2788]}},"index_rel_link":{"doc":"\/**\n * Display relational link for the site index.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\/","file":"deprecated.php","line":2785,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2786],"get_index_rel_link":[2788]},"used_by":[]},"get_parent_post_rel_link":{"doc":"\/**\n * Get parent post relational link.\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\n * @param string $title Optional. Link title format.\n * @return string\n *\/","file":"deprecated.php","line":2800,"missingDoc":false,"filters":["'the_title'","'parent_post_rel_link'"],"uses":{"_deprecated_function":[2801],"get_post":[2804],"mysql2date":[2809],"get_option":[2809],"str_replace":[2811,2812],"esc_attr":[2816],"get_permalink":[2817]},"used_by":{"parent_post_rel_link":[2831]}},"parent_post_rel_link":{"doc":"\/**\n * Display relational link for parent item\n *\n * @since 2.8.0\n * @deprecated 3.3.0\n *\/","file":"deprecated.php","line":2828,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2829],"get_parent_post_rel_link":[2831]},"used_by":[]},"wp_admin_bar_dashboard_view_site_menu":{"doc":"\/**\n * Add the \"Dashboard\"\/\"Visit Site\" menu.\n *\n * @since 3.2.0\n * @deprecated 3.3.0\n *\/","file":"deprecated.php","line":2840,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2841],"get_current_user_id":[2843],"add_menu":[2847,2849,2851],"__":[2847,2849,2851],"home_url":[2847],"is_multisite":[2848],"get_dashboard_url":[2849],"admin_url":[2851],"is_admin":[2846]},"used_by":[]},"get_dashboard_url":{"doc":"\/**\n * Get the URL to the user's dashboard.\n *\n * If a user does not belong to any site, the global user dashboard is used. If the user belongs to the current site,\n * the dashboard for the current site is returned. If the user cannot edit the current site, the dashboard to the user's\n * primary blog is returned.\n *\n * @since 3.1.0\n *\n * @param int $user_id User ID\n * @param string $path Optional path relative to the dashboard. Use only paths known to both blog and user admins.\n * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Dashboard url link with optional path appended.\n *\/","file":"link-template.php","line":2260,"missingDoc":false,"filters":["'user_dashboard_url'"],"uses":{"get_blogs_of_user":[2263],"user_admin_url":[2265,2277],"is_multisite":[2266],"admin_url":[2267,2271],"get_current_blog_id":[2269],"get_active_blog_for_user":[2273],"get_admin_url":[2275],"is_super_admin":[2270,2264],"in_array":[2270],"array_keys":[2270]},"used_by":{"wp_admin_bar_dashboard_view_site_menu":[2849],"get_edit_profile_url":[2301]}},"is_blog_user":{"doc":"\/**\n * Checks if the current user belong to a given blog.\n *\n * @since MU\n * @deprecated 3.3.0\n * @deprecated Use is_user_member_of_blog()\n * @see is_user_member_of_blog()\n *\n * @param int $blog_id Blog ID\n * @return bool True if the current users belong to $blog_id, false if not.\n *\/","file":"deprecated.php","line":2866,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2867],"is_user_member_of_blog":[2869],"get_current_user_id":[2869]},"used_by":[]},"debug_fopen":{"doc":"\/**\n * Open the file handle for debugging.\n *\n * @since 0.71\n * @deprecated Use error_log()\n * @link http:\/\/www.php.net\/manual\/en\/function.error-log.php\n * @deprecated 3.4.0\n *\/","file":"deprecated.php","line":2880,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2881]},"used_by":[]},"debug_fwrite":{"doc":"\/**\n * Write contents to the file used for debugging.\n *\n * @since 0.71\n * @deprecated Use error_log() instead.\n * @link http:\/\/www.php.net\/manual\/en\/function.error-log.php\n * @deprecated 3.4.0\n *\/","file":"deprecated.php","line":2893,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2894],"error_log":[2896]},"used_by":[]},"debug_fclose":{"doc":"\/**\n * Close the debugging file handle.\n *\n * @since 0.71\n * @deprecated Use error_log()\n * @link http:\/\/www.php.net\/manual\/en\/function.error-log.php\n * @deprecated 3.4.0\n *\/","file":"deprecated.php","line":2907,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2908]},"used_by":[]},"get_themes":{"doc":"\/**\n * Retrieve list of themes with theme data in theme directory.\n *\n * The theme is broken, if it doesn't have a parent theme and is missing either\n * style.css and, or index.php. If the theme has a parent theme then it is\n * broken, if it is missing style.css; index.php is optional.\n *\n * @since 1.5.0\n * @deprecated 3.4.0\n * @deprecated Use wp_get_themes()\n * @see wp_get_themes()\n *\n * @return array Theme list with theme data.\n *\/","file":"deprecated.php","line":2925,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2926],"wp_get_themes":[2932],"get":[2936],"get_stylesheet":[2938]},"used_by":{"get_theme":[2960]}},"get_theme":{"doc":"\/**\n * Retrieve theme data.\n *\n * @since 1.5.0\n * @deprecated 3.4.0\n * @deprecated Use wp_get_theme()\n * @see wp_get_theme()\n *\n * @param string $theme Theme name.\n * @return array|null Null, if theme name does not exist. Theme data, if exists.\n *\/","file":"deprecated.php","line":2957,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2958],"get_themes":[2960],"is_array":[2961],"array_key_exists":[2961]},"used_by":[]},"get_current_theme":{"doc":"\/**\n * Retrieve current theme name.\n *\n * @since 1.5.0\n * @deprecated 3.4.0\n * @deprecated Use (string) wp_get_theme()\n * @see wp_get_theme()\n *\n * @return string\n *\/","file":"deprecated.php","line":2976,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2977],"get_option":[2979],"get":[2982],"wp_get_theme":[2982]},"used_by":[]},"clean_pre":{"doc":"\/**\n * Accepts matches array from preg_replace_callback in wpautop() or a string.\n *\n * Ensures that the contents of a <<pre>>...<<\/pre>> HTML block are not\n * converted into paragraphs or line-breaks.\n *\n * @since 1.2.0\n * @deprecated 3.4.0\n *\n * @param array|string $matches The array or string\n * @return string The pre block without paragraph\/line-break conversion.\n *\/","file":"deprecated.php","line":2997,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[2998],"is_array":[3000],"str_replace":[3005,3006,3007]},"used_by":[]},"add_custom_image_header":{"doc":"\/**\n * Add callbacks for image header display.\n *\n * @since 2.1.0\n * @deprecated 3.4.0\n * @deprecated Use add_theme_support('custom-header', $args)\n * @see add_theme_support()\n *\n * @param callback $wp_head_callback Call on 'wp_head' action.\n * @param callback $admin_head_callback Call on custom header administration screen.\n * @param callback $admin_preview_callback Output a custom header image div on the custom header administration screen. Optional.\n *\/","file":"deprecated.php","line":3025,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3026],"add_theme_support":[3033]},"used_by":[]},"remove_custom_image_header":{"doc":"\/**\n * Remove image header support.\n *\n * @since 3.1.0\n * @deprecated 3.4.0\n * @deprecated Use remove_theme_support('custom-header')\n * @see remove_theme_support()\n *\n * @return bool Whether support was removed.\n *\/","file":"deprecated.php","line":3046,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3047],"remove_theme_support":[3048]},"used_by":[]},"remove_theme_support":{"doc":"\/**\n * Allows a theme to de-register its support of a certain feature\n *\n * Should be called in the theme's functions.php file. Generally would\n * be used for child themes to override support from the parent theme.\n *\n * @since 3.0.0\n * @see add_theme_support()\n * @param string $feature the feature being added\n * @return bool Whether feature was removed.\n *\/","file":"theme.php","line":1462,"missingDoc":false,"filters":[],"uses":{"in_array":[1464],"_remove_theme_support":[1467]},"used_by":{"remove_custom_image_header":[3048],"remove_custom_background":[3085]}},"add_custom_background":{"doc":"\/**\n * Add callbacks for background image display.\n *\n * @since 3.0.0\n * @deprecated 3.4.0\n * @deprecated Use add_theme_support('custom-background, $args)\n * @see add_theme_support()\n *\n * @param callback $wp_head_callback Call on 'wp_head' action.\n * @param callback $admin_head_callback Call on custom background administration screen.\n * @param callback $admin_preview_callback Output a custom background image div on the custom background administration screen. Optional.\n *\/","file":"deprecated.php","line":3063,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3064],"add_theme_support":[3072]},"used_by":[]},"remove_custom_background":{"doc":"\/**\n * Remove custom background support.\n *\n * @since 3.1.0\n * @see add_custom_background()\n *\n * @return bool Whether support was removed.\n *\/","file":"deprecated.php","line":3083,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3084],"remove_theme_support":[3085]},"used_by":[]},"get_theme_data":{"doc":"\/**\n * Retrieve theme data from parsed theme file.\n *\n * @since 1.5.0\n * @deprecated 3.4.0\n * @deprecated Use wp_get_theme()\n * @see wp_get_theme()\n *\n * @param string $theme_file Theme file path.\n * @return array Theme data.\n *\/","file":"deprecated.php","line":3099,"missingDoc":false,"filters":["'extra_theme_headers'"],"uses":{"_deprecated_function":[3100],"basename":[3101],"dirname":[3101,3101,3101],"get":[3104,3109,3110,3111,3112,3113,3114,3119],"display":[3105,3106,3107,3108]},"used_by":[]},"update_page_cache":{"doc":"\/**\n * Alias of update_post_cache().\n *\n * @see update_post_cache() Posts and pages are the same, alias is intentional\n *\n * @since 1.5.1\n * @deprecated 3.4.0\n *\n * @param array $pages list of page objects\n *\/","file":"deprecated.php","line":3135,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3136],"update_post_cache":[3138]},"used_by":[]},"update_post_cache":{"doc":"\/**\n * Updates posts in cache.\n *\n * @package WordPress\n * @subpackage Cache\n * @since 1.5.1\n *\n * @param array $posts Array of post objects\n *\/","file":"post.php","line":4615,"missingDoc":false,"filters":[],"uses":{"wp_cache_add":[4620]},"used_by":{"update_page_cache":[3138],"get_children":[316],"get_pages":[3811],"update_post_caches":[4690]}},"clean_page_cache":{"doc":"\/**\n * Will clean the page in the cache.\n *\n * Clean (read: delete) page from cache that matches $id. Will also clean cache\n * associated with 'all_page_ids' and 'get_pages'.\n *\n * @since 2.0.0\n * @deprecated 3.4.0\n *\n * @uses do_action() Will call the 'clean_page_cache' hook action.\n *\n * @param int $id Page ID to clean\n *\/","file":"deprecated.php","line":3154,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3155],"clean_post_cache":[3157]},"used_by":[]},"wp_explain_nonce":{"doc":"\/**\n * Retrieve nonce action \"Are you sure\" message.\n *\n * Deprecated in 3.4.1 and 3.5.0. Backported to 3.3.3.\n *\n * @since 2.0.4\n * @deprecated 3.4.1\n * @deprecated Use wp_nonce_ays()\n * @see wp_nonce_ays()\n *\n * @param string $action Nonce action.\n * @return string Are you sure message.\n *\/","file":"deprecated.php","line":3173,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3174],"__":[3175]},"used_by":[]},"sticky_class":{"doc":"\/**\n * Display \"sticky\" CSS class, if a post is sticky.\n *\n * @since 2.7.0\n * @deprecated 3.5.0\n * @deprecated Use post_class()\n * @see post_class()\n *\n * @param int $post_id An optional post ID.\n *\/","file":"deprecated.php","line":3188,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3189],"is_sticky":[3190]},"used_by":[]},"_get_post_ancestors":{"doc":"\/**\n * Retrieve post ancestors.\n *\n * This is no longer needed as WP_Post lazy-loads the ancestors\n * property with get_post_ancestors().\n *\n * @since 2.3.4\n * @deprecated 3.5.0\n * @see get_post_ancestors()\n *\/","file":"deprecated.php","line":3204,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3205]},"used_by":[]},"wp_load_image":{"doc":"\/**\n * Load an image from a string, if PHP supports it.\n *\n * @since 2.1.0\n * @deprecated 3.5.0\n * @see wp_get_image_editor()\n *\n * @param string $file Filename of the image to load.\n * @return resource The resulting image resource on success, Error string on failure.\n *\/","file":"deprecated.php","line":3218,"missingDoc":false,"filters":["'image_memory_limit'"],"uses":{"_deprecated_function":[3219],"get_attached_file":[3222],"is_numeric":[3221],"sprintf":[3225,3235],"__":[3225,3228,3235],"is_file":[3224],"function_exists":[3227],"ini_set":[3231],"imagecreatefromstring":[3232],"file_get_contents":[3232],"is_resource":[3234]},"used_by":[]},"image_resize":{"doc":"\/**\n * Scale down an image to fit a particular size and save a new copy of the image.\n *\n * The PNG transparency will be preserved using the function, as well as the\n * image type. If the file going in is PNG, then the resized image is going to\n * be PNG. The only supported image types are PNG, GIF, and JPEG.\n *\n * Some functionality requires API to exist, so some PHP version may lose out\n * support. This is not the fault of WordPress (where functionality is\n * downgraded, not actual defects), but of your PHP version.\n *\n * @since 2.5.0\n * @deprecated 3.5.0\n * @see wp_get_image_editor()\n *\n * @param string $file Image file path.\n * @param int $max_w Maximum width to resize to.\n * @param int $max_h Maximum height to resize to.\n * @param bool $crop Optional. Whether to crop image or resize.\n * @param string $suffix Optional. File suffix.\n * @param string $dest_path Optional. New image file path.\n * @param int $jpeg_quality Optional, default is 90. Image quality percentage.\n * @return mixed WP_Error on failure. String with new destination path.\n *\/","file":"deprecated.php","line":3264,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3265],"wp_get_image_editor":[3267],"is_wp_error":[3268,3273,3279],"set_quality":[3270],"resize":[3272],"generate_filename":[3276],"save":[3277]},"used_by":[]},"wp_get_image_editor":{"doc":"\/**\n * Returns a WP_Image_Editor instance and loads file into it.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $path Path to file to load\n * @param array $args Additional data. Accepts { 'mime_type'=>string, 'methods'=>{string, string, ...} }\n * @return WP_Image_Editor|WP_Error\n *\/","file":"media.php","line":1163,"missingDoc":false,"filters":[],"uses":{"wp_check_filetype":[1167],"_wp_image_editor_choose":[1175],"load":[1179],"is_wp_error":[1181],"__":[1187]},"used_by":{"image_resize":[3267],"image_make_intermediate_size":[391]}},"wp_get_single_post":{"doc":"\/**\n * Retrieve a single post, based on post ID.\n *\n * Has categories in 'post_category' property or key. Has tags in 'tags_input'\n * property or key.\n *\n * @since 1.0.0\n * @deprecated 3.5.0\n * @see get_post()\n *\n * @param int $postid Post ID.\n * @param string $mode How to return result, either OBJECT, ARRAY_N, or ARRAY_A.\n * @return object|array Post object or array holding post contents and information\n *\/","file":"deprecated.php","line":3299,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3300],"get_post":[3301]},"used_by":[]},"user_pass_ok":{"doc":"\/**\n * Check that the user login name and password is correct.\n *\n * @since 0.71\n * @deprecated 3.5.0\n * @deprecated Use wp_authenticate()\n * @see wp_authenticate()\n *\n * @param string $user_login User name.\n * @param string $user_pass User password.\n * @return bool False if does not authenticate, true if username and password authenticates.\n *\/","file":"deprecated.php","line":3316,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3317],"wp_authenticate":[3318],"is_wp_error":[3319]},"used_by":[]},"_save_post_hook":{"doc":"\/**\n * Callback formerly fired on the save_post hook. No longer needed.\n *\n * @since 2.3.0\n * @deprecated 3.5.0\n *\/","file":"deprecated.php","line":3331,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"gd_edit_image_support":{"doc":"\/**\n * Check if the installed version of GD supports particular image type\n *\n * @since 2.9.0\n * @deprecated 3.5.0\n * @see wp_image_editor_supports()\n *\n * @param string $mime_type\n * @return bool\n *\/","file":"deprecated.php","line":3343,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[3344],"imagetypes":[3349,3351,3353],"function_exists":[3358,3360,3362,3346]},"used_by":[]},"feed_content_type":{"doc":"\/**\n * Return the content type for specified feed type.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.8.0\n *\/","file":"feed.php","line":501,"missingDoc":false,"filters":["'feed_content_type'"],"uses":{"get_default_feed":[503]},"used_by":{"__main":[8,8,8,8,8,8],"feed_links":[1609,1610],"feed_links_extra":[1672]}},"bloginfo_rss":{"doc":"\/**\n * Display RSS container for the bloginfo function.\n *\n * You can retrieve anything that you can using the get_bloginfo() function.\n * Everything will be stripped of tags and characters converted, when the values\n * are retrieved for use in the feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 0.71\n * @uses apply_filters() Calls 'bloginfo_rss' hook with two parameters.\n * @see get_bloginfo() For the list of possible values to display.\n *\n * @param string $show See get_bloginfo() for possible values.\n *\/","file":"feed.php","line":48,"missingDoc":false,"filters":["'bloginfo_rss'"],"uses":{"get_bloginfo_rss":[49]},"used_by":{"__main":[13,25,30,34,38,38,39,40,57,75,80,15,16,19,20,24,24,39,50,21,22,23,24,14,15,16,19,29,30,24,26,27,29]}},"ent2ncr":{"doc":"\/**\n * Converts named entities into numbered entities.\n *\n * @since 1.5.1\n *\n * @param string $text The text within which entities will be converted.\n * @return string Text with converted entities.\n *\/","file":"formatting.php","line":2209,"missingDoc":false,"filters":["'pre_ent2ncr'"],"uses":{"str_replace":[2476],"array_keys":[2476],"array_values":[2476]},"used_by":{"__main":[19,21,23,52,54,22,24,26,44,46,54]}},"get_the_title_rss":{"doc":"\/**\n * Retrieve the current post title for the feed.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.0.0\n * @uses apply_filters() Calls 'the_title_rss' on the post title.\n *\n * @return string Current post title.\n *\/","file":"feed.php","line":115,"missingDoc":false,"filters":["'the_title_rss'"],"uses":{"get_the_title":[116]},"used_by":{"__main":[19,22],"the_title_rss":[130]}},"get_bloginfo_rss":{"doc":"\/**\n * RSS container for the bloginfo function.\n *\n * You can retrieve anything that you can using the get_bloginfo() function.\n * Everything will be stripped of tags and characters converted, when the values\n * are retrieved for use in the feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 1.5.1\n * @uses apply_filters() Calls 'get_bloginfo_rss' hook with two parameters.\n * @see get_bloginfo() For the list of possible values to display.\n *\n * @param string $show See get_bloginfo() for possible values.\n * @return string\n *\/","file":"feed.php","line":28,"missingDoc":false,"filters":["'get_bloginfo_rss'"],"uses":{"strip_tags":[29],"get_bloginfo":[29],"convert_chars":[30]},"used_by":{"__main":[21,23,24,26],"bloginfo_rss":[49],"get_the_generator":[2196,2199,2202,2208]}},"get_search_query":{"doc":"\/**\n * Retrieve the contents of the search WordPress query variable.\n *\n * The search query string is passed through {@link esc_attr()}\n * to ensure that it is safe for placing in an html attribute.\n *\n * @since 2.3.0\n * @uses esc_attr()\n *\n * @param bool $escaped Whether the result is escaped. Default true.\n * \tOnly use when you are later escaping it. Do not use unescaped.\n * @return string\n *\/","file":"general-template.php","line":1827,"missingDoc":false,"filters":["'get_search_query'"],"uses":{"get_query_var":[1828],"esc_attr":[1830]},"used_by":{"__main":[21,34,24,44],"get_search_form":[163],"feed_links_extra":[1664],"the_search_query":[1844],"get_search_link":[747]}},"get_wp_title_rss":{"doc":"\/**\n * Retrieve the blog title for the feed title.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.2.0\n * @uses apply_filters() Calls 'get_wp_title_rss' hook on title.\n * @uses wp_title() See function for $sep parameter usage.\n *\n * @param string $sep Optional.How to separate the title. See wp_title() for more info.\n * @return string Error message on failure or blog title on success.\n *\/","file":"feed.php","line":82,"missingDoc":false,"filters":["'get_wp_title_rss'"],"uses":{"wp_title":[83],"get_error_message":[85],"is_wp_error":[84]},"used_by":{"__main":[23,26],"wp_title_rss":[102]}},"comments_link_feed":{"doc":"\/**\n * Outputs the link to the comments for the current post in an xml safe way\n *\n * @since 3.0.0\n * @return none\n *\/","file":"feed.php","line":200,"missingDoc":false,"filters":[],"uses":{"esc_url":[201],"get_comments_link":[201]},"used_by":{"__main":[30,37]}},"get_search_comments_feed_link":{"doc":"\/**\n * Retrieve the permalink for the comments feed of the search results.\n *\n * @since 2.5.0\n *\n * @param string $search_query Optional. Search query.\n * @param string $feed Optional. Feed type.\n * @return string\n *\/","file":"link-template.php","line":804,"missingDoc":false,"filters":["'search_feed_link'"],"uses":{"get_default_feed":[808],"get_search_feed_link":[810],"get_search_permastruct":[812],"add_query_arg":[815,817]},"used_by":{"__main":[35,36]}},"have_comments":{"doc":"\/**\n * Whether there are comments to loop over.\n *\n * @see WP_Query::have_comments()\n * @since 2.2.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":801,"missingDoc":false,"filters":[],"uses":{"have_comments":[803]},"used_by":{"__main":[44,44,36,36,25],"have_comments":[803]}},"the_comment":{"doc":"\/**\n * Iterate comment index in the comment loop.\n *\n * @see WP_Query::the_comment()\n * @since 2.2.0\n * @uses $wp_query\n *\n * @return object\n *\/","file":"query.php","line":815,"missingDoc":false,"filters":[],"uses":{"the_comment":[817]},"used_by":{"__main":[44,36],"the_comment":[817]}},"get_comment_author_rss":{"doc":"\/**\n * Retrieve the current comment author for use in the feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.0.0\n * @uses apply_filters() Calls 'comment_author_rss' hook on comment author.\n * @uses get_comment_author()\n *\n * @return string Comment Author\n *\/","file":"feed.php","line":256,"missingDoc":false,"filters":["'comment_author_rss'"],"uses":{"get_comment_author":[257]},"used_by":{"__main":[52,54,44,46,50],"comment_author_rss":[268]}},"comment_link":{"doc":"\/**\n * Display the link to the comments.\n *\n * @since 1.5.0\n *\/","file":"feed.php","line":241,"missingDoc":false,"filters":[],"uses":{"esc_url":[242],"get_comment_link":[242]},"used_by":{"__main":[57,69,71,49]}},"comment_author_rss":{"doc":"\/**\n * Display the current comment author in the feed.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 1.0.0\n *\/","file":"feed.php","line":267,"missingDoc":false,"filters":[],"uses":{"get_comment_author_rss":[268]},"used_by":{"__main":[60]}},"comment_guid":{"doc":"\/**\n * Display the feed GUID for the current comment.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.5.0\n *\n * @param int|object $comment_id Optional comment object or id. Defaults to global comment object.\n *\/","file":"feed.php","line":213,"missingDoc":false,"filters":[],"uses":{"esc_url":[214],"get_comment_guid":[214]},"used_by":{"__main":[65,80,52]}},"get_the_password_form":{"doc":"\/**\n * Retrieve protected post password form content.\n *\n * @since 1.0.0\n * @uses apply_filters() Calls 'the_password_form' filter on output.\n *\n * @return string HTML content for password form for password protected post.\n *\/","file":"post-template.php","line":1222,"missingDoc":false,"filters":["'the_password_form'"],"uses":{"get_post":[1223],"rand":[1224],"esc_url":[1225],"site_url":[1225],"__":[1226,1227],"esc_attr__":[1227]},"used_by":{"__main":[69,55,48],"get_the_content":[193]}},"the_guid":{"doc":"\/**\n * Display the Post Global Unique Identifier (guid).\n *\n * The guid will appear to be a link, but should not be used as an link to the\n * post. The reason you should not use it as a link, is because of moving the\n * blog across domains.\n *\n * Url is escaped to make it xml safe\n *\n * @since 1.5.0\n *\n * @param int $id Optional. Post ID.\n *\/","file":"post-template.php","line":134,"missingDoc":false,"filters":[],"uses":{"esc_url":[135],"get_the_guid":[135]},"used_by":{"__main":[75,40,42]}},"wp_title_rss":{"doc":"\/**\n * Display the blog title for display of the feed title.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.2.0\n * @uses apply_filters() Calls 'wp_title_rss' on the blog title.\n * @see wp_title() $sep parameter usage.\n *\n * @param string $sep Optional.\n *\/","file":"feed.php","line":101,"missingDoc":false,"filters":["'wp_title_rss'"],"uses":{"get_wp_title_rss":[102]},"used_by":{"__main":[19,22,14,24]}},"self_link":{"doc":"\/**\n * Display the link for the currently displayed feed in a XSS safe way.\n *\n * Generate a correct link for the atom:self element.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.5\n *\/","file":"feed.php","line":489,"missingDoc":false,"filters":[],"uses":{"parse_url":[490],"home_url":[490],"esc_url":[491],"set_url_scheme":[491],"stripslashes":[491]},"used_by":{"__main":[26,28,25]}},"html_type_rss":{"doc":"\/**\n * Display the HTML type based on the blog setting.\n *\n * The two possible values are either 'xhtml' or 'html'.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.2.0\n *\/","file":"feed.php","line":358,"missingDoc":false,"filters":[],"uses":{"get_bloginfo":[359],"strpos":[360]},"used_by":{"__main":[38,44,46]}},"the_title_rss":{"doc":"\/**\n * Display the post title in the feed.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 0.71\n * @uses get_the_title_rss() Used to retrieve current post title.\n *\/","file":"feed.php","line":129,"missingDoc":false,"filters":[],"uses":{"get_the_title_rss":[130]},"used_by":{"__main":[38,40,24,35]}},"get_post_modified_time":{"doc":"\/**\n * Retrieve the time at which the post was last modified.\n *\n * @since 2.0.0\n *\n * @param string $d Optional, default is 'U'. Either 'G', 'U', or php date format.\n * @param bool $gmt Optional, default is false. Whether to return the gmt time.\n * @param int|object $post Optional, default is global post object. A post_id or post object\n * @param bool $translate Optional, default is false. Whether to translate the result\n * @return string Returns timestamp\n *\/","file":"general-template.php","line":1517,"missingDoc":false,"filters":["'get_post_modified_time'"],"uses":{"get_post":[1518],"mysql2date":[1524]},"used_by":{"__main":[41],"get_the_modified_date":[1420,1422],"get_the_modified_time":[1500,1502]}},"get_post_time":{"doc":"\/**\n * Retrieve the time at which the post was written.\n *\n * @since 2.0.0\n *\n * @param string $d Optional Either 'G', 'U', or php date format.\n * @param bool $gmt Optional, default is false. Whether to return the gmt time.\n * @param int|object $post Optional post ID or object. Default is global $post object.\n * @param bool $translate Whether to translate the time string\n * @return string\n *\/","file":"general-template.php","line":1467,"missingDoc":false,"filters":["'get_post_time'"],"uses":{"get_post":[1468],"mysql2date":[1475]},"used_by":{"__main":[42,38],"get_the_time":[1450,1452]}},"the_category_rss":{"doc":"\/**\n * Display the post categories in the feed.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 0.71\n * @see get_the_category_rss() For better explanation.\n *\n * @param string $type Optional, default is the type returned by get_default_feed().\n *\/","file":"feed.php","line":345,"missingDoc":false,"filters":[],"uses":{"get_the_category_rss":[346]},"used_by":{"__main":[43,44,40]}},"the_excerpt_rss":{"doc":"\/**\n * Display the post excerpt for the feed.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 0.71\n * @uses apply_filters() Calls 'the_excerpt_rss' hook on the excerpt.\n *\/","file":"feed.php","line":177,"missingDoc":false,"filters":["'the_excerpt_rss'"],"uses":{"get_the_excerpt":[178]},"used_by":{"__main":[44,46,48,25,44,46,51]}},"the_content_feed":{"doc":"\/**\n * Display the post content for feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.9.0\n * @uses apply_filters() Calls 'the_content_feed' on the content before processing.\n * @see get_the_content()\n *\n * @param string $feed_type The type of feed. rss2 | atom | rss | rdf\n *\/","file":"feed.php","line":165,"missingDoc":false,"filters":[],"uses":{"get_the_content_feed":[166]},"used_by":{"__main":[46,49]}},"atom_enclosure":{"doc":"\/**\n * Display the atom enclosure for the current post.\n *\n * Uses the global $post to check whether the post requires a password and if\n * the user has the password for the post. If not then it will return before\n * displaying.\n *\n * Also uses the function get_post_custom() to get the post's 'enclosure'\n * metadata field and parses the value to display the enclosure(s). The\n * enclosure(s) consist of link HTML tag(s) with a URI and other attributes.\n *\n * @package WordPress\n * @subpackage Template\n * @since 2.2.0\n * @uses apply_filters() Calls 'atom_enclosure' hook on atom enclosure.\n * @uses get_post_custom() To get the current post enclosure metadata.\n *\/","file":"feed.php","line":421,"missingDoc":false,"filters":["'atom_enclosure'"],"uses":{"post_password_required":[422],"explode":[428],"trim":[429,429,429],"htmlspecialchars":[429],"get_post_custom":[425]},"used_by":{"__main":[48]}},"rewind_posts":{"doc":"\/**\n * Rewind the loop posts.\n *\n * @see WP_Query::rewind_posts()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return null\n *\/","file":"query.php","line":769,"missingDoc":false,"filters":[],"uses":{"rewind_posts":[772]},"used_by":{"__main":[38],"rewind_posts":[772],"WP_Query::have_posts":[2874]}},"comment_text_rss":{"doc":"\/**\n * Display the current comment content for use in the feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 1.0.0\n * @uses apply_filters() Calls 'comment_text_rss' filter on comment content.\n * @uses get_comment_text()\n *\/","file":"feed.php","line":280,"missingDoc":false,"filters":["'comment_text_rss'"],"uses":{"get_comment_text":[281]},"used_by":{"__main":[57]}},"get_the_content_feed":{"doc":"\/**\n * Retrieve the post content for feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.9.0\n * @uses apply_filters() Calls 'the_content_feed' on the content before processing.\n * @see get_the_content()\n *\n * @param string $feed_type The type of feed. rss2 | atom | rss | rdf\n * @return string The filtered content.\n *\/","file":"feed.php","line":145,"missingDoc":false,"filters":["'the_content'","'the_content_feed'"],"uses":{"get_default_feed":[147],"get_the_content":[149],"str_replace":[150]},"used_by":{"__main":[47],"the_content_feed":[166]}},"rss_enclosure":{"doc":"\/**\n * Display the rss enclosure for the current post.\n *\n * Uses the global $post to check whether the post requires a password and if\n * the user has the password for the post. If not then it will return before\n * displaying.\n *\n * Also uses the function get_post_custom() to get the post's 'enclosure'\n * metadata field and parses the value to display the enclosure(s). The\n * enclosure(s) consist of enclosure HTML tag(s) with a URI and other\n * attributes.\n *\n * @package WordPress\n * @subpackage Template\n * @since 1.5.0\n * @uses apply_filters() Calls 'rss_enclosure' hook on rss enclosure.\n * @uses get_post_custom() To get the current post enclosure metadata.\n *\/","file":"feed.php","line":385,"missingDoc":false,"filters":["'rss_enclosure'"],"uses":{"post_password_required":[386],"explode":[392],"preg_split":[395],"trim":[395,398,398],"htmlspecialchars":[398],"get_post_custom":[389]},"used_by":{"__main":[56]}},"convert_chars":{"doc":"\/**\n * Converts a number of characters from a string.\n *\n * Metadata tags <<title>> and <<category>> are removed, <<br>> and <<hr>> are\n * converted into correct XHTML and Unicode characters are converted to the\n * valid range.\n *\n * @since 0.71\n *\n * @param string $content String of characters to be converted.\n * @param string $deprecated Not used.\n * @return string Converted string.\n *\/","file":"formatting.php","line":1079,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[1081],"preg_replace":[1120,1121,1124],"strtr":[1127],"str_replace":[1130,1131]},"used_by":{"get_bloginfo_rss":[30],"wp_richedit_pre":[2494]}},"wp_title":{"doc":"\/**\n * Display or retrieve page title for all areas of blog.\n *\n * By default, the page title will display the separator before the page title,\n * so that the blog title will be before the page title. This is not good for\n * title display, since the blog title shows up on most tabs and not what is\n * important, which is the page that the user is looking at.\n *\n * There are also SEO benefits to having the blog title after or to the 'right'\n * or the page title. However, it is mostly common sense to have the blog title\n * to the right with most browsers supporting tabs. You can achieve this by\n * using the seplocation parameter and setting the value to 'right'. This change\n * was introduced around 2.5.0, in case backwards compatibility of themes is\n * important.\n *\n * @since 1.0.0\n *\n * @param string $sep Optional, default is '&raquo;'. How to separate the various items within the page title.\n * @param bool $display Optional, default is true. Whether to display or retrieve title.\n * @param string $seplocation Optional. Direction to display title, 'right'.\n * @return string|null String on retrieve, null when displaying.\n *\/","file":"general-template.php","line":521,"missingDoc":false,"filters":["'wp_title'"],"uses":{"get_query_var":[524,525,526,527,528],"single_post_title":[535],"is_single":[534],"is_home":[534],"is_front_page":[534,534],"is_page":[534],"single_term_title":[540,547],"is_category":[539],"is_tag":[539],"get_queried_object":[545,552],"get_taxonomy":[546],"is_tax":[544],"is_author":[551],"post_type_archive_title":[558],"is_post_type_archive":[557],"substr":[562,563,564],"get_month":[563,572],"intval":[564],"is_archive":[561,569],"zeroise":[574],"sprintf":[580],"__":[580,585],"strip_tags":[580],"is_search":[578],"is_404":[584],"explode":[594,598],"array_reverse":[595],"implode":[596,599]},"used_by":{"get_wp_title_rss":[83],"__main":[18]}},"get_the_excerpt":{"doc":"\/**\n * Retrieve the post excerpt.\n *\n * @since 0.71\n *\n * @param mixed $deprecated Not used.\n * @return string\n *\/","file":"post-template.php","line":260,"missingDoc":false,"filters":["'get_the_excerpt'"],"uses":{"_deprecated_argument":[262],"get_post":[264],"__":[267],"post_password_required":[266]},"used_by":{"the_excerpt_rss":[178],"the_excerpt":[249]}},"get_comment_guid":{"doc":"\/**\n * Retrieve the feed GUID for the current comment.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.5.0\n *\n * @param int|object $comment_id Optional comment object or id. Defaults to global comment object.\n * @return bool|string false on failure or guid for comment on success.\n *\/","file":"feed.php","line":227,"missingDoc":false,"filters":[],"uses":{"get_comment":[228],"is_object":[230],"get_the_guid":[233]},"used_by":{"comment_guid":[214]}},"get_the_guid":{"doc":"\/**\n * Retrieve the Post Global Unique Identifier (guid).\n *\n * The guid will appear to be a link, but should not be used as an link to the\n * post. The reason you should not use it as a link, is because of moving the\n * blog across domains.\n *\n * @since 1.5.0\n *\n * @param int $id Optional. Post ID.\n * @return string\n *\/","file":"post-template.php","line":150,"missingDoc":false,"filters":["'get_the_guid'"],"uses":{"get_post":[151]},"used_by":{"get_comment_guid":[233],"the_guid":[135],"wp_get_attachment_url":[4229],"_transition_post_status":[4796]}},"get_the_category_rss":{"doc":"\/**\n * Retrieve all of the post categories, formatted for use in feeds.\n *\n * All of the categories for the current post in the feed loop, will be\n * retrieved and have feed markup added, so that they can easily be added to the\n * RSS2, Atom, or RSS1 and RSS0.91 RDF feeds.\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.1.0\n * @uses apply_filters()\n *\n * @param string $type Optional, default is the type returned by get_default_feed().\n * @return string All of the post categories for displaying in the feed.\n *\/","file":"feed.php","line":301,"missingDoc":false,"filters":["'get_bloginfo_rss'","'the_category_rss'"],"uses":{"get_default_feed":[303],"get_the_category":[304],"get_the_tags":[305],"sanitize_term_field":[314,318],"array_unique":[321],"sprintf":[327],"esc_attr":[327,327],"get_bloginfo":[327],"html_entity_decode":[329],"get_option":[329]},"used_by":{"the_category_rss":[346]}},"prep_atom_text_construct":{"doc":"\/**\n * Determine the type of a string of data with the data formatted.\n *\n * Tell whether the type is text, html, or xhtml, per RFC 4287 section 3.1.\n *\n * In the case of WordPress, text is defined as containing no markup,\n * xhtml is defined as \"well formed\", and html as tag soup (i.e., the rest).\n *\n * Container div tags are added to xhtml values, per section 3.1.1.3.\n *\n * @link http:\/\/www.atomenabled.org\/developers\/syndication\/atom-format-spec.php#rfc.section.3.1\n *\n * @package WordPress\n * @subpackage Feed\n * @since 2.5\n *\n * @param string $data Input string\n * @return array array(type, value)\n *\/","file":"feed.php","line":454,"missingDoc":false,"filters":[],"uses":{"strpos":[455,455,465,473],"xml_parser_create":[459],"xml_parse":[460],"xml_get_error_code":[461],"xml_parser_free":[462],"htmlspecialchars":[476]},"used_by":[]},"_wptexturize_pushpop_element":{"doc":"\/**\n * Search for disabled element tags. Push element to stack on tag open and pop\n * on tag close. Assumes first character of $text is tag opening.\n *\n * @access private\n * @since 2.9.0\n *\n * @param string $text Text to check. First character is assumed to be $opening\n * @param array $stack Array used as stack of opened tag elements\n * @param string $disabled_elements Tags to match against formatted as regexp sub-expression\n * @param string $opening Tag opening character, assumed to be 1 character long\n * @param string $closing Tag closing character\n *\/","file":"formatting.php","line":146,"missingDoc":false,"filters":[],"uses":{"array_push":[159,169],"preg_match":[150,164],"substr":[150,164],"preg_quote":[163],"array_pop":[165],"strncmp":[148]},"used_by":{"wptexturize":[119,121]}},"_autop_newline_preservation_helper":{"doc":"\/**\n * Newline preservation help function for wpautop\n *\n * @since 3.1.0\n * @access private\n * @param array $matches preg_replace_callback matches array\n * @return string\n *\/","file":"formatting.php","line":268,"missingDoc":false,"filters":[],"uses":{"str_replace":[269]},"used_by":[]},"shortcode_unautop":{"doc":"\/**\n * Don't auto-p wrap shortcodes that stand alone\n *\n * Ensures that shortcodes are not wrapped in <<p>>...<<\/p>>.\n *\n * @since 2.9.0\n *\n * @param string $pee The content.\n * @return string The filtered content.\n *\/","file":"formatting.php","line":282,"missingDoc":false,"filters":[],"uses":{"is_array":[285],"join":[289],"array_map":[289],"array_keys":[289],"preg_replace":[323]},"used_by":[]},"seems_utf8":{"doc":"\/**\n * Checks to see if a string is utf8 encoded.\n *\n * NOTE: This function checks for 5-Byte sequences, UTF8\n *       has Bytes Sequences with a maximum length of 4.\n *\n * @author bmorel at ssi dot fr (modified)\n * @since 1.2.1\n *\n * @param string $str The string to be checked\n * @return bool True if $str fits a UTF-8 model, false otherwise.\n *\/","file":"formatting.php","line":338,"missingDoc":false,"filters":[],"uses":{"strlen":[339],"ord":[341,350]},"used_by":{"remove_accents":[611],"sanitize_title_with_dashes":[976]}},"_wp_specialchars":{"doc":"\/**\n * Converts a number of special characters into their HTML entities.\n *\n * Specifically deals with: &, <, >, \", and '.\n *\n * $quote_style can be set to ENT_COMPAT to encode \" to\n * &quot;, or ENT_QUOTES to do both. Default is ENT_NOQUOTES where no quotes are encoded.\n *\n * @since 1.2.2\n *\n * @param string $string The text which is to be encoded.\n * @param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old values; converting single quotes if set to 'single', double if set to 'double' or both if otherwise set. Default is ENT_NOQUOTES.\n * @param string $charset Optional. The character encoding of the string. Default is false.\n * @param boolean $double_encode Optional. Whether to encode existing html entities. Default is false.\n * @return string The encoded text with HTML entities.\n *\/","file":"formatting.php","line":373,"missingDoc":false,"filters":[],"uses":{"strlen":[376],"preg_match":[380],"in_array":[386,399],"wp_load_alloptions":[393],"htmlspecialchars":[413,425],"wp_specialchars_decode":[416],"wp_kses_normalize_entities":[419],"preg_split":[422],"count":[424],"implode":[427],"str_replace":[432]},"used_by":{"esc_js":[2656],"esc_html":[2673],"esc_attr":[2687]}},"wp_kses_normalize_entities":{"doc":"\/**\n * Converts and fixes HTML entities.\n *\n * This function normalizes HTML entities. It will convert \"AT&T\" to the correct\n * \"AT&amp;T\", \"&#00058;\" to \"&#58;\", \"&#XYZZY;\" to \"&amp;#XYZZY;\" and so on.\n *\n * @since 1.0.0\n *\n * @param string $string Content to normalize entities\n * @return string Content with normalized entities\n *\/","file":"kses.php","line":1114,"missingDoc":false,"filters":[],"uses":{"str_replace":[1117],"preg_replace_callback":[1121,1122,1123]},"used_by":{"_wp_specialchars":[419],"esc_url":[2599],"wp_kses":[481]}},"wp_check_invalid_utf8":{"doc":"\/**\n * Checks for invalid UTF8 in a string.\n *\n * @since 2.8\n *\n * @param string $string The text which is to be checked.\n * @param boolean $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false.\n * @return string The checked text.\n *\/","file":"formatting.php","line":508,"missingDoc":false,"filters":[],"uses":{"strlen":[511],"in_array":[518],"get_option":[518],"preg_match":[527,535],"iconv":[541],"function_exists":[540]},"used_by":{"esc_js":[2655],"esc_html":[2672],"esc_attr":[2686],"sanitize_text_field":[3220]}},"utf8_uri_encode":{"doc":"\/**\n * Encode the Unicode values to be used in the URI.\n *\n * @since 1.5.0\n *\n * @param string $utf8_string\n * @param int $length Max length of the string\n * @return string String with Unicode encoded for URI.\n *\/","file":"formatting.php","line":556,"missingDoc":false,"filters":[],"uses":{"strlen":[562],"ord":[565],"chr":[570],"count":[573,579],"dechex":[581,581,581,584,584]},"used_by":{"sanitize_title_with_dashes":[980]}},"remove_accents":{"doc":"\/**\n * Converts all accent characters to ASCII characters.\n *\n * If there are no accent characters, then the string given is just returned.\n *\n * @since 1.2.1\n *\n * @param string $string Text that might have accent characters\n * @return string Filtered string with replaced \"nice\" characters.\n *\/","file":"formatting.php","line":607,"missingDoc":false,"filters":[],"uses":{"preg_match":[608],"chr":[614,614,614,614,615,615,615,615,616,616,616,616,617,617,617,617,618,618,618,618,619,619,619,619,620,620,620,620,621,621,621,621,622,622,622,622,623,623,623,623,624,624,624,624,625,625,625,625,626,626,626,626,627,627,627,627,628,628,628,628,629,629,629,629,630,630,630,630,631,631,631,631,632,632,632,632,633,633,633,633,634,634,634,634,635,635,635,635,636,636,636,636,637,637,637,637,638,638,638,638,639,639,639,639,640,640,640,640,641,641,641,641,642,642,642,642,643,643,643,643,644,644,644,644,645,645,645,645,647,647,647,647,648,648,648,648,649,649,649,649,650,650,650,650,651,651,651,651,652,652,652,652,653,653,653,653,654,654,654,654,655,655,655,655,656,656,656,656,657,657,657,657,658,658,658,658,659,659,659,659,660,660,660,660,661,661,661,661,662,662,662,662,663,663,663,663,664,664,664,664,665,665,665,665,666,666,666,666,667,667,667,667,668,668,668,668,669,669,669,669,670,670,670,670,671,671,671,671,672,672,672,672,673,673,673,673,674,674,674,674,675,675,675,675,676,676,676,676,677,677,677,677,678,678,678,678,679,679,679,679,680,680,680,680,681,681,681,681,682,682,682,682,683,683,683,683,684,684,684,684,685,685,685,685,686,686,686,686,687,687,687,687,688,688,688,688,689,689,689,689,690,690,690,690,691,691,691,691,692,692,692,692,693,693,693,693,694,694,694,694,695,695,695,695,696,696,696,696,697,697,697,697,698,698,698,698,699,699,699,699,700,700,700,700,701,701,701,701,702,702,702,702,703,703,703,703,704,704,704,704,705,705,705,705,706,706,706,706,707,707,707,707,708,708,708,708,709,709,709,709,710,710,710,710,712,712,712,712,713,713,713,713,715,715,715,717,717,720,720,720,720,721,721,721,721,723,723,723,723,723,723,724,724,724,724,724,724,725,725,725,725,725,725,726,726,726,726,726,726,727,727,727,727,727,727,728,728,728,728,728,728,729,729,729,729,729,729,731,731,731,731,731,731,732,732,732,732,732,732,733,733,733,733,733,733,734,734,734,734,734,734,735,735,735,735,735,735,736,736,736,736,736,736,737,737,737,737,737,737,738,738,738,738,738,738,739,739,739,739,739,739,740,740,740,740,740,740,741,741,741,741,741,741,742,742,742,742,742,742,744,744,744,744,744,744,745,745,745,745,745,745,746,746,746,746,746,746,747,747,747,747,747,747,748,748,748,748,748,748,749,749,749,749,749,749,750,750,750,750,750,750,751,751,751,751,751,751,753,753,753,753,753,753,754,754,754,754,754,754,755,755,755,755,755,755,756,756,756,756,756,756,757,757,757,757,757,757,758,758,758,758,758,758,760,760,760,760,760,760,761,761,761,761,761,761,762,762,762,762,762,762,763,763,763,763,763,763,764,764,764,764,764,764,765,765,765,765,765,765,766,766,766,766,766,766,767,767,767,767,767,767,768,768,768,768,768,768,769,769,769,769,769,769,770,770,770,770,770,770,771,771,771,771,771,771,773,773,775,775,775,775,777,777,777,777,779,779,779,779,780,780,780,780,781,781,781,781,782,782,782,782,783,783,783,783,785,785,785,785,791,791,791,791,791,791,792,792,792,792,792,792,792,793,793,793,793,793,793,793,794,794,794,794,794,794,794,795,795,795,795,795,795,795,796,796,796,796,796,796,796,797,797,797,797,797,797,797,798,798,798,798,798,798,798,799,799,799,799,799,799,799,800,800,800,805,805,805,805,805,805,805,805,805],"strtr":[788,804],"str_replace":[807],"seems_utf8":[611]},"used_by":{"sanitize_user":[889],"sanitize_title":[940]}},"get_allowed_mime_types":{"doc":"\/**\n * Retrieve list of allowed mime types and file extensions.\n *\n * @since 2.8.6\n *\n * @uses apply_filters() Calls 'upload_mimes' on returned array\n * @uses wp_get_upload_mime_types() to fetch the list of mime types\n *\n * @return array Array of mime types keyed by the file extension regex corresponding to those types.\n *\/","file":"functions.php","line":2002,"missingDoc":false,"filters":["'upload_mimes'"],"uses":{"wp_get_mime_types":[2003]},"used_by":{"sanitize_file_name":[845],"wp_check_filetype":[1810]}},"wp_strip_all_tags":{"doc":"\/**\n * Properly strip all HTML tags including script and style\n *\n * @since 2.9.0\n *\n * @param string $string String containing HTML tags\n * @param bool $remove_breaks optional Whether to remove left over line breaks and white space chars\n * @return string The processed string.\n *\/","file":"formatting.php","line":3195,"missingDoc":false,"filters":[],"uses":{"preg_replace":[3196,3200],"strip_tags":[3197],"trim":[3202]},"used_by":{"sanitize_user":[888],"wp_trim_words":[2179],"wp_html_excerpt":[3094],"sanitize_text_field":[3225]}},"sanitize_title_for_query":{"doc":"","file":"formatting.php","line":950,"missingDoc":true,"filters":[],"uses":{"sanitize_title":[951]},"used_by":{"WP_Query::get_posts":[2105,2133,2145,2322]}},"sanitize_title_with_dashes":{"doc":"\/**\n * Sanitizes title, replacing whitespace and a few other characters with dashes.\n *\n * Limits the output to alphanumeric characters, underscore (_) and dash (-).\n * Whitespace becomes a dash.\n *\n * @since 1.2.0\n *\n * @param string $title The title to be sanitized.\n * @param string $raw_title Optional. Not used.\n * @param string $context Optional. The operation for which the string is sanitized.\n * @return string The sanitized title.\n *\/","file":"formatting.php","line":967,"missingDoc":false,"filters":[],"uses":{"strip_tags":[968],"preg_replace":[970,974,984,1012,1013,1014],"str_replace":[972,985,989,992,1009],"mb_strtolower":[978],"function_exists":[977],"utf8_uri_encode":[980],"seems_utf8":[976],"strtolower":[983],"trim":[1015]},"used_by":{"register_post_type":[1289],"register_taxonomy":[341,347]}},"sanitize_sql_orderby":{"doc":"\/**\n * Ensures a string is a valid SQL order by clause.\n *\n * Accepts one or more columns, with or without ASC\/DESC, and also accepts\n * RAND().\n *\n * @since 2.5.1\n *\n * @param string $orderby Order by string to be checked.\n * @return string|bool Returns the order by clause if it is a match, false otherwise.\n *\/","file":"formatting.php","line":1031,"missingDoc":false,"filters":[],"uses":{"preg_match":[1032]},"used_by":{"gallery_shortcode":[691]}},"balanceTags":{"doc":"\/**\n * Will only balance the tags if forced to and the option is set to balance tags.\n *\n * The option 'use_balanceTags' is used to determine whether the tags will be balanced.\n *\n * @since 0.71\n *\n * @param string $text Text to be balanced\n * @param bool $force If true, forces balancing, ignoring the value of the option. Default false.\n * @return string Balanced text\n *\/","file":"formatting.php","line":1147,"missingDoc":false,"filters":[],"uses":{"get_option":[1148],"force_balance_tags":[1150]},"used_by":[]},"force_balance_tags":{"doc":"\/**\n * Balances tags of string using a modified stack.\n *\n * @since 2.0.4\n *\n * @author Leonard Lin <leonard@acm.org>\n * @license GPL\n * @copyright November 4, 2001\n * @version 1.1\n * @todo Make better - change loop condition to $text in 1.2\n * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004\n *\t\t1.1  Fixed handling of append\/stack pop order of end text\n *\t\t\t Added Cleaning Hooks\n *\t\t1.0  First Version\n *\n * @param string $text Text to be balanced.\n * @return string Balanced text.\n *\/","file":"formatting.php","line":1171,"missingDoc":false,"filters":[],"uses":{"str_replace":[1182,1278,1279],"preg_replace":[1184],"preg_match":[1186],"strpos":[1189],"strlen":[1190],"strtolower":[1196,1222],"substr":[1196,1231,1235,1263,1264],"array_pop":[1206,1213,1245,1274],"trim":[1235],"in_array":[1234,1238,1244],"array_push":[1248]},"used_by":{"balanceTags":[1150],"get_the_content":[220]}},"format_to_edit":{"doc":"\/**\n * Acts on text which is about to be edited.\n *\n * The $content is run through esc_textarea(), which uses htmlspecialchars()\n * to convert special characters to HTML entities. If $richedit is set to true,\n * it is simply a holder for the 'format_to_edit' filter.\n *\n * @since 0.71\n *\n * @param string $content The text about to be edited.\n * @param bool $richedit Whether the $content should not pass through htmlspecialchars(). Default false (meaning it will be passed).\n * @return string The text after the filter (and possibly htmlspecialchars()) has been run.\n *\/","file":"formatting.php","line":1297,"missingDoc":false,"filters":["'format_to_edit'"],"uses":{"esc_textarea":[1300]},"used_by":{"sanitize_post_field":[2025,2027]}},"format_to_post":{"doc":"\/**\n * Holder for the 'format_to_post' filter.\n *\n * @since 0.71\n *\n * @param string $content The text to pass through the filter.\n * @return string Text returned from the 'format_to_post' filter.\n *\/","file":"formatting.php","line":1312,"missingDoc":false,"filters":["'format_to_post'"],"uses":[],"used_by":[]},"zeroise":{"doc":"\/**\n * Add leading zeros when necessary.\n *\n * If you set the threshold to '4' and the number is '10', then you will get\n * back '0010'. If you set the threshold to '4' and the number is '5000', then you\n * will get back '5000'.\n *\n * Uses sprintf to append the amount of zeros based on the $threshold parameter\n * and the size of the number. If the number is large enough, then no zeros will\n * be appended.\n *\n * @since 0.71\n *\n * @param mixed $number Number to append zeros to if not greater than threshold.\n * @param int $threshold Digit places number needs to be to not have zeros added.\n * @return string Adds leading zeros to number if needed.\n *\/","file":"formatting.php","line":1334,"missingDoc":false,"filters":[],"uses":{"sprintf":[1335]},"used_by":{"antispambot":[1475],"wp_title":[574],"get_calendar":[1110,1122],"get_month_link":[369,372],"get_day_link":[398,399,402,402],"WP_Locale::get_month":[257]}},"backslashit":{"doc":"\/**\n * Adds backslashes before letters and before a number at the start of a string.\n *\n * @since 0.71\n *\n * @param string $string Value to which backslashes will be added.\n * @return string String with backslashes inserted.\n *\/","file":"formatting.php","line":1346,"missingDoc":false,"filters":[],"uses":{"preg_replace":[1347,1348]},"used_by":{"date_i18n":[112,113,114,115,116,117,132]}},"addslashes_gpc":{"doc":"\/**\n * Adds slashes to escape strings.\n *\n * Slashes will first be removed if magic_quotes_gpc is set, see {@link\n * http:\/\/www.php.net\/magic_quotes} for more details.\n *\n * @since 0.71\n *\n * @param string $gpc The string returned from HTTP request data.\n * @return string Returns a string escaped with slashes.\n *\/","file":"formatting.php","line":1397,"missingDoc":false,"filters":[],"uses":{"stripslashes":[1399],"get_magic_quotes_gpc":[1398],"esc_sql":[1401]},"used_by":{"WP_Query::parse_tax_query":[1736],"WP_Query::get_posts":[2293,2355]}},"urlencode_deep":{"doc":"\/**\n * Navigates through an array and encodes the values to be used in a URL.\n *\n *\n * @since 2.2.0\n *\n * @param array|string $value The array or string to be encoded.\n * @return array|string $value The encoded array (or string from the callback).\n *\/","file":"formatting.php","line":1439,"missingDoc":false,"filters":[],"uses":{"is_array":[1440],"array_map":[1440],"urlencode":[1440]},"used_by":{"add_query_arg":[686]}},"antispambot":{"doc":"\/**\n * Converts email addresses characters to HTML entities to block spam bots.\n *\n * @since 0.71\n *\n * @param string $emailaddy Email address.\n * @param int $mailto Optional. Range from 0 to 1. Used for encoding.\n * @return string Converted email address.\n *\/","file":"formatting.php","line":1465,"missingDoc":false,"filters":[],"uses":{"srand":[1467],"microtime":[1467],"strlen":[1468],"floor":[1469],"rand":[1469],"ord":[1471,1475],"substr":[1471,1473,1475],"zeroise":[1475],"dechex":[1475],"str_replace":[1478]},"used_by":[]},"_make_url_clickable_cb":{"doc":"\/**\n * Callback to convert URI match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link\n * make_clickable()}.\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URI address.\n *\/","file":"formatting.php","line":1494,"missingDoc":false,"filters":[],"uses":{"strpos":[1497],"substr_count":[1507,1507],"strrchr":[1508],"substr":[1509],"strrpos":[1509],"esc_url":[1512]},"used_by":[]},"_make_web_ftp_clickable_cb":{"doc":"\/**\n * Callback to convert URL match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link\n * make_clickable()}.\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with URL address.\n *\/","file":"formatting.php","line":1531,"missingDoc":false,"filters":[],"uses":{"esc_url":[1535],"substr":[1541,1542,1540],"strlen":[1542],"in_array":[1540]},"used_by":[]},"_make_email_clickable_cb":{"doc":"\/**\n * Callback to convert email address match to HTML A element.\n *\n * This function was backported from 2.5.0 to 2.3.2. Regex callback for {@link\n * make_clickable()}.\n *\n * @since 2.3.2\n * @access private\n *\n * @param array $matches Single Regex Match.\n * @return string HTML A element with email address.\n *\/","file":"formatting.php","line":1559,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"make_clickable":{"doc":"\/**\n * Convert plaintext URI to HTML links.\n *\n * Converts URI, www and ftp, and email addresses. Finishes by fixing links\n * within links.\n *\n * @since 0.71\n *\n * @param string $text Content to convert URIs.\n * @return string Content with converted URIs.\n *\/","file":"formatting.php","line":1575,"missingDoc":false,"filters":[],"uses":{"preg_split":[1577],"preg_match":[1579],"make_clickable":[1591],"strlen":[1588,1585],"_split_str_by_whitespace":[1587],"preg_replace_callback":[1612,1614,1615],"substr":[1617],"preg_replace":[1623]},"used_by":{"make_clickable":[1591]}},"_split_str_by_whitespace":{"doc":"\/**\n * Breaks a string into chunks by splitting at whitespace characters.\n * The length of each returned chunk is as close to the specified length goal as possible,\n * with the caveat that each chunk includes its trailing delimiter.\n * Chunks longer than the goal are guaranteed to not have any inner whitespace.\n *\n * Joining the returned chunks with empty delimiters reconstructs the input string losslessly.\n *\n * Input string must have no null characters (or eventual transformations on output chunks must not care about null characters)\n *\n * <code>\n * _split_str_by_whitespace( \"1234 67890 1234 67890a cd 1234   890 123456789 1234567890a    45678   1 3 5 7 90 \", 10 ) ==\n * array (\n *   0 => '1234 67890 ',  \/\/ 11 characters: Perfect split\n *   1 => '1234 ',        \/\/  5 characters: '1234 67890a' was too long\n *   2 => '67890a cd ',   \/\/ 10 characters: '67890a cd 1234' was too long\n *   3 => '1234   890 ',  \/\/ 11 characters: Perfect split\n *   4 => '123456789 ',   \/\/ 10 characters: '123456789 1234567890a' was too long\n *   5 => '1234567890a ', \/\/ 12 characters: Too long, but no inner whitespace on which to split\n *   6 => '   45678   ',  \/\/ 11 characters: Perfect split\n *   7 => '1 3 5 7 9',    \/\/  9 characters: End of $string\n * );\n * <\/code>\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $string The string to split.\n * @param int $goal The desired chunk length.\n * @return array Numeric array of chunks.\n *\/","file":"formatting.php","line":1658,"missingDoc":false,"filters":[],"uses":{"strtr":[1661],"strlen":[1663],"strrpos":[1664],"substr":[1664,1673,1674,1675],"strpos":[1667]},"used_by":{"make_clickable":[1587]}},"wp_rel_nofollow":{"doc":"\/**\n * Adds rel nofollow string to all HTML A elements in content.\n *\n * @since 1.5.0\n *\n * @param string $text Content that may contain HTML A elements.\n * @return string Converted content.\n *\/","file":"formatting.php","line":1693,"missingDoc":false,"filters":[],"uses":{"stripslashes":[1695],"preg_replace_callback":[1696],"esc_sql":[1697]},"used_by":[]},"wp_rel_nofollow_callback":{"doc":"\/**\n * Callback to used to add rel=nofollow string to HTML A element.\n *\n * Will remove already existing rel=\"nofollow\" and rel='nofollow' from the\n * string to prevent from invalidating (X)HTML.\n *\n * @since 2.3.0\n *\n * @param array $matches Single Match\n * @return string HTML A Element with rel nofollow.\n *\/","file":"formatting.php","line":1712,"missingDoc":false,"filters":[],"uses":{"str_replace":[1714]},"used_by":[]},"translate_smiley":{"doc":"\/**\n * Convert one smiley code to the icon graphic file equivalent.\n *\n * Looks up one smiley code in the $wpsmiliestrans global array and returns an\n * <img> string for that smiley.\n *\n * @global array $wpsmiliestrans\n * @since 2.8.0\n *\n * @param string $smiley Smiley code to convert to image.\n * @return string Image string for smiley.\n *\/","file":"formatting.php","line":1730,"missingDoc":false,"filters":["'smilies_src'"],"uses":{"count":[1733],"trim":[1737],"reset":[1737],"esc_attr":[1739],"includes_url":[1741],"site_url":[1741]},"used_by":[]},"convert_smilies":{"doc":"\/**\n * Convert text equivalent of smilies to images.\n *\n * Will only convert smilies if the option 'use_smilies' is true and the global\n * used in the function isn't empty.\n *\n * @since 0.71\n * @uses $wp_smiliessearch\n *\n * @param string $text Content to convert smilies from text.\n * @return string Converted content with text smilies replaced with images.\n *\/","file":"formatting.php","line":1758,"missingDoc":false,"filters":[],"uses":{"preg_split":[1763],"count":[1764],"preg_replace_callback":[1768],"strlen":[1767],"get_option":[1761]},"used_by":[]},"wp_iso_descrambler":{"doc":"\/**\n * Convert to ASCII from email subjects.\n *\n * @since 1.2.0\n *\n * @param string $string Subject line\n * @return string Converted string to ASCII\n *\/","file":"formatting.php","line":1857,"missingDoc":false,"filters":[],"uses":{"str_replace":[1862],"preg_replace_callback":[1863],"preg_match":[1859]},"used_by":[]},"_wp_iso_convert":{"doc":"\/**\n * Helper function to convert hex encoded chars to ASCII\n *\n * @since 3.1.0\n * @access private\n * @param array $match The preg_replace_callback matches array\n * @return array Converted chars\n *\/","file":"formatting.php","line":1876,"missingDoc":false,"filters":[],"uses":{"chr":[1877],"hexdec":[1877],"strtolower":[1877]},"used_by":[]},"iso8601_timezone_to_offset":{"doc":"\/**\n * Computes an offset in seconds from an iso8601 timezone.\n *\n * @since 1.5.0\n *\n * @param string $timezone Either 'Z' for 0 offset or '\u00b1hhmm'.\n * @return int|float The offset in seconds.\n *\/","file":"formatting.php","line":1947,"missingDoc":false,"filters":[],"uses":{"substr":[1952,1953,1954],"intval":[1953,1954]},"used_by":{"iso8601_to_datetime":[1977]}},"popuplinks":{"doc":"\/**\n * Adds a element attributes to open links in new windows.\n *\n * Comment text in popup windows should be filtered through this. Right now it's\n * a moderately dumb function, ideally it would detect whether a target or rel\n * attribute was already there and adjust its actions accordingly.\n *\n * @since 0.71\n *\n * @param string $text Content to replace links to open in a new window.\n * @return string Content that has filtered links.\n *\/","file":"formatting.php","line":2004,"missingDoc":false,"filters":[],"uses":{"preg_replace":[2005]},"used_by":[]},"sanitize_email":{"doc":"\/**\n * Strips out all characters that are not allowable in an email.\n *\n * @since 1.5.0\n *\n * @param string $email Email address to filter.\n * @return string Filtered email address.\n *\/","file":"formatting.php","line":2017,"missingDoc":false,"filters":["'sanitize_email'","'sanitize_email'","'sanitize_email'","'sanitize_email'","'sanitize_email'","'sanitize_email'","'sanitize_email'","'sanitize_email'"],"uses":{"strlen":[2019],"strpos":[2024],"explode":[2029,2052],"preg_replace":[2033,2040,2068],"trim":[2046,2065],"count":[2055,2077],"join":[2082]},"used_by":{"sanitize_option":[2761],"wpmu_validate_user_signup":[443],"wpmu_signup_user":[678]}},"human_time_diff":{"doc":"\/**\n * Determines the difference between two timestamps.\n *\n * The difference is returned in a human readable format such as \"1 hour\",\n * \"5 mins\", \"2 days\".\n *\n * @since 1.5.0\n *\n * @param int $from Unix timestamp from which the difference begins.\n * @param int $to Optional. Unix timestamp to end the time difference. Default becomes time() if not set.\n * @return string Human readable time difference.\n *\/","file":"formatting.php","line":2103,"missingDoc":false,"filters":[],"uses":{"time":[2105],"abs":[2106],"round":[2108,2115,2121],"sprintf":[2113,2119,2125],"_n":[2113,2119,2125]},"used_by":[]},"wp_trim_excerpt":{"doc":"\/**\n * Generates an excerpt from the content, if needed.\n *\n * The excerpt word amount will be 55 words and if the amount is greater than\n * that, then the string ' [...]' will be appended to the excerpt. If the string\n * is less than 55 words, then the content will be returned as is.\n *\n * The 55 word limit can be modified by plugins\/themes using the excerpt_length filter\n * The ' [...]' string can be modified by plugins\/themes using the excerpt_more filter\n *\n * @since 1.5.0\n *\n * @param string $text Optional. The excerpt. If set to empty, an excerpt is generated.\n * @return string The excerpt.\n *\/","file":"formatting.php","line":2145,"missingDoc":false,"filters":["'the_content'","'excerpt_length'","'excerpt_more'","'wp_trim_excerpt'"],"uses":{"get_the_content":[2148],"strip_shortcodes":[2150],"str_replace":[2153],"wp_trim_words":[2156]},"used_by":[]},"strip_shortcodes":{"doc":"\/**\n * Remove all shortcode tags from the given content.\n *\n * @since 2.5\n * @uses $shortcode_tags\n *\n * @param string $content Content to remove shortcode tags.\n * @return string Content without shortcode tags.\n *\/","file":"shortcodes.php","line":315,"missingDoc":false,"filters":[],"uses":{"is_array":[318],"get_shortcode_regex":[321],"preg_replace_callback":[323]},"used_by":{"wp_trim_excerpt":[2150]}},"wp_trim_words":{"doc":"\/**\n * Trims text to a certain number of words.\n *\n * This function is localized. For languages that count 'words' by the individual\n * character (such as East Asian languages), the $num_words argument will apply\n * to the number of individual characters.\n *\n * @since 3.3.0\n *\n * @param string $text Text to trim.\n * @param int $num_words Number of words. Default 55.\n * @param string $more What to append if $text needs to be trimmed. Default '&hellip;'.\n * @return string Trimmed text.\n *\/","file":"formatting.php","line":2175,"missingDoc":false,"filters":["'wp_trim_words'"],"uses":{"__":[2177],"wp_strip_all_tags":[2179],"trim":[2183],"preg_replace":[2183],"preg_match_all":[2184],"array_slice":[2185],"preg_split":[2188],"_x":[2182],"preg_match":[2182],"get_option":[2182],"array_pop":[2192],"implode":[2193,2196],"count":[2191]},"used_by":{"wp_trim_excerpt":[2156],"wp_setup_nav_menu_item":[622]}},"wp_richedit_pre":{"doc":"\/**\n * Formats text for the rich text editor.\n *\n * The filter 'richedit_pre' is applied here. If $text is empty the filter will\n * be applied to an empty string.\n *\n * @since 2.0.0\n *\n * @param string $text The text to be formatted.\n * @return string The formatted text after filter is applied.\n *\/","file":"formatting.php","line":2490,"missingDoc":false,"filters":["'richedit_pre'","'richedit_pre'"],"uses":{"convert_chars":[2494],"wpautop":[2495],"htmlspecialchars":[2496]},"used_by":[]},"wp_htmledit_pre":{"doc":"\/**\n * Formats text for the HTML editor.\n *\n * Unless $output is empty it will pass through htmlspecialchars before the\n * 'htmledit_pre' filter is applied.\n *\n * @since 2.5.0\n *\n * @param string $output The text to be formatted.\n * @return string Formatted text after filter applied.\n *\/","file":"formatting.php","line":2512,"missingDoc":false,"filters":["'htmledit_pre'"],"uses":{"htmlspecialchars":[2514]},"used_by":[]},"_deep_replace":{"doc":"\/**\n * Perform a deep string replace operation to ensure the values in $search are no longer present\n *\n * Repeats the replacement operation until it no longer replaces anything so as to remove \"nested\" values\n * e.g. $subject = '%0%0%0DDD', $search ='%0D', $result ='' rather than the '%0%0DD' that\n * str_replace would return\n *\n * @since 2.8.1\n * @access private\n *\n * @param string|array $search\n * @param string $subject\n * @return string The processed string\n *\/","file":"formatting.php","line":2533,"missingDoc":false,"filters":[],"uses":{"strpos":[2539],"str_replace":[2541]},"used_by":{"esc_url":[2587],"wp_sanitize_redirect":[895]}},"wp_allowed_protocols":{"doc":"\/**\n * Retrieve a list of protocols to allow in HTML attributes.\n *\n * @since 3.3.0\n * @see wp_kses()\n * @see esc_url()\n *\n * @return array Array of allowed protocols\n *\/","file":"functions.php","line":3759,"missingDoc":false,"filters":["'kses_allowed_protocols'"],"uses":[],"used_by":{"esc_url":[2605],"_links_add_base":[3134],"wp_kses":[478]}},"wp_kses_bad_protocol":{"doc":"\/**\n * Sanitize string from bad protocols.\n *\n * This function removes all non-allowed protocols from the beginning of\n * $string. It ignores whitespace and the case of the letters, and it does\n * understand HTML entities. It does its work in a while loop, so it won't be\n * fooled by a string like \"javascript:javascript:alert(57)\".\n *\n * @since 1.0.0\n *\n * @param string $string Content to filter bad protocols from\n * @param array $allowed_protocols Allowed protocols to keep\n * @return string Filtered content\n *\/","file":"kses.php","line":944,"missingDoc":false,"filters":[],"uses":{"wp_kses_no_null":[945],"wp_kses_bad_protocol_once":[950]},"used_by":{"esc_url":[2606],"wp_kses_hair":[797,813,829]}},"htmlentities2":{"doc":"\/**\n * Convert entities, while preserving already-encoded entities.\n *\n * @link http:\/\/www.php.net\/htmlentities Borrowed from the PHP Manual user notes.\n *\n * @since 1.2.2\n *\n * @param string $myHTML The text to be converted.\n * @return string Converted text.\n *\/","file":"formatting.php","line":2636,"missingDoc":false,"filters":[],"uses":{"get_html_translation_table":[2637],"chr":[2638],"preg_replace":[2639],"strtr":[2639]},"used_by":[]},"tag_escape":{"doc":"\/**\n * Escape a HTML tag name.\n *\n * @since 2.5.0\n *\n * @param string $tag_name\n * @return string\n *\/","file":"formatting.php","line":2712,"missingDoc":false,"filters":["'tag_escape'"],"uses":{"strtolower":[2713],"preg_replace":[2713]},"used_by":{"gallery_shortcode":[736,737]}},"wp_make_link_relative":{"doc":"\/**\n * Convert full URL paths to absolute paths.\n *\n * Removes the http or https protocols and the domain. Keeps the path '\/' at the\n * beginning, so it isn't a true relative link, but from the web root base.\n *\n * @since 2.1.0\n *\n * @param string $link Full URL path.\n * @return string Absolute path.\n *\/","file":"formatting.php","line":2740,"missingDoc":false,"filters":[],"uses":{"preg_replace":[2741]},"used_by":[]},"sanitize_option":{"doc":"\/**\n * Sanitises various option values based on the nature of the option.\n *\n * This is basically a switch statement which will pass $value through a number\n * of functions depending on the $option.\n *\n * @since 2.0.5\n *\n * @param string $option The name of the option.\n * @param string $value The unsanitised value.\n * @return string Sanitized value.\n *\/","file":"formatting.php","line":2756,"missingDoc":false,"filters":["\"sanitize_option_{$option}\""],"uses":{"sanitize_email":[2761],"get_option":[2763,2850,2860,2869,2901],"add_settings_error":[2765,2852,2862,2903],"__":[2765,2852,2862,2903],"function_exists":[2764,2851,2861,2902],"is_email":[2762],"absint":[2788],"abs":[2797],"wp_kses_post":[2809],"esc_html":[2810],"preg_replace":[2814,2843],"intval":[2822],"strip_tags":[2831],"wp_kses_data":[2832],"explode":[2836,2874,2885],"array_filter":[2837,2838,2876,2887],"array_map":[2837,2838,2876,2887],"implode":[2839],"esc_url_raw":[2848,2858,2910],"preg_match":[2847,2857,2891,2891],"get_available_languages":[2867],"in_array":[2868,2900],"is_array":[2873,2884],"array_values":[2876,2887],"timezone_identifiers_list":[2899],"str_replace":[2911]},"used_by":{"update_option":[227],"add_option":[308],"add_site_option":[823],"update_site_option":[913]}},"wp_kses_data":{"doc":"\/**\n * Sanitize content with allowed HTML Kses rules.\n *\n * @since 2.9.0\n * @uses $allowedtags\n *\n * @param string $data Content to filter, expected to not be escaped\n * @return string Filtered content\n *\/","file":"kses.php","line":1269,"missingDoc":false,"filters":[],"uses":{"wp_kses":[1270],"current_filter":[1270]},"used_by":{"sanitize_option":[2832]}},"get_available_languages":{"doc":"\/**\n * Get all available languages based on the presence of *.mo files in a given directory. The default directory is WP_LANG_DIR.\n *\n * @since 3.0.0\n *\n * @param string $dir A directory in which to search for language files. The default directory is WP_LANG_DIR.\n * @return array Array of language codes or an empty array if no languages are present. Language codes are formed by stripping the .mo extension from the language file names.\n *\/","file":"l10n.php","line":542,"missingDoc":false,"filters":[],"uses":{"basename":[546],"strpos":[547,547,548],"glob":[545],"is_null":[545]},"used_by":{"sanitize_option":[2867]}},"wp_parse_str":{"doc":"\/**\n * Parses a string into variables to be stored in an array.\n *\n * Uses {@link http:\/\/www.php.net\/parse_str parse_str()} and stripslashes if\n * {@link http:\/\/www.php.net\/magic_quotes magic_quotes_gpc} is on.\n *\n * @since 2.2.1\n * @uses apply_filters() for the 'wp_parse_str' filter.\n *\n * @param string $string The string to be parsed.\n * @param array $array Variables will be stored in this array.\n *\/","file":"formatting.php","line":2932,"missingDoc":false,"filters":["'wp_parse_str'"],"uses":{"parse_str":[2933],"stripslashes_deep":[2935],"get_magic_quotes_gpc":[2934]},"used_by":{"add_query_arg":[685],"wp_parse_args":[2557],"wp_style_loader_src":[624]}},"wp_pre_kses_less_than":{"doc":"\/**\n * Convert lone less than signs.\n *\n * KSES already converts lone greater than signs.\n *\n * @uses wp_pre_kses_less_than_callback in the callback function.\n * @since 2.3.0\n *\n * @param string $text Text to be converted.\n * @return string Converted text.\n *\/","file":"formatting.php","line":2950,"missingDoc":false,"filters":[],"uses":{"preg_replace_callback":[2951]},"used_by":{"sanitize_text_field":[3223]}},"wp_pre_kses_less_than_callback":{"doc":"\/**\n * Callback function used by preg_replace.\n *\n * @uses esc_html to format the $matches text.\n * @since 2.3.0\n *\n * @param array $matches Populated by matches to preg_replace.\n * @return string The text returned after esc_html if needed.\n *\/","file":"formatting.php","line":2963,"missingDoc":false,"filters":[],"uses":{"esc_html":[2965],"strpos":[2964]},"used_by":[]},"wp_sprintf":{"doc":"\/**\n * WordPress implementation of PHP sprintf() with filters.\n *\n * @since 2.5.0\n * @link http:\/\/www.php.net\/sprintf\n *\n * @param string $pattern The string which formatted args are inserted.\n * @param mixed $args,... Arguments to be formatted into the $pattern string.\n * @return string The formatted string.\n *\/","file":"formatting.php","line":2979,"missingDoc":false,"filters":["'wp_sprintf'"],"uses":{"func_get_args":[2980],"strlen":[2981,2987],"substr":[2988,2993,3003],"strpos":[3000],"str_replace":[3010],"preg_match":[3008],"sprintf":[3021],"strval":[3021]},"used_by":{"get_the_taxonomies":[3125]}},"wp_sprintf_l":{"doc":"\/**\n * Localize list items before the rest of the content.\n *\n * The '%l' must be at the first characters can then contain the rest of the\n * content. The list items will have ', ', ', and', and ' and ' added depending\n * on the amount of list items in the $args parameter.\n *\n * @since 2.5.0\n *\n * @param string $pattern Content containing '%l' at the beginning.\n * @param array $args List items to prepend to the content and replace '%l'.\n * @return string Localized list items and rest of the content.\n *\/","file":"formatting.php","line":3044,"missingDoc":false,"filters":["'wp_sprintf_l'"],"uses":{"substr":[3046,3077],"__":[3056,3058,3060],"array_shift":[3064,3066,3070],"count":[3065,3068]},"used_by":[]},"links_add_base_url":{"doc":"\/**\n * Add a Base url to relative links in passed content.\n *\n * By default it supports the 'src' and 'href' attributes. However this can be\n * changed via the 3rd param.\n *\n * @since 2.7.0\n *\n * @param string $content String to search for links in.\n * @param string $base The base URL to prefix to links.\n * @param array $attrs The attributes which should be processed.\n * @return string The processed content.\n *\/","file":"formatting.php","line":3114,"missingDoc":false,"filters":[],"uses":{"implode":[3117],"preg_replace_callback":[3118]},"used_by":[]},"_links_add_base":{"doc":"\/**\n * Callback to add a base url to relative links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @param string $m The matched link.\n * @return string The processed link.\n *\/","file":"formatting.php","line":3130,"missingDoc":false,"filters":[],"uses":{"preg_match":[3134],"in_array":[3134],"wp_allowed_protocols":[3134],"path_join":[3136]},"used_by":[]},"path_join":{"doc":"\/**\n * Join two filesystem paths together (e.g. 'give me $path relative to $base').\n *\n * If the $path is absolute, then it the full path is returned.\n *\n * @since 2.5.0\n *\n * @param string $base\n * @param string $path\n * @return string The path with the base or absolute path.\n *\/","file":"functions.php","line":1390,"missingDoc":false,"filters":[],"uses":{"path_is_absolute":[1391],"rtrim":[1394],"ltrim":[1394]},"used_by":{"_links_add_base":[3136],"wp_upload_dir":[1532],"image_get_intermediate_size":[476,477],"wp_delete_attachment":[4130,4137,4142,4144]}},"links_add_target":{"doc":"\/**\n * Adds a Target attribute to all links in passed content.\n *\n * This function by default only applies to <a> tags, however this can be\n * modified by the 3rd param.\n *\n * <b>NOTE:<\/b> Any current target attributed will be stripped and replaced.\n *\n * @since 2.7.0\n *\n * @param string $content String to search for links in.\n * @param string $target The Target to add to the links.\n * @param array $tags An array of tags to apply to.\n * @return string The processed content.\n *\/","file":"formatting.php","line":3155,"missingDoc":false,"filters":[],"uses":{"implode":[3158],"preg_replace_callback":[3159]},"used_by":[]},"_links_add_target":{"doc":"\/**\n * Callback to add a target attribute to all links in passed content.\n *\n * @since 2.7.0\n * @access private\n *\n * @param string $m The matched link.\n * @return string The processed link.\n *\/","file":"formatting.php","line":3171,"missingDoc":false,"filters":[],"uses":{"preg_replace":[3174],"esc_attr":[3175]},"used_by":[]},"normalize_whitespace":{"doc":"","file":"formatting.php","line":3179,"missingDoc":true,"filters":[],"uses":{"trim":[3180],"str_replace":[3181],"preg_replace":[3182]},"used_by":{"wp_text_diff":[1711,1712]}},"sanitize_text_field":{"doc":"\/**\n * Sanitize a string from user input or from the db\n *\n * check for invalid UTF-8,\n * Convert single < characters to entity,\n * strip all tags,\n * remove line breaks, tabs and extra white space,\n * strip octets.\n *\n * @since 2.9.0\n *\n * @param string $str\n * @return string\n *\/","file":"formatting.php","line":3219,"missingDoc":false,"filters":["'sanitize_text_field'"],"uses":{"wp_check_invalid_utf8":[3220],"wp_pre_kses_less_than":[3223],"wp_strip_all_tags":[3225],"trim":[3227,3239],"preg_replace":[3227,3239],"strpos":[3222],"preg_match":[3232],"str_replace":[3233]},"used_by":[]},"capital_P_dangit":{"doc":"\/**\n * Forever eliminate \"Wordpress\" from the planet (or at least the little bit we can influence).\n *\n * Violating our coding standards for a good function name.\n *\n * @since 3.0.0\n *\/","file":"formatting.php","line":3265,"missingDoc":false,"filters":[],"uses":{"str_replace":[3268,3273],"current_filter":[3267],"_x":[3272]},"used_by":[]},"current_filter":{"doc":"\/**\n * Retrieve the name of the current filter or action.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 2.5\n *\n * @return string Hook name of the current filter or action.\n *\/","file":"plugin.php","line":309,"missingDoc":false,"filters":[],"uses":{"end":[311]},"used_by":{"capital_P_dangit":[3267],"get_the_generator":[2164],"wp_filter_kses":[1257],"wp_kses_data":[1270],"wp_update_plugins":[156],"wp_update_themes":[265]}},"sanitize_mime_type":{"doc":"\/**\n * Sanitize a mime type\n *\n * @since 3.1.3\n *\n * @param string $mime_type Mime type\n * @return string Sanitized mime type\n *\/","file":"formatting.php","line":3288,"missingDoc":false,"filters":["'sanitize_mime_type'"],"uses":{"preg_replace":[3289]},"used_by":[]},"sanitize_trackback_urls":{"doc":"\/**\n * Sanitize space or carriage return separated URLs that are used to send trackbacks.\n *\n * @since 3.4.0\n *\n * @param string $to_ping Space or carriage return separated URLs\n * @return string URLs starting with the http or https protocol, separated by a carriage return.\n *\/","file":"formatting.php","line":3301,"missingDoc":false,"filters":["'sanitize_trackback_urls'"],"uses":{"preg_split":[3302],"trim":[3302],"preg_match":[3304],"array_map":[3307],"implode":[3308]},"used_by":{"wp_insert_post":[2837],"get_to_ping":[3363]}},"size_format":{"doc":"\/**\n * Convert number of bytes largest unit bytes will fit into.\n *\n * It is easier to read 1kB than 1024 bytes and 1MB than 1048576 bytes. Converts\n * number of bytes to human readable number by taking the number of that unit\n * that the bytes will go into it. Supports TB value.\n *\n * Please note that integers in PHP are limited to 32 bits, unless they are on\n * 64 bit architecture, then they have 64 bit size. If you need to place the\n * larger size then what PHP integer type will hold, then use a string. It will\n * be converted to a double, which should always have 64 bit length.\n *\n * Technically the correct unit names for powers of 1024 are KiB, MiB etc.\n * @link http:\/\/en.wikipedia.org\/wiki\/Byte\n *\n * @since 2.3.0\n *\n * @param int|string $bytes Number of bytes. Note max integer size for integers.\n * @param int $decimals Precision of number of decimal places. Deprecated.\n * @return bool|string False on failure. Number string on success.\n *\/","file":"functions.php","line":180,"missingDoc":false,"filters":[],"uses":{"number_format_i18n":[191],"doubleval":[190]},"used_by":[]},"get_weekstartend":{"doc":"\/**\n * Get the week start and end from the datetime or date string from mysql.\n *\n * @since 0.71\n *\n * @param string $mysqlstring Date or datetime field type from mysql.\n * @param int $start_of_week Optional. Start of the week as an integer.\n * @return array Keys are 'start' and 'end'.\n *\/","file":"functions.php","line":205,"missingDoc":false,"filters":[],"uses":{"substr":[206,207,208],"mktime":[209],"date":[210],"get_option":[212],"is_numeric":[211],"compact":[219]},"used_by":{"wp_get_archives":[1005]}},"maybe_unserialize":{"doc":"\/**\n * Unserialize value only if it was serialized.\n *\n * @since 2.0.0\n *\n * @param string $original Maybe unserialized original, if is needed.\n * @return mixed Unserialized data can be any type.\n *\/","file":"functions.php","line":230,"missingDoc":false,"filters":[],"uses":{"unserialize":[232],"is_serialized":[231]},"used_by":{"get_metadata":[294],"get_metadata_by_mid":[368],"wpmu_activate_signup":[846],"get_option":[91],"wp_load_core_site_options":[185],"get_site_option":[781],"wp_version_check":[95],"wp_update_plugins":[210],"wp_update_themes":[319],"count_users":[921]}},"is_serialized":{"doc":"\/**\n * Check value to find if it was serialized.\n *\n * If $data is not an string, then returned value will always be false.\n * Serialized data is always a string.\n *\n * @since 2.0.5\n *\n * @param mixed $data Value to check to see if was serialized.\n * @return bool False if not serialized and true if it was.\n *\/","file":"functions.php","line":247,"missingDoc":false,"filters":[],"uses":{"is_string":[249],"trim":[251],"strlen":[254],"preg_match":[269,273]},"used_by":{"maybe_unserialize":[231],"maybe_serialize":[320]}},"is_serialized_string":{"doc":"\/**\n * Check whether serialized data is of string type.\n *\n * @since 2.0.5\n *\n * @param mixed $data Serialized data\n * @return bool False if not a serialized string, true if it is.\n *\/","file":"functions.php","line":286,"missingDoc":false,"filters":[],"uses":{"is_string":[288],"trim":[290],"strlen":[291]},"used_by":[]},"get_enclosed":{"doc":"\/**\n * Retrieve enclosures already enclosed for a post.\n *\n * @since 1.5.0\n * @uses $wpdb\n *\n * @param int $post_id Post ID.\n * @return array List of enclosures\n *\/","file":"post.php","line":3315,"missingDoc":false,"filters":["'get_enclosed'"],"uses":{"get_post_custom":[3316],"is_array":[3318,3322],"explode":[3325],"trim":[3326]},"used_by":{"do_enclose":[418]}},"wp_get_http_headers":{"doc":"\/**\n * Retrieve HTTP Headers from URL.\n *\n * @since 1.5.1\n *\n * @param string $url\n * @param bool $deprecated Not Used.\n * @return bool|string False on failure, headers on success.\n *\/","file":"functions.php","line":542,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[544],"wp_remote_head":[546],"is_wp_error":[548],"wp_remote_retrieve_headers":[551]},"used_by":{"do_enclose":[450]}},"wp_get_http":{"doc":"\/**\n * Perform a HTTP HEAD or GET request.\n *\n * If $file_path is a writable filename, this will do a GET request and write\n * the file to that path.\n *\n * @since 2.5.0\n *\n * @param string $url URL to fetch.\n * @param string|bool $file_path Optional. File path to write request to.\n * @param int $red (private) The number of Redirects followed, Upon 5 being hit, returns false.\n * @return bool|string False on failure and string of headers if HEAD request.\n *\/","file":"functions.php","line":491,"missingDoc":false,"filters":[],"uses":{"set_time_limit":[492],"wp_remote_request":[505],"is_wp_error":[507],"wp_remote_retrieve_headers":[510],"wp_remote_retrieve_response_code":[511],"wp_get_http":[515],"in_array":[514],"fopen":[522],"fwrite":[526],"wp_remote_retrieve_body":[526],"fclose":[527],"clearstatcache":[528]},"used_by":{"wp_get_http":[515]}},"is_new_day":{"doc":"\/**\n * Whether today is a new day.\n *\n * @since 0.71\n * @uses $day Today\n * @uses $previousday Previous day\n *\n * @return int 1 when new day, 0 if not a new day.\n *\/","file":"functions.php","line":563,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"build_query":{"doc":"\/**\n * Build URL query based on an associative and, or indexed array.\n *\n * This is a convenient function for easily building url queries. It sets the\n * separator to '&' and uses _http_build_query() function.\n *\n * @see _http_build_query() Used to build the query\n * @link http:\/\/us2.php.net\/manual\/en\/function.http-build-query.php more on what\n *\t\thttp_build_query() does.\n *\n * @since 2.3.0\n *\n * @param array $data URL-encode key\/value pairs.\n * @return string URL encoded string\n *\/","file":"functions.php","line":586,"missingDoc":false,"filters":[],"uses":{"_http_build_query":[587]},"used_by":{"add_query_arg":[699]}},"_http_build_query":{"doc":"","file":"functions.php","line":591,"missingDoc":true,"filters":[],"uses":{"urlencode":[596,609],"is_int":[597],"array_push":[607,609,611],"_http_build_query":[607],"is_array":[606],"is_object":[606],"ini_get":[615],"implode":[617]},"used_by":{"build_query":[587],"_http_build_query":[607]}},"add_magic_quotes":{"doc":"\/**\n * Walks the array while sanitizing the contents.\n *\n * @since 0.71\n *\n * @param array $array Array to used to walk while sanitizing contents.\n * @return array Sanitized $array.\n *\/","file":"functions.php","line":733,"missingDoc":false,"filters":[],"uses":{"add_magic_quotes":[736],"addslashes":[738],"is_array":[735]},"used_by":{"add_magic_quotes":[736],"wp_magic_quotes":[540,541,542,543],"wp_update_post":[2972,2979],"_wp_put_post_revision":[5079],"wp_restore_post_revision":[5158],"wp_update_term":[2364],"wp_update_user":[1466]}},"wp":{"doc":"\/**\n * Set up the WordPress query.\n *\n * @since 2.0.0\n *\n * @param string $query_vars Default WP_Query arguments.\n *\/","file":"functions.php","line":777,"missingDoc":false,"filters":[],"uses":{"main":[779]},"used_by":[]},"cache_javascript_headers":{"doc":"\/**\n * Set the headers for caching for 10 days with JavaScript content type.\n *\n * @since 2.1.0\n *\/","file":"functions.php","line":953,"missingDoc":false,"filters":[],"uses":{"header":[955,956,957],"get_bloginfo":[955],"gmdate":[957],"time":[957]},"used_by":[]},"get_num_queries":{"doc":"\/**\n * Retrieve the number of database queries during the WordPress execution.\n *\n * @since 2.0.0\n *\n * @return int Number of database queries\n *\/","file":"functions.php","line":967,"missingDoc":false,"filters":[],"uses":[],"used_by":{"__main":[20]}},"bool_from_yn":{"doc":"\/**\n * Whether input is yes or no. Must be 'y' to be true.\n *\n * @since 1.0.0\n *\n * @param string $yn Character string containing either 'y' or 'n'\n * @return bool True if yes, false on anything else\n *\/","file":"functions.php","line":980,"missingDoc":false,"filters":[],"uses":{"strtolower":[981]},"used_by":[]},"do_feed":{"doc":"\/**\n * Loads the feed template from the use of an action hook.\n *\n * If the feed action does not have a hook, then the function will die with a\n * message telling the visitor that the feed is not valid.\n *\n * It is better to only have one hook for each feed.\n *\n * @since 2.1.0\n * @uses $wp_query Used to tell if the use a comment feed.\n * @uses do_action() Calls 'do_feed_$feed' hook, if a hook exists for the feed.\n *\/","file":"functions.php","line":996,"missingDoc":false,"filters":[],"uses":{"get_query_var":[999],"preg_replace":[1002],"get_default_feed":[1005],"sprintf":[1009],"__":[1009],"esc_html":[1009],"wp_die":[1010],"has_action":[1008]},"used_by":{"__main":[18]}},"has_action":{"doc":"\/**\n * Check if any action has been registered for a hook.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 2.5\n * @see has_filter() has_action() is an alias of has_filter().\n *\n * @param string $tag The name of the action hook.\n * @param callback $function_to_check optional.\n * @return mixed If $function_to_check is omitted, returns boolean for whether the hook has anything registered.\n * \tWhen checking a specific function, the priority of that hook is returned, or false if the function is not attached.\n * \tWhen using the $function_to_check argument, this function may return a non-boolean value that evaluates to false\n * \t(e.g.) 0, so use the === operator for testing the return value.\n *\/","file":"plugin.php","line":509,"missingDoc":false,"filters":[],"uses":{"has_filter":[510]},"used_by":{"do_feed":[1008]}},"do_feed_rdf":{"doc":"\/**\n * Load the RDF RSS 0.91 Feed template.\n *\n * @since 2.1.0\n *\/","file":"functions.php","line":1021,"missingDoc":false,"filters":[],"uses":{"load_template":[1022]},"used_by":[]},"load_template":{"doc":"\/**\n * Require the template file with WordPress environment.\n *\n * The globals are set up for the template file to ensure that the WordPress\n * environment is available from within the function. The query variables are\n * also available.\n *\n * @since 1.5.0\n *\n * @param string $_template_file Path to template file.\n * @param bool $require_once Whether to require_once or require. Default true.\n *\/","file":"template.php","line":406,"missingDoc":false,"filters":[],"uses":{"extract":[410],"is_array":[409]},"used_by":{"do_feed_rdf":[1022],"do_feed_rss":[1031],"do_feed_rss2":[1043,1045],"do_feed_atom":[1057,1059],"get_header":[35],"get_footer":[64],"get_sidebar":[93],"locate_template":[389]}},"do_feed_rss":{"doc":"\/**\n * Load the RSS 1.0 Feed Template.\n *\n * @since 2.1.0\n *\/","file":"functions.php","line":1030,"missingDoc":false,"filters":[],"uses":{"load_template":[1031]},"used_by":[]},"do_feed_rss2":{"doc":"\/**\n * Load either the RSS2 comment feed or the RSS2 posts feed.\n *\n * @since 2.1.0\n *\n * @param bool $for_comments True for the comment feed, false for normal feed.\n *\/","file":"functions.php","line":1041,"missingDoc":false,"filters":[],"uses":{"load_template":[1043,1045]},"used_by":[]},"do_feed_atom":{"doc":"\/**\n * Load either Atom comment feed or Atom posts feed.\n *\n * @since 2.1.0\n *\n * @param bool $for_comments True for the comment feed, false for normal feed.\n *\/","file":"functions.php","line":1055,"missingDoc":false,"filters":[],"uses":{"load_template":[1057,1059]},"used_by":[]},"do_robots":{"doc":"\/**\n * Display the robots.txt file content.\n *\n * The echo content should be with usage of the permalinks or for creating the\n * robots.txt file.\n *\n * @since 2.1.0\n * @uses do_action() Calls 'do_robotstxt' hook for displaying robots.txt rules.\n *\/","file":"functions.php","line":1071,"missingDoc":false,"filters":["'do_robotstxt'","'robots_txt'"],"uses":{"header":[1072],"get_option":[1077],"parse_url":[1081],"site_url":[1081]},"used_by":[]},"wp_load_translations_early":{"doc":"\/**\n * Attempts an early load of translations.\n *\n * Used for errors encountered during the initial loading process, before the locale has been\n * properly detected and loaded.\n *\n * Designed for unusual load sequences (like setup-config.php) or for when the script will then\n * terminate with an error, otherwise there is a risk that a file can be double-included.\n *\n * @since 3.4.0\n * @access private\n *\/","file":"load.php","line":692,"missingDoc":false,"filters":[],"uses":{"function_exists":[700],"did_action":[700],"defined":[717,729,732,750],"is_dir":[729,732,735,738],"array_unique":[744],"load_textdomain":[749,751],"file_exists":[750,748]},"used_by":{"is_blog_installed":[1150],"dead_db":[2765],"wp_check_php_mysql_versions":[107,112],"wp_maintenance":[161],"wp_set_wpdb_vars":[369],"wpmu_current_site":[216],"ms_not_installed":[235],"__main":[34,120],"wpdb::select":[845],"wpdb::print_error":[1026],"wpdb::db_connect":[1144]}},"dead_db":{"doc":"\/**\n * Load custom DB error or display WordPress DB error.\n *\n * If a file exists in the wp-content directory named db-error.php, then it will\n * be loaded instead of displaying the WordPress DB error. If it is not found,\n * then the WordPress DB error will be displayed instead.\n *\n * The WordPress DB error sets the HTTP status header to 500 to try to prevent\n * search engines from caching the message. Custom DB messages should do the\n * same.\n *\n * This function was backported to the the WordPress 2.3.2, but originally was\n * added in WordPress 2.5.0.\n *\n * @since 2.3.2\n * @uses $wpdb\n *\/","file":"functions.php","line":2747,"missingDoc":false,"filters":[],"uses":{"file_exists":[2751],"wp_die":[2758],"defined":[2757,2757],"status_header":[2761],"nocache_headers":[2762],"header":[2763],"wp_load_translations_early":[2765],"is_rtl":[2768],"_e":[2771,2775]},"used_by":{"is_blog_installed":[1154],"wp_set_wpdb_vars":[356]}},"wp_nonce_url":{"doc":"\/**\n * Retrieve URL with nonce added to URL query.\n *\n * @package WordPress\n * @subpackage Security\n * @since 2.0.4\n *\n * @param string $actionurl URL to add nonce action\n * @param string $action Optional. Nonce action name\n * @return string URL with nonce action added.\n *\/","file":"functions.php","line":1175,"missingDoc":false,"filters":[],"uses":{"str_replace":[1176],"esc_html":[1177],"add_query_arg":[1177],"wp_create_nonce":[1177]},"used_by":{"wp_logout_url":[219],"get_delete_post_link":[969],"wp_list_post_revisions":[1401]}},"wp_referer_field":{"doc":"\/**\n * Retrieve or display referer hidden field for forms.\n *\n * The referer link is the current Request URI from the server super global. The\n * input name is '_wp_http_referer', in case you wanted to check manually.\n *\n * @package WordPress\n * @subpackage Security\n * @since 2.0.4\n *\n * @param bool $echo Whether to echo or return the referer field.\n * @return string Referer field.\n *\/","file":"functions.php","line":1234,"missingDoc":false,"filters":[],"uses":{"esc_attr":[1235]},"used_by":{"wp_nonce_field":[1213]}},"wp_original_referer_field":{"doc":"\/**\n * Retrieve or display original referer hidden field for forms.\n *\n * The input name is '_wp_original_http_referer' and will be either the same\n * value of {@link wp_referer_field()}, if that was posted already or it will\n * be the current page, if it doesn't exist.\n *\n * @package WordPress\n * @subpackage Security\n * @since 2.0.4\n *\n * @param bool $echo Whether to echo the original http referer\n * @param string $jump_back_to Optional, default is 'current'. Can be 'previous' or page you want to jump back to.\n * @return string Original referer field.\n *\/","file":"functions.php","line":1258,"missingDoc":false,"filters":[],"uses":{"wp_get_referer":[1259],"wp_get_original_referer":[1260,1260],"esc_attr":[1261],"stripslashes":[1261]},"used_by":[]},"wp_get_referer":{"doc":"\/**\n * Retrieve referer from '_wp_http_referer' or HTTP referer. If it's the same\n * as the current request URL, will return false.\n *\n * @package WordPress\n * @subpackage Security\n * @since 2.0.4\n *\n * @return string|bool False on failure. Referer URL on success.\n *\/","file":"functions.php","line":1277,"missingDoc":false,"filters":[],"uses":[],"used_by":{"wp_original_referer_field":[1259],"wp_nonce_ays":[2026,2025],"auth_redirect":[785,785],"check_admin_referer":[811]}},"wp_get_original_referer":{"doc":"\/**\n * Retrieve original referer that was posted, if it exists.\n *\n * @package WordPress\n * @subpackage Security\n * @since 2.0.4\n *\n * @return string|bool False if no original referer or original referer if set.\n *\/","file":"functions.php","line":1298,"missingDoc":false,"filters":[],"uses":[],"used_by":{"wp_original_referer_field":[1260,1260]}},"wp_mkdir_p":{"doc":"\/**\n * Recursive directory creation based on full path.\n *\n * Will attempt to set permissions on folders.\n *\n * @since 2.0.1\n *\n * @param string $target Full path to attempt to create.\n * @return bool Whether the path was created. True if path already exists.\n *\/","file":"functions.php","line":1314,"missingDoc":false,"filters":[],"uses":{"explode":[1319],"wp_is_stream":[1318],"str_replace":[1323],"rtrim":[1331],"is_dir":[1336,1344],"file_exists":[1335],"stat":[1340],"dirname":[1340,1344,1349],"chmod":[1342],"mkdir":[1339],"wp_mkdir_p":[1350,1349]},"used_by":{"wp_mkdir_p":[1350,1349],"wp_upload_dir":[1617],"wp_upload_bits":[1740]}},"path_is_absolute":{"doc":"\/**\n * Test if a give filesystem path is absolute ('\/foo\/bar', 'c:\\windows').\n *\n * @since 2.5.0\n *\n * @param string $path File path\n * @return bool True if path is absolute, false is not absolute.\n *\/","file":"functions.php","line":1363,"missingDoc":false,"filters":[],"uses":{"realpath":[1365],"strlen":[1368],"preg_match":[1372]},"used_by":{"path_join":[1391],"locate_template":[376]}},"win_is_writable":{"doc":"\/**\n * Workaround for Windows bug in is_writable() function\n *\n * PHP has issues with Windows ACL's for determine if a \n * directory is writable or not, this works around them by\n * checking the ability to open files rather than relying\n * upon PHP to interprate the OS ACL.\n *\n * @link http:\/\/bugs.php.net\/bug.php?id=27609\n * @link http:\/\/bugs.php.net\/bug.php?id=30931\n *\n * @since 2.8.0\n *\n * @param string $path\n * @return bool\n *\/","file":"functions.php","line":1473,"missingDoc":false,"filters":[],"uses":{"win_is_writable":[1476,1478],"uniqid":[1476,1478],"mt_rand":[1476,1478],"is_dir":[1477],"strlen":[1475],"file_exists":[1481],"fopen":[1482],"fclose":[1485],"unlink":[1487]},"used_by":{"wp_is_writable":[1452],"win_is_writable":[1476,1478]}},"ms_is_switched":{"doc":"\/**\n * Determines if switch_to_blog() is in effect\n *\n * @since 3.5.0\n *\n * @return bool True if switched, false otherwise.\n *\/","file":"ms-blogs.php","line":626,"missingDoc":false,"filters":[],"uses":[],"used_by":{"wp_upload_dir":[1569]}},"is_main_site":{"doc":"\/**\n * Is main site?\n *\n *\n * @since 3.0.0\n * @package WordPress\n *\n * @param int $blog_id optional blog id to test (default current blog)\n * @return bool True if not multisite or $blog_id is main site\n *\/","file":"functions.php","line":3219,"missingDoc":false,"filters":[],"uses":{"is_multisite":[3222],"get_current_blog_id":[3226]},"used_by":{"wp_upload_dir":[1552],"is_main_blog":[127],"maybe_redirect_404":[1653],"wp_schedule_update_network_counts":[1913],"WP_Rewrite::rewrite_rules":[1536],"__main":[431]}},"wp_unique_filename":{"doc":"\/**\n * Get a filename that is sanitized and unique for the given directory.\n *\n * If the filename is not unique, then a number will be added to the filename\n * before the extension, and will continue adding numbers until the filename is\n * unique.\n *\n * The callback is passed three parameters, the first one is the directory, the\n * second is the filename, and the third is the extension.\n *\n * @since 2.5.0\n *\n * @param string $dir\n * @param string $filename\n * @param mixed $unique_filename_callback Callback.\n * @return string New filename, if given wasn't unique.\n *\/","file":"functions.php","line":1647,"missingDoc":false,"filters":[],"uses":{"sanitize_file_name":[1649],"pathinfo":[1652],"basename":[1654],"call_user_func":[1662],"strtolower":[1668,1667],"preg_replace":[1669],"preg_quote":[1669],"file_exists":[1672,1672,1681],"str_replace":[1674,1675,1685],"is_callable":[1661]},"used_by":{"wp_upload_bits":[1737]}},"wp_check_filetype":{"doc":"\/**\n * Retrieve the file type from the file name.\n *\n * You can optionally define the mime array, if needed.\n *\n * @since 2.0.4\n *\n * @param string $filename File name or path.\n * @param array $mimes Optional. Key is the file extension with value as the mime type.\n * @return array Values with extension first and mime type.\n *\/","file":"functions.php","line":1808,"missingDoc":false,"filters":[],"uses":{"get_allowed_mime_types":[1810],"preg_match":[1816],"compact":[1823]},"used_by":{"wp_upload_bits":[1722],"wp_check_filetype_and_ext":[1847,1883],"wp_get_image_editor":[1167],"__main":[32]}},"wp_ext2type":{"doc":"\/**\n * Retrieve the file type based on the extension name.\n *\n * @package WordPress\n * @since 2.5.0\n * @uses apply_filters() Calls 'ext2type' hook on default supported types.\n *\n * @param string $ext The extension to search.\n * @return string|null The file type, example: audio, video, document, spreadsheet, etc. Null if not found.\n *\/","file":"functions.php","line":1781,"missingDoc":false,"filters":["'ext2type'"],"uses":{"in_array":[1793]},"used_by":{"wp_mime_type_icon":[4335]}},"wp_check_filetype_and_ext":{"doc":"\/**\n * Attempt to determine the real file type of a file.\n * If unable to, the file name extension will be used to determine type.\n *\n * If it's determined that the extension does not match the file's real type,\n * then the \"proper_filename\" value will be set with a proper filename and extension.\n *\n * Currently this function only supports validating images known to getimagesize().\n *\n * @since 3.0.0\n *\n * @param string $file Full path to the image.\n * @param string $filename The filename of the image (may differ from $file due to $file being in a tmp directory)\n * @param array $mimes Optional. Key is the file extension with value as the mime type.\n * @return array Values for the extension, MIME, and either a corrected filename or false if original $filename is valid\n *\/","file":"functions.php","line":1842,"missingDoc":false,"filters":["'getimagesize_mimes_to_exts'","'wp_check_filetype_and_ext'"],"uses":{"wp_check_filetype":[1847,1883],"extract":[1848,1884],"compact":[1852,1891],"file_exists":[1851],"getimagesize":[1858],"explode":[1874],"array_pop":[1875],"implode":[1877],"strpos":[1855],"function_exists":[1855]},"used_by":[]},"wp_nonce_ays":{"doc":"\/**\n * Display \"Are You Sure\" message to confirm the action being taken.\n *\n * If the action has the nonce explain message, then it will be displayed along\n * with the \"Are you sure?\" message.\n *\n * @package WordPress\n * @subpackage Security\n * @since 2.0.4\n *\n * @param string $action The nonce action.\n *\/","file":"functions.php","line":2018,"missingDoc":false,"filters":[],"uses":{"__":[2019,2021,2022,2024,2026],"sprintf":[2021,2022],"get_bloginfo":[2021],"wp_logout_url":[2022],"esc_url":[2026],"remove_query_arg":[2026],"wp_get_referer":[2026,2025],"wp_die":[2029]},"used_by":{"check_admin_referer":[814]}},"_default_wp_die_handler":{"doc":"\/**\n * Kill WordPress execution and display HTML message with error message.\n *\n * This is the default handler for wp_die if you want a custom one for your\n * site then you can overload using the wp_die_handler filter in wp_die\n *\n * @since 3.0.0\n * @access private\n *\n * @param string $message Error message.\n * @param string $title Error title.\n * @param string|array $args Optional arguments to control behavior.\n *\/","file":"functions.php","line":2071,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[2073],"function_exists":[2075,2077,2117,2123,2123],"get_error_data":[2079],"is_array":[2080],"get_error_messages":[2083],"count":[2084],"join":[2092],"is_string":[2095],"is_wp_error":[2077],"__":[2100,2112],"status_header":[2106],"nocache_headers":[2107],"header":[2108],"headers_sent":[2105],"is_rtl":[2117],"language_attributes":[2123],"did_action":[2104]},"used_by":[]},"language_attributes":{"doc":"\/**\n * Display the language attributes for the html tag.\n *\n * Builds up a set of html attributes containing the text direction and language\n * information for the page.\n *\n * @since 2.1.0\n *\n * @param string $doctype The type of html document (xhtml|html).\n *\/","file":"general-template.php","line":1857,"missingDoc":false,"filters":["'language_attributes'"],"uses":{"function_exists":[1861],"is_rtl":[1861],"get_option":[1865,1868],"get_bloginfo":[1864],"implode":[1872]},"used_by":{"_default_wp_die_handler":[2123],"__main":[13,13]}},"did_action":{"doc":"\/**\n * Retrieve the number of times an action is fired.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 2.1\n * @global array $wp_actions Increments the amount of times action was triggered.\n *\n * @param string $tag The name of the action hook.\n * @return int The number of times action hook <tt>$tag<\/tt> is fired\n *\/","file":"plugin.php","line":424,"missingDoc":false,"filters":[],"uses":[],"used_by":{"_default_wp_die_handler":[2104],"wp_print_scripts":[28],"wp_register_script":[55],"wp_localize_script":[89],"wp_deregister_script":[108],"wp_enqueue_script":[128],"wp_dequeue_script":[152],"wp_script_is":[178],"wp_print_styles":[29],"wp_add_inline_style":[56],"wp_register_style":[84],"wp_deregister_style":[105],"wp_enqueue_style":[136],"wp_dequeue_style":[158],"wp_style_is":[185],"wp_admin_css":[2095],"wp_load_translations_early":[700],"wp_enqueue_media":[1431],"switch_to_blog":[544],"restore_current_blog":[605],"wp_default_scripts":[63,70,77,99,105,185,242,245,261,273,290,303,317,331,347,355,363,375,401,415,423,428,437,451,456,465],"print_head_scripts":[646],"wp_print_head_scripts":[725],"create_initial_taxonomies":[24],"_remove_theme_support":[1492,1502],"wp_register_sidebar_widget":[646],"wp_register_widget_control":[746],"_register_widget_form_callback":[802]}},"_xmlrpc_wp_die_handler":{"doc":"\/**\n * Kill WordPress execution and display XML message with error message.\n *\n * This is the handler for wp_die when processing XMLRPC requests.\n *\n * @since 3.2.0\n * @access private\n *\n * @param string $message Error message.\n * @param string $title Error title.\n * @param string|array $args Optional arguments to control behavior.\n *\/","file":"functions.php","line":2267,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[2271],"output":[2275],"getXml":[2275]},"used_by":[]},"_ajax_wp_die_handler":{"doc":"\/**\n * Kill WordPress ajax execution.\n *\n * This is the handler for wp_die when processing Ajax requests.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $message Optional. Response to print.\n *\/","file":"functions.php","line":2290,"missingDoc":false,"filters":[],"uses":{"is_scalar":[2291]},"used_by":[]},"_scalar_wp_die_handler":{"doc":"\/**\n * Kill WordPress execution.\n *\n * This is the handler for wp_die when processing APP requests.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $message Optional. Response to print.\n *\/","file":"functions.php","line":2306,"missingDoc":false,"filters":[],"uses":{"is_scalar":[2307]},"used_by":[]},"wp_send_json":{"doc":"\/**\n * Send a JSON response back to an Ajax request.\n *\n * @since 3.5.0\n *\n * @param mixed $response Variable (usually an array or object) to encode as JSON, then print and die.\n *\/","file":"functions.php","line":2319,"missingDoc":false,"filters":[],"uses":{"header":[2320],"get_option":[2320],"json_encode":[2321],"wp_die":[2323],"defined":[2322]},"used_by":{"wp_send_json_success":[2341],"wp_send_json_error":[2357]}},"wp_send_json_success":{"doc":"\/**\n * Send a JSON response back to an Ajax request, indicating success.\n *\n * @since 3.5.0\n *\n * @param mixed $data Data to encode as JSON, then print and die.\n *\/","file":"functions.php","line":2335,"missingDoc":false,"filters":[],"uses":{"wp_send_json":[2341]},"used_by":[]},"wp_send_json_error":{"doc":"\/**\n * Send a JSON response back to an Ajax request, indicating failure.\n *\n * @since 3.5.0\n *\n * @param mixed $data Data to encode as JSON, then print and die.\n *\/","file":"functions.php","line":2351,"missingDoc":false,"filters":[],"uses":{"wp_send_json":[2357]},"used_by":[]},"_config_wp_home":{"doc":"\/**\n * Retrieve the WordPress home page URL.\n *\n * If the constant named 'WP_HOME' exists, then it will be used and returned by\n * the function. This can be used to counter the redirection on your local\n * development environment.\n *\n * @access private\n * @package WordPress\n * @since 2.2.0\n *\n * @param string $url URL for the home location\n * @return string Homepage location.\n *\/","file":"functions.php","line":2374,"missingDoc":false,"filters":[],"uses":{"untrailingslashit":[2376],"defined":[2375]},"used_by":[]},"_config_wp_siteurl":{"doc":"\/**\n * Retrieve the WordPress site URL.\n *\n * If the constant named 'WP_SITEURL' is defined, then the value in that\n * constant will always be returned. This can be used for debugging a site on\n * your localhost while not having to change the database to your URL.\n *\n * @access private\n * @package WordPress\n * @since 2.2.0\n *\n * @param string $url URL to set the WordPress site location.\n * @return string The WordPress Site URL\n *\/","file":"functions.php","line":2394,"missingDoc":false,"filters":[],"uses":{"untrailingslashit":[2396],"defined":[2395]},"used_by":[]},"_mce_set_direction":{"doc":"\/**\n * Set the localized direction for MCE plugin.\n *\n * Will only set the direction to 'rtl', if the WordPress locale has the text\n * direction set to 'rtl'.\n *\n * Fills in the 'directionality', 'plugins', and 'theme_advanced_button1' array\n * keys. These keys are then returned in the $input array.\n *\n * @access private\n * @package WordPress\n * @subpackage MCE\n * @since 2.1.0\n *\n * @param array $input MCE plugin array.\n * @return array Direction set for 'rtl', if needed by locale.\n *\/","file":"functions.php","line":2417,"missingDoc":false,"filters":[],"uses":{"is_rtl":[2418]},"used_by":[]},"smilies_init":{"doc":"\/**\n * Convert smiley code to the icon graphic file equivalent.\n *\n * You can turn off smilies, by going to the write setting screen and unchecking\n * the box, or by setting 'use_smilies' option to false or removing the option.\n *\n * Plugins may override the default smiley list by setting the $wpsmiliestrans\n * to an array, with the key the code the blogger types in and the value the\n * image file.\n *\n * The $wp_smiliessearch global is for the regular expression and is set each\n * time the function is called.\n *\n * The full list of smilies can be found in the function and won't be listed in\n * the description. Probably should create a Codex page for it, so that it is\n * available.\n *\n * @global array $wpsmiliestrans\n * @global array $wp_smiliessearch\n * @since 2.2.0\n *\/","file":"functions.php","line":2448,"missingDoc":false,"filters":[],"uses":{"get_option":[2452],"count":[2505],"krsort":[2514],"substr":[2520,2521],"preg_quote":[2529,2533]},"used_by":[]},"wp_parse_id_list":{"doc":"\/**\n * Clean up an array, comma- or space-separated list of IDs.\n *\n * @since 3.0.0\n *\n * @param array|string $list\n * @return array Sanitized array of IDs\n *\/","file":"functions.php","line":2572,"missingDoc":false,"filters":[],"uses":{"preg_split":[2574],"is_array":[2573],"array_unique":[2576],"array_map":[2576]},"used_by":{"get_posts":[1717,1721],"get_pages":[3674,3689],"get_terms":[1287,1302,1316],"WP_User_Query::prepare_query":[522,525]}},"wp_filter_object_list":{"doc":"\/**\n * Filters a list of objects, based on a set of key => value arguments.\n *\n * @since 3.0.0\n *\n * @param array $list An array of objects to filter\n * @param array $args An array of key => value arguments to match against each object\n * @param string $operator The logical operation to perform. 'or' means only one element\n *\tfrom the array needs to match; 'and' means all elements must match. The default is 'and'.\n * @param bool|string $field A field from the object to place instead of the entire object\n * @return array A list of objects or object fields\n *\/","file":"functions.php","line":2609,"missingDoc":false,"filters":[],"uses":{"is_array":[2610],"wp_list_filter":[2613],"wp_list_pluck":[2616]},"used_by":{"get_post_stati":[1029],"get_post_types":[1123],"get_taxonomies":[143]}},"wp_list_filter":{"doc":"\/**\n * Filters a list of objects, based on a set of key => value arguments.\n *\n * @since 3.1.0\n *\n * @param array $list An array of objects to filter\n * @param array $args An array of key => value arguments to match against each object\n * @param string $operator The logical operation to perform:\n *    'AND' means all elements from the array must match;\n *    'OR' means only one element needs to match;\n *    'NOT' means no elements may match.\n *   The default is 'AND'.\n * @return array\n *\/","file":"functions.php","line":2635,"missingDoc":false,"filters":[],"uses":{"is_array":[2636],"strtoupper":[2642],"count":[2643],"array_key_exists":[2651]},"used_by":{"wp_filter_object_list":[2613],"WP_Query::get_posts":[2242,2258,2270],"WP_Query::get_queried_object":[2995]}},"wp_maybe_load_widgets":{"doc":"\/**\n * Determines if Widgets library should be loaded.\n *\n * Checks to make sure that the widgets library hasn't already been loaded. If\n * it hasn't, then it will load the widgets library and run an action hook.\n *\n * @since 2.2.0\n * @uses add_action() Calls '_admin_menu' hook with 'wp_widgets_add_menu' value.\n *\/","file":"functions.php","line":2694,"missingDoc":false,"filters":["'load_default_widgets'"],"uses":{"add_action":[2698]},"used_by":[]},"wp_widgets_add_menu":{"doc":"\/**\n * Append the Widgets menu to the themes main menu.\n *\n * @since 2.2.0\n * @uses $submenu The administration submenu list.\n *\/","file":"functions.php","line":2707,"missingDoc":false,"filters":[],"uses":{"current_theme_supports":[2710],"__":[2713],"ksort":[2714]},"used_by":[]},"wp_ob_end_flush_all":{"doc":"\/**\n * Flush all output buffers for PHP 5.2.\n *\n * Make sure all output buffers are flushed before our singletons our destroyed.\n *\n * @since 2.2.0\n *\/","file":"functions.php","line":2724,"missingDoc":false,"filters":[],"uses":{"ob_get_level":[2725],"ob_end_flush":[2727]},"used_by":[]},"url_is_accessable_via_ssl":{"doc":"\/**\n * Determines if the blog can be accessed over SSL.\n *\n * Determines if blog can be accessed over SSL by using cURL to access the site\n * using the https in the siteurl. Requires cURL extension to work correctly.\n *\n * @since 2.5.0\n *\n * @param string $url\n * @return bool Whether SSL access is available\n *\/","file":"functions.php","line":2805,"missingDoc":false,"filters":[],"uses":{"set_url_scheme":[2808],"curl_init":[2810],"curl_setopt":[2811,2812,2813,2814,2815],"curl_exec":[2817],"curl_getinfo":[2819],"curl_close":[2820],"in_array":[2807],"get_loaded_extensions":[2807]},"used_by":[]},"is_lighttpd_before_150":{"doc":"\/**\n * Is the server running earlier than 1.5.0 version of lighttpd?\n *\n * @since 2.5.0\n *\n * @return bool Whether the server is running lighttpd < 1.5.0\n *\/","file":"functions.php","line":2992,"missingDoc":false,"filters":[],"uses":{"explode":[2993],"version_compare":[2995]},"used_by":[]},"apache_mod_loaded":{"doc":"\/**\n * Does the specified module exist in the Apache config?\n *\n * @since 2.5.0\n *\n * @param string $mod e.g. mod_rewrite\n * @param bool $default The default return value if the module is not found\n * @return bool\n *\/","file":"functions.php","line":3007,"missingDoc":false,"filters":[],"uses":{"apache_get_modules":[3014],"in_array":[3015],"function_exists":[3017,3013],"ob_start":[3018],"phpinfo":[3019],"ob_get_clean":[3020],"strpos":[3021]},"used_by":[]},"validate_file":{"doc":"\/**\n * File validates against allowed set of defined rules.\n *\n * A return value of '1' means that the $file contains either '..' or '.\/'. A\n * return value of '2' means that the $file contains ':' after the first\n * character. A return value of '3' means that the file is not in the allowed\n * files list.\n *\n * @since 1.2.0\n *\n * @param string $file File path.\n * @param array $allowed_files List of allowed files.\n * @return int 0 means nothing is wrong, greater than 0 means something was wrong.\n *\/","file":"functions.php","line":3069,"missingDoc":false,"filters":[],"uses":{"strpos":[3070,3073],"in_array":[3076],"substr":[3079]},"used_by":{"wp_get_active_and_valid_plugins":[495],"wp_get_active_network_plugins":[49],"get_page_template":[248],"preview_theme":[565,572]}},"wp_guess_url":{"doc":"\/**\n * Guess the URL for the site.\n *\n * Will remove wp-admin links to retrieve only return URLs not in the wp-admin\n * directory.\n *\n * @since 2.6.0\n *\n * @return string\n *\/","file":"functions.php","line":3154,"missingDoc":false,"filters":[],"uses":{"is_ssl":[3158],"preg_replace":[3159],"defined":[3155],"rtrim":[3162]},"used_by":{"wp_not_installed":[431],"wp_default_scripts":[53],"wp_default_styles":[495]}},"wp_suspend_cache_invalidation":{"doc":"\/**\n * Suspend cache invalidation.\n *\n * Turns cache invalidation on and off. Useful during imports where you don't wont to do invalidations\n * every time a post is inserted. Callers must be sure that what they are doing won't lead to an inconsistent\n * cache when invalidation is suspended.\n *\n * @since 2.7.0\n *\n * @param bool $suspend Whether to suspend or enable cache invalidation\n * @return bool The current suspend setting\n *\/","file":"functions.php","line":3201,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"global_terms_enabled":{"doc":"\/**\n * Whether global terms are enabled.\n *\n *\n * @since 3.0.0\n * @package WordPress\n *\n * @return bool True if multisite and global terms enabled\n *\/","file":"functions.php","line":3240,"missingDoc":false,"filters":["'global_terms_enabled'"],"uses":{"is_multisite":[3241],"get_site_option":[3250],"is_null":[3247,3245]},"used_by":{"global_terms":[1530]}},"wp_timezone_override_offset":{"doc":"\/**\n * gmt_offset modification for smart timezone handling.\n *\n * Overrides the gmt_offset option if we have a timezone_string available.\n *\n * @since 2.8.0\n *\n * @return float|bool\n *\/","file":"functions.php","line":3264,"missingDoc":false,"filters":[],"uses":{"get_option":[3265],"timezone_open":[3269],"date_create":[3270],"round":[3274],"timezone_offset_get":[3274]},"used_by":[]},"_wp_timezone_choice_usort_callback":{"doc":"\/**\n * {@internal Missing Short Description}}\n *\n * @since 2.9.0\n *\n * @param unknown_type $a\n * @param unknown_type $b\n * @return int\n *\/","file":"functions.php","line":3286,"missingDoc":false,"filters":[],"uses":{"strnatcasecmp":[3291,3305,3309,3311,3320],"substr":[3290,3290,3294,3300]},"used_by":[]},"wp_timezone_choice":{"doc":"\/**\n * Gives a nicely formatted list of timezone strings. \/\/ temporary! Not in final\n *\n * @since 2.9.0\n *\n * @param string $selected_zone Selected Zone\n * @return string\n *\/","file":"functions.php","line":3332,"missingDoc":false,"filters":[],"uses":{"get_locale":[3339],"load_textdomain":[3341],"explode":[3347],"in_array":[3348],"translate":[3366,3367,3368],"str_replace":[3366,3367,3368,3439],"timezone_identifiers_list":[3346],"usort":[3371],"__":[3376,3425],"esc_attr":[3392,3412,3425,3445],"join":[3407,3450],"esc_html":[3412,3445],"esc_attr__":[3421,3429]},"used_by":[]},"wp_scheduled_delete":{"doc":"\/**\n * Permanently deletes posts, pages, attachments, and comments which have been in the trash for EMPTY_TRASH_DAYS.\n *\n * @since 2.9.0\n *\/","file":"functions.php","line":3471,"missingDoc":false,"filters":[],"uses":{"time":[3474],"get_results":[3476,3493],"prepare":[3476,3493],"get_post":[3483],"delete_post_meta":[3486,3487],"wp_delete_post":[3489],"get_comment":[3500],"delete_comment_meta":[3503,3504],"wp_delete_comment":[3506]},"used_by":[]},"_search_terms_tidy":{"doc":"\/**\n * Used internally to tidy up the search terms.\n *\n * @access private\n * @since 2.9.0\n *\n * @param string $t\n * @return string\n *\/","file":"functions.php","line":3567,"missingDoc":false,"filters":[],"uses":{"trim":[3568]},"used_by":[]},"__return_true":{"doc":"\/**\n * Returns true.\n *\n * Useful for returning true to filters easily.\n *\n * @since 3.0.0\n * @see __return_false()\n * @return bool true\n *\/","file":"functions.php","line":3580,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"__return_false":{"doc":"\/**\n * Returns false.\n *\n * Useful for returning false to filters easily.\n *\n * @since 3.0.0\n * @see __return_true()\n * @return bool false\n *\/","file":"functions.php","line":3593,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"__return_zero":{"doc":"\/**\n * Returns 0.\n *\n * Useful for returning 0 to filters easily.\n *\n * @since 3.0.0\n * @see __return_zero()\n * @return int 0\n *\/","file":"functions.php","line":3606,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"__return_empty_array":{"doc":"\/**\n * Returns an empty array.\n *\n * Useful for returning an empty array to filters easily.\n *\n * @since 3.0.0\n * @see __return_zero()\n * @return array Empty array\n *\/","file":"functions.php","line":3619,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"__return_null":{"doc":"\/**\n * Returns null.\n *\n * Useful for returning null to filters easily.\n *\n * @since 3.4.0\n * @return null\n *\/","file":"functions.php","line":3631,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"send_nosniff_header":{"doc":"\/**\n * Send a HTTP header to disable content type sniffing in browsers which support it.\n *\n * @link http:\/\/blogs.msdn.com\/ie\/archive\/2008\/07\/02\/ie8-security-part-v-comprehensive-protection.aspx\n * @link http:\/\/src.chromium.org\/viewvc\/chrome?view=rev&revision=6985\n *\n * @since 3.0.0\n * @return none\n *\/","file":"functions.php","line":3644,"missingDoc":false,"filters":[],"uses":{"header":[3645]},"used_by":[]},"_wp_mysql_week":{"doc":"\/**\n * Returns a MySQL expression for selecting the week number based on the start_of_week option.\n *\n * @internal\n * @since 3.0.0\n * @param string $column\n * @return string\n *\/","file":"functions.php","line":3656,"missingDoc":false,"filters":[],"uses":{"get_option":[3657]},"used_by":{"wp_get_archives":[987],"WP_Query::get_posts":[2151]}},"wp_find_hierarchy_loop":{"doc":"\/**\n * Finds hierarchy loops using a callback function that maps object IDs to parent IDs.\n *\n * @since 3.1.0\n * @access private\n *\n * @param callback $callback function that accepts ( ID, $callback_args ) and outputs parent_ID\n * @param int $start The ID to start the loop check at\n * @param int $start_parent the parent_ID of $start to use instead of calling $callback( $start ). Use null to always use $callback\n * @param array $callback_args optional additional arguments to send to $callback\n * @return array IDs of all members of loop\n *\/","file":"functions.php","line":3684,"missingDoc":false,"filters":[],"uses":{"is_null":[3685],"wp_find_hierarchy_loop_tortoise_hare":[3687,3690]},"used_by":{"wp_check_post_hierarchy_for_loops":[5302],"wp_check_term_hierarchy_for_loops":[3289]}},"wp_find_hierarchy_loop_tortoise_hare":{"doc":"\/**\n * Uses the \"The Tortoise and the Hare\" algorithm to detect loops.\n *\n * For every step of the algorithm, the hare takes two steps and the tortoise one.\n * If the hare ever laps the tortoise, there must be a loop.\n *\n * @since 3.1.0\n * @access private\n *\n * @param callback $callback function that accepts ( ID, callback_arg, ... ) and outputs parent_ID\n * @param int $start The ID to start the loop check at\n * @param array $override an array of ( ID => parent_ID, ... ) to use instead of $callback\n * @param array $callback_args optional additional arguments to send to $callback\n * @param bool $_return_loop Return loop members or just detect presence of loop?\n *             Only set to true if you already know the given $start is part of a loop\n *             (otherwise the returned array might include branches)\n * @return mixed scalar ID of some arbitrary member of the loop, or array of IDs of all members of loop if $_return_loop\n *\/","file":"functions.php","line":3711,"missingDoc":false,"filters":[],"uses":{"call_user_func_array":[3720,3722,3732],"array_merge":[3720,3722,3732]},"used_by":{"wp_find_hierarchy_loop":[3687,3690]}},"send_frame_options_header":{"doc":"\/**\n * Send a HTTP header to limit rendering of pages to same origin iframes.\n *\n * @link https:\/\/developer.mozilla.org\/en\/the_x-frame-options_response_header\n *\n * @since 3.1.3\n * @return none\n *\/","file":"functions.php","line":3746,"missingDoc":false,"filters":[],"uses":{"header":[3747]},"used_by":[]},"wp_debug_backtrace_summary":{"doc":"\/**\n * Return a comma separated string of functions that have been called to get to the current point in code.\n *\n * @link http:\/\/core.trac.wordpress.org\/ticket\/19589\n * @since 3.4\n *\n * @param string $ignore_class A class to ignore all function calls within - useful when you want to just give info about the callee\n * @param int $skip_frames A number of stack frames to skip - useful for unwinding back to the source of the issue\n * @param bool $pretty Whether or not you want a comma separated string or raw array returned\n * @return string|array Either a string containing a reversed comma separated trace or an array of individual calls.\n *\/","file":"functions.php","line":3781,"missingDoc":false,"filters":[],"uses":{"debug_backtrace":[3783,3785],"version_compare":[3782],"is_null":[3788],"in_array":[3802,3800],"str_replace":[3803],"join":[3810],"array_reverse":[3810]},"used_by":{"wpdb::get_caller":[1724]}},"_get_non_cached_ids":{"doc":"\/**\n * Retrieve ids that are not already present in the cache\n *\n * @since 3.4.0\n *\n * @param array $object_ids ID list\n * @param string $cache_key The cache bucket to check against\n *\n * @return array\n *\/","file":"functions.php","line":3825,"missingDoc":false,"filters":[],"uses":{"wp_cache_get":[3829]},"used_by":{"cache_users":[159],"_prime_post_caches":[5555]}},"wp_checkdate":{"doc":"\/**\n * Test if the supplied date is valid for the Gregorian calendar\n *\n * @since 3.5.0\n *\n * @return bool true|false\n *\/","file":"functions.php","line":3880,"missingDoc":false,"filters":["'wp_checkdate'"],"uses":{"checkdate":[3881]},"used_by":{"wp_insert_post":[2794]}},"wp_print_scripts":{"doc":"\/**\n * Prints script tags in document head.\n *\n * Called by admin-header.php and by wp_head hook. Since it is called by wp_head\n * on every page load, the function does not instantiate the WP_Scripts object\n * unless script names are explicitly passed. Does make use of already\n * instantiated $wp_scripts if present. Use provided wp_print_scripts hook to\n * register\/enqueue new scripts.\n *\n * @since r16\n * @see WP_Dependencies::print_scripts()\n *\/","file":"functions.wp-scripts.php","line":21,"missingDoc":false,"filters":["'wp_print_scripts'"],"uses":{"_doing_it_wrong":[29],"sprintf":[29],"__":[29],"did_action":[28],"is_a":[27],"do_items":[38]},"used_by":[]},"wp_register_script":{"doc":"\/**\n * Register new Javascript file.\n *\n * @since r16\n * @param string $handle Script name\n * @param string $src Script url\n * @param array $deps (optional) Array of script names on which this script depends\n * @param string|bool $ver (optional) Script version (used for cache busting), set to null to disable\n * @param bool $in_footer (optional) Whether to enqueue the script before <\/head> or before <\/body>\n * @return null\n *\/","file":"functions.wp-scripts.php","line":52,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[56],"sprintf":[56],"__":[56],"did_action":[55],"is_a":[54],"add":[61],"add_data":[63]},"used_by":[]},"wp_localize_script":{"doc":"\/**\n * Wrapper for $wp_scripts->localize().\n *\n * Used to localizes a script.\n * Works only if the script has already been added.\n * Accepts an associative array $l10n and creates JS object:\n * \"$object_name\" = {\n *   key: value,\n *   key: value,\n *   ...\n * }\n * See http:\/\/core.trac.wordpress.org\/ticket\/11520 for more information.\n *\n * @since r16\n *\n * @param string $handle The script handle that was registered or used in script-loader\n * @param string $object_name Name for the created JS object. This is passed directly so it should be qualified JS variable \/[a-zA-Z0-9_]+\/\n * @param array $l10n Associative PHP array containing the translated strings. HTML entities will be converted and the array will be JSON encoded.\n * @return bool Whether the localization was added successfully.\n *\/","file":"functions.wp-scripts.php","line":86,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[90],"sprintf":[90],"__":[90],"did_action":[89],"is_a":[88],"localize":[96]},"used_by":{"wp_enqueue_media":[1540],"wp_just_in_time_script_localization":[577]}},"wp_deregister_script":{"doc":"\/**\n * Remove a registered script.\n *\n * @since r16\n * @see WP_Scripts::remove() For parameter information.\n *\/","file":"functions.wp-scripts.php","line":105,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[109],"sprintf":[109],"__":[109],"did_action":[108],"is_a":[107],"remove":[114]},"used_by":[]},"wp_dequeue_script":{"doc":"\/**\n * Remove an enqueued script.\n *\n * @since WP 3.1\n * @see WP_Scripts::dequeue() For parameter information.\n *\/","file":"functions.wp-scripts.php","line":149,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[153],"sprintf":[153],"__":[153],"did_action":[152],"is_a":[151],"dequeue":[158]},"used_by":[]},"wp_script_is":{"doc":"\/**\n * Check whether script has been added to WordPress Scripts.\n *\n * By default, checks if the script has been enqueued. You can also\n * pass 'registered' to $list, to see if the script is registered,\n * and you can check processing statuses with 'to_do' and 'done'.\n *\n * @since WP unknown; BP unknown\n *\n * @param string $handle Name of the script.\n * @param string $list Optional. Defaults to 'enqueued'. Values are\n * \t'registered', 'enqueued' (or 'queue'), 'to_do', and 'done'.\n * @return bool Whether script is in the list.\n *\/","file":"functions.wp-scripts.php","line":175,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[179],"sprintf":[179],"__":[179],"did_action":[178],"is_a":[177],"query":[184]},"used_by":[]},"wp_add_inline_style":{"doc":"\/**\n * Adds extra CSS.\n *\n * Works only if the stylesheet has already been added.\n * Accepts a string $data containing the CSS. If two or more CSS code blocks are\n * added to the same stylesheet $handle, they will be printed in the order\n * they were added, i.e. the latter added styles can redeclare the previous.\n *\n * @since 3.3.0\n * @see WP_Scripts::add_inline_style()\n *\/","file":"functions.wp-styles.php","line":53,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[57],"sprintf":[57],"__":[57],"did_action":[56],"is_a":[55],"add_inline_style":[62]},"used_by":[]},"wp_register_style":{"doc":"\/**\n * Register CSS style file.\n *\n * @since r79\n * @see WP_Styles::add() For additional information.\n * @global object $wp_styles The WP_Styles object for printing styles.\n * @link http:\/\/www.w3.org\/TR\/CSS2\/media.html#media-types List of CSS media types.\n *\n * @param string $handle Name of the stylesheet.\n * @param string|bool $src Path to the stylesheet from the root directory of WordPress. Example: '\/css\/mystyle.css'.\n * @param array $deps Array of handles of any stylesheet that this stylesheet depends on.\n *  (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies.\n * @param string|bool $ver String specifying the stylesheet version number. Set to null to disable.\n *  Used to ensure that the correct version is sent to the client regardless of caching.\n * @param string $media The media for which this stylesheet has been defined.\n *\/","file":"functions.wp-styles.php","line":81,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[85],"sprintf":[85],"__":[85],"did_action":[84],"is_a":[83],"add":[90]},"used_by":[]},"wp_deregister_style":{"doc":"\/**\n * Remove a registered CSS file.\n *\n * @since r79\n * @see WP_Styles::remove() For additional information.\n * @global object $wp_styles The WP_Styles object for printing styles.\n *\n * @param string $handle Name of the stylesheet.\n *\/","file":"functions.wp-styles.php","line":102,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[106],"sprintf":[106],"__":[106],"did_action":[105],"is_a":[104],"remove":[111]},"used_by":[]},"wp_dequeue_style":{"doc":"\/**\n * Remove an enqueued style.\n *\n * @since WP 3.1\n * @see WP_Styles::dequeue() For parameter information.\n *\/","file":"functions.wp-styles.php","line":155,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[159],"sprintf":[159],"__":[159],"did_action":[158],"is_a":[157],"dequeue":[164]},"used_by":[]},"wp_style_is":{"doc":"\/**\n * Check whether style has been added to WordPress Styles.\n *\n * By default, checks if the style has been enqueued. You can also\n * pass 'registered' to $list, to see if the style is registered,\n * and you can check processing statuses with 'to_do' and 'done'.\n *\n * @since WP unknown; BP unknown\n * @global object $wp_styles The WP_Styles object for printing styles.\n *\n * @param string $handle Name of the stylesheet.\n * @param string $list Optional. Defaults to 'enqueued'. Values are\n * \t'registered', 'enqueued' (or 'queue'), 'to_do', and 'done'.\n * @return bool Whether style is in the list.\n *\/","file":"functions.wp-styles.php","line":182,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[186],"sprintf":[186],"__":[186],"did_action":[185],"is_a":[184],"query":[191]},"used_by":[]},"get_header":{"doc":"\/**\n * Load header template.\n *\n * Includes the header template for a theme or if a name is specified then a\n * specialised header will be included.\n *\n * For the parameter, if the file is called \"header-special.php\" then specify\n * \"special\".\n *\n * @uses locate_template()\n * @since 1.5.0\n * @uses do_action() Calls 'get_header' action.\n *\n * @param string $name The name of the specialised header.\n *\/","file":"general-template.php","line":24,"missingDoc":false,"filters":["'get_header'"],"uses":{"load_template":[35],"locate_template":[34]},"used_by":{"Gettext_Translations::gettext_select_plural_form":[145],"Gettext_Translations::set_header":[222]}},"locate_template":{"doc":"\/**\n * Retrieve the name of the highest priority template file that exists.\n *\n * Searches in the STYLESHEETPATH before TEMPLATEPATH so that themes which\n * inherit from a parent theme can just overload one file.\n *\n * @since 2.7.0\n * @uses apply_filters() Calls 'locate_template' filter on array of template names.\n *\n * @param string|array $template_names Template file(s) to search for, in order.\n * @param bool $load If true the template file will be loaded if it is found.\n * @param bool $require_once Whether to require_once or require. Default true. Has no effect if $load is false.\n * @return string The template filename if one is located.\n *\/","file":"template.php","line":369,"missingDoc":false,"filters":["'locate_template'"],"uses":{"file_exists":[382,379,376],"path_is_absolute":[376],"load_template":[389]},"used_by":{"get_header":[34],"get_footer":[63],"get_sidebar":[92],"get_template_part":[128],"get_search_form":[155],"get_query_template":[29]}},"get_footer":{"doc":"\/**\n * Load footer template.\n *\n * Includes the footer template for a theme or if a name is specified then a\n * specialised footer will be included.\n *\n * For the parameter, if the file is called \"footer-special.php\" then specify\n * \"special\".\n *\n * @uses locate_template()\n * @since 1.5.0\n * @uses do_action() Calls 'get_footer' action.\n *\n * @param string $name The name of the specialised footer.\n *\/","file":"general-template.php","line":53,"missingDoc":false,"filters":["'get_footer'"],"uses":{"load_template":[64],"locate_template":[63]},"used_by":[]},"get_sidebar":{"doc":"\/**\n * Load sidebar template.\n *\n * Includes the sidebar template for a theme or if a name is specified then a\n * specialised sidebar will be included.\n *\n * For the parameter, if the file is called \"sidebar-special.php\" then specify\n * \"special\".\n *\n * @uses locate_template()\n * @since 1.5.0\n * @uses do_action() Calls 'get_sidebar' action.\n *\n * @param string $name The name of the specialised sidebar.\n *\/","file":"general-template.php","line":82,"missingDoc":false,"filters":["'get_sidebar'"],"uses":{"load_template":[93],"locate_template":[92]},"used_by":[]},"get_template_part":{"doc":"\/**\n * Load a template part into a template\n *\n * Makes it easy for a theme to reuse sections of code in a easy to overload way\n * for child themes.\n *\n * Includes the named template part for a theme or if a name is specified then a\n * specialised part will be included. If the theme contains no {slug}.php file\n * then no template will be included.\n *\n * The template is included using require, not require_once, so you may include the\n * same template part multiple times.\n *\n * For the $name parameter, if the file is called \"{slug}-special.php\" then specify\n * \"special\".\n *\n * @uses locate_template()\n * @since 3.0.0\n * @uses do_action() Calls 'get_template_part_{$slug}' action.\n *\n * @param string $slug The slug name for the generic template.\n * @param string $name The name of the specialised template.\n *\/","file":"general-template.php","line":119,"missingDoc":false,"filters":["\"get_template_part_{$slug}\""],"uses":{"locate_template":[128]},"used_by":[]},"wp_login_form":{"doc":"\/**\n * Provides a simple login form for use anywhere within WordPress. By default, it echoes\n * the HTML immediately. Pass array('echo'=>false) to return the string instead.\n *\n * @since 3.0.0\n * @param array $args Configuration options to modify the form output.\n * @return string|null String when retrieving, null when displaying.\n *\/","file":"general-template.php","line":257,"missingDoc":false,"filters":["'login_form_defaults'","'login_form_top'","'login_form_middle'","'login_form_bottom'"],"uses":{"is_ssl":[259],"__":[261,262,263,264],"wp_parse_args":[273],"esc_url":[276,290],"site_url":[276],"esc_attr":[279,280,280,283,284,287,289,289],"esc_html":[279,283,287]},"used_by":[]},"wp_lostpassword_url":{"doc":"\/**\n * Returns the Lost Password URL.\n *\n * Returns the URL that allows the user to retrieve the lost password\n *\n * @since 2.8.0\n * @uses site_url() To generate the lost password URL\n * @uses apply_filters() calls 'lostpassword_url' hook on the lostpassword url\n *\n * @param string $redirect Path to redirect to on login.\n * @return string Lost password URL.\n *\/","file":"general-template.php","line":313,"missingDoc":false,"filters":["'lostpassword_url'"],"uses":{"add_query_arg":[319],"network_site_url":[319]},"used_by":{"wp_authenticate_username_password":[90,111]}},"get_stylesheet_uri":{"doc":"\/**\n * Retrieve URI of current theme stylesheet.\n *\n * The stylesheet file name is 'style.css' which is appended to {@link\n * get_stylesheet_directory_uri() stylesheet directory URI} path.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'stylesheet_uri' filter on stylesheet URI path and stylesheet directory URI.\n *\n * @return string\n *\/","file":"theme.php","line":192,"missingDoc":false,"filters":["'stylesheet_uri'"],"uses":{"get_stylesheet_directory_uri":[193]},"used_by":{"get_bloginfo":[442]}},"single_post_title":{"doc":"\/**\n * Display or retrieve page title for post.\n *\n * This is optimized for single.php template file for displaying the post title.\n *\n * It does not support placing the separator after the title, but by leaving the\n * prefix parameter empty, you can set the title separator manually. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 0.71\n *\n * @param string $prefix Optional. What to display before the title.\n * @param bool $display Optional, default is true. Whether to display or retrieve title.\n * @return string|null Title when retrieving, null when displaying or failure.\n *\/","file":"general-template.php","line":628,"missingDoc":false,"filters":["'single_post_title'"],"uses":{"get_queried_object":[629]},"used_by":{"wp_title":[535]}},"single_term_title":{"doc":"\/**\n * Display or retrieve page title for taxonomy term archive.\n *\n * Useful for taxonomy term template files for displaying the taxonomy term page title.\n * It has less overhead than {@link wp_title()}, because of its limited implementation.\n *\n * It does not support placing the separator after the title, but by leaving the\n * prefix parameter empty, you can set the title separator manually. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 3.1.0\n *\n * @param string $prefix Optional. What to display before the title.\n * @param bool $display Optional, default is true. Whether to display or retrieve title.\n * @return string|null Title when retrieving, null when displaying or failure.\n *\/","file":"general-template.php","line":725,"missingDoc":false,"filters":["'single_cat_title'","'single_tag_title'","'single_term_title'"],"uses":{"get_queried_object":[726],"is_tag":[733],"is_tax":[735],"is_category":[731]},"used_by":{"wp_title":[540,547],"single_cat_title":[684],"single_tag_title":[705]}},"post_type_archive_title":{"doc":"\/**\n * Display or retrieve title for a post type archive.\n *\n * This is optimized for archive.php and archive-{$post_type}.php template files\n * for displaying the title of the post type.\n *\n * @since 3.1.0\n *\n * @param string $prefix Optional. What to display before the title.\n * @param bool $display Optional, default is true. Whether to display or retrieve title.\n * @return string|null Title when retrieving, null when displaying or failure.\n *\/","file":"general-template.php","line":653,"missingDoc":false,"filters":["'post_type_archive_title'"],"uses":{"is_post_type_archive":[654],"get_queried_object":[657]},"used_by":{"wp_title":[558],"feed_links_extra":[1667]}},"is_archive":{"doc":"\/**\n * Is the query for an existing archive page?\n *\n * Month, Year, Category, Author, Post Type archive...\n *\n * @see WP_Query::is_archive()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":139,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[143],"__":[143],"is_archive":[147]},"used_by":{"wp_title":[561,569],"get_body_class":[412,453],"is_archive":[147],"__main":[40]}},"single_cat_title":{"doc":"\/**\n * Display or retrieve page title for category archive.\n *\n * This is useful for category template file or files, because it is optimized\n * for category page title and with less overhead than {@link wp_title()}.\n *\n * It does not support placing the separator after the title, but by leaving the\n * prefix parameter empty, you can set the title separator manually. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 0.71\n *\n * @param string $prefix Optional. What to display before the title.\n * @param bool $display Optional, default is true. Whether to display or retrieve title.\n * @return string|null Title when retrieving, null when displaying or failure.\n *\/","file":"general-template.php","line":683,"missingDoc":false,"filters":[],"uses":{"single_term_title":[684]},"used_by":{"__main":[32]}},"single_tag_title":{"doc":"\/**\n * Display or retrieve page title for tag post archive.\n *\n * Useful for tag template files for displaying the tag page title. It has less\n * overhead than {@link wp_title()}, because of its limited implementation.\n *\n * It does not support placing the separator after the title, but by leaving the\n * prefix parameter empty, you can set the title separator manually. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 2.3.0\n *\n * @param string $prefix Optional. What to display before the title.\n * @param bool $display Optional, default is true. Whether to display or retrieve title.\n * @return string|null Title when retrieving, null when displaying or failure.\n *\/","file":"general-template.php","line":704,"missingDoc":false,"filters":[],"uses":{"single_term_title":[705]},"used_by":[]},"single_month_title":{"doc":"\/**\n * Display or retrieve page title for post archive based on date.\n *\n * Useful for when the template only needs to display the month and year, if\n * either are available. Optimized for just this purpose, so if it is all that\n * is needed, should be better than {@link wp_title()}.\n *\n * It does not support placing the separator after the title, but by leaving the\n * prefix parameter empty, you can set the title separator manually. The prefix\n * does not automatically place a space between the prefix, so if there should\n * be a space, the parameter value will need to have it at the end.\n *\n * @since 0.71\n *\n * @param string $prefix Optional. What to display before the title.\n * @param bool $display Optional, default is true. Whether to display or retrieve title.\n * @return string|null Title when retrieving, null when displaying or failure.\n *\/","file":"general-template.php","line":767,"missingDoc":false,"filters":[],"uses":{"get_query_var":[770,771,772],"get_month":[776,779],"substr":[778,779]},"used_by":[]},"get_archives_link":{"doc":"\/**\n * Retrieve archive link content based on predefined or custom code.\n *\n * The format can be one of four styles. The 'link' for head element, 'option'\n * for use in the select element, 'html' for use in list (either ol or ul HTML\n * elements). Custom content is also supported using the before and after\n * parameters.\n *\n * The 'link' format uses the link HTML element with the <em>archives<\/em>\n * relationship. The before and after parameters are not used. The text\n * parameter is used to describe the link.\n *\n * The 'option' format uses the option HTML element for use in select element.\n * The value is the url parameter and the before and after parameters are used\n * between the text description.\n *\n * The 'html' format, which is the default, uses the li HTML element for use in\n * the list HTML elements. The before parameter is before the link and the after\n * parameter is after the closing link.\n *\n * The custom format uses the before parameter before the link ('a' HTML\n * element) and the after parameter after the closing link tag. If the above\n * three values for the format are not used, then custom format is assumed.\n *\n * @since 1.0.0\n *\n * @param string $url URL to archive.\n * @param string $text Archive text description.\n * @param string $format Optional, default is 'html'. Can be 'link', 'option', 'html', or custom.\n * @param string $before Optional.\n * @param string $after Optional.\n * @return string HTML link content for archive.\n *\/","file":"general-template.php","line":825,"missingDoc":false,"filters":["'get_archives_link'"],"uses":{"wptexturize":[826],"esc_attr":[827],"esc_url":[828]},"used_by":{"wp_get_archives":[940,961,983,1012,1036]}},"calendar_week_mod":{"doc":"\/**\n * Get number of days since the start of the week.\n *\n * @since 1.5.0\n *\n * @param int $num Number of day.\n * @return int Days since the start of the week.\n *\/","file":"general-template.php","line":1055,"missingDoc":false,"filters":[],"uses":{"floor":[1057]},"used_by":{"get_calendar":[1232,1253,1257]}},"delete_get_calendar_cache":{"doc":"\/**\n * Purge the cached results of get_calendar.\n *\n * @see get_calendar\n * @since 2.1.0\n *\/","file":"general-template.php","line":1279,"missingDoc":false,"filters":[],"uses":{"wp_cache_delete":[1280]},"used_by":[]},"the_date_xml":{"doc":"\/**\n * Outputs the date in iso8601 format for xml files.\n *\n * @since 1.0.0\n *\/","file":"general-template.php","line":1320,"missingDoc":false,"filters":[],"uses":{"mysql2date":[1321],"get_post":[1321]},"used_by":[]},"the_date":{"doc":"\/**\n * Display or Retrieve the date the current $post was written (once per date)\n *\n * Will only output the date if the current post's date is different from the\n * previous one output.\n *\n * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the\n * function is called several times for each post.\n *\n * HTML output can be filtered with 'the_date'.\n * Date string output can be filtered with 'get_the_date'.\n *\n * @since 0.71\n * @uses get_the_date()\n * @param string $d Optional. PHP date format defaults to the date_format option if not specified.\n * @param string $before Optional. Output before the date.\n * @param string $after Optional. Output after the date.\n * @param bool $echo Optional, default is display. Whether to echo the date or return it.\n * @return string|null Null if displaying, string if retrieving.\n *\/","file":"general-template.php","line":1344,"missingDoc":false,"filters":["'the_date'"],"uses":{"get_the_date":[1349]},"used_by":[]},"the_modified_date":{"doc":"\/**\n * Display the date on which the post was last modified.\n *\n * @since 2.1.0\n *\n * @param string $d Optional. PHP date format defaults to the date_format option if not specified.\n * @param string $before Optional. Output before the date.\n * @param string $after Optional. Output after the date.\n * @param bool $echo Optional, default is display. Whether to echo the date or return it.\n * @return string|null Null if displaying, string if retrieving.\n *\/","file":"general-template.php","line":1398,"missingDoc":false,"filters":["'the_modified_date'"],"uses":{"get_the_modified_date":[1400]},"used_by":[]},"get_the_modified_date":{"doc":"\/**\n * Retrieve the date on which the post was last modified.\n *\n * @since 2.1.0\n *\n * @param string $d Optional. PHP date format. Defaults to the \"date_format\" option\n * @return string\n *\/","file":"general-template.php","line":1418,"missingDoc":false,"filters":["'get_the_modified_date'"],"uses":{"get_post_modified_time":[1420,1422],"get_option":[1420]},"used_by":{"the_modified_date":[1400]}},"the_time":{"doc":"\/**\n * Display the time at which the post was written.\n *\n * @since 0.71\n *\n * @param string $d Either 'G', 'U', or php date format.\n *\/","file":"general-template.php","line":1433,"missingDoc":false,"filters":["'the_time'"],"uses":{"get_the_time":[1434]},"used_by":[]},"get_the_time":{"doc":"\/**\n * Retrieve the time at which the post was written.\n *\n * @since 1.5.0\n *\n * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option.\n * @param int|object $post Optional post ID or object. Default is global $post object.\n * @return string\n *\/","file":"general-template.php","line":1446,"missingDoc":false,"filters":["'get_the_time'"],"uses":{"get_post":[1447],"get_post_time":[1450,1452],"get_option":[1450]},"used_by":{"the_time":[1434],"__main":[35,38,41]}},"the_modified_time":{"doc":"\/**\n * Display the time at which the post was last modified.\n *\n * @since 2.0.0\n *\n * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option.\n *\/","file":"general-template.php","line":1486,"missingDoc":false,"filters":["'the_modified_time'"],"uses":{"get_the_modified_time":[1487]},"used_by":[]},"get_the_modified_time":{"doc":"\/**\n * Retrieve the time at which the post was last modified.\n *\n * @since 2.0.0\n *\n * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option.\n * @return string\n *\/","file":"general-template.php","line":1498,"missingDoc":false,"filters":["'get_the_modified_time'"],"uses":{"get_post_modified_time":[1500,1502],"get_option":[1500]},"used_by":{"the_modified_time":[1487]}},"the_weekday":{"doc":"\/**\n * Display the weekday on which the post was written.\n *\n * @since 0.71\n * @uses $wp_locale\n * @uses $post\n *\/","file":"general-template.php","line":1536,"missingDoc":false,"filters":["'the_weekday'"],"uses":{"get_weekday":[1538],"mysql2date":[1538],"get_post":[1538]},"used_by":[]},"the_weekday_date":{"doc":"\/**\n * Display the weekday on which the post was written.\n *\n * Will only output the weekday if the current post's weekday is different from\n * the previous one output.\n *\n * @since 0.71\n *\n * @param string $before Optional Output before the date.\n * @param string $after Optional Output after the date.\n *\/","file":"general-template.php","line":1554,"missingDoc":false,"filters":["'the_weekday_date'"],"uses":{"get_weekday":[1559],"mysql2date":[1559],"get_post":[1559]},"used_by":[]},"wp_head":{"doc":"\/**\n * Fire the wp_head action\n *\n * @since 1.2.0\n * @uses do_action() Calls 'wp_head' hook.\n *\/","file":"general-template.php","line":1573,"missingDoc":false,"filters":["'wp_head'"],"uses":[],"used_by":{"__main":[38]}},"wp_footer":{"doc":"\/**\n * Fire the wp_footer action\n *\n * @since 1.5.1\n * @uses do_action() Calls 'wp_footer' hook.\n *\/","file":"general-template.php","line":1583,"missingDoc":false,"filters":["'wp_footer'"],"uses":[],"used_by":{"__main":[28]}},"feed_links":{"doc":"\/**\n * Display the links to the general feeds.\n *\n * @since 2.8.0\n *\n * @param array $args Optional arguments.\n *\/","file":"general-template.php","line":1594,"missingDoc":false,"filters":[],"uses":{"current_theme_supports":[1595],"_x":[1600],"__":[1602,1604],"wp_parse_args":[1607],"feed_content_type":[1609,1610],"esc_attr":[1609,1610],"sprintf":[1609,1610],"get_bloginfo":[1609,1610],"get_feed_link":[1609,1610],"get_default_feed":[1610]},"used_by":[]},"feed_links_extra":{"doc":"\/**\n * Display the links to the extra feeds such as category feeds.\n *\n * @since 2.8.0\n *\n * @param array $args Optional arguments.\n *\/","file":"general-template.php","line":1620,"missingDoc":false,"filters":[],"uses":{"_x":[1623],"__":[1625,1627,1629,1631,1633,1635],"wp_parse_args":[1638],"get_post":[1642],"sprintf":[1645,1651,1656,1661,1664,1667],"get_bloginfo":[1645,1651,1656,1661,1664,1667],"esc_html":[1645],"get_the_title":[1645],"get_post_comments_feed_link":[1646],"comments_open":[1644],"pings_open":[1644],"is_category":[1648],"get_queried_object":[1649,1654,1668],"get_category_feed_link":[1652],"is_tag":[1653],"get_tag_feed_link":[1657],"is_author":[1658],"intval":[1659],"get_query_var":[1659],"get_the_author_meta":[1661],"get_author_feed_link":[1662],"is_search":[1663],"get_search_query":[1664],"get_search_feed_link":[1665],"is_post_type_archive":[1666],"post_type_archive_title":[1667],"get_post_type_archive_feed_link":[1668],"is_single":[1640],"is_page":[1640],"feed_content_type":[1672],"esc_attr":[1672],"esc_url":[1672]},"used_by":[]},"get_search_feed_link":{"doc":"\/**\n * Retrieve the permalink for the feed of the search results.\n *\n * @since 2.5.0\n *\n * @param string $search_query Optional. Search query.\n * @param string $feed Optional. Feed type.\n * @return string\n *\/","file":"link-template.php","line":774,"missingDoc":false,"filters":["'search_feed_link'"],"uses":{"get_search_link":[776],"get_default_feed":[779],"get_search_permastruct":[781],"add_query_arg":[784],"trailingslashit":[786]},"used_by":{"feed_links_extra":[1665],"get_search_comments_feed_link":[810]}},"get_post_type_archive_feed_link":{"doc":"\/**\n * Retrieve the permalink for a post type archive feed.\n *\n * @since 3.1.0\n *\n * @param string $post_type Post type\n * @param string $feed Optional. Feed type\n * @return string\n *\/","file":"link-template.php","line":863,"missingDoc":false,"filters":["'post_type_archive_feed_link'"],"uses":{"get_default_feed":[864],"get_post_type_archive_link":[868],"get_post_type_object":[870],"trailingslashit":[872],"add_query_arg":[877],"get_option":[871]},"used_by":{"feed_links_extra":[1668]}},"rsd_link":{"doc":"\/**\n * Display the link to the Really Simple Discovery service endpoint.\n *\n * @link http:\/\/archipelago.phrasewise.com\/rsd\n * @since 2.0.0\n *\/","file":"general-template.php","line":1681,"missingDoc":false,"filters":[],"uses":{"get_bloginfo":[1682]},"used_by":[]},"wlwmanifest_link":{"doc":"\/**\n * Display the link to the Windows Live Writer manifest file.\n *\n * @link http:\/\/msdn.microsoft.com\/en-us\/library\/bb463265.aspx\n * @since 2.3.1\n *\/","file":"general-template.php","line":1691,"missingDoc":false,"filters":[],"uses":{"get_bloginfo":[1693]},"used_by":[]},"noindex":{"doc":"\/**\n * Display a noindex meta tag if required by the blog configuration.\n *\n * If a blog is marked as not being public then the noindex meta tag will be\n * output to tell web robots not to index the page content. Add this to the wp_head action.\n * Typical usage is as a wp_head callback. add_action( 'wp_head', 'noindex' );\n *\n * @see wp_no_robots\n *\n * @since 2.1.0\n *\/","file":"general-template.php","line":1707,"missingDoc":false,"filters":[],"uses":{"wp_no_robots":[1710],"get_option":[1709]},"used_by":[]},"wp_no_robots":{"doc":"\/**\n * Display a noindex meta tag.\n *\n * Outputs a noindex meta tag that tells web robots not to index the page content.\n * Typical usage is as a wp_head callback. add_action( 'wp_head', 'wp_no_robots' );\n *\n * @since 3.3.0\n *\/","file":"general-template.php","line":1721,"missingDoc":false,"filters":[],"uses":[],"used_by":{"noindex":[1710]}},"rich_edit_exists":{"doc":"\/**\n * Determine if TinyMCE is available.\n *\n * Checks to see if the user has deleted the tinymce files to slim down there WordPress install.\n *\n * @since 2.1.0\n *\n * @return bool Whether TinyMCE exists.\n *\/","file":"general-template.php","line":1734,"missingDoc":false,"filters":[],"uses":{"file_exists":[1737]},"used_by":[]},"the_search_query":{"doc":"\/**\n * Display the contents of the search query variable.\n *\n * The search query string is passed through {@link esc_attr()}\n * to ensure that it is safe for placing in an html attribute.\n *\n * @uses esc_attr()\n * @since 2.1.0\n *\/","file":"general-template.php","line":1843,"missingDoc":false,"filters":["'the_search_query'"],"uses":{"esc_attr":[1844],"get_search_query":[1844]},"used_by":[]},"paginate_links":{"doc":"\/**\n * Retrieve paginated link for archive post pages.\n *\n * Technically, the function can be used to create paginated link list for any\n * area. The 'base' argument is used to reference the url, which will be used to\n * create the paginated links. The 'format' argument is then used for replacing\n * the page number. It is however, most likely and by default, to be used on the\n * archive post pages.\n *\n * The 'type' argument controls format of the returned value. The default is\n * 'plain', which is just a string with the links separated by a newline\n * character. The other possible values are either 'array' or 'list'. The\n * 'array' value will return an array of the paginated link list to offer full\n * control of display. The 'list' value will place all of the paginated links in\n * an unordered HTML list.\n *\n * The 'total' argument is the total amount of pages and is an integer. The\n * 'current' argument is the current page number and is also an integer.\n *\n * An example of the 'base' argument is \"http:\/\/example.com\/all_posts.php%_%\"\n * and the '%_%' is required. The '%_%' will be replaced by the contents of in\n * the 'format' argument. An example for the 'format' argument is \"?page=%#%\"\n * and the '%#%' is also required. The '%#%' will be replaced with the page\n * number.\n *\n * You can include the previous and next links in the list by setting the\n * 'prev_next' argument to true, which it is by default. You can set the\n * previous text, by using the 'prev_text' argument. You can set the next text\n * by setting the 'next_text' argument.\n *\n * If the 'show_all' argument is set to true, then it will show all of the pages\n * instead of a short list of the pages near the current page. By default, the\n * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size'\n * arguments. The 'end_size' argument is how many numbers on either the start\n * and the end list edges, by default is 1. The 'mid_size' argument is how many\n * numbers to either side of current page, but not including current page.\n *\n * It is possible to add query vars to the link by using the 'add_args' argument\n * and see {@link add_query_arg()} for more information.\n *\n * @since 2.1.0\n *\n * @param string|array $args Optional. Override defaults.\n * @return array|string String of page links or array of page links.\n *\/","file":"general-template.php","line":1922,"missingDoc":false,"filters":["'paginate_links'","'paginate_links'","'paginate_links'"],"uses":{"__":[1930,1931,1978],"wp_parse_args":[1939],"extract":[1940],"is_array":[1949],"str_replace":[1956,1957,1970,1971,1984,1985],"add_query_arg":[1959,1973,1987],"esc_url":[1961,1975,1989],"number_format_i18n":[1964],"join":[1997,2001]},"used_by":{"paginate_comments_links":[1828]}},"wp_admin_css_color":{"doc":"\/**\n * Registers an admin colour scheme css file.\n *\n * Allows a plugin to register a new admin colour scheme. For example:\n * <code>\n * wp_admin_css_color('classic', __('Classic'), admin_url(\"css\/colors-classic.css\"),\n * array('#07273E', '#14568A', '#D54E21', '#2683AE'));\n * <\/code>\n *\n * @since 2.5.0\n *\n * @param string $key The unique key for this theme.\n * @param string $name The name of the theme.\n * @param string $url The url of the css file containing the colour scheme.\n * @param array $colors Optional An array of CSS color definitions which are used to give the user a feel for the theme.\n *\/","file":"general-template.php","line":2023,"missingDoc":false,"filters":[],"uses":[],"used_by":{"register_admin_color_schemes":[2038,2040]}},"register_admin_color_schemes":{"doc":"\/**\n * Registers the default Admin color schemes\n *\n * @since 3.0.0\n *\/","file":"general-template.php","line":2037,"missingDoc":false,"filters":[],"uses":{"wp_admin_css_color":[2038,2040],"_x":[2038,2040],"admin_url":[2038,2040]},"used_by":[]},"wp_admin_css_uri":{"doc":"\/**\n * Display the URL of a WordPress admin CSS file.\n *\n * @see WP_Styles::_css_href and its style_loader_src filter.\n *\n * @since 2.3.0\n *\n * @param string $file file relative to wp-admin\/ without its \".css\" extension.\n *\/","file":"general-template.php","line":2053,"missingDoc":false,"filters":["'wp_admin_css_uri'"],"uses":{"admin_url":[2057],"defined":[2054],"add_query_arg":[2059],"get_bloginfo":[2059]},"used_by":{"wp_admin_css":[2102,2104]}},"wp_admin_css":{"doc":"\/**\n * Enqueues or directly prints a stylesheet link to the specified CSS file.\n *\n * \"Intelligently\" decides to enqueue or to print the CSS file. If the\n * 'wp_print_styles' action has *not* yet been called, the CSS file will be\n * enqueued. If the wp_print_styles action *has* been called, the CSS link will\n * be printed. Printing may be forced by passing true as the $force_echo\n * (second) parameter.\n *\n * For backward compatibility with WordPress 2.3 calling method: If the $file\n * (first) parameter does not correspond to a registered CSS file, we assume\n * $file is a file relative to wp-admin\/ without its \".css\" extension. A\n * stylesheet link to that generated URL is printed.\n *\n * @package WordPress\n * @since 2.3.0\n * @uses $wp_styles WordPress Styles Object\n *\n * @param string $file Optional. Style handle name or file name (without \".css\" extension) relative\n * \t to wp-admin\/. Defaults to 'wp-admin'.\n * @param bool $force_echo Optional. Force the stylesheet link to be printed rather than enqueued.\n *\/","file":"general-template.php","line":2086,"missingDoc":false,"filters":["'wp_admin_css'","'wp_admin_css'"],"uses":{"is_a":[2088],"strpos":[2092],"substr":[2092],"wp_print_styles":[2096],"wp_enqueue_style":[2098],"did_action":[2095],"query":[2094],"esc_url":[2102,2104],"wp_admin_css_uri":[2102,2104],"function_exists":[2103],"is_rtl":[2103]},"used_by":{"__main":[19]}},"wp_generator":{"doc":"\/**\n * Display the XHTML generator that is generated on the wp_head hook.\n *\n * @since 2.5.0\n *\/","file":"general-template.php","line":2129,"missingDoc":false,"filters":["'wp_generator_type'"],"uses":{"the_generator":[2130]},"used_by":[]},"the_generator":{"doc":"\/**\n * Display the generator XML or Comment for RSS, ATOM, etc.\n *\n * Returns the correct generator type for the requested output format. Allows\n * for a plugin to filter generators overall the the_generator filter.\n *\n * @since 2.5.0\n * @uses apply_filters() Calls 'the_generator' hook.\n *\n * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export).\n *\/","file":"general-template.php","line":2144,"missingDoc":false,"filters":["'the_generator'"],"uses":{"get_the_generator":[2145]},"used_by":{"wp_generator":[2130]}},"get_the_generator":{"doc":"\/**\n * Creates the generator XML or Comment for RSS, ATOM, etc.\n *\n * Returns the correct generator type for the requested output format. Allows\n * for a plugin to filter generators on an individual basis using the\n * 'get_the_generator_{$type}' filter.\n *\n * @since 2.5.0\n * @uses apply_filters() Calls 'get_the_generator_$type' hook.\n *\n * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export).\n * @return string The HTML content for the generator.\n *\/","file":"general-template.php","line":2161,"missingDoc":false,"filters":["\"get_the_generator_{$type}\""],"uses":{"current_filter":[2164],"get_bloginfo":[2190,2193,2205],"get_bloginfo_rss":[2196,2199,2202,2208],"date":[2208]},"used_by":{"the_generator":[2145]}},"__checked_selected_helper":{"doc":"\/**\n * Private helper function for checked, selected, and disabled.\n *\n * Compares the first two arguments and if identical marks as $type\n *\n * @since 2.8.0\n * @access private\n *\n * @param mixed $helper One of the values to compare\n * @param mixed $current (true) The other value to compare if not just true\n * @param bool $echo Whether to echo or just return the string\n * @param string $type The type of checked|selected|disabled we are doing\n * @return string html attribute or empty string\n *\/","file":"general-template.php","line":2276,"missingDoc":false,"filters":[],"uses":[],"used_by":{"checked":[2227],"selected":[2243],"disabled":[2259]}},"disabled":{"doc":"\/**\n * Outputs the html disabled attribute.\n *\n * Compares the first two arguments and if identical marks as disabled\n *\n * @since 3.0.0\n *\n * @param mixed $disabled One of the values to compare\n * @param mixed $current (true) The other value to compare if not just true\n * @param bool $echo Whether to echo or just return the string\n * @return string html attribute or empty string\n *\/","file":"general-template.php","line":2258,"missingDoc":false,"filters":[],"uses":{"__checked_selected_helper":[2259]},"used_by":[]},"_wp_http_get_object":{"doc":"\/**\n * Returns the initialized WP_Http Object\n *\n * @since 2.7.0\n * @access private\n *\n * @return WP_Http HTTP Transport object.\n *\/","file":"http.php","line":22,"missingDoc":false,"filters":[],"uses":{"is_null":[25]},"used_by":{"wp_remote_request":[59],"wp_remote_get":[75],"wp_remote_post":[91],"wp_remote_head":[107],"wp_http_supports":[205]}},"wp_remote_retrieve_response_message":{"doc":"\/**\n * Retrieve only the response message from the raw response.\n *\n * Will return an empty array if incorrect parameter value is given.\n *\n * @since 2.7.0\n *\n * @param array $response HTTP response.\n * @return string The response message. Empty string on incorrect parameter given.\n *\/","file":"http.php","line":172,"missingDoc":false,"filters":[],"uses":{"is_wp_error":[173],"is_array":[173]},"used_by":[]},"wp_http_supports":{"doc":"\/**\n * Determines if there is an HTTP Transport that can process this request.\n *\n * @since 3.2.0\n *\n * @param array  $capabilities Array of capabilities to test or a wp_remote_request() $args array.\n * @param string $url Optional. If given, will check if the URL requires SSL and adds that requirement to the capabilities array.\n *\n * @return bool\n *\/","file":"http.php","line":204,"missingDoc":false,"filters":[],"uses":{"_wp_http_get_object":[205],"wp_parse_args":[207],"count":[209,212],"array_combine":[213],"array_values":[213],"array_fill":[213],"array_filter":[212],"array_keys":[212],"parse_url":[217],"_get_first_available_transport":[223]},"used_by":[]},"get_http_origin":{"doc":"\/**\n * Get the HTTP Origin of the current request.\n *\n * @since 3.4.0\n *\n * @return string URL of the origin. Empty string if no origin.\n *\/","file":"http.php","line":233,"missingDoc":false,"filters":["'http_origin'"],"uses":[],"used_by":{"is_allowed_http_origin":[275],"send_origin_headers":[297]}},"get_allowed_http_origins":{"doc":"\/**\n * Retrieve list of allowed http origins.\n *\n * @since 3.4.0\n *\n * @return array Array of origin URLs.\n *\/","file":"http.php","line":248,"missingDoc":false,"filters":["'allowed_http_origins'"],"uses":{"parse_url":[249,250],"admin_url":[249],"home_url":[250],"array_unique":[253]},"used_by":{"is_allowed_http_origin":[277]}},"is_allowed_http_origin":{"doc":"\/**\n * Determines if the http origin is an authorized one.\n *\n * @since 3.4.0\n *\n * @param string Origin URL. If not provided, the value of get_http_origin() is used.\n * @return bool True if the origin is allowed. False otherwise.\n *\/","file":"http.php","line":271,"missingDoc":false,"filters":["'allowed_http_origin'"],"uses":{"get_http_origin":[275],"in_array":[277],"get_allowed_http_origins":[277]},"used_by":{"send_origin_headers":[299]}},"mce_escape":{"doc":"","file":"js\/tinymce\/langs\/wp-langs.php","line":10,"missingDoc":true,"filters":[],"uses":{"esc_js":[11]},"used_by":[]},"wp_mce_translation":{"doc":"","file":"js\/tinymce\/langs\/wp-langs.php","line":14,"missingDoc":true,"filters":[],"uses":{"__":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,89,90,91,92,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,96,96,96,96,96,96,96,100,104,108,109,113,114,115,116,117,121,122,126,130,131,135,139,143,144,148,152,156,157,158,159,160,161,165,169,170,171,172,173,177,178,179,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,206,210,214,215,219,223,227,231,232,233,234,235,236,237,238,239,240,244,248,249,250,251,252,253,254,255,256,257,261,265,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,391,392,393,394,395,396,397,398,399,400,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,501,502,503,504,505,506,507,508,509,510,511,512,513,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549],"_x":[357,401],"json_encode":[554,555,556,557,558,559]},"used_by":{"__main":[564]}},"EnchantSpell::checkWords":{"doc":"\/**\n * Spellchecks an array of words.\n *\n * @param String $lang Selected language code (like en_US or de_DE). Shortcodes like \"en\" and \"de\" work with enchant >= 1.4.1\n * @param Array $words Array of words to check.\n * @return Array of misspelled words.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/EnchantSpell.php","line":20,"missingDoc":false,"filters":[],"uses":{"enchant_broker_init":[21],"enchant_broker_request_dict":[24],"enchant_dict_check":[28],"trim":[30],"enchant_broker_free_dict":[35],"enchant_broker_dict_exists":[23],"enchant_broker_free":[39]},"used_by":[]},"EnchantSpell::getSuggestions":{"doc":"\/**\n * Returns suggestions for a specific word.\n *\n * @param String $lang Selected language code (like en_US or de_DE). Shortcodes like \"en\" and \"de\" work with enchant >= 1.4.1\n * @param String $word Specific word to get suggestions for.\n * @return Array of suggestions for the specified word.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/EnchantSpell.php","line":49,"missingDoc":false,"filters":[],"uses":{"enchant_broker_init":[50],"enchant_broker_request_dict":[53],"enchant_dict_suggest":[54],"is_array":[57],"enchant_broker_free_dict":[60],"enchant_broker_dict_exists":[52],"enchant_broker_free":[65]},"used_by":[]},"GoogleSpell::checkWords":{"doc":"\/**\n * Spellchecks an array of words.\n *\n * @param {String} $lang Language code like sv or en.\n * @param {Array} $words Array of words to spellcheck.\n * @return {Array} Array of misspelled words.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/GoogleSpell.php","line":18,"missingDoc":false,"filters":[],"uses":{"implode":[19],"_getMatches":[20],"count":[23],"_unhtmlentities":[24],"mb_substr":[24]},"used_by":[]},"GoogleSpell::getSuggestions":{"doc":"\/**\n * Returns suggestions of for a specific word.\n *\n * @param {String} $lang Language code like sv or en.\n * @param {String} $word Specific word to get suggestions for.\n * @return {Array} Array of suggestions for the specified word.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/GoogleSpell.php","line":36,"missingDoc":false,"filters":[],"uses":{"_getMatches":[39],"explode":[42],"utf8_encode":[42],"_unhtmlentities":[42],"count":[41]},"used_by":[]},"GoogleSpell::_getMatches":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/GoogleSpell.php","line":53,"missingDoc":true,"filters":[],"uses":{"preg_replace":[54,55],"strlen":[68],"curl_init":[79],"curl_setopt":[80,81,82,83],"curl_exec":[84],"curl_close":[85],"fsockopen":[88],"fwrite":[91],"feof":[95],"fgets":[96],"fclose":[98],"function_exists":[77],"preg_match_all":[105]},"used_by":[]},"GoogleSpell::_unhtmlentities":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/GoogleSpell.php","line":110,"missingDoc":true,"filters":[],"uses":{"preg_replace":[111,112],"get_html_translation_table":[114],"array_flip":[115],"strtr":[117]},"used_by":[]},"PSpell::checkWords":{"doc":"\/**\n * Spellchecks an array of words.\n *\n * @param {String} $lang Language code like sv or en.\n * @param {Array} $words Array of words to spellcheck.\n * @return {Array} Array of misspelled words.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/PSpell.php","line":18,"missingDoc":false,"filters":[],"uses":{"_getPLink":[19],"utf8_encode":[24],"pspell_check":[23],"trim":[23]},"used_by":[]},"PSpell::getSuggestions":{"doc":"\/**\n * Returns suggestions of for a specific word.\n *\n * @param {String} $lang Language code like sv or en.\n * @param {String} $word Specific word to get suggestions for.\n * @return {Array} Array of suggestions for the specified word.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/PSpell.php","line":37,"missingDoc":false,"filters":[],"uses":{"pspell_suggest":[38],"_getPLink":[38],"count":[40],"utf8_encode":[41]},"used_by":[]},"PSpell::_getPLink":{"doc":"\/**\n * Opens a link for pspell.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/PSpell.php","line":49,"missingDoc":false,"filters":[],"uses":{"throwError":[52,76],"function_exists":[51],"pspell_new":[55]},"used_by":[]},"PSpellShell::checkWords":{"doc":"\/**\n * Spellchecks an array of words.\n *\n * @param {String} $lang Language code like sv or en.\n * @param {Array} $words Array of words to spellcheck.\n * @return {Array} Array of misspelled words.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/PSpellShell.php","line":18,"missingDoc":false,"filters":[],"uses":{"_getCMD":[19],"fwrite":[22,25],"fclose":[27],"throwError":[29],"fopen":[21],"shell_exec":[31],"unlink":[32],"preg_split":[35],"preg_match":[44],"utf8_encode":[47],"trim":[47]},"used_by":[]},"PSpellShell::getSuggestions":{"doc":"\/**\n * Returns suggestions of for a specific word.\n *\n * @param {String} $lang Language code like sv or en.\n * @param {String} $word Specific word to get suggestions for.\n * @return {Array} Array of suggestions for the specified word.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/PSpellShell.php","line":60,"missingDoc":false,"filters":[],"uses":{"_getCMD":[61],"mb_convert_encoding":[64],"mb_detect_encoding":[64],"utf8_encode":[66],"function_exists":[63],"fwrite":[69,70],"fclose":[71],"throwError":[73],"fopen":[68],"shell_exec":[75],"unlink":[76],"preg_split":[79],"preg_match":[88],"array_slice":[91],"explode":[91],"count":[93],"trim":[94]},"used_by":[]},"PSpellShell::_getCMD":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/PSpellShell.php","line":103,"missingDoc":true,"filters":[],"uses":{"tempnam":[104],"preg_replace":[107],"strtolower":[107],"preg_match":[110],"php_uname":[110]},"used_by":[]},"SpellChecker::SpellChecker":{"doc":"\/**\n * Constructor.\n *\n * @param $config Configuration name\/value array.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/SpellChecker.php","line":16,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SpellChecker::loopback":{"doc":"\/**\n * Simple loopback function everything that gets in will be send back.\n *\n * @param $args.. Arguments.\n * @return {Array} Array of all input arguments. \n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/SpellChecker.php","line":26,"missingDoc":false,"filters":[],"uses":{"func_get_args":[27]},"used_by":[]},"SpellChecker::checkWords":{"doc":"\/**\n * Spellchecks an array of words.\n *\n * @param {String} $lang Language code like sv or en.\n * @param {Array} $words Array of words to spellcheck.\n * @return {Array} Array of misspelled words.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/SpellChecker.php","line":37,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SpellChecker::getSuggestions":{"doc":"\/**\n * Returns suggestions of for a specific word.\n *\n * @param {String} $lang Language code like sv or en.\n * @param {String} $word Specific word to get suggestions for.\n * @return {Array} Array of suggestions for the specified word.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/SpellChecker.php","line":48,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SpellChecker::throwError":{"doc":"\/**\n * Throws an error message back to the user. This will stop all execution.\n *\n * @param {String} $str Message to send back to user.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/SpellChecker.php","line":57,"missingDoc":false,"filters":[],"uses":{"addslashes":[58]},"used_by":[]},"Moxiecode_JSONReader::Moxiecode_JSONReader":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":32,"missingDoc":true,"filters":[],"uses":{"strlen":[34]},"used_by":[]},"Moxiecode_JSONReader::getToken":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":41,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_JSONReader::getLocation":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":45,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_JSONReader::getTokenName":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":49,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_JSONReader::getValue":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":85,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_JSONReader::readToken":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":89,"missingDoc":true,"filters":[],"uses":{"read":[90],"readAway":[99,106,119,126],"array_pop":[103,123],"_readString":[136],"_readNull":[140],"_readBool":[145],"_readNumber":[150],"is_numeric":[149]},"used_by":[]},"Moxiecode_JSONReader::_readBool":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":159,"missingDoc":true,"filters":[],"uses":{"skip":[164,166],"readAway":[168]},"used_by":[]},"Moxiecode_JSONReader::_readNull":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":176,"missingDoc":true,"filters":[],"uses":{"skip":[180],"readAway":[181]},"used_by":[]},"Moxiecode_JSONReader::_readString":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":189,"missingDoc":true,"filters":[],"uses":{"peek":[194],"read":[198,201,224,239,246],"_int2utf8":[224],"hexdec":[224],"readAway":[254]},"used_by":[]},"Moxiecode_JSONReader::_int2utf8":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":270,"missingDoc":true,"filters":[],"uses":{"intval":[271],"chr":[275,278,281,281,284,284,284,287,287,287,287]},"used_by":[]},"Moxiecode_JSONReader::_readNumber":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":291,"missingDoc":true,"filters":[],"uses":{"peek":[298],"read":[303],"is_numeric":[299],"readAway":[308],"floatval":[312],"intval":[314]},"used_by":[]},"Moxiecode_JSONReader::readAway":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":322,"missingDoc":true,"filters":[],"uses":{"peek":[323],"read":[327]},"used_by":[]},"Moxiecode_JSONReader::read":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":331,"missingDoc":true,"filters":[],"uses":{"substr":[334]},"used_by":[]},"Moxiecode_JSONReader::skip":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":345,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_JSONReader::peek":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":349,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_JSON::Moxiecode_JSON":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":363,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_JSON::decode":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":366,"missingDoc":true,"filters":[],"uses":{"readValue":[369]},"used_by":[]},"Moxiecode_JSON::readValue":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":372,"missingDoc":true,"filters":[],"uses":{"readToken":[379],"getToken":[380],"getLocation":[386,413,418],"getValue":[388,392,396,401],"addArray":[407,409],"count":[421,420],"array_pop":[422]},"used_by":[]},"Moxiecode_JSON::addArray":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":432,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_JSON::getDelim":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":444,"missingDoc":true,"filters":[],"uses":{"getLocation":[445]},"used_by":[]},"Moxiecode_JSON::encode":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":456,"missingDoc":true,"filters":[],"uses":{"gettype":[457],"encodeString":[472],"_encodeArray":[475,478],"get_object_vars":[478]},"used_by":[]},"Moxiecode_JSON::encodeString":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":484,"missingDoc":true,"filters":[],"uses":{"strlen":[489],"ord":[524,527,531,531,535,535,535,539,539,539,539,543,543,543,543,543],"pack":[527,531,535,539,543],"sprintf":[529,533,537,541,545],"bin2hex":[529,533,537,541,545],"_utf82utf16":[529,533,537,541,545],"preg_match":[486]},"used_by":[]},"Moxiecode_JSON::_utf82utf16":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":557,"missingDoc":true,"filters":[],"uses":{"mb_convert_encoding":[559],"function_exists":[558],"strlen":[561],"chr":[566,566,569,569],"ord":[566,566,566,569,569,569,569]},"used_by":[]},"Moxiecode_JSON::_encodeArray":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/JSON.php","line":575,"missingDoc":true,"filters":[],"uses":{"array_keys":[579],"count":[580,587],"encodeString":[582],"encode":[582,585],"is_int":[581]},"used_by":[]},"Moxiecode_Logger::Moxiecode_Logger":{"doc":"\/**\n * Constructs a new logger instance.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":34,"missingDoc":false,"filters":[],"uses":{"setMaxSize":[37]},"used_by":[]},"Moxiecode_Logger::setLevel":{"doc":"\/**\n * Sets the current log level, use the MC_LOGGER constants.\n *\n * @param int $level Log level instance for example MC_LOGGER_DEBUG.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":48,"missingDoc":false,"filters":[],"uses":{"strtolower":[50],"is_string":[49]},"used_by":[]},"Moxiecode_Logger::getLevel":{"doc":"\/**\n * Returns the current log level for example MC_LOGGER_DEBUG.\n *\n * @return int Current log level for example MC_LOGGER_DEBUG.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":85,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::setPath":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":89,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::getPath":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":93,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::setFileName":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":97,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::getFileName":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":101,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::setFormat":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":105,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::getFormat":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":109,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::setMaxSize":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":113,"missingDoc":true,"filters":[],"uses":{"intval":[115],"preg_replace":[115],"strpos":[118,122],"strtolower":[118,122]},"used_by":[]},"Moxiecode_Logger::getMaxSize":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":129,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::setMaxFiles":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":133,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::getMaxFiles":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":137,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::debug":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":141,"missingDoc":true,"filters":[],"uses":{"func_get_args":[142],"_logMsg":[143],"implode":[143]},"used_by":[]},"Moxiecode_Logger::info":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":146,"missingDoc":true,"filters":[],"uses":{"func_get_args":[147],"_logMsg":[148],"implode":[148]},"used_by":[]},"Moxiecode_Logger::warn":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":151,"missingDoc":true,"filters":[],"uses":{"func_get_args":[152],"_logMsg":[153],"implode":[153]},"used_by":[]},"Moxiecode_Logger::error":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":156,"missingDoc":true,"filters":[],"uses":{"func_get_args":[157],"_logMsg":[158],"implode":[158]},"used_by":[]},"Moxiecode_Logger::fatal":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":161,"missingDoc":true,"filters":[],"uses":{"func_get_args":[162],"_logMsg":[163],"implode":[163]},"used_by":[]},"Moxiecode_Logger::isDebugEnabled":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":166,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::isInfoEnabled":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":170,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::isWarnEnabled":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":174,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::isErrorEnabled":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":178,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::isFatalEnabled":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":182,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Moxiecode_Logger::_logMsg":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":186,"missingDoc":true,"filters":[],"uses":{"toOSPath":[192,235,236,242,245],"str_replace":[216,219,220,221],"strtolower":[216,220],"date":[219],"filesize":[226],"strlen":[228],"file_exists":[225,238,246],"rename":[239,242],"unlink":[247],"fputs":[252],"fflush":[253],"fclose":[254],"fopen":[251]},"used_by":[]},"Moxiecode_Logger::toOSPath":{"doc":"\/**\n * Converts a Unix path to OS specific path.\n *\n * @param String $path Unix path to convert.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/classes\/utils\/Logger.php","line":263,"missingDoc":false,"filters":[],"uses":{"str_replace":[264]},"used_by":[]},"getRequestParam":{"doc":"\/**\n * Returns an request value by name without magic quoting.\n *\n * @param String $name Name of parameter to get.\n * @param String $default_value Default value to return if value not found.\n * @return String request value by name without magic quoting or default value.\n *\/","file":"js\/tinymce\/plugins\/spellchecker\/includes\/general.php","line":28,"missingDoc":false,"filters":[],"uses":{"is_array":[32]},"used_by":{"__main":[25]}},"getLogger":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/includes\/general.php","line":44,"missingDoc":true,"filters":[],"uses":{"getLogger":[48],"setPath":[54],"dirname":[54],"setMaxSize":[55],"setMaxFiles":[56],"setFormat":[57]},"used_by":{"getLogger":[48],"debug":[66],"info":[73],"error":[80],"warn":[87],"fatal":[94]}},"debug":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/includes\/general.php","line":63,"missingDoc":true,"filters":[],"uses":{"func_get_args":[64],"getLogger":[66],"debug":[67],"implode":[67]},"used_by":{"debug":[67],"fetch_rss":[432,451,474,484,513],"RSSCache::get":[744]}},"info":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/includes\/general.php","line":70,"missingDoc":true,"filters":[],"uses":{"func_get_args":[71],"getLogger":[73],"info":[74],"implode":[74]},"used_by":{"info":[74]}},"warn":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/includes\/general.php","line":84,"missingDoc":true,"filters":[],"uses":{"func_get_args":[85],"getLogger":[87],"warn":[88],"implode":[88]},"used_by":{"warn":[88]}},"fatal":{"doc":"","file":"js\/tinymce\/plugins\/spellchecker\/includes\/general.php","line":91,"missingDoc":true,"filters":[],"uses":{"func_get_args":[92],"getLogger":[94],"fatal":[95],"implode":[95]},"used_by":{"fatal":[95]}},"get_file":{"doc":"","file":"js\/tinymce\/wp-tinymce.php","line":11,"missingDoc":true,"filters":[],"uses":{"realpath":[14],"function_exists":[13],"is_file":[16],"file_get_contents":[19]},"used_by":{"__main":[35,36,30]}},"wp_kses_array_lc":{"doc":"\/**\n * Goes through an array and changes the keys to all lower case.\n *\n * @since 1.0.0\n *\n * @param array $inarray Unfiltered array\n * @return array Fixed array with all lowercase keys\n *\/","file":"kses.php","line":998,"missingDoc":false,"filters":[],"uses":{"strtolower":[1002,1006]},"used_by":{"__main":[452,453]}},"wp_kses_no_null":{"doc":"\/**\n * Removes any null characters in $string.\n *\n * @since 1.0.0\n *\n * @param string $string\n * @return string\n *\/","file":"kses.php","line":967,"missingDoc":false,"filters":[],"uses":{"preg_replace":[968,969]},"used_by":{"wp_kses":[479],"wp_kses_bad_protocol":[945],"wp_kses_bad_protocol_once2":[1087],"safecss_filter_attr":[1404],"wp_sanitize_redirect":[891],"get_the_content":[202]}},"wp_kses_js_entities":{"doc":"\/**\n * Removes the HTML JavaScript entities found in early versions of Netscape 4.\n *\n * @since 1.0.0\n *\n * @param string $string\n * @return string\n *\/","file":"kses.php","line":1022,"missingDoc":false,"filters":[],"uses":{"preg_replace":[1023]},"used_by":{"wp_kses":[480]}},"wp_kses_hook":{"doc":"\/**\n * You add any kses hooks here.\n *\n * There is currently only one kses WordPress hook and it is called here. All\n * parameters are passed to the hooks and expected to receive a string.\n *\n * @since 1.0.0\n *\n * @param string $string Content to filter through kses\n * @param array $allowed_html List of allowed HTML elements\n * @param array $allowed_protocols Allowed protocol in links\n * @return string Filtered content through 'pre_kses' hook\n *\/","file":"kses.php","line":536,"missingDoc":false,"filters":["'pre_kses'"],"uses":[],"used_by":{"wp_kses":[482]}},"wp_kses_split":{"doc":"\/**\n * Searches for HTML tags, no matter how malformed.\n *\n * It also matches stray \">\" characters.\n *\n * @since 1.0.0\n *\n * @param string $string Content to filter\n * @param array $allowed_html Allowed HTML elements\n * @param array $allowed_protocols Allowed protocols to keep\n * @return string Content with fixed HTML tags\n *\/","file":"kses.php","line":564,"missingDoc":false,"filters":[],"uses":{"preg_replace_callback":[568]},"used_by":{"wp_kses":[483]}},"wp_kses_allowed_html":{"doc":"\/**\n * Return a list of allowed tags and attributes for a given context.\n *\n * @since 3.5.0\n *\n * @param string $context The context for which to retrieve tags. Allowed values are\n *  post | strip | data | entities or the name of a field filter such as pre_user_description.\n * @return array List of allowed tags and their allowed attributes.\n *\/","file":"kses.php","line":495,"missingDoc":false,"filters":["'wp_kses_allowed_html'","'wp_kses_allowed_html'","'wp_kses_allowed_html'","'wp_kses_allowed_html'","'wp_kses_allowed_html'","'wp_kses_allowed_html'"],"uses":{"is_array":[498]},"used_by":{"wp_kses_split2":[633],"wp_kses_attr":[667]}},"wp_kses_version":{"doc":"\/**\n * This function returns kses' version number.\n *\n * @since 1.0.0\n *\n * @return string KSES Version Number\n *\/","file":"kses.php","line":548,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"_wp_kses_split_callback":{"doc":"\/**\n * Callback for wp_kses_split.\n *\n * @since 3.1.0\n * @access private\n *\/","file":"kses.php","line":577,"missingDoc":false,"filters":[],"uses":{"wp_kses_split2":[579]},"used_by":[]},"wp_kses_split2":{"doc":"\/**\n * Callback for wp_kses_split for fixing malformed HTML tags.\n *\n * This function does a lot of work. It rejects some very malformed things like\n * <:::>. It returns an empty string, if the element isn't allowed (look ma, no\n * strip_tags()!). Otherwise it splits the tag into an element and an attribute\n * list.\n *\n * After the tag is split into an element and an attribute list, it is run\n * through another filter which will remove illegal attributes and once that is\n * completed, will be returned.\n *\n * @access private\n * @since 1.0.0\n * @uses wp_kses_attr()\n *\n * @param string $string Content to filter\n * @param array $allowed_html Allowed HTML elements\n * @param array $allowed_protocols Allowed protocols to keep\n * @return string Fixed HTML element\n *\/","file":"kses.php","line":603,"missingDoc":false,"filters":[],"uses":{"wp_kses_stripslashes":[604],"substr":[606,610],"str_replace":[611],"wp_kses":[612],"preg_replace":[617,619],"preg_match":[624],"trim":[628],"wp_kses_allowed_html":[633],"is_array":[632],"strtolower":[635],"wp_kses_attr":[643]},"used_by":{"_wp_kses_split_callback":[579]}},"wp_kses_stripslashes":{"doc":"\/**\n * Strips slashes from in front of quotes.\n *\n * This function changes the character sequence \\\" to just \". It leaves all\n * other slashes alone. It's really weird, but the quoting from\n * preg_replace(\/\/e) seems to require this.\n *\n * @since 1.0.0\n *\n * @param string $string String to strip slashes\n * @return string Fixed string with quoted slashes\n *\/","file":"kses.php","line":986,"missingDoc":false,"filters":[],"uses":{"preg_replace":[987]},"used_by":{"wp_kses_split2":[604]}},"wp_kses_attr":{"doc":"\/**\n * Removes all attributes, if none are allowed for this element.\n *\n * If some are allowed it calls wp_kses_hair() to split them further, and then\n * it builds up new HTML code from the data that kses_hair() returns. It also\n * removes \"<\" and \">\" characters, if there are any left. One more thing it does\n * is to check if the tag has a closing XHTML slash, and if it does, it puts one\n * in the returned code as well.\n *\n * @since 1.0.0\n *\n * @param string $element HTML element\/tag\n * @param string $attr HTML attributes from HTML element to closing HTML element tag\n * @param array $allowed_html Allowed HTML elements\n * @param array $allowed_protocols Allowed protocols to keep\n * @return string Sanitized HTML element\n *\/","file":"kses.php","line":663,"missingDoc":false,"filters":[],"uses":{"wp_kses_allowed_html":[667],"is_array":[666,704],"preg_match":[670],"strtolower":[674,674,684,686,689,693],"count":[674],"wp_kses_hair":[678],"safecss_filter_attr":[695],"str_replace":[701],"wp_kses_check_attr_val":[712],"preg_replace":[724]},"used_by":{"wp_kses_split2":[643]}},"wp_kses_hair":{"doc":"\/**\n * Builds an attribute list from string containing attributes.\n *\n * This function does a lot of work. It parses an attribute list into an array\n * with attribute data, and tries to do the right thing even if it gets weird\n * input. It will add quotes around attribute values that don't have any quotes\n * or apostrophes around them, to make it easier to produce HTML code that will\n * conform to W3C's HTML specification. It will also remove bad URL protocols\n * from attribute values. It also reduces duplicate attributes by using the\n * attribute defined first (foo='bar' foo='baz' will result in foo='bar').\n *\n * @since 1.0.0\n *\n * @param string $attr Attribute list from HTML element to closing HTML element tag\n * @param array $allowed_protocols Allowed protocols to keep\n * @return array List of attributes after parsing\n *\/","file":"kses.php","line":746,"missingDoc":false,"filters":[],"uses":{"strlen":[754],"preg_replace":[763,774,785,804,820,837],"preg_match":[760,770,778,792,808,824],"array_key_exists":[782,799,815,831,850],"wp_kses_bad_protocol":[797,813,829],"in_array":[796,812,828],"strtolower":[796,812,828],"wp_kses_html_error":[845]},"used_by":{"wp_kses_attr":[678]}},"safecss_filter_attr":{"doc":"\/**\n * Inline CSS filter\n *\n * @since 2.8.1\n *\/","file":"kses.php","line":1400,"missingDoc":false,"filters":["'safe_style_css'"],"uses":{"_deprecated_argument":[1402],"wp_kses_no_null":[1404],"str_replace":[1405],"preg_match":[1407],"explode":[1410,1435],"trim":[1410,1430,1436],"in_array":[1436],"strpos":[1432]},"used_by":{"wp_kses_attr":[695]}},"wp_kses_check_attr_val":{"doc":"\/**\n * Performs different checks for attribute values.\n *\n * The currently implemented checks are \"maxlen\", \"minlen\", \"maxval\", \"minval\"\n * and \"valueless\".\n *\n * @since 1.0.0\n *\n * @param string $value Attribute value\n * @param string $vless Whether the value is valueless. Use 'y' or 'n'\n * @param string $checkname What $checkvalue is checking for.\n * @param mixed $checkvalue What constraint the value should pass\n * @return bool Whether check passes\n *\/","file":"kses.php","line":872,"missingDoc":false,"filters":[],"uses":{"strtolower":[875,922],"strlen":[881,889],"preg_match":[900,910]},"used_by":{"wp_kses_attr":[712]}},"wp_kses_html_error":{"doc":"\/**\n * Handles parsing errors in wp_kses_hair().\n *\n * The general plan is to remove everything to and including some whitespace,\n * but it deals with quotes and apostrophes as well.\n *\n * @since 1.0.0\n *\n * @param string $string\n * @return string\n *\/","file":"kses.php","line":1037,"missingDoc":false,"filters":[],"uses":{"preg_replace":[1038]},"used_by":{"wp_kses_hair":[845]}},"wp_kses_bad_protocol_once":{"doc":"\/**\n * Sanitizes content from bad protocols and other characters.\n *\n * This function searches for URL protocols at the beginning of $string, while\n * handling whitespace and HTML entities.\n *\n * @since 1.0.0\n *\n * @param string $string Content to check for bad protocols\n * @param string $allowed_protocols Allowed protocols\n * @return string Sanitized content\n *\/","file":"kses.php","line":1053,"missingDoc":false,"filters":[],"uses":{"preg_split":[1054],"trim":[1056],"wp_kses_bad_protocol_once2":[1057],"wp_kses_bad_protocol_once":[1061],"preg_match":[1055]},"used_by":{"wp_kses_bad_protocol":[950],"wp_kses_bad_protocol_once":[1061]}},"wp_kses_bad_protocol_once2":{"doc":"\/**\n * Callback for wp_kses_bad_protocol_once() regular expression.\n *\n * This function processes URL protocols, checks to see if they're in the\n * whitelist or not, and returns different data depending on the answer.\n *\n * @access private\n * @since 1.0.0\n *\n * @param string $string URI scheme to check against the whitelist\n * @param string $allowed_protocols Allowed protocols\n * @return string Sanitized content\n *\/","file":"kses.php","line":1084,"missingDoc":false,"filters":[],"uses":{"wp_kses_decode_entities":[1085],"preg_replace":[1086],"wp_kses_no_null":[1087],"strtolower":[1088,1092]},"used_by":{"wp_kses_bad_protocol_once":[1057]}},"wp_kses_decode_entities":{"doc":"\/**\n * Convert all entities to their character counterparts.\n *\n * This function decodes numeric HTML entities (&#65; and &#x41;). It doesn't do\n * anything with other entities like &auml;, but we don't need them in the URL\n * protocol whitelisting system anyway.\n *\n * @since 1.0.0\n *\n * @param string $string Content to change entities\n * @return string Content after decoded entities\n *\/","file":"kses.php","line":1220,"missingDoc":false,"filters":[],"uses":{"preg_replace_callback":[1221,1222]},"used_by":{"wp_kses_bad_protocol_once2":[1085]}},"wp_kses_named_entities":{"doc":"\/**\n * Callback for wp_kses_normalize_entities() regular expression.\n *\n * This function only accepts valid named entity references, which are finite,\n * case-sensitive, and highly scrutinized by HTML and XML validators.\n *\n * @since 3.0.0\n *\n * @param array $matches preg_replace_callback() matches array\n * @return string Correctly encoded entity\n *\/","file":"kses.php","line":1139,"missingDoc":false,"filters":[],"uses":{"in_array":[1146]},"used_by":[]},"wp_kses_normalize_entities2":{"doc":"\/**\n * Callback for wp_kses_normalize_entities() regular expression.\n *\n * This function helps wp_kses_normalize_entities() to only accept 16-bit values\n * and nothing more for &#number; entities.\n *\n * @access private\n * @since 1.0.0\n *\n * @param array $matches preg_replace_callback() matches array\n * @return string Correctly encoded entity\n *\/","file":"kses.php","line":1161,"missingDoc":false,"filters":[],"uses":{"str_pad":[1167],"ltrim":[1167],"valid_unicode":[1166]},"used_by":[]},"valid_unicode":{"doc":"\/**\n * Helper function to determine if a Unicode value is valid.\n *\n * @param int $i Unicode value\n * @return bool True if the value was a valid Unicode number\n *\/","file":"kses.php","line":1201,"missingDoc":false,"filters":[],"uses":[],"used_by":{"wp_kses_normalize_entities2":[1166],"wp_kses_normalize_entities3":[1192]}},"wp_kses_normalize_entities3":{"doc":"\/**\n * Callback for wp_kses_normalize_entities() for regular expression.\n *\n * This function helps wp_kses_normalize_entities() to only accept valid Unicode\n * numeric entities in hex form.\n *\n * @access private\n *\n * @param array $matches preg_replace_callback() matches array\n * @return string Correctly encoded entity\n *\/","file":"kses.php","line":1187,"missingDoc":false,"filters":[],"uses":{"valid_unicode":[1192],"hexdec":[1192],"ltrim":[1192]},"used_by":[]},"_wp_kses_decode_entities_chr":{"doc":"\/**\n * Regex callback for wp_kses_decode_entities()\n *\n * @param array $match preg match\n * @return string\n *\/","file":"kses.php","line":1233,"missingDoc":false,"filters":[],"uses":{"chr":[1234]},"used_by":[]},"_wp_kses_decode_entities_chr_hexdec":{"doc":"\/**\n * Regex callback for wp_kses_decode_entities()\n *\n * @param array $match preg match\n * @return string\n *\/","file":"kses.php","line":1243,"missingDoc":false,"filters":[],"uses":{"chr":[1244],"hexdec":[1244]},"used_by":[]},"wp_filter_kses":{"doc":"\/**\n * Sanitize content with allowed HTML Kses rules.\n *\n * @since 1.0.0\n * @uses $allowedtags\n *\n * @param string $data Content to filter, expected to be escaped with slashes\n * @return string Filtered content\n *\/","file":"kses.php","line":1256,"missingDoc":false,"filters":[],"uses":{"addslashes":[1257],"wp_kses":[1257],"stripslashes":[1257],"current_filter":[1257]},"used_by":[]},"wp_filter_nohtml_kses":{"doc":"\/**\n * Strips all of the HTML in the content.\n *\n * @since 2.1.0\n *\n * @param string $data Content to strip all HTML from\n * @return string Filtered content without any HTML\n *\/","file":"kses.php","line":1311,"missingDoc":false,"filters":[],"uses":{"addslashes":[1312],"wp_kses":[1312],"stripslashes":[1312]},"used_by":[]},"kses_init_filters":{"doc":"\/**\n * Adds all Kses input form content filters.\n *\n * All hooks have default priority. The wp_filter_kses() function is added to\n * the 'pre_comment_content' and 'title_save_pre' hooks.\n *\n * The wp_filter_post_kses() function is added to the 'content_save_pre',\n * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks.\n *\n * @since 2.0.0\n * @uses add_filter() See description for what functions are added to what hooks.\n *\/","file":"kses.php","line":1327,"missingDoc":false,"filters":[],"uses":{"add_filter":[1329,1333,1335,1338,1339,1340],"current_user_can":[1332]},"used_by":{"kses_init":[1389]}},"kses_remove_filters":{"doc":"\/**\n * Removes all Kses input form content filters.\n *\n * A quick procedural method to removing all of the filters that kses uses for\n * content in WordPress Loop.\n *\n * Does not remove the kses_init() function from 'init' hook (priority is\n * default). Also does not remove kses_init() function from 'set_current_user'\n * hook (priority is also default).\n *\n * @since 2.0.6\n *\/","file":"kses.php","line":1355,"missingDoc":false,"filters":[],"uses":{"remove_filter":[1357,1360,1361,1364,1365,1366]},"used_by":{"kses_init":[1386]}},"kses_init":{"doc":"\/**\n * Sets up most of the Kses filters for input form content.\n *\n * If you remove the kses_init() function from 'init' hook and\n * 'set_current_user' (priority is default), then none of the Kses filter hooks\n * will be added.\n *\n * First removes all of the Kses filters in case the current user does not need\n * to have Kses filter the content. If the user does not have unfiltered_html\n * capability, then Kses filters are added.\n *\n * @uses kses_remove_filters() Removes the Kses filters\n * @uses kses_init_filters() Adds the Kses filters back if the user\n *\t\tdoes not have unfiltered HTML capability.\n * @since 2.0.0\n *\/","file":"kses.php","line":1385,"missingDoc":false,"filters":[],"uses":{"kses_remove_filters":[1386],"kses_init_filters":[1389],"current_user_can":[1388]},"used_by":[]},"_wp_add_global_attributes":{"doc":"\/**\n * Helper function to add global attributes to a tag in the allowed html list.\n *\n * @since 3.5.0\n * @access private\n *\n * @param array $value An array of attributes.\n * @return array The array of attributes with global attributes added.\n *\/","file":"kses.php","line":1458,"missingDoc":false,"filters":[],"uses":{"array_merge":[1470],"is_array":[1469]},"used_by":[]},"get_translations_for_domain":{"doc":"\/**\n * Returns the Translations instance for a domain. If there isn't one,\n * returns empty Translations instance.\n *\n * @param string $domain\n * @return object A Translation instance\n *\/","file":"l10n.php","line":500,"missingDoc":false,"filters":[],"uses":[],"used_by":{"translate":[68],"translate_with_gettext_context":[81],"_n":[239],"_nx":[252]}},"translate_with_gettext_context":{"doc":"","file":"l10n.php","line":80,"missingDoc":true,"filters":["'gettext_with_context'"],"uses":{"get_translations_for_domain":[81],"translate":[82]},"used_by":{"_x":[190],"esc_attr_x":[209],"esc_html_x":[213],"translate_user_role":[531]}},"esc_html__":{"doc":"\/**\n * Retrieves the translation of $text and escapes it for safe use in HTML output.\n * If there is no translation, or the domain isn't loaded, the original text is returned.\n *\n * @see translate() An alias of translate()\n * @see esc_html()\n * @since 2.8.0\n *\n * @param string $text Text to translate\n * @param string $domain Optional. Domain to retrieve the translated text\n * @return string Translated text\n *\/","file":"l10n.php","line":128,"missingDoc":false,"filters":[],"uses":{"esc_html":[129],"translate":[129]},"used_by":[]},"esc_html_e":{"doc":"\/**\n * Displays translated text that has been escaped for safe use in HTML output.\n *\n * @see translate() Echoes returned translate() string\n * @see esc_html()\n * @since 2.8.0\n *\n * @param string $text Text to translate\n * @param string $domain Optional. Domain to retrieve the translated text\n *\/","file":"l10n.php","line":169,"missingDoc":false,"filters":[],"uses":{"esc_html":[170],"translate":[170]},"used_by":{"wp_print_media_templates":[180]}},"esc_attr_x":{"doc":"","file":"l10n.php","line":208,"missingDoc":true,"filters":[],"uses":{"esc_attr":[209],"translate_with_gettext_context":[209]},"used_by":[]},"esc_html_x":{"doc":"","file":"l10n.php","line":212,"missingDoc":true,"filters":[],"uses":{"esc_html":[213],"translate_with_gettext_context":[213]},"used_by":[]},"_nx":{"doc":"\/**\n * A hybrid of _n() and _x(). It supports contexts and plurals.\n *\n * @see _n()\n * @see _x()\n *\n *\/","file":"l10n.php","line":251,"missingDoc":false,"filters":["'ngettext_with_context'"],"uses":{"get_translations_for_domain":[252],"translate_plural":[253]},"used_by":{"translate_nooped_plural":[305]}},"_n_noop":{"doc":"\/**\n * Register plural strings in POT file, but don't translate them.\n *\n * Used when you want to keep structures with translatable plural strings and\n * use them later.\n *\n * Example:\n *  $messages = array(\n *  \t'post' => _n_noop('%s post', '%s posts'),\n *  \t'page' => _n_noop('%s pages', '%s pages')\n *  );\n *  ...\n *  $message = $messages[$type];\n *  $usable_text = sprintf( translate_nooped_plural( $message, $count ), $count );\n *\n * @since 2.5\n * @param string $singular Single form to be i18ned\n * @param string $plural Plural form to be i18ned\n * @param string $domain Optional. The domain identifier the text will be retrieved in\n * @return array array($singular, $plural)\n *\/","file":"l10n.php","line":278,"missingDoc":false,"filters":[],"uses":[],"used_by":{"create_initial_post_types":[113,120,127,134,141,148],"get_post_mime_types":[2194,2195,2196]}},"_nx_noop":{"doc":"\/**\n * Register plural strings with context in POT file, but don't translate them.\n *\n * @see _n_noop()\n *\/","file":"l10n.php","line":287,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"translate_nooped_plural":{"doc":"\/**\n * Translate the result of _n_noop() or _nx_noop()\n *\n * @since 3.1\n * @param array $nooped_plural Array with singular, plural and context keys, usually the result of _n_noop() or _nx_noop()\n * @param int $count Number of objects\n * @param string $domain Optional. The domain identifier the text should be retrieved in. If $nooped_plural contains\n * \ta domain passed to _n_noop() or _nx_noop(), it will override this value.\n *\/","file":"l10n.php","line":300,"missingDoc":false,"filters":[],"uses":{"_nx":[305],"_n":[307]},"used_by":[]},"unload_textdomain":{"doc":"\/**\n * Unloads translations for a domain\n *\n * @since 3.0.0\n * @param string $domain Textdomain to be unloaded\n * @return bool Whether textdomain was unloaded\n *\/","file":"l10n.php","line":359,"missingDoc":false,"filters":["'override_unload_textdomain'","'unload_textdomain'"],"uses":[],"used_by":[]},"load_default_textdomain":{"doc":"\/**\n * Loads default translated strings based on locale.\n *\n * Loads the .mo file in WP_LANG_DIR constant path from WordPress root. The\n * translated (.mo) file is named based on the locale.\n *\n * @since 1.5.0\n *\/","file":"l10n.php","line":385,"missingDoc":false,"filters":[],"uses":{"get_locale":[386],"load_textdomain":[388,391,396,399],"is_multisite":[390],"defined":[390,395,398],"file_exists":[390],"is_admin":[395],"is_network_admin":[398]},"used_by":[]},"load_plugin_textdomain":{"doc":"\/**\n * Loads the plugin's translated strings.\n *\n * If the path is not given then it will be the root of the plugin directory.\n * The .mo file should be named based on the domain with a dash, and then the locale exactly.\n *\n * @since 1.5.0\n *\n * @param string $domain Unique identifier for retrieving translated strings\n * @param string $abs_rel_path Optional. Relative path to ABSPATH of a folder,\n * \twhere the .mo file resides. Deprecated, but still functional until 2.7\n * @param string $plugin_rel_path Optional. Relative path to WP_PLUGIN_DIR. This is the preferred argument to use. It takes precedence over $abs_rel_path\n *\/","file":"l10n.php","line":416,"missingDoc":false,"filters":["'plugin_locale'"],"uses":{"get_locale":[417],"trim":[420,423],"_deprecated_argument":[422],"load_textdomain":[429]},"used_by":[]},"load_muplugin_textdomain":{"doc":"\/**\n * Load the translated strings for a plugin residing in the mu-plugins dir.\n *\n * @since 3.0.0\n *\n * @param string $domain Unique identifier for retrieving translated strings\n * @param string $mu_plugin_rel_path Relative to WPMU_PLUGIN_DIR directory in which\n * the MO file resides. Defaults to empty string.\n *\/","file":"l10n.php","line":441,"missingDoc":false,"filters":["'plugin_locale'"],"uses":{"get_locale":[442],"ltrim":[443],"load_textdomain":[444],"trailingslashit":[444]},"used_by":[]},"load_child_theme_textdomain":{"doc":"\/**\n * Loads the child themes translated strings.\n *\n * If the current locale exists as a .mo file in the child themes root directory, it\n * will be included in the translated strings by the $domain.\n *\n * The .mo files must be named based on the locale exactly.\n *\n * @since 2.9.0\n *\n * @param string $domain Unique identifier for retrieving translated strings\n *\/","file":"l10n.php","line":487,"missingDoc":false,"filters":[],"uses":{"get_stylesheet_directory":[489],"load_theme_textdomain":[490]},"used_by":[]},"translate_user_role":{"doc":"\/**\n * Translates role name. Since the role names are in the database and\n * not in the source there are dummy gettext calls to get them into the POT\n * file and this function properly translates them back.\n *\n * The before_last_bar() call is needed, because older installs keep the roles\n * using the old context format: 'Role name|User role' and just skipping the\n * content after the last bar is easier than fixing them in the DB. New installs\n * won't suffer from that problem.\n *\/","file":"l10n.php","line":530,"missingDoc":false,"filters":[],"uses":{"translate_with_gettext_context":[531],"before_last_bar":[531]},"used_by":[]},"permalink_anchor":{"doc":"\/**\n * Display permalink anchor for current post.\n *\n * The permalink mode title will use the post title for the 'a' element 'id'\n * attribute. The id mode uses 'post-' with the post ID for the 'id' attribute.\n *\n * @since 0.71\n *\n * @param string $mode Permalink mode can be either 'title', 'id', or default, which is 'id'.\n *\/","file":"link-template.php","line":57,"missingDoc":false,"filters":[],"uses":{"get_post":[58],"strtolower":[59],"sanitize_title":[61]},"used_by":[]},"get_page_link":{"doc":"\/**\n * Retrieve the permalink for current page or page ID.\n *\n * Respects page_on_front. Use this one.\n *\n * @since 1.5.0\n *\n * @param mixed $post Optional. Post ID or object.\n * @param bool $leavename Optional, defaults to false. Whether to keep page name.\n * @param bool $sample Optional, defaults to false. Is it a sample permalink.\n * @return string\n *\/","file":"link-template.php","line":240,"missingDoc":false,"filters":["'page_link'"],"uses":{"get_post":[241],"home_url":[244],"_get_page_link":[246],"get_option":[243,243]},"used_by":{"get_permalink":[107]}},"get_post_permalink":{"doc":"\/**\n * Retrieve the permalink for a post with a custom post type.\n *\n * @since 3.0.0\n *\n * @param int $id Optional. Post ID.\n * @param bool $leavename Optional, defaults to false. Whether to keep post name.\n * @param bool $sample Optional, defaults to false. Is it a sample permalink.\n * @return string\n *\/","file":"link-template.php","line":178,"missingDoc":false,"filters":["'post_type_link'"],"uses":{"get_post":[181],"is_wp_error":[183],"get_extra_permastruct":[186],"in_array":[190],"get_post_type_object":[192],"get_page_uri":[197],"str_replace":[198],"home_url":[200,206],"user_trailingslashit":[200],"add_query_arg":[203,205]},"used_by":{"get_permalink":[111]}},"get_page_uri":{"doc":"\/**\n * Builds URI for a page.\n *\n * Sub pages will be in the \"directory\" under the parent page post name.\n *\n * @since 1.5.0\n *\n * @param mixed $page Page object or page ID.\n * @return string Page URI.\n *\/","file":"post.php","line":3596,"missingDoc":false,"filters":[],"uses":{"get_post":[3597,3602]},"used_by":{"get_post_permalink":[197],"_get_page_link":[275],"WP_Rewrite::page_uri_index":[839,843]}},"_get_page_link":{"doc":"\/**\n * Retrieve the page permalink.\n *\n * Ignores page_on_front. Internal use only.\n *\n * @since 2.1.0\n * @access private\n *\n * @param mixed $post Optional. Post ID or object.\n * @param bool $leavename Optional. Leave name.\n * @param bool $sample Optional. Sample permalink.\n * @return string\n *\/","file":"link-template.php","line":264,"missingDoc":false,"filters":["'_get_page_link'"],"uses":{"get_post":[267],"in_array":[269],"get_page_permastruct":[271],"str_replace":[275],"get_page_uri":[275],"home_url":[278,281],"user_trailingslashit":[279]},"used_by":{"get_page_link":[246],"get_attachment_link":[308],"get_post_comments_feed_link":[476]}},"the_feed_link":{"doc":"\/**\n * Display the permalink for the feed type.\n *\n * @since 3.0.0\n *\n * @param string $anchor The link's anchor text.\n * @param string $feed Optional, defaults to default feed. Feed type.\n *\/","file":"link-template.php","line":414,"missingDoc":false,"filters":["'the_feed_link'"],"uses":{"esc_url":[415],"get_feed_link":[415]},"used_by":[]},"get_post_field":{"doc":"\/**\n * Retrieve data from a post field based on Post ID.\n *\n * Examples of the post field will be, 'post_type', 'post_status', 'post_content',\n * etc and based off of the post object property or key names.\n *\n * The context values are based off of the taxonomy filter functions and\n * supported values are found within those functions.\n *\n * @since 2.3.0\n * @uses sanitize_post_field() See for possible $context values.\n *\n * @param string $field Post field name\n * @param id $post Post ID\n * @param string $context Optional. How to filter the field. Default is display.\n * @return bool|string False on failure or returns the value in post field\n *\/","file":"post.php","line":724,"missingDoc":false,"filters":[],"uses":{"get_post":[725],"sanitize_post_field":[733]},"used_by":{"get_post_comments_feed_link":[485],"wp_update_nav_menu_item":[309],"wp_insert_post":[2722,2762,2780,2920]}},"edit_tag_link":{"doc":"\/**\n * Display or retrieve edit tag link with formatting.\n *\n * @since 2.7.0\n *\n * @param string $link Optional. Anchor text.\n * @param string $before Optional. Display before edit link.\n * @param string $after Optional. Display after edit link.\n * @param int|object $tag Tag object or ID\n * @return string HTML content.\n *\/","file":"link-template.php","line":668,"missingDoc":false,"filters":["'edit_tag_link'"],"uses":{"edit_term_link":[669]},"used_by":[]},"edit_term_link":{"doc":"\/**\n * Display or retrieve edit term link with formatting.\n *\n * @since 3.1.0\n *\n * @param string $link Optional. Anchor text.\n * @param string $before Optional. Display before edit link.\n * @param string $after Optional. Display after edit link.\n * @param object $term Term object\n * @return string HTML content.\n *\/","file":"link-template.php","line":715,"missingDoc":false,"filters":["'edit_term_link'"],"uses":{"get_queried_object":[717],"is_null":[716],"get_taxonomy":[720],"current_user_can":[721],"__":[725],"get_edit_term_link":[727]},"used_by":{"edit_tag_link":[669]}},"get_search_link":{"doc":"\/**\n* Retrieve permalink for search.\n*\n* @since  3.0.0\n* @param string $query Optional. The query string to use. If empty the current query is used.\n* @return string\n*\/","file":"link-template.php","line":743,"missingDoc":false,"filters":["'search_link'"],"uses":{"get_search_query":[747],"stripslashes":[749],"get_search_permastruct":[751],"home_url":[754,759],"urlencode":[754,756],"str_replace":[757,758],"user_trailingslashit":[759]},"used_by":{"get_search_feed_link":[776]}},"get_post_type_archive_link":{"doc":"\/**\n * Retrieve the permalink for a post type archive.\n *\n * @since 3.1.0\n *\n * @param string $post_type Post type\n * @return string\n *\/","file":"link-template.php","line":832,"missingDoc":false,"filters":["'post_type_archive_link'"],"uses":{"get_post_type_object":[834],"home_url":[846,848],"user_trailingslashit":[846],"get_option":[840],"is_array":[840]},"used_by":{"get_post_type_archive_feed_link":[868]}},"edit_post_link":{"doc":"\/**\n * Display edit post link for post.\n *\n * @since 1.0.0\n *\n * @param string $link Optional. Anchor text.\n * @param string $before Optional. Display before edit link.\n * @param string $after Optional. Display after edit link.\n * @param int $id Optional. Post ID.\n *\/","file":"link-template.php","line":924,"missingDoc":false,"filters":["'edit_post_link'"],"uses":{"get_post":[925],"get_edit_post_link":[928],"__":[932],"get_post_type_object":[934],"esc_attr":[935]},"used_by":[]},"get_delete_post_link":{"doc":"\/**\n * Retrieve delete posts link for post.\n *\n * Can be used within the WordPress loop or outside of it, with any post type.\n *\n * @since 2.9.0\n *\n * @param int $id Optional. Post ID.\n * @param string $deprecated Not used.\n * @param bool $force_delete Whether to bypass trash and force deletion. Default is false.\n * @return string\n *\/","file":"link-template.php","line":951,"missingDoc":false,"filters":["'get_delete_post_link'"],"uses":{"_deprecated_argument":[953],"get_post":[955],"get_post_type_object":[958],"current_user_can":[962],"add_query_arg":[967],"admin_url":[967],"sprintf":[967],"wp_nonce_url":[969]},"used_by":[]},"get_edit_comment_link":{"doc":"\/**\n * Retrieve edit comment link.\n *\n * @since 2.3.0\n *\n * @param int $comment_id Optional. Comment ID.\n * @return string\n *\/","file":"link-template.php","line":980,"missingDoc":false,"filters":["'get_edit_comment_link'"],"uses":{"get_comment":[981],"current_user_can":[983],"admin_url":[986]},"used_by":{"edit_comment_link":[1009]}},"get_edit_bookmark_link":{"doc":"\/**\n * Display edit bookmark (literally a URL external to blog) link.\n *\n * @since 2.7.0\n *\n * @param int $link Optional. Bookmark ID.\n * @return string\n *\/","file":"link-template.php","line":1021,"missingDoc":false,"filters":["'get_edit_bookmark_link'"],"uses":{"get_bookmark":[1022],"current_user_can":[1024],"admin_url":[1027]},"used_by":{"edit_bookmark_link":[1050]}},"edit_bookmark_link":{"doc":"\/**\n * Display edit bookmark (literally a URL external to blog) link anchor content.\n *\n * @since 2.7.0\n *\n * @param string $link Optional. Anchor text.\n * @param string $before Optional. Display before edit link.\n * @param string $after Optional. Display after edit link.\n * @param int $bookmark Optional. Bookmark ID.\n *\/","file":"link-template.php","line":1041,"missingDoc":false,"filters":["'edit_bookmark_link'"],"uses":{"get_bookmark":[1042],"current_user_can":[1044],"__":[1048],"get_edit_bookmark_link":[1050],"esc_attr__":[1050]},"used_by":[]},"get_adjacent_post":{"doc":"\/**\n * Retrieve adjacent post.\n *\n * Can either be next or previous post.\n *\n * @since 2.5.0\n *\n * @param bool $in_same_cat Optional. Whether post should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n * @param bool $previous Optional. Whether to retrieve previous post.\n * @return mixed Post object if successful. Null if global $post is not set. Empty string if no corresponding post exists.\n *\/","file":"link-template.php","line":1122,"missingDoc":false,"filters":["\"get_{$adjacent}_post_join\"","\"get_{$adjacent}_post_where\"","\"get_{$adjacent}_post_sort\""],"uses":{"get_post":[1125,1182,1193],"is_object_in_taxonomy":[1136],"wp_get_object_terms":[1138],"is_wp_error":[1139],"implode":[1141,1164],"_deprecated_argument":[1149],"sprintf":[1149],"__":[1149],"explode":[1150,1152],"strpos":[1148],"is_array":[1146],"array_map":[1156],"array_diff":[1159],"prepare":[1174],"md5":[1178],"wp_cache_get":[1179],"get_var":[1186],"wp_cache_set":[1190]},"used_by":{"get_previous_post":[1094],"get_next_post":[1107],"get_adjacent_post_rel_link":[1215],"adjacent_post_link":[1381]}},"get_adjacent_post_rel_link":{"doc":"\/**\n * Get adjacent post relational link.\n *\n * Can either be next or previous post relational link.\n *\n * @since 2.8.0\n *\n * @param string $title Optional. Link title format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n * @param bool $previous Optional, default is true. Whether to display link to previous or next post.\n * @return string\n *\/","file":"link-template.php","line":1211,"missingDoc":false,"filters":["'the_title'","\"{$adjacent}_post_rel_link\""],"uses":{"get_post":[1213,1212],"get_adjacent_post":[1215],"is_attachment":[1212],"__":[1221,1221],"mysql2date":[1225],"get_option":[1225],"str_replace":[1227,1228],"esc_attr":[1232],"get_permalink":[1233]},"used_by":{"adjacent_posts_rel_link":[1249,1250],"next_post_rel_link":[1276],"prev_post_rel_link":[1289]}},"adjacent_posts_rel_link":{"doc":"\/**\n * Display relational links for the posts adjacent to the current post.\n *\n * @since 2.8.0\n *\n * @param string $title Optional. Link title format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n *\/","file":"link-template.php","line":1248,"missingDoc":false,"filters":[],"uses":{"get_adjacent_post_rel_link":[1249,1250]},"used_by":{"adjacent_posts_rel_link_wp_head":[1263]}},"adjacent_posts_rel_link_wp_head":{"doc":"\/**\n * Display relational links for the posts adjacent to the current post for single post pages.\n *\n * This is meant to be attached to actions like 'wp_head'. Do not call this directly in plugins or theme templates.\n * @since 3.0.0\n *\n *\/","file":"link-template.php","line":1260,"missingDoc":false,"filters":[],"uses":{"is_singular":[1261],"is_attachment":[1261],"adjacent_posts_rel_link":[1263]},"used_by":[]},"next_post_rel_link":{"doc":"\/**\n * Display relational link for the next post adjacent to the current post.\n *\n * @since 2.8.0\n *\n * @param string $title Optional. Link title format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n *\/","file":"link-template.php","line":1275,"missingDoc":false,"filters":[],"uses":{"get_adjacent_post_rel_link":[1276]},"used_by":[]},"prev_post_rel_link":{"doc":"\/**\n * Display relational link for the previous post adjacent to the current post.\n *\n * @since 2.8.0\n *\n * @param string $title Optional. Link title format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n *\/","file":"link-template.php","line":1288,"missingDoc":false,"filters":[],"uses":{"get_adjacent_post_rel_link":[1289]},"used_by":[]},"previous_post_link":{"doc":"\/**\n * Display previous post link that is adjacent to the current post.\n *\n * @since 1.5.0\n *\n * @param string $format Optional. Link anchor format.\n * @param string $link Optional. Link permalink format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n *\/","file":"link-template.php","line":1346,"missingDoc":false,"filters":[],"uses":{"adjacent_post_link":[1347]},"used_by":[]},"adjacent_post_link":{"doc":"\/**\n * Display adjacent post link.\n *\n * Can be either next post link or previous.\n *\n * @since 2.5.0\n *\n * @param string $format Link anchor format.\n * @param string $link Link permalink format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n * @param bool $previous Optional, default is true. Whether to display link to previous or next post.\n *\/","file":"link-template.php","line":1377,"missingDoc":false,"filters":["'the_title'","\"{$adjacent}_post_link\""],"uses":{"get_post":[1379,1379],"get_adjacent_post":[1381],"is_attachment":[1378],"__":[1389,1389],"mysql2date":[1392],"get_option":[1392],"get_permalink":[1395],"str_replace":[1396,1397,1400]},"used_by":{"previous_post_link":[1347],"next_post_link":[1361]}},"next_post_link":{"doc":"\/**\n * Display next post link that is adjacent to the current post.\n *\n * @since 1.5.0\n *\n * @param string $format Optional. Link anchor format.\n * @param string $link Optional. Link permalink format.\n * @param bool $in_same_cat Optional. Whether link should be in a same category.\n * @param array|string $excluded_categories Optional. Array or comma-separated list of excluded category IDs.\n *\/","file":"link-template.php","line":1360,"missingDoc":false,"filters":[],"uses":{"adjacent_post_link":[1361]},"used_by":[]},"get_pagenum_link":{"doc":"\/**\n* Retrieve links for page numbers.\n*\n* @since 1.5.0\n*\n* @param int $pagenum Optional. Page ID.\n* @param bool $escape Optional. Whether to escape the URL for display, with esc_url(). Defaults to true.\n* \tOtherwise, prepares the URL with esc_url_raw().\n* @return string\n*\/","file":"link-template.php","line":1418,"missingDoc":false,"filters":["'get_pagenum_link'"],"uses":{"remove_query_arg":[1423],"parse_url":[1425],"home_url":[1425],"preg_quote":[1427],"preg_replace":[1429,1430,1446,1451,1452],"trailingslashit":[1433,1455,1461],"get_bloginfo":[1433,1455],"add_query_arg":[1436],"preg_match":[1442],"ltrim":[1453],"using_index_permalinks":[1457],"user_trailingslashit":[1461],"using_permalinks":[1432],"is_admin":[1432],"esc_url":[1470],"esc_url_raw":[1472]},"used_by":{"get_next_posts_page_link":[1493],"get_previous_posts_page_link":[1574]}},"get_next_posts_page_link":{"doc":"\/**\n * Retrieve next posts page link.\n *\n * Backported from 2.1.3 to 2.0.10.\n *\n * @since 2.0.10\n *\n * @param int $max_page Optional. Max pages.\n * @return string\n *\/","file":"link-template.php","line":1485,"missingDoc":false,"filters":[],"uses":{"intval":[1491],"get_pagenum_link":[1493],"is_single":[1488]},"used_by":{"next_posts":[1506]}},"next_posts":{"doc":"\/**\n * Display or return the next posts page link.\n *\n * @since 0.71\n *\n * @param int $max_page Optional. Max pages.\n * @param boolean $echo Optional. Echo or return;\n *\/","file":"link-template.php","line":1505,"missingDoc":false,"filters":[],"uses":{"esc_url":[1506],"get_next_posts_page_link":[1506]},"used_by":{"get_next_posts_link":[1539]}},"get_next_posts_link":{"doc":"\/**\n * Return the next posts page link.\n *\n * @since 2.7.0\n *\n * @param string $label Content for link text.\n * @param int $max_page Optional. Max pages.\n * @return string|null\n *\/","file":"link-template.php","line":1523,"missingDoc":false,"filters":["'next_posts_link_attributes'"],"uses":{"intval":[1532],"__":[1535],"next_posts":[1539],"preg_replace":[1539],"is_single":[1537]},"used_by":{"next_posts_link":[1553],"get_posts_nav_link":[1658]}},"next_posts_link":{"doc":"\/**\n * Display the next posts page link.\n *\n * @since 0.71\n * @uses get_next_posts_link()\n *\n * @param string $label Content for link text.\n * @param int $max_page Optional. Max pages.\n *\/","file":"link-template.php","line":1552,"missingDoc":false,"filters":[],"uses":{"get_next_posts_link":[1553]},"used_by":[]},"get_previous_posts_page_link":{"doc":"\/**\n * Retrieve previous posts page link.\n *\n * Will only return string, if not on a single page or post.\n *\n * Backported to 2.0.10 from 2.1.3.\n *\n * @since 2.0.10\n *\n * @return string|null\n *\/","file":"link-template.php","line":1567,"missingDoc":false,"filters":[],"uses":{"intval":[1571],"get_pagenum_link":[1574],"is_single":[1570]},"used_by":{"previous_posts":[1586]}},"previous_posts":{"doc":"\/**\n * Display or return the previous posts page link.\n *\n * @since 0.71\n *\n * @param boolean $echo Optional. Echo or return;\n *\/","file":"link-template.php","line":1585,"missingDoc":false,"filters":[],"uses":{"esc_url":[1586],"get_previous_posts_page_link":[1586]},"used_by":{"get_previous_posts_link":[1610]}},"get_previous_posts_link":{"doc":"\/**\n * Return the previous posts page link.\n *\n * @since 2.7.0\n *\n * @param string $label Optional. Previous page link text.\n * @return string|null\n *\/","file":"link-template.php","line":1602,"missingDoc":false,"filters":["'previous_posts_link_attributes'"],"uses":{"__":[1606],"previous_posts":[1610],"preg_replace":[1610],"is_single":[1608]},"used_by":{"previous_posts_link":[1623],"get_posts_nav_link":[1656]}},"previous_posts_link":{"doc":"\/**\n * Display the previous posts page link.\n *\n * @since 0.71\n * @uses get_previous_posts_link()\n *\n * @param string $label Optional. Previous page link text.\n *\/","file":"link-template.php","line":1622,"missingDoc":false,"filters":[],"uses":{"get_previous_posts_link":[1623]},"used_by":[]},"get_posts_nav_link":{"doc":"\/**\n * Return post pages link navigation for previous and next pages.\n *\n * @since 2.8\n *\n * @param string|array $args Optional args.\n * @return string The posts link navigation.\n *\/","file":"link-template.php","line":1634,"missingDoc":false,"filters":[],"uses":{"__":[1642,1643],"wp_parse_args":[1645],"get_query_var":[1648],"get_previous_posts_link":[1656],"preg_replace":[1657],"get_next_posts_link":[1658],"is_singular":[1639]},"used_by":{"posts_nav_link":[1676]}},"posts_nav_link":{"doc":"\/**\n * Display post pages link navigation for previous and next pages.\n *\n * @since 0.71\n *\n * @param string $sep Optional. Separator for posts navigation links.\n * @param string $prelabel Optional. Label for previous pages.\n * @param string $nxtlabel Optional Label for next pages.\n *\/","file":"link-template.php","line":1674,"missingDoc":false,"filters":[],"uses":{"array_filter":[1675],"compact":[1675],"get_posts_nav_link":[1676]},"used_by":[]},"get_comments_pagenum_link":{"doc":"\/**\n * Retrieve comments page number link.\n *\n * @since 2.7.0\n *\n * @param int $pagenum Optional. Page number.\n * @return string\n *\/","file":"link-template.php","line":1687,"missingDoc":false,"filters":["'get_comments_pagenum_link'"],"uses":{"get_permalink":[1692],"user_trailingslashit":[1697,1703],"trailingslashit":[1697,1703],"add_query_arg":[1699,1705],"using_permalinks":[1696,1702],"get_option":[1694]},"used_by":{"get_next_comments_link":[1746],"get_previous_comments_link":[1783],"rel_canonical":[2323]}},"get_next_comments_link":{"doc":"\/**\n * Return the link to next comments page.\n *\n * @since 2.7.1\n *\n * @param string $label Optional. Label for link text.\n * @param int $max_page Optional. Max page.\n * @return string|null\n *\/","file":"link-template.php","line":1724,"missingDoc":false,"filters":["'next_comments_link_attributes'"],"uses":{"is_singular":[1727],"get_option":[1727],"get_query_var":[1730],"intval":[1732],"get_comment_pages_count":[1738],"__":[1744],"esc_url":[1746],"get_comments_pagenum_link":[1746],"preg_replace":[1746]},"used_by":{"next_comments_link":[1758]}},"next_comments_link":{"doc":"\/**\n * Display the link to next comments page.\n *\n * @since 2.7.0\n *\n * @param string $label Optional. Label for link text.\n * @param int $max_page Optional. Max page.\n *\/","file":"link-template.php","line":1757,"missingDoc":false,"filters":[],"uses":{"get_next_comments_link":[1758]},"used_by":{"__main":[31,40]}},"get_previous_comments_link":{"doc":"\/**\n * Return the previous comments page link.\n *\n * @since 2.7.1\n *\n * @param string $label Optional. Label for comments link text.\n * @return string|null\n *\/","file":"link-template.php","line":1769,"missingDoc":false,"filters":["'previous_comments_link_attributes'"],"uses":{"is_singular":[1770],"get_option":[1770],"get_query_var":[1773],"intval":[1775,1778],"__":[1781],"esc_url":[1783],"get_comments_pagenum_link":[1783],"preg_replace":[1783]},"used_by":{"previous_comments_link":[1794]}},"previous_comments_link":{"doc":"\/**\n * Display the previous comments page link.\n *\n * @since 2.7.0\n *\n * @param string $label Optional. Label for comments link text.\n *\/","file":"link-template.php","line":1793,"missingDoc":false,"filters":[],"uses":{"get_previous_comments_link":[1794]},"used_by":{"__main":[30,39]}},"paginate_comments_links":{"doc":"\/**\n * Create pagination links for the comments on the current post.\n *\n * @see paginate_links()\n * @since 2.7.0\n *\n * @param string|array $args Optional args. See paginate_links().\n * @return string Markup for pagination links.\n*\/","file":"link-template.php","line":1806,"missingDoc":false,"filters":[],"uses":{"is_singular":[1809],"get_option":[1809],"get_query_var":[1812],"get_comment_pages_count":[1815],"add_query_arg":[1817],"user_trailingslashit":[1825],"trailingslashit":[1825],"get_permalink":[1825],"using_permalinks":[1824],"wp_parse_args":[1827],"paginate_links":[1828]},"used_by":[]},"get_shortcut_link":{"doc":"\/**\n * Retrieve the Press This bookmarklet link.\n *\n * Use this in 'a' element 'href' attribute.\n *\n * @since 2.6.0\n *\n * @return string\n *\/","file":"link-template.php","line":1845,"missingDoc":false,"filters":["'shortcut_link'"],"uses":{"admin_url":[1854],"str_replace":[1862]},"used_by":[]},"get_site_url":{"doc":"\/**\n * Retrieve the site url for a given site.\n *\n * Returns the 'site_url' option with the appropriate protocol, 'https' if\n * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is\n * overridden.\n *\n * @package WordPress\n * @since 3.0.0\n *\n * @param int $blog_id (optional) Blog ID. Defaults to current blog.\n * @param string $path Optional. Path relative to the site url.\n * @param string $scheme Optional. Scheme to give the site url context. Currently 'http', 'https', 'login', 'login_post', 'admin', or 'relative'.\n * @return string Site url link with optional path appended.\n*\/","file":"link-template.php","line":1963,"missingDoc":false,"filters":["'site_url'"],"uses":{"get_option":[1965,1968],"switch_to_blog":[1967],"restore_current_blog":[1969],"is_multisite":[1964],"set_url_scheme":[1972],"ltrim":[1975],"is_string":[1974],"strpos":[1974]},"used_by":{"site_url":[1945],"get_admin_url":[2006]}},"get_admin_url":{"doc":"\/**\n * Retrieve the url to the admin area for a given site.\n *\n * @package WordPress\n * @since 3.0.0\n *\n * @param int $blog_id (optional) Blog ID. Defaults to current blog.\n * @param string $path Optional path relative to the admin url.\n * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl(). 'http' or 'https' can be passed to force those schemes.\n * @return string Admin url link with optional path appended.\n*\/","file":"link-template.php","line":2005,"missingDoc":false,"filters":["'admin_url'"],"uses":{"get_site_url":[2006],"ltrim":[2009],"is_string":[2008],"strpos":[2008]},"used_by":{"admin_url":[1991],"get_dashboard_url":[2275]}},"plugins_url":{"doc":"\/**\n * Retrieve the url to the plugins directory or to a specific file within that directory.\n * You can hardcode the plugin slug in $path or pass __FILE__ as a second argument to get the correct folder name.\n *\n * @package WordPress\n * @since 2.6.0\n *\n * @param string $path Optional. Path relative to the plugins url.\n * @param string $plugin Optional. The plugin file that you want to be relative to - i.e. pass in __FILE__\n * @return string Plugins url link with optional path appended.\n*\/","file":"link-template.php","line":2061,"missingDoc":false,"filters":["'plugins_url'"],"uses":{"str_replace":[2065],"preg_replace":[2066],"strpos":[2069,2083],"set_url_scheme":[2075],"dirname":[2078],"plugin_basename":[2078],"ltrim":[2080,2084],"is_string":[2077,2083]},"used_by":{"plugin_dir_url":[600],"get_theme_root_uri":[485]}},"plugin_basename":{"doc":"\/**\n * Gets the basename of a plugin.\n *\n * This method extracts the name of a plugin from its filename.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 1.5\n *\n * @access private\n *\n * @param string $file The filename of plugin.\n * @return string The name of a plugin.\n * @uses WP_PLUGIN_DIR\n *\/","file":"plugin.php","line":565,"missingDoc":false,"filters":[],"uses":{"str_replace":[566,568,570],"preg_replace":[567,569,571,572],"preg_quote":[572,572],"trim":[573]},"used_by":{"plugins_url":[2078],"register_activation_hook":[623],"register_deactivation_hook":[648],"register_uninstall_hook":[687]}},"rel_canonical":{"doc":"\/**\n * Output rel=canonical for singular queries.\n *\n * @package WordPress\n * @since 2.9.0\n*\/","file":"link-template.php","line":2312,"missingDoc":false,"filters":[],"uses":{"is_singular":[2313],"get_queried_object_id":[2317],"get_permalink":[2320],"get_comments_pagenum_link":[2323],"get_query_var":[2322]},"used_by":[]},"wp_shortlink_wp_head":{"doc":"\/**\n *  Inject rel=shortlink into head if a shortlink is defined for the current page.\n *\n *  Attached to the wp_head action.\n *\n * @since 3.0.0\n *\n * @uses wp_get_shortlink()\n *\/","file":"link-template.php","line":2379,"missingDoc":false,"filters":[],"uses":{"wp_get_shortlink":[2380],"esc_url":[2385]},"used_by":[]},"wp_shortlink_header":{"doc":"\/**\n * Send a Link: rel=shortlink header if a shortlink is defined for the current page.\n *\n * Attached to the wp action.\n *\n * @since 3.0.0\n *\n * @uses wp_get_shortlink()\n *\/","file":"link-template.php","line":2397,"missingDoc":false,"filters":[],"uses":{"headers_sent":[2398],"wp_get_shortlink":[2401],"header":[2406]},"used_by":[]},"the_shortlink":{"doc":"\/**\n * Display the Short Link for a Post\n *\n * Must be called from inside \"The Loop\"\n *\n * Call like the_shortlink(__('Shortlinkage FTW'))\n *\n * @since 3.0.0\n *\n * @param string $text Optional The link text or HTML to be displayed. Defaults to 'This is the short link.'\n * @param string $title Optional The tooltip for the link. Must be sanitized. Defaults to the sanitized post title.\n * @param string $before Optional HTML to display before the link.\n * @param string $after Optional HTML to display after the link.\n *\/","file":"link-template.php","line":2423,"missingDoc":false,"filters":["'the_shortlink'"],"uses":{"get_post":[2424],"__":[2427],"the_title_attribute":[2430],"wp_get_shortlink":[2432],"esc_url":[2435]},"used_by":[]},"wp_unregister_GLOBALS":{"doc":"\/**\n * Turn register globals off.\n *\n * @access private\n * @since 2.1.0\n * @return null Will return null if register_globals PHP directive was disabled\n *\/","file":"load.php","line":17,"missingDoc":false,"filters":[],"uses":{"ini_get":[18],"array_merge":[27],"is_array":[27],"in_array":[29]},"used_by":[]},"wp_fix_server_vars":{"doc":"\/**\n * Fix $_SERVER variables for various setups.\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":41,"missingDoc":false,"filters":[],"uses":{"array_merge":[49],"php_sapi_name":[52],"preg_match":[52],"strpos":[82,86],"strlen":[82],"preg_replace":[92]},"used_by":[]},"wp_check_php_mysql_versions":{"doc":"\/**\n * Check for the required PHP version, and the MySQL extension or a database drop-in.\n *\n * Dies if requirements are not met.\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":103,"missingDoc":false,"filters":[],"uses":{"phpversion":[105],"wp_load_translations_early":[107,112],"sprintf":[108],"__":[108,113],"version_compare":[106],"extension_loaded":[111],"file_exists":[111]},"used_by":[]},"wp_favicon_request":{"doc":"\/**\n * Don't load all of WordPress when handling a favicon.ico request.\n * Instead, send the headers for a zero-length favicon and bail.\n *\n * @since 3.0.0\n *\/","file":"load.php","line":123,"missingDoc":false,"filters":[],"uses":{"header":[125,126]},"used_by":[]},"wp_maintenance":{"doc":"\/**\n * Dies with a maintenance message when conditions are met.\n *\n * Checks for a file in the WordPress root directory named \".maintenance\".\n * This file will contain the variable $upgrading, set to the time the file\n * was created. If the file was created less than 10 minutes ago, WordPress\n * enters maintenance mode and displays a message.\n *\n * The default message can be replaced by using a drop-in (maintenance.php in\n * the wp-content directory).\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":145,"missingDoc":false,"filters":[],"uses":{"file_exists":[146,156],"defined":[146],"time":[153],"wp_load_translations_early":[161],"header":[166,167,168],"is_rtl":[171],"_e":[174,178]},"used_by":[]},"timer_start":{"doc":"\/**\n * PHP 5 standard microtime start capture.\n *\n * @access private\n * @since 0.71\n * @global float $timestart Seconds from when function is called.\n * @return bool Always returns true.\n *\/","file":"load.php","line":193,"missingDoc":false,"filters":[],"uses":{"microtime":[195]},"used_by":{"wpdb::query":[1193]}},"timer_stop":{"doc":"\/**\n * Return and\/or display the time from the page start to when function is called.\n *\n * You can get the results and print them by doing:\n * <code>\n * $nTimePageTookToExecute = timer_stop();\n * echo $nTimePageTookToExecute;\n * <\/code>\n *\n * Or instead, you can do:\n * <code>\n * timer_stop(1);\n * <\/code>\n * which will do what the above does. If you need the result, you can assign it to a variable, but\n * in most cases, you only need to echo it.\n *\n * @since 0.71\n * @global float $timestart Seconds from when timer_start() is called\n * @global float $timeend Seconds from when function is called\n *\n * @param int $display Use '0' or null to not echo anything and 1 to echo the total time\n * @param int $precision The amount of digits from the right of the decimal to display. Default is 3.\n * @return float The \"second.microsecond\" finished time calculation\n *\/","file":"load.php","line":223,"missingDoc":false,"filters":[],"uses":{"microtime":[225],"function_exists":[227],"number_format_i18n":[227],"number_format":[227]},"used_by":{"__main":[118,20],"wpdb::query":[1199]}},"wp_debug_mode":{"doc":"\/**\n * Sets PHP error handling and handles WordPress debug mode.\n *\n * Uses three constants: WP_DEBUG, WP_DEBUG_DISPLAY, and WP_DEBUG_LOG. All three can be\n * defined in wp-config.php. Example: <code> define( 'WP_DEBUG', true ); <\/code>\n *\n * WP_DEBUG_DISPLAY and WP_DEBUG_LOG perform no function unless WP_DEBUG is true.\n * WP_DEBUG defaults to false.\n *\n * When WP_DEBUG is true, all PHP notices are reported. WordPress will also display\n * notices, including one when a deprecated WordPress function, function argument,\n * or file is used. Deprecated code may be removed from a later version.\n *\n * It is strongly recommended that plugin and theme developers use WP_DEBUG in their\n * development environments.\n *\n * When WP_DEBUG_DISPLAY is true, WordPress will force errors to be displayed.\n * WP_DEBUG_DISPLAY defaults to true. Defining it as null prevents WordPress from\n * changing the global configuration setting. Defining WP_DEBUG_DISPLAY as false\n * will force errors to be hidden.\n *\n * When WP_DEBUG_LOG is true, errors will be logged to wp-content\/debug.log.\n * WP_DEBUG_LOG defaults to false.\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":260,"missingDoc":false,"filters":[],"uses":{"error_reporting":[265,267,279],"defined":[264],"ini_set":[270,272,275,276]},"used_by":[]},"wp_set_lang_dir":{"doc":"\/**\n * Sets the location of the language directory.\n *\n * To set directory manually, define <code>WP_LANG_DIR<\/code> in wp-config.php.\n *\n * If the language directory exists within WP_CONTENT_DIR, that is used.\n * Otherwise if the language directory exists within WPINC, that's used.\n * Finally, if neither of the preceding directories are found,\n * WP_CONTENT_DIR\/languages is used.\n *\n * The WP_LANG_DIR constant was introduced in 2.1.0.\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":298,"missingDoc":false,"filters":[],"uses":{"define":[301,304,307,310],"defined":[302,308,299],"file_exists":[300],"is_dir":[300,300]},"used_by":[]},"require_wp_db":{"doc":"\/**\n * Load the correct database class file.\n *\n * This function is used to load the database class file either at runtime or by\n * wp-admin\/setup-config.php. We must globalize $wpdb to ensure that it is\n * defined globally by the inline code in wp-db.php.\n *\n * @since 2.5.0\n * @global $wpdb WordPress Database Object\n *\/","file":"load.php","line":326,"missingDoc":false,"filters":[],"uses":{"file_exists":[330]},"used_by":[]},"wp_set_wpdb_vars":{"doc":"\/**\n * Sets the database table prefix and the format specifiers for database table columns.\n *\n * Columns not listed here default to %s.\n *\n * @see wpdb::$field_types Since 2.8.0\n * @see wpdb::prepare()\n * @see wpdb::insert()\n * @see wpdb::update()\n * @see wpdb::set_prefix()\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":353,"missingDoc":false,"filters":[],"uses":{"dead_db":[356],"set_prefix":[366],"wp_load_translations_early":[369],"wp_die":[370],"__":[370],"is_wp_error":[368]},"used_by":[]},"wp_start_object_cache":{"doc":"\/**\n * Starts the WordPress object cache.\n *\n * If an object-cache.php file exists in the wp-content directory,\n * it uses that drop-in as an external object cache.\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":383,"missingDoc":false,"filters":[],"uses":{"file_exists":[388,396],"function_exists":[387,406,411],"wp_cache_switch_to_blog":[407],"wp_cache_init":[409],"wp_cache_add_global_groups":[412],"wp_cache_add_non_persistent_groups":[413]},"used_by":{"__main":[133]}},"wp_not_installed":{"doc":"\/**\n * Redirects to the installer if WordPress is not installed.\n *\n * Dies with an error message when multisite is enabled.\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":425,"missingDoc":false,"filters":[],"uses":{"wp_die":[428],"__":[428],"is_blog_installed":[427,429],"defined":[427,429],"strpos":[429],"wp_guess_url":[431],"wp_redirect":[436],"is_multisite":[426]},"used_by":[]},"wp_get_mu_plugins":{"doc":"\/**\n * Returns array of must-use plugin files to be included in global scope.\n *\n * The default directory is wp-content\/mu-plugins. To change the default directory\n * manually, define <code>WPMU_PLUGIN_DIR<\/code> and <code>WPMU_PLUGIN_URL<\/code>\n * in wp-config.php.\n *\n * @access private\n * @since 3.0.0\n * @return array Files to include\n *\/","file":"load.php","line":452,"missingDoc":false,"filters":[],"uses":{"is_dir":[454],"opendir":[456],"readdir":[458],"substr":[459],"closedir":[462],"sort":[463]},"used_by":[]},"wp_get_active_and_valid_plugins":{"doc":"\/**\n * Returns array of plugin files to be included in global scope.\n *\n * The default directory is wp-content\/plugins. To change the default directory\n * manually, define <code>WP_PLUGIN_DIR<\/code> and <code>WP_PLUGIN_URL<\/code>\n * in wp-config.php.\n *\n * @access private\n * @since 3.0.0\n * @return array Files to include\n *\/","file":"load.php","line":479,"missingDoc":false,"filters":[],"uses":{"get_option":[481,484],"_deprecated_file":[485],"array_unshift":[486],"file_exists":[484,497],"defined":[489],"is_multisite":[492],"wp_get_active_network_plugins":[492],"validate_file":[495],"substr":[496],"in_array":[499]},"used_by":[]},"wp_get_active_network_plugins":{"doc":"\/**\n * Returns array of network plugin files to be included in global scope.\n *\n * The default directory is wp-content\/plugins. To change the default directory\n * manually, define <code>WP_PLUGIN_DIR<\/code> and <code>WP_PLUGIN_URL<\/code>\n * in wp-config.php.\n *\n * @access private\n * @since 3.1.0\n * @return array Files to include\n *\/","file":"ms-load.php","line":39,"missingDoc":false,"filters":[],"uses":{"get_site_option":[40],"array_keys":[45],"sort":[46],"validate_file":[49],"substr":[50],"file_exists":[51]},"used_by":{"wp_get_active_and_valid_plugins":[492]}},"wp_set_internal_encoding":{"doc":"\/**\n * Sets internal encoding using mb_internal_encoding().\n *\n * In most cases the default internal encoding is latin1, which is of no use,\n * since we want to use the mb_ functions for utf-8 strings.\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":515,"missingDoc":false,"filters":[],"uses":{"mb_internal_encoding":[518,517],"get_option":[517],"function_exists":[516]},"used_by":[]},"wp_magic_quotes":{"doc":"\/**\n * Add magic quotes to $_GET, $_POST, $_COOKIE, and $_SERVER.\n *\n * Also forces $_REQUEST to be $_GET + $_POST. If $_SERVER, $_COOKIE,\n * or $_ENV are needed, use those superglobals directly.\n *\n * @access private\n * @since 3.0.0\n *\/","file":"load.php","line":531,"missingDoc":false,"filters":[],"uses":{"stripslashes_deep":[534,535,536],"get_magic_quotes_gpc":[533],"add_magic_quotes":[540,541,542,543],"array_merge":[546]},"used_by":[]},"shutdown_action_hook":{"doc":"\/**\n * Runs just before PHP shuts down execution.\n *\n * @access private\n * @since 1.2.0\n *\/","file":"load.php","line":555,"missingDoc":false,"filters":["'shutdown'"],"uses":{"wp_cache_close":[557]},"used_by":[]},"wp_clone":{"doc":"\/**\n * Copy an object.\n *\n * @since 2.7.0\n * @deprecated 3.2\n *\n * @param object $object The object to clone\n * @return object The cloned object\n *\/","file":"load.php","line":570,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Locale::init":{"doc":"\/**\n * Sets up the translated strings and object properties.\n *\n * The method creates the translatable strings for various\n * calendar elements. Which allows for specifying locale\n * specific calendar names and text direction.\n *\n * @since 2.1.0\n * @access private\n *\/","file":"locale.php","line":97,"missingDoc":false,"filters":[],"uses":{"__":[99,100,101,102,103,104,105,109,109,110,110,111,111,112,112,113,113,114,114,115,115,122,122,123,123,124,124,125,125,126,126,127,127,128,128,131,132,133,134,135,136,137,138,139,140,141,142,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,164,165,166,167,173,177],"preg_replace":[118,160],"_x":[184]},"used_by":[]},"WP_Locale::get_weekday":{"doc":"\/**\n * Retrieve the full translated weekday word.\n *\n * Week starts on translated Sunday and can be fetched\n * by using 0 (zero). So the week starts with 0 (zero)\n * and ends on Saturday with is fetched by using 6 (six).\n *\n * @since 2.1.0\n * @access public\n *\n * @param int $weekday_number 0 for Sunday through 6 Saturday\n * @return string Full translated weekday\n *\/","file":"locale.php","line":201,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Locale::get_weekday_initial":{"doc":"\/**\n * Retrieve the translated weekday initial.\n *\n * The weekday initial is retrieved by the translated\n * full weekday word. When translating the weekday initial\n * pay attention to make sure that the starting letter does\n * not conflict.\n *\n * @since 2.1.0\n * @access public\n *\n * @param string $weekday_name\n * @return string\n *\/","file":"locale.php","line":219,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Locale::get_weekday_abbrev":{"doc":"\/**\n * Retrieve the translated weekday abbreviation.\n *\n * The weekday abbreviation is retrieved by the translated\n * full weekday word.\n *\n * @since 2.1.0\n * @access public\n *\n * @param string $weekday_name Full translated weekday word\n * @return string Translated weekday abbreviation\n *\/","file":"locale.php","line":235,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Locale::get_month":{"doc":"\/**\n * Retrieve the full translated month by month number.\n *\n * The $month_number parameter has to be a string\n * because it must have the '0' in front of any number\n * that is less than 10. Starts from '01' and ends at\n * '12'.\n *\n * You can use an integer instead and it will add the\n * '0' before the numbers less than 10 for you.\n *\n * @since 2.1.0\n * @access public\n *\n * @param string|int $month_number '01' through '12'\n * @return string Translated full month name\n *\/","file":"locale.php","line":256,"missingDoc":false,"filters":[],"uses":{"zeroise":[257]},"used_by":[]},"WP_Locale::get_month_abbrev":{"doc":"\/**\n * Retrieve translated version of month abbreviation string.\n *\n * The $month_name parameter is expected to be the translated or\n * translatable version of the month.\n *\n * @since 2.1.0\n * @access public\n *\n * @param string $month_name Translated month to get abbreviated version\n * @return string Translated abbreviated month\n *\/","file":"locale.php","line":272,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Locale::get_meridiem":{"doc":"\/**\n * Retrieve translated version of meridiem string.\n *\n * The $meridiem parameter is expected to not be translated.\n *\n * @since 2.1.0\n * @access public\n *\n * @param string $meridiem Either 'am', 'pm', 'AM', or 'PM'. Not translated version.\n * @return string Translated version\n *\/","file":"locale.php","line":287,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Locale::register_globals":{"doc":"\/**\n * Global variables are deprecated. For backwards compatibility only.\n *\n * @deprecated For backwards compatibility only.\n * @access private\n *\n * @since 2.1.0\n *\/","file":"locale.php","line":299,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Locale::__construct":{"doc":"\/**\n * Constructor which calls helper methods to set up object variables\n *\n * @uses WP_Locale::init()\n * @uses WP_Locale::register_globals()\n * @since 2.1.0\n *\n * @return WP_Locale\n *\/","file":"locale.php","line":316,"missingDoc":false,"filters":[],"uses":{"init":[317],"register_globals":[318]},"used_by":[]},"WP_Locale::is_rtl":{"doc":"\/**\n * Checks if current locale is RTL.\n *\n * @since 3.0.0\n * @return bool Whether locale is RTL.\n *\/","file":"locale.php","line":327,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wp_print_media_templates":{"doc":"\/**\n * Prints the templates used in the media manager.\n *\n * @since 3.5.0\n *\/","file":"media-template.php","line":15,"missingDoc":false,"filters":["'upload_ui_over_quota'","'pre-upload-ui'","'pre-plupload-upload-ui'","'post-plupload-upload-ui'","'post-plupload-upload-ui'","'post-upload-ui'","'image_size_names_choose'","'disable_captions'","'print_media_templates'"],"uses":{"strpos":[18],"esc_attr_e":[32,160,164,166,168,267,270,273,276,292,295,298,301,351,354,405,408,411,414,423,426,429],"_e":[40,51,53,58,59,110,111,125,148,152,176,203,204,209,222,226,231,236,245,248,255,259,284,310,340,343,360,372,379,391,397,402,420],"is_multisite":[52],"is_upload_space_available":[52],"add_action":[71],"remove_action":[69],"wp_max_upload_size":[76],"count":[79],"printf":[93,99],"__":[93,99,319,320,321,322],"esc_html":[93,93,330,365],"admin_url":[97],"_device_can_upload":[50],"esc_html_e":[180],"esc_js":[327],"esc_attr":[329,364],"selected":[329,364]},"used_by":[]},"is_upload_space_available":{"doc":"\/**\n * Determines if there is any upload space left in the current blog's quota.\n *\n * @since 3.0.0\n * @return bool True if space is available, false otherwise.\n *\/","file":"ms-functions.php","line":1998,"missingDoc":false,"filters":[],"uses":{"get_site_option":[1999],"get_upload_space_available":[2002]},"used_by":{"wp_print_media_templates":[52],"wp_plupload_default_settings":[1290]}},"wp_max_upload_size":{"doc":"\/**\n * {@internal Missing Short Description}}\n *\n * @since 2.5.0\n *\n * @return unknown\n *\/","file":"media.php","line":1146,"missingDoc":false,"filters":["'upload_size_limit'"],"uses":{"wp_convert_hr_to_bytes":[1147,1148],"ini_get":[1147,1148],"min":[1149]},"used_by":{"wp_print_media_templates":[76],"wp_plupload_default_settings":[1254]}},"image_constrain_size_for_editor":{"doc":"\/**\n * Scale down the default size of an image.\n *\n * This is so that the image is a better fit for the editor and theme.\n *\n * The $size parameter accepts either an array or a string. The supported string\n * values are 'thumb' or 'thumbnail' for the given thumbnail size or defaults at\n * 128 width and 96 height in pixels. Also supported for the string value is\n * 'medium' and 'full'. The 'full' isn't actually supported, but any value other\n * than the supported will result in the content_width size or 500 if that is\n * not set.\n *\n * Finally, there is a filter named 'editor_max_image_size', that will be called\n * on the calculated array for width and height, respectively. The second\n * parameter will be the value that was in the $size parameter. The returned\n * type for the hook is an array with the width as the first element and the\n * height as the second element.\n *\n * @since 2.5.0\n * @uses wp_constrain_dimensions() This function passes the widths and the heights.\n *\n * @param int $width Width of the image\n * @param int $height Height of the image\n * @param string|array $size Size of what the result image should be.\n * @param context Could be 'display' (like in a theme) or 'edit' (like inserting into an editor)\n * @return array Width and height of what the result image should resize to.\n *\/","file":"media.php","line":36,"missingDoc":false,"filters":["'editor_max_image_size'"],"uses":{"is_admin":[40],"intval":[47,48,56,57,65,66,68,67,70,71,73,72],"get_option":[47,48,56,57,65,66],"min":[68,73],"count":[69],"in_array":[69],"array_keys":[69],"is_array":[42],"wp_constrain_dimensions":[83]},"used_by":{"image_downsize":[175],"image_get_intermediate_size":[442,462],"wp_prepare_attachment_for_js":[1395]}},"wp_constrain_dimensions":{"doc":"\/**\n * Calculates the new dimensions for a downsampled image.\n *\n * If either width or height are empty, no constraint is applied on\n * that dimension.\n *\n * @since 2.5.0\n *\n * @param int $current_width Current width of the image.\n * @param int $current_height Current height of the image.\n * @param int $max_width Optional. Maximum wanted width.\n * @param int $max_height Optional. Maximum wanted height.\n * @return array First item is the width, the second item is the height.\n *\/","file":"media.php","line":259,"missingDoc":false,"filters":[],"uses":{"min":[277],"max":[278],"intval":[280,280,287,288]},"used_by":{"image_constrain_size_for_editor":[83],"image_resize_dimensions":[361],"wp_expand_dimensions":[1002]}},"image_hwstring":{"doc":"\/**\n * Retrieve width and height attributes using given width and height values.\n *\n * Both attributes are required in the sense that both parameters must have a\n * value, but are optional in that if you set them to false or null, then they\n * will not be added to the returned string.\n *\n * You can set the value using a string, but it will only take numeric values.\n * If you wish to put 'px' after the numbers, then it will be stripped out of\n * the return.\n *\n * @since 2.5.0\n *\n * @param int|string $width Optional. Width attribute value.\n * @param int|string $height Optional. Height attribute value.\n * @return string HTML attributes for width and, or height.\n *\/","file":"media.php","line":103,"missingDoc":false,"filters":[],"uses":{"intval":[106,108]},"used_by":{"get_image_tag":[231],"wp_get_attachment_image":[550]}},"wp_get_attachment_thumb_file":{"doc":"\/**\n * Retrieve thumbnail for an attachment.\n *\n * @since 2.1.0\n *\n * @param int $post_id Attachment ID.\n * @return mixed False on failure. Thumbnail file path on success.\n *\/","file":"post.php","line":4247,"missingDoc":false,"filters":["'wp_get_attachment_thumb_file'"],"uses":{"get_post":[4249],"is_array":[4251],"wp_get_attachment_metadata":[4251],"get_attached_file":[4254],"str_replace":[4256],"basename":[4256],"file_exists":[4256]},"used_by":{"image_downsize":[160],"wp_get_attachment_thumb_url":[4280]}},"image_get_intermediate_size":{"doc":"\/**\n * Retrieve the image's intermediate size (resized) path, width, and height.\n *\n * The $size parameter can be an array with the width and height respectively.\n * If the size matches the 'sizes' metadata array for width and height, then it\n * will be used. If there is no direct match, then the nearest image size larger\n * than the specified size will be used. If nothing is found, then the function\n * will break out and return false.\n *\n * The metadata 'sizes' is used for compatible sizes that can be used for the\n * parameter $size value.\n *\n * The url path will be given, when the $size parameter is a string.\n *\n * If you are passing an array for the $size, you should consider using\n * add_image_size() so that a cropped version is generated. It's much more\n * efficient than having to find the closest-sized image and then having the\n * browser scale down the image.\n *\n * @since 2.5.0\n * @see add_image_size()\n *\n * @param int $post_id Attachment ID for image.\n * @param array|string $size Optional, default is 'thumbnail'. Size of image, either array or string.\n * @return bool|array False on failure or array of file path, width, and height on success.\n *\/","file":"media.php","line":432,"missingDoc":false,"filters":[],"uses":{"is_array":[433,437,469],"wp_get_attachment_metadata":[433],"image_constrain_size_for_editor":[442,462],"compact":[443,463],"ksort":[450],"image_resize_dimensions":[456],"wp_get_attachment_url":[475],"path_join":[476,477],"dirname":[476,477]},"used_by":{"image_downsize":[152],"wp_delete_attachment":[4097]}},"add_image_size":{"doc":"\/**\n * Registers a new image size\n *\n * @since 2.9.0\n *\/","file":"media.php","line":188,"missingDoc":false,"filters":[],"uses":{"absint":[190,190]},"used_by":{"set_post_thumbnail_size":[199]}},"set_post_thumbnail_size":{"doc":"\/**\n * Registers an image size for the post thumbnail\n *\n * @since 2.9.0\n *\/","file":"media.php","line":198,"missingDoc":false,"filters":[],"uses":{"add_image_size":[199]},"used_by":[]},"get_image_tag":{"doc":"\/**\n * An <img src \/> tag for an image attachment, scaling it down if requested.\n *\n * The filter 'get_image_tag_class' allows for changing the class name for the\n * image without having to use regular expressions on the HTML content. The\n * parameters are: what WordPress will use for the class, the Attachment ID,\n * image align value, and the size the image should be.\n *\n * The second filter 'get_image_tag' has the HTML content, which can then be\n * further manipulated by a plugin to change all attribute values and even HTML\n * content.\n *\n * @since 2.5.0\n *\n * @uses apply_filters() The 'get_image_tag_class' filter is the IMG element\n *\t\tclass attribute.\n * @uses apply_filters() The 'get_image_tag' filter is the full IMG element with\n *\t\tall attributes.\n *\n * @param int $id Attachment ID.\n * @param string $alt Image Description for the alt attribute.\n * @param string $title Image Description for the title attribute.\n * @param string $align Part of the class name for aligning the image.\n * @param string $size Optional. Default is 'medium'.\n * @return string HTML IMG element for given image attachment\n *\/","file":"media.php","line":228,"missingDoc":false,"filters":["'get_image_tag_class'","'get_image_tag'"],"uses":{"image_downsize":[230],"image_hwstring":[231],"esc_attr":[233,235,235,238,238]},"used_by":[]},"image_make_intermediate_size":{"doc":"\/**\n * Resize an image to make a thumbnail or intermediate size.\n *\n * The returned array has the file size, the image width, and image height. The\n * filter 'image_make_intermediate_size' can be used to hook in and change the\n * values of the returned array. The only parameter is the resized file path.\n *\n * @since 2.5.0\n *\n * @param string $file File path.\n * @param int $width Image width.\n * @param int $height Image height.\n * @param bool $crop Optional, default is false. Whether to crop image to specified height and width or resize.\n * @return bool|array False, if no image was created. Metadata array on success.\n *\/","file":"media.php","line":389,"missingDoc":false,"filters":[],"uses":{"wp_get_image_editor":[391],"is_wp_error":[393,393,398],"resize":[393],"save":[396]},"used_by":[]},"get_intermediate_image_sizes":{"doc":"\/**\n * Get the available image sizes\n * @since 3.0.0\n * @return array Returns a filtered array of image size strings\n *\/","file":"media.php","line":487,"missingDoc":false,"filters":["'intermediate_image_sizes'"],"uses":{"array_merge":[491],"array_keys":[491],"count":[490]},"used_by":{"wp_delete_attachment":[4096]}},"wp_get_attachment_image_src":{"doc":"\/**\n * Retrieve an image to represent an attachment.\n *\n * A mime icon for files, thumbnail or intermediate size for images.\n *\n * @since 2.5.0\n *\n * @param int $attachment_id Image attachment ID.\n * @param string $size Optional, default is 'thumbnail'.\n * @param bool $icon Optional, default is false. Whether it is an icon.\n * @return bool|array Returns an array (url, width, height), or false, if no image is available.\n *\/","file":"media.php","line":508,"missingDoc":false,"filters":["'icon_dir'"],"uses":{"image_downsize":[511],"wp_basename":[518],"getimagesize":[519],"wp_mime_type_icon":[516]},"used_by":{"wp_get_attachment_image":[547]}},"wp_get_attachment_image":{"doc":"\/**\n * Get an HTML img element representing an image attachment\n *\n * While $size will accept an array, it is better to register a size with\n * add_image_size() so that a cropped version is generated. It's much more\n * efficient than having to find the closest-sized image and then having the\n * browser scale down the image.\n *\n * @see add_image_size()\n * @uses apply_filters() Calls 'wp_get_attachment_image_attributes' hook on attributes array\n * @uses wp_get_attachment_image_src() Gets attachment file URL and dimensions\n * @since 2.5.0\n *\n * @param int $attachment_id Image attachment ID.\n * @param string $size Optional, default is 'thumbnail'.\n * @param bool $icon Optional, default is false. Whether it is an icon.\n * @return string HTML img element or empty string on failure.\n *\/","file":"media.php","line":544,"missingDoc":false,"filters":["'wp_get_attachment_image_attributes'"],"uses":{"wp_get_attachment_image_src":[547],"image_hwstring":[550],"join":[552],"is_array":[551],"get_post":[553],"trim":[557,560,562],"strip_tags":[557,560,562],"get_post_meta":[557],"wp_parse_args":[564],"array_map":[566],"rtrim":[567]},"used_by":{"wp_get_attachment_link":[1176],"get_the_post_thumbnail":[93],"set_post_thumbnail":[5380]}},"_wp_post_thumbnail_class_filter":{"doc":"\/**\n * Adds a 'wp-post-image' class to post thumbnails\n * Uses the begin_fetch_post_thumbnail_html and end_fetch_post_thumbnail_html action hooks to\n * dynamically add\/remove itself so as to only filter post thumbnails\n *\n * @since 2.9.0\n * @param array $attr Attributes including src, class, alt, title\n * @return array\n *\/","file":"media.php","line":586,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"_wp_post_thumbnail_class_filter_add":{"doc":"\/**\n * Adds _wp_post_thumbnail_class_filter to the wp_get_attachment_image_attributes filter\n *\n * @since 2.9.0\n *\/","file":"media.php","line":596,"missingDoc":false,"filters":[],"uses":{"add_filter":[597]},"used_by":[]},"_wp_post_thumbnail_class_filter_remove":{"doc":"\/**\n * Removes _wp_post_thumbnail_class_filter from the wp_get_attachment_image_attributes filter\n *\n * @since 2.9.0\n *\/","file":"media.php","line":605,"missingDoc":false,"filters":[],"uses":{"remove_filter":[606]},"used_by":[]},"img_caption_shortcode":{"doc":"\/**\n * The Caption shortcode.\n *\n * Allows a plugin to replace the content that would otherwise be returned. The\n * filter is 'img_caption_shortcode' and passes an empty string, the attr\n * parameter and the content parameter values.\n *\n * The supported attributes for the shortcode are 'id', 'align', 'width', and\n * 'caption'.\n *\n * @since 2.6.0\n *\n * @param array $attr Attributes attributed to the shortcode.\n * @param string $content Optional. Shortcode content.\n * @return string\n *\/","file":"media.php","line":628,"missingDoc":false,"filters":["'img_caption_shortcode'"],"uses":{"trim":[633],"preg_match":[631],"extract":[642],"shortcode_atts":[642],"esc_attr":[652,654],"do_shortcode":[655]},"used_by":[]},"shortcode_atts":{"doc":"\/**\n * Combine user attributes with known attributes and fill in defaults when needed.\n *\n * The pairs should be considered to be all of the attributes which are\n * supported by the caller and given as a list. The returned attributes will\n * only contain the attributes in the $pairs list.\n *\n * If the $atts list has unsupported attributes, then they will be ignored and\n * removed from the final returned list.\n *\n * @since 2.5\n *\n * @param array $pairs Entire list of supported attributes and their defaults.\n * @param array $atts User defined attributes in shortcode tag.\n * @return array Combined and filtered attribute list.\n *\/","file":"shortcodes.php","line":294,"missingDoc":false,"filters":[],"uses":{"array_key_exists":[298]},"used_by":{"img_caption_shortcode":[642],"gallery_shortcode":[696]}},"gallery_shortcode":{"doc":"\/**\n * The Gallery shortcode.\n *\n * This implements the functionality of the Gallery Shortcode for displaying\n * WordPress images on a post.\n *\n * @since 2.5.0\n *\n * @param array $attr Attributes of the shortcode.\n * @return string HTML content to display gallery.\n *\/","file":"media.php","line":671,"missingDoc":false,"filters":["'post_gallery'","'use_default_gallery_style'","'gallery_style'"],"uses":{"get_post":[672],"sanitize_sql_orderby":[691],"extract":[696],"shortcode_atts":[696],"intval":[709,738],"get_posts":[714],"get_children":[721,723],"wp_get_attachment_link":[732,771,771],"is_feed":[729],"tag_escape":[736,737],"floor":[739],"is_rtl":[740],"sanitize_html_class":[765],"wptexturize":[781],"trim":[778]},"used_by":[]},"get_children":{"doc":"\/**\n * Retrieve all children of the post parent ID.\n *\n * Normally, without any enhancements, the children would apply to pages. In the\n * context of the inner workings of WordPress, pages, posts, and attachments\n * share the same table, so therefore the functionality could apply to any one\n * of them. It is then noted that while this function does not work on posts, it\n * does not mean that it won't work on posts. It is recommended that you know\n * what context you wish to retrieve the children of.\n *\n * Attachments may also be made the child of a post, so if that is an accurate\n * statement (which needs to be verified), it would then be possible to get\n * all of the attachments for a post. Attachments have since changed since\n * version 2.5, so this is most likely unaccurate, but serves generally as an\n * example of what is possible.\n *\n * The arguments listed as defaults are for this function and also of the\n * {@link get_posts()} function. The arguments are combined with the\n * get_children defaults and are then passed to the {@link get_posts()}\n * function, which accepts additional arguments. You can replace the defaults in\n * this function, listed below and the additional arguments listed in the\n * {@link get_posts()} function.\n *\n * The 'post_parent' is the most important argument and important attention\n * needs to be paid to the $args parameter. If you pass either an object or an\n * integer (number), then just the 'post_parent' is grabbed and everything else\n * is lost. If you don't specify any arguments, then it is assumed that you are\n * in The Loop and the post parent will be grabbed for from the current post.\n *\n * The 'post_parent' argument is the ID to get the children. The 'numberposts'\n * is the amount of posts to retrieve that has a default of '-1', which is\n * used to get all of the posts. Giving a number higher than 0 will only\n * retrieve that amount of posts.\n *\n * The 'post_type' and 'post_status' arguments can be used to choose what\n * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress\n * post types are 'post', 'pages', and 'attachments'. The 'post_status'\n * argument will accept any post status within the write administration panels.\n *\n * @see get_posts() Has additional arguments that can be replaced.\n * @internal Claims made in the long description might be inaccurate.\n *\n * @since 2.0.0\n *\n * @param mixed $args Optional. User defined arguments for replacing the defaults.\n * @param string $output Optional. Constant for return type, either OBJECT (default), ARRAY_A, ARRAY_N.\n * @return array|bool False on failure and the type will be determined by $output parameter.\n *\/","file":"post.php","line":290,"missingDoc":false,"filters":[],"uses":{"is_object":[298],"is_numeric":[300],"wp_parse_args":[309],"get_posts":[311],"update_post_cache":[316],"get_object_vars":[325,329],"array_values":[329]},"used_by":{"gallery_shortcode":[721,723],"adjacent_image_link":[831],"wp_get_post_revisions":[5221]}},"wp_get_attachment_link":{"doc":"\/**\n * Retrieve an attachment page link using an image or icon, if possible.\n *\n * @since 2.5.0\n * @uses apply_filters() Calls 'wp_get_attachment_link' filter on HTML content with same parameters as function.\n *\n * @param int $id Optional. Post ID.\n * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string.\n * @param bool $permalink Optional, default is false. Whether to add permalink to image.\n * @param bool $icon Optional, default is false. Whether to include icon.\n * @param string|bool $text Optional, default is false. If string, then will be link text.\n * @return string HTML content.\n *\/","file":"post-template.php","line":1161,"missingDoc":false,"filters":["'wp_get_attachment_link'"],"uses":{"intval":[1162],"get_post":[1163],"__":[1166],"wp_get_attachment_url":[1165],"get_attachment_link":[1169],"esc_attr":[1171],"wp_get_attachment_image":[1176],"trim":[1180]},"used_by":{"gallery_shortcode":[732,771,771],"adjacent_image_link":[842],"the_attachment_link":[1143,1145],"prepend_attachment":[1203]}},"previous_image_link":{"doc":"\/**\n * Display previous image link that has the same post parent.\n *\n * @since 2.5.0\n * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text;\n * @param string $text Optional, default is false. If included, link will reflect $text variable.\n * @return string HTML content.\n *\/","file":"media.php","line":804,"missingDoc":false,"filters":[],"uses":{"adjacent_image_link":[805]},"used_by":[]},"adjacent_image_link":{"doc":"\/**\n * Display next or previous image link that has the same post parent.\n *\n * Retrieves the current attachment object from the $post global.\n *\n * @since 2.5.0\n *\n * @param bool $prev Optional. Default is true to display previous link, false for next.\n *\/","file":"media.php","line":829,"missingDoc":false,"filters":["\"{$adjacent}_image_link\""],"uses":{"get_post":[830],"array_values":[831],"get_children":[831],"wp_get_attachment_link":[842]},"used_by":{"previous_image_link":[805],"next_image_link":[817]}},"next_image_link":{"doc":"\/**\n * Display next image link that has the same post parent.\n *\n * @since 2.5.0\n * @param string $size Optional, default is 'thumbnail'. Size of image, either array or string. 0 or 'none' will default to post_title or $text;\n * @param string $text Optional, default is false. If included, link will reflect $text variable.\n * @return string HTML content.\n *\/","file":"media.php","line":816,"missingDoc":false,"filters":[],"uses":{"adjacent_image_link":[817]},"used_by":[]},"get_attachment_taxonomies":{"doc":"\/**\n * Retrieve taxonomies attached to the attachment.\n *\n * @since 2.5.0\n *\n * @param int|array|object $attachment Attachment ID, Attachment data array, or Attachment data object.\n * @return array Empty array on failure. List of taxonomies on success.\n *\/","file":"media.php","line":857,"missingDoc":false,"filters":[],"uses":{"get_post":[859],"is_array":[860],"is_int":[858],"is_object":[863],"basename":[866],"substr":[871],"strrpos":[871],"strpos":[870,874],"explode":[875],"array_merge":[883],"get_object_taxonomies":[882],"array_unique":[885]},"used_by":{"get_object_taxonomies":[170]}},"get_taxonomies_for_attachments":{"doc":"\/**\n * Return all of the taxonomy names that are registered for attachments.\n *\n * Handles mime-type-specific taxonomies such as attachment:image and attachment:video.\n *\n * @since 3.5.0\n * @see get_attachment_taxonomies()\n * @uses get_taxonomies()\n *\n * @param string $output The type of output to return, either taxonomy 'names' or 'objects'. 'names' is the default.\n * @return array The names of all taxonomy of $object_type.\n *\/","file":"media.php","line":900,"missingDoc":false,"filters":[],"uses":{"strpos":[904],"get_taxonomies":[902]},"used_by":{"WP_Query::get_posts":[2227]}},"wp_embed_register_handler":{"doc":"\/**\n * Register an embed handler. This function should probably only be used for sites that do not support oEmbed.\n *\n * @since 2.9.0\n * @see WP_Embed::register_handler()\n *\/","file":"media.php","line":942,"missingDoc":false,"filters":[],"uses":{"register_handler":[944]},"used_by":{"wp_maybe_load_embeds":[1076]}},"wp_embed_unregister_handler":{"doc":"\/**\n * Unregister a previously registered embed handler.\n *\n * @since 2.9.0\n * @see WP_Embed::unregister_handler()\n *\/","file":"media.php","line":953,"missingDoc":false,"filters":[],"uses":{"unregister_handler":[955]},"used_by":[]},"wp_expand_dimensions":{"doc":"\/**\n * Based on a supplied width\/height example, return the biggest possible dimensions based on the max width\/height.\n *\n * @since 2.9.0\n * @uses wp_constrain_dimensions() This function passes the widths and the heights.\n *\n * @param int $example_width The width of an example embed.\n * @param int $example_height The height of an example embed.\n * @param int $max_width The maximum allowed width.\n * @param int $max_height The maximum allowed height.\n * @return array The maximum possible width and height based on the example ratio.\n *\/","file":"media.php","line":996,"missingDoc":false,"filters":[],"uses":{"wp_constrain_dimensions":[1002]},"used_by":{"wp_embed_handler_googlevideo":[1097]}},"wp_oembed_add_provider":{"doc":"\/**\n * Adds a URL format and oEmbed provider URL pair.\n *\n * @since 2.9.0\n * @see WP_oEmbed\n *\n * @uses _wp_oembed_get_object()\n *\n * @param string $format The format of URL that this provider can handle. You can use asterisks as wildcards.\n * @param string $provider The URL to the oEmbed provider.\n * @param boolean $regex Whether the $format parameter is in a regex format.\n *\/","file":"media.php","line":1036,"missingDoc":false,"filters":[],"uses":{"_wp_oembed_get_object":[1038]},"used_by":[]},"wp_oembed_remove_provider":{"doc":"\/**\n * Removes an oEmbed provider.\n *\n * @since 3.5.0\n * @see WP_oEmbed\n *\n * @uses _wp_oembed_get_object()\n *\n * @param string $format The URL format for the oEmbed provider to remove.\n *\/","file":"media.php","line":1052,"missingDoc":false,"filters":[],"uses":{"_wp_oembed_get_object":[1055]},"used_by":[]},"wp_maybe_load_embeds":{"doc":"\/**\n * Determines if default embed handlers should be loaded.\n *\n * Checks to make sure that the embeds library hasn't already been loaded. If\n * it hasn't, then it will load the embeds library.\n *\n * @since 2.9.0\n *\/","file":"media.php","line":1073,"missingDoc":false,"filters":["'load_default_embeds'"],"uses":{"wp_embed_register_handler":[1076]},"used_by":[]},"wp_embed_handler_googlevideo":{"doc":"\/**\n * The Google Video embed handler callback. Google Video does not support oEmbed.\n *\n * @see WP_Embed::register_handler()\n * @see WP_Embed::shortcode()\n *\n * @param array $matches The regex matches from the provided regex when calling {@link wp_embed_register_handler()}.\n * @param array $attr Embed attributes.\n * @param string $url The original URL that was matched by the regex.\n * @param array $rawattr The original unmodified attributes.\n * @return string The embed HTML.\n *\/","file":"media.php","line":1091,"missingDoc":false,"filters":["'embed_googlevideo'"],"uses":{"wp_expand_dimensions":[1097],"esc_attr":[1100,1100,1100]},"used_by":[]},"wp_convert_hr_to_bytes":{"doc":"\/**\n * {@internal Missing Short Description}}\n *\n * @since 2.3.0\n *\n * @param unknown_type $size\n * @return unknown\n *\/","file":"media.php","line":1111,"missingDoc":false,"filters":[],"uses":{"strtolower":[1112],"intval":[1115,1117,1119],"strpos":[1116,1118,1114]},"used_by":{"wp_max_upload_size":[1147,1148]}},"wp_convert_bytes_to_hr":{"doc":"\/**\n * {@internal Missing Short Description}}\n *\n * @since 2.3.0\n *\n * @param unknown_type $bytes\n * @return unknown\n *\/","file":"media.php","line":1131,"missingDoc":false,"filters":[],"uses":{"log":[1133],"pow":[1135]},"used_by":[]},"_wp_image_editor_choose":{"doc":"\/**\n * Tests which editors are capable of supporting the request.\n *\n * @since 3.5.0\n * @access private\n *\n * @param array $args Additional data. Accepts { 'mime_type'=>string, 'methods'=>{string, string, ...} }\n * @return string|bool Class name for the first editor that claims to support the request. False if no editor claims to support the request.\n *\/","file":"media.php","line":1212,"missingDoc":false,"filters":["'wp_image_editors'"],"uses":{"call_user_func":[1221,1225],"array_diff":[1232],"get_class_methods":[1232]},"used_by":{"wp_get_image_editor":[1175],"wp_image_editor_supports":[1200]}},"wp_image_editor_supports":{"doc":"\/**\n * Tests whether there is an editor that supports a given mime type or methods.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string|array $args Array of requirements.  Accepts { 'mime_type'=>string, 'methods'=>{string, string, ...} }\n * @return boolean true if an eligible editor is found; false otherwise\n *\/","file":"media.php","line":1199,"missingDoc":false,"filters":[],"uses":{"_wp_image_editor_choose":[1200]},"used_by":[]},"wp_plupload_default_settings":{"doc":"\/**\n * Prints default plupload arguments.\n *\n * @since 3.4.0\n *\/","file":"media.php","line":1247,"missingDoc":false,"filters":["'plupload_default_settings'","'plupload_default_params'"],"uses":{"get_data":[1250],"strpos":[1251],"wp_max_upload_size":[1254],"admin_url":[1261],"includes_url":[1262,1263],"__":[1264],"wp_is_mobile":[1271,1287],"wp_create_nonce":[1281],"_device_can_upload":[1288],"is_multisite":[1290],"is_upload_space_available":[1290],"json_encode":[1293],"add_data":[1298]},"used_by":{"wp_enqueue_media":[1544]}},"wp_prepare_attachment_for_js":{"doc":"\/**\n * Prepares an attachment post object for JS, where it is expected\n * to be JSON-encoded and fit into an Attachment model.\n *\n * @since 3.5.0\n *\n * @param mixed $attachment Attachment ID or object.\n * @return array Array of attachment details.\n *\/","file":"media.php","line":1311,"missingDoc":false,"filters":["'image_size_names_choose'","'image_downsize'","'wp_prepare_attachment_for_js'"],"uses":{"get_post":[1312],"wp_get_attachment_metadata":[1318],"explode":[1320],"strpos":[1319],"wp_get_attachment_url":[1324],"basename":[1329],"get_attachment_link":[1331],"get_post_meta":[1332],"strtotime":[1339,1340],"wp_mime_type_icon":[1345],"mysql2date":[1346],"get_option":[1346],"wp_create_nonce":[1355,1360],"get_edit_post_link":[1356],"current_user_can":[1354,1359],"__":[1365,1366,1367,1368],"str_replace":[1388],"wp_basename":[1388],"image_constrain_size_for_editor":[1395],"array_merge":[1413],"get_compat_media_markup":[1417],"function_exists":[1416]},"used_by":[]},"wp_enqueue_media":{"doc":"\/**\n * Enqueues all scripts, styles, settings, and templates necessary to use\n * all media JS APIs.\n *\n * @since 3.5.0\n *\/","file":"media.php","line":1428,"missingDoc":false,"filters":["'media_upload_tabs'","'disable_captions'","'media_view_settings'","'media_view_strings'","'wp_enqueue_media'"],"uses":{"did_action":[1431],"wp_parse_args":[1437],"get_option":[1453,1454,1455],"add_query_arg":[1460],"admin_url":[1460],"wp_list_pluck":[1461],"get_post_mime_types":[1461],"wp_create_nonce":[1464,1477],"get_post":[1474],"get_post_meta":[1481],"current_theme_supports":[1480],"post_type_supports":[1480],"is_post_type_hierarchical":[1486],"__":[1490,1491,1492,1493,1494,1499,1500,1503,1504,1507,1508,1509,1510,1511,1512,1513,1513,1514,1514,1515,1518,1521,1522,1525,1526,1527,1528,1529,1530,1531,1532],"wp_localize_script":[1540],"wp_enqueue_script":[1542],"wp_enqueue_style":[1543],"wp_plupload_default_settings":[1544],"add_action":[1547,1548]},"used_by":[]},"get_post_mime_types":{"doc":"\/**\n * Get default post mime types\n *\n * @since 2.9.0\n *\n * @return array\n *\/","file":"post.php","line":2192,"missingDoc":false,"filters":["'post_mime_types'"],"uses":{"__":[2194,2194,2195,2195,2196,2196],"_n_noop":[2194,2195,2196]},"used_by":{"wp_enqueue_media":[1461]}},"is_post_type_hierarchical":{"doc":"\/**\n * Whether the post type is hierarchical.\n *\n * A false return value might also mean that the post type does not exist.\n *\n * @since 3.0.0\n * @see get_post_type_object\n *\n * @param string $post_type Post type name\n * @return bool Whether post type is hierarchical.\n *\/","file":"post.php","line":1043,"missingDoc":false,"filters":[],"uses":{"post_type_exists":[1044],"get_post_type_object":[1047]},"used_by":{"wp_enqueue_media":[1486],"_wp_menu_item_classes_by_context":[267,424],"wp_delete_post":[2327,2372],"wp_check_for_changed_slugs":[4427],"clean_post_cache":[4659],"wp_old_slug_redirect":[3587],"WP_Rewrite::generate_rewrite_rules":[1397]}},"_get_meta_table":{"doc":"\/**\n * Retrieve the name of the metadata table for the specified object type.\n *\n * @since 2.9.0\n * @uses $wpdb WordPress database object for queries.\n *\n * @param string $type Type of object to get metadata table for (e.g., comment, post, or user)\n * @return mixed Metadata table name, or false if no metadata table exists\n *\/","file":"meta.php","line":843,"missingDoc":false,"filters":[],"uses":[],"used_by":{"add_metadata":[38],"update_metadata":[108],"delete_metadata":[191],"get_metadata_by_mid":[357],"update_metadata_by_mid":[397],"delete_metadata_by_mid":[477],"update_meta_cache":[528],"WP_Meta_Query::get_sql":[706]}},"sanitize_meta":{"doc":"\/**\n * Sanitize meta value\n *\n * @since 3.1.3\n *\n * @param string $meta_key Meta key\n * @param mixed $meta_value Meta value to sanitize\n * @param string $meta_type Type of meta\n * @return mixed Sanitized $meta_value\n *\/","file":"meta.php","line":878,"missingDoc":false,"filters":["\"sanitize_{$meta_type}_meta_{$meta_key}\""],"uses":[],"used_by":{"add_metadata":[48],"update_metadata":[120],"update_metadata_by_mid":[419]}},"get_meta_sql":{"doc":"\/**\n * Given a meta query, generates SQL clauses to be appended to a main query\n *\n * @since 3.2.0\n *\n * @see WP_Meta_Query\n *\n * @param array $meta_query A meta query\n * @param string $type Type of meta\n * @param string $primary_table\n * @param string $primary_id_column\n * @param object $context (optional) The main query object\n * @return array( 'join' => $join_sql, 'where' => $where_sql )\n *\/","file":"meta.php","line":601,"missingDoc":false,"filters":[],"uses":{"get_sql":[603]},"used_by":[]},"WP_Meta_Query::__construct":{"doc":"\/**\n * Constructor\n *\n * @param array $meta_query (optional) A meta query\n *\/","file":"meta.php","line":643,"missingDoc":false,"filters":[],"uses":{"strtoupper":[647],"is_array":[656]},"used_by":[]},"WP_Meta_Query::parse_query_vars":{"doc":"\/**\n * Constructs a meta query based on 'meta_*' query vars\n *\n * @since 3.2.0\n * @access public\n *\n * @param array $qv The query variables\n *\/","file":"meta.php","line":671,"missingDoc":false,"filters":[],"uses":{"array_merge":[685],"is_array":[684],"__construct":[688]},"used_by":[]},"WP_Meta_Query::get_sql":{"doc":"\/**\n * Generates SQL clauses to be appended to a main query.\n *\n * @since 3.2.0\n * @access public\n *\n * @param string $type Type of meta\n * @param string $primary_table\n * @param string $primary_id_column\n * @param object $context (optional) The main query object\n * @return array( 'join' => $join_sql, 'where' => $where_sql )\n *\/","file":"meta.php","line":703,"missingDoc":false,"filters":[],"uses":{"_get_meta_table":[706],"esc_sql":[709],"prepare":[734,781,816],"trim":[734,738,798],"strtoupper":[739,749],"in_array":[743,753,789],"is_array":[751,790],"count":[762,802],"is_null":[783],"preg_split":[791],"substr":[802,803,806,801],"str_repeat":[802],"array_slice":[804],"like_escape":[807],"array_filter":[819],"implode":[824,826],"apply_filters_ref_array":[830],"compact":[830]},"used_by":[]},"register_meta":{"doc":"\/**\n * Register meta key\n *\n * @since 3.3.0\n *\n * @param string $meta_type Type of meta\n * @param string $meta_key Meta key\n * @param string|array $sanitize_callback A function or method to call when sanitizing the value of $meta_key.\n * @param string|array $auth_callback Optional. A function or method to call when performing edit_post_meta, add_post_meta, and delete_post_meta capability checks.\n * @param array $args Arguments\n *\/","file":"meta.php","line":893,"missingDoc":false,"filters":[],"uses":{"add_filter":[895,905],"is_callable":[894,904],"is_protected_meta":[898]},"used_by":[]},"wpmu_update_blogs_date":{"doc":"\/**\n * Update the last_updated field for the current blog.\n *\n * @since MU\n *\/","file":"ms-blogs.php","line":16,"missingDoc":false,"filters":["'wpmu_blog_updated'"],"uses":{"update_blog_details":[19],"current_time":[19]},"used_by":{"_update_blog_date_on_post_publish":[751],"_update_blog_date_on_post_delete":[771]}},"update_blog_details":{"doc":"\/**\n * Update the details for a blog. Updates the blogs table for a given blog id.\n *\n * @since MU\n *\n * @param int $blog_id Blog ID\n * @param array $details Array of details keyed by blogs table field names.\n * @return bool True if update succeeds, false otherwise.\n *\/","file":"ms-blogs.php","line":272,"missingDoc":false,"filters":["'make_spam_blog'","'make_ham_blog'","'mature_blog'","'unmature_blog'","'archive_blog'","'unarchive_blog'","'make_delete_blog'","'make_undelete_blog'"],"uses":{"get_object_vars":[279,285],"is_object":[278],"get_blog_details":[281],"array_merge":[287],"current_time":[288],"array_intersect":[292],"array_keys":[292],"update":[295],"switch_to_blog":[333],"update_option":[334],"restore_current_blog":[335],"refresh_blog_details":[338]},"used_by":{"wpmu_update_blogs_date":[19]}},"get_blogaddress_by_id":{"doc":"\/**\n * Get a full blog URL, given a blog id.\n *\n * @since MU\n *\n * @param int $blog_id Blog ID\n * @return string\n *\/","file":"ms-blogs.php","line":32,"missingDoc":false,"filters":[],"uses":{"get_blog_details":[33],"esc_url":[34]},"used_by":{"install_blog":[1145],"wpmu_welcome_notification":[1236]}},"get_blogaddress_by_name":{"doc":"\/**\n * Get a full blog URL, given a blog name.\n *\n * @since MU\n *\n * @param string $blogname The (subdomain or directory) name\n * @return string\n *\/","file":"ms-blogs.php","line":45,"missingDoc":false,"filters":[],"uses":{"rtrim":[51],"network_home_url":[51,55],"preg_replace":[53],"is_subdomain_install":[48],"esc_url":[57]},"used_by":[]},"is_subdomain_install":{"doc":"\/**\n * Whether a subdomain configuration is enabled.\n *\n * @since 3.0.0\n *\n * @return bool True if subdomain configuration is enabled, false otherwise.\n *\/","file":"ms-load.php","line":18,"missingDoc":false,"filters":[],"uses":{"defined":[19,22]},"used_by":{"get_blogaddress_by_name":[48],"get_blogaddress_by_domain":[70],"get_id_from_blogname":[103],"get_blog_details":[148],"ms_cookie_constants":[66,76],"wpmu_validate_blog_signup":[558,577,594],"wpmu_signup_blog_notification":[727],"wpmu_create_blog":[957],"wpmu_current_site":[199],"__main":[52,83]}},"get_blogaddress_by_domain":{"doc":"\/**\n * Get a full blog URL, given a domain and a path.\n *\n * @since MU\n *\n * @param string $domain\n * @param string $path\n * @return string\n *\/","file":"ms-blogs.php","line":69,"missingDoc":false,"filters":[],"uses":{"substr":[74,75],"strpos":[74,75],"is_subdomain_install":[70],"esc_url":[83]},"used_by":[]},"get_id_from_blogname":{"doc":"\/**\n * Given a blog's (subdomain or directory) slug, retrieve its id.\n *\n * @since MU\n *\n * @param string $slug\n * @return int A blog id\n *\/","file":"ms-blogs.php","line":94,"missingDoc":false,"filters":[],"uses":{"trim":[97],"wp_cache_get":[99],"is_subdomain_install":[103],"get_var":[111],"prepare":[111],"wp_cache_set":[112]},"used_by":{"get_blog_details":[172]}},"refresh_blog_details":{"doc":"\/**\n * Clear the blog details cache.\n *\n * @since MU\n *\n * @param int $blog_id Blog ID\n *\/","file":"ms-blogs.php","line":254,"missingDoc":false,"filters":["'refresh_blog_details'"],"uses":{"get_blog_details":[256],"clean_blog_cache":[258]},"used_by":{"update_blog_details":[338],"update_blog_option":[479],"update_blog_status":[680],"insert_blog":[1114]}},"clean_blog_cache":{"doc":"\/**\n * Clean the blog cache\n *\n * @since 3.5.0\n *\n * @param stdClass $blog The blog details as returned from get_blog_details()\n *\/","file":"ms-blogs.php","line":350,"missingDoc":false,"filters":[],"uses":{"md5":[352],"wp_cache_delete":[354,355,356,357,358,359,360],"trim":[359]},"used_by":{"refresh_blog_details":[258]}},"get_blog_option":{"doc":"\/**\n * Retrieve option value for a given blog id based on name of option.\n *\n * If the option does not exist or does not have a value, then the return value\n * will be false. This is useful to check whether you need to install an option\n * and is commonly used during installation of plugin options and to test\n * whether upgrading is required.\n *\n * If the option was serialized then it will be unserialized when it is returned.\n *\n * @since MU\n *\n * @param int $id A blog ID. Can be null to refer to the current blog.\n * @param string $option Name of option to retrieve. Expected to not be SQL-escaped.\n * @param mixed $default Optional. Default value to return if the option does not exist.\n * @return mixed Value set for the option.\n *\/","file":"ms-blogs.php","line":380,"missingDoc":false,"filters":["'blog_option_' . $option"],"uses":{"get_current_blog_id":[384,386],"get_option":[387,390],"switch_to_blog":[389],"restore_current_blog":[391]},"used_by":{"install_blog":[1161]}},"add_blog_option":{"doc":"\/**\n * Add a new option for a given blog id.\n *\n * You do not need to serialize values. If the value needs to be serialized, then\n * it will be serialized before it is inserted into the database. Remember,\n * resources can not be serialized or added as an option.\n *\n * You can create options without values and then update the values later.\n * Existing options will not be updated and checks are performed to ensure that you\n * aren't adding a protected WordPress option. Care should be taken to not name\n * options the same as the ones which are protected.\n *\n * @since MU\n *\n * @param int $id A blog ID. Can be null to refer to the current blog.\n * @param string $option Name of option to add. Expected to not be SQL-escaped.\n * @param mixed $value Optional. Option value, can be anything. Expected to not be SQL-escaped.\n * @return bool False if option was not added and true if option was added.\n *\/","file":"ms-blogs.php","line":415,"missingDoc":false,"filters":[],"uses":{"get_current_blog_id":[419,421],"add_option":[422,425],"switch_to_blog":[424],"restore_current_blog":[426]},"used_by":[]},"delete_blog_option":{"doc":"\/**\n * Removes option by name for a given blog id. Prevents removal of protected WordPress options.\n *\n * @since MU\n *\n * @param int $id A blog ID. Can be null to refer to the current blog.\n * @param string $option Name of option to remove. Expected to not be SQL-escaped.\n * @return bool True, if option is successfully deleted. False on failure.\n *\/","file":"ms-blogs.php","line":440,"missingDoc":false,"filters":[],"uses":{"get_current_blog_id":[444,446],"delete_option":[447,450],"switch_to_blog":[449],"restore_current_blog":[451]},"used_by":[]},"update_blog_option":{"doc":"\/**\n * Update an option for a particular blog.\n *\n * @since MU\n *\n * @param int $id The blog id\n * @param string $option The option key\n * @param mixed $value The option value\n * @return bool True on success, false on failrue.\n *\/","file":"ms-blogs.php","line":466,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[470],"update_option":[473,476],"get_current_blog_id":[472],"switch_to_blog":[475],"restore_current_blog":[477],"refresh_blog_details":[479]},"used_by":[]},"is_archived":{"doc":"\/**\n * Check if a particular blog is archived.\n *\n * @since MU\n *\n * @param int $id The blog id\n * @return string Whether the blog is archived or not\n *\/","file":"ms-blogs.php","line":638,"missingDoc":false,"filters":[],"uses":{"get_blog_status":[639]},"used_by":[]},"get_blog_status":{"doc":"\/**\n * Get a blog details field.\n *\n * @since MU\n *\n * @param int $id The blog id\n * @param string $pref A field name\n * @return bool $value\n *\/","file":"ms-blogs.php","line":703,"missingDoc":false,"filters":[],"uses":{"get_blog_details":[706],"get_var":[710],"prepare":[710]},"used_by":{"is_archived":[639]}},"update_archived":{"doc":"\/**\n * Update the 'archived' status of a particular blog.\n *\n * @since MU\n *\n * @param int $id The blog id\n * @param string $archived The new status\n * @return string $archived\n *\/","file":"ms-blogs.php","line":651,"missingDoc":false,"filters":[],"uses":{"update_blog_status":[652]},"used_by":[]},"update_blog_status":{"doc":"\/**\n * Update a blog details field.\n *\n * @since MU\n *\n * @param int $blog_id BLog ID\n * @param string $pref A field name\n * @param string $value Value for $pref\n * @return string $value\n *\/","file":"ms-blogs.php","line":666,"missingDoc":false,"filters":["'make_spam_blog'","'make_ham_blog'","'mature_blog'","'unmature_blog'","'archive_blog'","'unarchive_blog'","'make_delete_blog'","'make_undelete_blog'"],"uses":{"_deprecated_argument":[670],"in_array":[672],"update":[675],"current_time":[675],"refresh_blog_details":[680]},"used_by":{"update_archived":[652],"wpmu_create_blog":[984],"update_blog_public":[1775]}},"get_last_updated":{"doc":"\/**\n * Get a list of most recently updated blogs.\n *\n * @since MU\n *\n * @param mixed $deprecated Not used\n * @param int $start The offset\n * @param int $quantity The maximum number of blogs to retrieve. Default is 40.\n * @return array The list of blogs\n *\/","file":"ms-blogs.php","line":723,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[727],"get_results":[729],"prepare":[729]},"used_by":[]},"_update_blog_date_on_post_publish":{"doc":"\/**\n * Handler for updating the blog date when a post is published or an already published post is changed.\n *\n * @since 3.3.0\n *\n * @param string $new_status The new post status\n * @param string $old_status The old post status\n * @param object $post Post object\n *\/","file":"ms-blogs.php","line":741,"missingDoc":false,"filters":[],"uses":{"get_post_type_object":[742],"wpmu_update_blogs_date":[751]},"used_by":[]},"_update_blog_date_on_post_delete":{"doc":"\/**\n * Handler for updating the blog date when a published post is deleted.\n *\n * @since 3.4.0\n *\n * @param int $post_id Post ID\n *\/","file":"ms-blogs.php","line":761,"missingDoc":false,"filters":[],"uses":{"get_post":[762],"get_post_type_object":[764],"wpmu_update_blogs_date":[771]},"used_by":[]},"ms_upload_constants":{"doc":"\/**\n * Defines Multisite upload constants.\n *\n * Exists for backward compatibility with legacy file-serving through\n * wp-includes\/ms-files.php (wp-content\/blogs.php in MU).\n *\n * @since 3.0.0\n *\/","file":"ms-default-constants.php","line":18,"missingDoc":false,"filters":[],"uses":{"add_filter":[22],"get_site_option":[24],"define":[29,34,38],"defined":[28,37,33]},"used_by":{"__main":[136]}},"ms_cookie_constants":{"doc":"\/**\n * Defines Multisite cookie constants.\n *\n * @since 3.0.0\n *\/","file":"ms-default-constants.php","line":47,"missingDoc":false,"filters":[],"uses":{"define":[54,60,67,69,78,80],"defined":[53,59,65,76],"is_subdomain_install":[66,76],"trim":[66],"parse_url":[66],"get_option":[66]},"used_by":[]},"ms_file_constants":{"doc":"\/**\n * Defines Multisite file constants.\n *\n * Exists for backward compatibility with legacy file-serving through\n * wp-includes\/ms-files.php (wp-content\/blogs.php in MU).\n *\n * @since 3.0.0\n *\/","file":"ms-default-constants.php","line":92,"missingDoc":false,"filters":[],"uses":{"define":[98,105],"defined":[97,104]},"used_by":{"__main":[17]}},"ms_subdomain_constants":{"doc":"\/**\n * Defines Multisite subdomain constants and handles warnings and notices.\n *\n * VHOST is deprecated in favor of SUBDOMAIN_INSTALL, which is a bool.\n *\n * On first call, the constants are checked and defined. On second call,\n * we will have translations loaded and can trigger warnings easily.\n *\n * @since 3.0.0\n *\/","file":"ms-default-constants.php","line":118,"missingDoc":false,"filters":[],"uses":{"__":[126,128],"trigger_error":[128],"_deprecated_argument":[130],"defined":[141,143,135,135],"define":[142,145,147,148]},"used_by":{"__main":[21]}},"generate_random_password":{"doc":"\/**\n * @since MU\n * @deprecated 3.0.0\n * @deprecated Use wp_generate_password()\n * @see wp_generate_password()\n *\/","file":"ms-deprecated.php","line":22,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[23],"wp_generate_password":[24]},"used_by":[]},"wp_generate_password":{"doc":"\/**\n * Generates a random password drawn from the defined set of characters.\n *\n * @since 2.5\n *\n * @param int $length The length of password to generate\n * @param bool $special_chars Whether to include standard special characters. Default true.\n * @param bool $extra_special_chars Whether to include other special characters. Used when\n *   generating secret keys and salts. Default false.\n * @return string The random password\n **\/","file":"pluggable.php","line":1490,"missingDoc":false,"filters":["'random_password'"],"uses":{"substr":[1499],"wp_rand":[1499],"strlen":[1499]},"used_by":{"generate_random_password":[24],"wpmu_activate_signup":[849],"wp_salt":[1363,1372]}},"is_site_admin":{"doc":"\/**\n * Determine if user is a site admin.\n *\n * Plugins should use is_multisite() instead of checking if this function exists\n * to determine if multisite is enabled.\n *\n * This function must reside in a file included only if is_multisite() due to\n * legacy function_exists() checks to determine if multisite is enabled.\n *\n * @since MU\n * @deprecated 3.0.0\n * @deprecated Use is_super_admin()\n * @see is_super_admin()\n * @see is_multisite()\n *\n *\/","file":"ms-deprecated.php","line":43,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[44],"get_current_user_id":[47],"get_user_by":[51],"exists":[52],"is_super_admin":[57]},"used_by":[]},"graceful_fail":{"doc":"\/**\n * @since MU\n * @deprecated 3.0.0\n * @deprecated Use wp_die()\n * @see wp_die()\n *\/","file":"ms-deprecated.php","line":67,"missingDoc":false,"filters":["'graceful_fail'","'graceful_fail_template'"],"uses":{"_deprecated_function":[68],"sprintf":[94]},"used_by":[]},"get_user_details":{"doc":"\/**\n * @since MU\n * @deprecated 3.0.0\n * @deprecated Use get_user_by()\n * @see get_user_by()\n *\/","file":"ms-deprecated.php","line":104,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[105],"get_user_by":[106]},"used_by":[]},"clear_global_post_cache":{"doc":"\/**\n * @since MU\n * @deprecated 3.0.0\n * @deprecated Use clean_post_cache()\n * @see clean_post_cache()\n *\/","file":"ms-deprecated.php","line":115,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[116]},"used_by":[]},"is_main_blog":{"doc":"\/**\n * @since MU\n * @deprecated 3.0.0\n * @deprecated Use is_main_site()\n * @see is_main_site()\n *\/","file":"ms-deprecated.php","line":125,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[126],"is_main_site":[127]},"used_by":[]},"validate_email":{"doc":"\/**\n * @since MU\n * @deprecated 3.0.0\n * @deprecated Use is_email()\n * @see is_email()\n *\/","file":"ms-deprecated.php","line":136,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[137],"is_email":[138]},"used_by":[]},"get_blog_list":{"doc":"\/**\n * @since MU\n * @deprecated 3.0.0\n * @deprecated No alternative available. For performance reasons this function is not recommended.\n *\/","file":"ms-deprecated.php","line":146,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[147],"get_results":[150],"prepare":[150],"get_var":[154],"get_blog_prefix":[154],"is_array":[159],"array_slice":[163,165],"count":[163]},"used_by":{"get_most_active_blogs":[176]}},"get_most_active_blogs":{"doc":"\/**\n * @since MU\n * @deprecated 3.0.0\n * @deprecated No alternative available. For performance reasons this function is not recommended.\n *\/","file":"ms-deprecated.php","line":173,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[174],"get_blog_list":[176],"reset":[178,184,194],"arsort":[183],"is_array":[177,193],"esc_url":[196],"array_slice":[201]},"used_by":[]},"wpmu_admin_do_redirect":{"doc":"\/**\n * Redirect a user based on $_GET or $_POST arguments.\n *\n * The function looks for redirect arguments in the following order:\n * 1) $_GET['ref']\n * 2) $_POST['ref']\n * 3) $_SERVER['HTTP_REFERER']\n * 4) $_GET['redirect']\n * 5) $_POST['redirect']\n * 6) $url\n *\n * @since MU\n * @deprecated 3.3.0\n * @deprecated Use wp_redirect()\n * @uses wpmu_admin_redirect_add_updated_param()\n *\n * @param string $url\n *\/","file":"ms-deprecated.php","line":222,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[223],"wpmu_admin_redirect_add_updated_param":[232,241,246],"wp_redirect":[233,237,248],"esc_html":[244],"substr":[244,243]},"used_by":[]},"wpmu_admin_redirect_add_updated_param":{"doc":"\/**\n * Adds an 'updated=true' argument to a URL.\n *\n * @since MU\n * @deprecated 3.3.0\n * @deprecated Use add_query_arg()\n *\n * @param string $url\n * @return string\n *\/","file":"ms-deprecated.php","line":262,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[263],"strpos":[266,265]},"used_by":{"wpmu_admin_do_redirect":[232,241,246]}},"get_sitestats":{"doc":"\/**\n * Gets the network's site and user counts.\n *\n * @since MU 1.0\n * @uses get_blog_count()\n * @uses get_user_count()\n *\n * @return array Site and user count for the network.\n *\/","file":"ms-functions.php","line":19,"missingDoc":false,"filters":[],"uses":{"get_blog_count":[23],"get_user_count":[24]},"used_by":[]},"get_blog_count":{"doc":"\/**\n * The number of active sites on your installation.\n *\n * The count is cached and updated twice daily. This is not a live count.\n *\n * @since MU 1.0\n *\n * @param int $id Optional. A site_id.\n * @return int\n *\/","file":"ms-functions.php","line":144,"missingDoc":false,"filters":[],"uses":{"get_site_option":[145]},"used_by":{"get_sitestats":[23],"wp_version_check":[56]}},"get_user_count":{"doc":"\/**\n * The number of active users in your installation.\n *\n * The count is cached and updated twice daily. This is not a live count.\n *\n * @since MU 2.7\n *\n * @return int\n *\/","file":"ms-functions.php","line":130,"missingDoc":false,"filters":[],"uses":{"get_site_option":[131]},"used_by":{"get_sitestats":[24],"wp_version_check":[55]}},"get_admin_users_for_domain":{"doc":"\/**\n * Get the admin for a domain\/path combination.\n *\n * @since MU 1.0\n *\n * @param string $sitedomain Optional. Site domain.\n * @param string $path Optional. Site path.\n * @return array The network admins\n *\/","file":"ms-functions.php","line":39,"missingDoc":false,"filters":[],"uses":{"get_var":[45],"prepare":[45,48],"get_results":[48]},"used_by":[]},"add_user_to_blog":{"doc":"\/**\n * Add a user to a blog.\n *\n * Use the 'add_user_to_blog' action to fire an event when\n * users are added to a blog.\n *\n * @since MU 1.0\n *\n * @param int $blog_id ID of the blog you're adding the user to.\n * @param int $user_id ID of the user you're adding.\n * @param string $role The role you want the user to have\n * @return bool\n *\/","file":"ms-functions.php","line":178,"missingDoc":false,"filters":["'add_user_to_blog'"],"uses":{"switch_to_blog":[179],"get_userdata":[181],"restore_current_blog":[184,198],"__":[185],"update_user_meta":[189,191],"get_blog_details":[190],"get_user_meta":[188],"set_role":[194],"wp_cache_delete":[197]},"used_by":{"get_active_blog_for_user":[90],"wpmu_create_blog":[980],"add_existing_user_to_blog":[1703],"add_new_user_to_blog":[1724]}},"get_blog_post":{"doc":"\/**\n * Get a blog post from any site on the network.\n *\n * @since MU 1.0\n *\n * @param int $blog_id ID of the blog.\n * @param int $post_id ID of the post you're looking for.\n * @return WP_Post|null WP_Post on success or null on failure\n *\/","file":"ms-functions.php","line":157,"missingDoc":false,"filters":[],"uses":{"switch_to_blog":[158],"get_post":[159],"restore_current_blog":[160]},"used_by":[]},"remove_user_from_blog":{"doc":"\/**\n * Remove a user from a blog.\n *\n * Use the 'remove_user_from_blog' action to fire an event when\n * users are removed from a blog.\n *\n * Accepts an optional $reassign parameter, if you want to\n * reassign the user's blog posts to another user upon removal.\n *\n * @since MU 1.0\n *\n * @param int $user_id ID of the user you're removing.\n * @param int $blog_id ID of the blog you're removing the user from.\n * @param string $reassign Optional. A user to whom to reassign posts.\n * @return bool\n *\/","file":"ms-functions.php","line":218,"missingDoc":false,"filters":["'remove_user_from_blog'"],"uses":{"switch_to_blog":[220],"get_user_meta":[226],"get_blogs_of_user":[230,252],"update_user_meta":[239,240,254,255],"get_userdata":[244],"restore_current_blog":[246,264],"__":[247],"remove_all_caps":[250],"count":[253],"query":[260,261],"prepare":[260,261]},"used_by":{"add_new_user_to_blog":[1723]}},"create_empty_blog":{"doc":"\/**\n * Create an empty blog.\n *\n * @since MU 1.0\n * @uses install_blog()\n *\n * @param string $domain The new blog's domain.\n * @param string $path The new blog's path.\n * @param string $weblog_title The new blog's title.\n * @param int $site_id Optional. Defaults to 1.\n * @return int The ID of the newly created blog\n *\/","file":"ms-functions.php","line":281,"missingDoc":false,"filters":[],"uses":{"addslashes":[282,283],"__":[290,297],"domain_exists":[289],"insert_blog":[296],"switch_to_blog":[299],"install_blog":[300],"restore_current_blog":[301]},"used_by":[]},"domain_exists":{"doc":"\/**\n * Check whether a blogname is already taken.\n *\n * Used during the new site registration process to ensure\n * that each blogname is unique.\n *\n * @since MU\n *\n * @param string $domain The domain to be checked.\n * @param string $path The path to be checked.\n * @param int $site_id Optional. Relevant only on multi-network installs.\n * @return int\n *\/","file":"ms-functions.php","line":1085,"missingDoc":false,"filters":["'domain_exists'"],"uses":{"get_var":[1087],"prepare":[1087]},"used_by":{"create_empty_blog":[289],"wpmu_validate_blog_signup":[601],"wpmu_create_blog":[967]}},"insert_blog":{"doc":"\/**\n * Store basic site info in the blogs table.\n *\n * This function creates a row in the wp_blogs table and returns\n * the new blog's ID. It is the first step in creating a new blog.\n *\n * @since MU\n *\n * @param string $domain The domain of the new site.\n * @param string $path The path of the new site.\n * @param int $site_id Unless you're running a multi-network install, be sure to set this value to 1.\n * @return int The ID of the new row\n *\/","file":"ms-functions.php","line":1104,"missingDoc":false,"filters":[],"uses":{"trailingslashit":[1107],"insert":[1110],"current_time":[1110],"refresh_blog_details":[1114]},"used_by":{"create_empty_blog":[296],"wpmu_create_blog":[973]}},"install_blog":{"doc":"\/**\n * Install an empty blog.\n *\n * Creates the new blog tables and options. If calling this function\n * directly, be sure to use switch_to_blog() first, so that $wpdb\n * points to the new blog.\n *\n * @since MU\n * @uses make_db_current_silent()\n * @uses populate_roles()\n *\n * @param int $blog_id The value returned by insert_blog().\n * @param string $blog_title The title of the new site.\n *\/","file":"ms-functions.php","line":1132,"missingDoc":false,"filters":[],"uses":{"suppress_errors":[1140,1143],"__":[1142,1142],"get_results":[1141],"get_blogaddress_by_id":[1145],"make_db_current_silent":[1148],"populate_options":[1149],"populate_roles":[1150],"_init":[1151],"untrailingslashit":[1153],"update_option":[1155,1156,1159,1161,1163,1164],"get_blog_option":[1161],"get_site_option":[1158],"stripslashes":[1163],"get_blog_prefix":[1167],"delete_metadata":[1168,1169]},"used_by":{"create_empty_blog":[300],"wpmu_create_blog":[977]}},"get_blog_permalink":{"doc":"\/**\n * Get the permalink for a post on another blog.\n *\n * @since MU 1.0\n *\n * @param int $blog_id ID of the source blog.\n * @param int $post_id ID of the desired post.\n * @return string The post's permalink\n *\/","file":"ms-functions.php","line":315,"missingDoc":false,"filters":[],"uses":{"switch_to_blog":[316],"get_permalink":[317],"restore_current_blog":[318]},"used_by":[]},"get_blog_id_from_url":{"doc":"\/**\n * Get a blog's numeric ID from its URL.\n *\n * On a subdirectory installation like example.com\/blog1\/,\n * $domain will be the root 'example.com' and $path the\n * subdirectory '\/blog1\/'. With subdomains like blog1.example.com,\n * $domain is 'blog1.example.com' and $path is '\/'.\n *\n * @since MU 2.6.5\n *\n * @param string $domain\n * @param string $path Optional. Not required for subdomain installations.\n * @return int 0 if no blog found, otherwise the ID of the matching blog\n *\/","file":"ms-functions.php","line":337,"missingDoc":false,"filters":[],"uses":{"strtolower":[340,341],"wp_cache_get":[342],"md5":[342,352,356],"get_var":[349],"prepare":[349],"wp_cache_set":[352,356]},"used_by":[]},"is_email_address_unsafe":{"doc":"\/**\n * Checks an email address against a list of banned domains.\n *\n * This function checks against the Banned Email Domains list\n * at wp-admin\/network\/settings.php. The check is only run on\n * self-registrations; user creation at wp-admin\/network\/users.php\n * bypasses this check.\n *\n * @since MU\n *\n * @param string $user_email The email provided by the user at registration.\n * @return bool Returns true when the email address is banned.\n *\/","file":"ms-functions.php","line":376,"missingDoc":false,"filters":["'is_email_address_unsafe'"],"uses":{"get_site_option":[377],"explode":[379,384],"is_array":[378,383],"substr":[396],"strlen":[396]},"used_by":{"wpmu_validate_user_signup":[456]}},"wpmu_validate_user_signup":{"doc":"\/**\n * Processes new user registrations.\n *\n * Checks the data provided by the user during signup. Verifies\n * the validity and uniqueness of user names and user email addresses,\n * and checks email addresses against admin-provided domain\n * whitelists and blacklists.\n *\n * The hook 'wpmu_validate_user_signup' provides an easy way\n * to modify the signup process. The value $result, which is passed\n * to the hook, contains both the user-provided info and the error\n * messages created by the function. 'wpmu_validate_user_signup' allows\n * you to process the data in any way you'd like, and unset the\n * relevant errors if necessary.\n *\n * @since MU\n * @uses is_email_address_unsafe()\n * @uses username_exists()\n * @uses email_exists()\n *\n * @param string $user_name The login name provided by the user.\n * @param string $user_email The email provided by the user.\n * @return array Contains username, email, and error messages.\n *\/","file":"ms-functions.php","line":430,"missingDoc":false,"filters":["'wpmu_validate_user_signup'"],"uses":{"preg_replace":[436],"sanitize_user":[436],"add":[439,446,454,457,460,463,469,472,478,483,487,499,502,512],"__":[439,446,454,457,460,463,469,472,478,483,487,499,502,512],"preg_match":[438,467],"sanitize_email":[443],"get_site_option":[448,474],"add_site_option":[451],"is_array":[449,475],"in_array":[453,477],"is_email_address_unsafe":[456],"strlen":[459],"strpos":[462,476],"is_email":[471],"substr":[476],"username_exists":[482],"email_exists":[486],"get_row":[490,505],"prepare":[490,505],"mysql2date":[492,507],"current_time":[493,507],"delete":[497,510]},"used_by":[]},"add_site_option":{"doc":"\/**\n * Add a new site option.\n *\n * Existing options will not be updated. Note that prior to 3.3 this wasn't the case.\n *\n * @see add_option()\n * @package WordPress\n * @subpackage Option\n * @since 2.8.0\n *\n * @uses apply_filters() Calls 'pre_add_site_option_$option' hook to allow overwriting the\n * \toption value to be stored.\n * @uses do_action() Calls 'add_site_option_$option' and 'add_site_option' hooks on success.\n *\n * @param string $option Name of option to add. Expected to not be SQL-escaped.\n * @param mixed $value Optional. Option value, can be anything. Expected to not be SQL-escaped.\n * @return bool False if option was not added and true if option was added.\n *\/","file":"option.php","line":810,"missingDoc":false,"filters":["'pre_add_site_option_' . $option","\"add_site_option_{$option}\"","'add_site_option'"],"uses":{"add_option":[816],"get_site_option":[820],"sanitize_option":[823],"wp_cache_set":[824],"maybe_serialize":[827],"insert":[828],"is_multisite":[815]},"used_by":{"wpmu_validate_user_signup":[451],"wpmu_validate_blog_signup":[554],"update_site_option":[908],"set_site_transient":[1043,1044]}},"username_exists":{"doc":"\/**\n * Checks whether the given username exists.\n *\n * @since 2.0.0\n *\n * @param string $username Username.\n * @return null|int The user's ID on success, and null on failure.\n *\/","file":"user.php","line":1197,"missingDoc":false,"filters":[],"uses":{"get_user_by":[1198]},"used_by":{"wpmu_validate_user_signup":[482],"wpmu_validate_blog_signup":[604],"wpmu_activate_signup":[851],"wp_insert_user":[1312]}},"email_exists":{"doc":"\/**\n * Checks whether the given email exists.\n *\n * @since 2.1.0\n * @uses $wpdb\n *\n * @param string $email Email.\n * @return bool|int The user's ID on success, and false on failure.\n *\/","file":"user.php","line":1214,"missingDoc":false,"filters":[],"uses":{"get_user_by":[1215]},"used_by":{"wpmu_validate_user_signup":[486],"wp_insert_user":[1327]}},"wpmu_validate_blog_signup":{"doc":"\/**\n * Processes new site registrations.\n *\n * Checks the data provided by the user during blog signup. Verifies\n * the validity and uniqueness of blog paths and domains.\n *\n * This function prevents the current user from registering a new site\n * with a blogname equivalent to another user's login name. Passing the\n * $user parameter to the function, where $user is the other user, is\n * effectively an override of this limitation.\n *\n * Filter 'wpmu_validate_blog_signup' if you want to modify\n * the way that WordPress validates new site signups.\n *\n * @since MU\n * @uses domain_exists()\n * @uses username_exists()\n *\n * @param string $blogname The blog name provided by the user. Must be unique.\n * @param string $blog_title The blog title provided by the user.\n * @return array Contains the new site data and error messages.\n *\/","file":"ms-functions.php","line":542,"missingDoc":false,"filters":["'subdirectory_reserved_names'","'newblogname'","'wpmu_validate_blog_signup'"],"uses":{"strip_tags":[547],"substr":[548],"get_site_option":[551],"add_site_option":[554],"array_merge":[559],"is_subdomain_install":[558,577,594],"add":[562,565,568,571,574,578,584,591,602,606,617],"__":[562,565,568,571,574,578,584,591,602,606,617],"preg_match":[564,582],"in_array":[567],"strlen":[570],"is_super_admin":[570],"strpos":[573],"get_var":[577],"prepare":[577,610],"get_blog_prefix":[577],"stripslashes":[588],"preg_replace":[595],"domain_exists":[601],"is_object":[605,605],"username_exists":[604],"get_row":[610],"current_time":[612],"mysql2date":[612],"delete":[615]},"used_by":[]},"wpmu_signup_blog":{"doc":"\/**\n * Record site signup information for future activation.\n *\n * @since MU\n * @uses wpmu_signup_blog_notification()\n *\n * @param string $domain The requested domain.\n * @param string $path The requested path.\n * @param string $title The requested site title.\n * @param string $user The user's requested login name.\n * @param string $user_email The user's email address.\n * @param array $meta By default, contains the requested privacy setting and lang_id.\n *\/","file":"ms-functions.php","line":637,"missingDoc":false,"filters":[],"uses":{"substr":[640],"md5":[640],"time":[640],"rand":[640],"serialize":[641],"escape":[642,643,644],"insert":[646],"current_time":[652],"wpmu_signup_blog_notification":[657]},"used_by":[]},"wpmu_signup_blog_notification":{"doc":"\/**\n * Notify user of signup success.\n *\n * This is the notification function used when site registration\n * is enabled.\n *\n * Filter 'wpmu_signup_blog_notification' to bypass this function or\n * replace it with your own notification behavior.\n *\n * Filter 'wpmu_signup_blog_notification_email' and\n * 'wpmu_signup_blog_notification_subject' to change the content\n * and subject line of the email sent to newly registered users.\n *\n * @since MU\n *\n * @param string $domain The new blog domain.\n * @param string $path The new blog path.\n * @param string $title The site title.\n * @param string $user The user's login name.\n * @param string $user_email The user's email address.\n * @param array $meta By default, contains the requested privacy setting and lang_id.\n * @param string $key The activation key created in wpmu_signup_blog()\n * @return bool\n *\/","file":"ms-functions.php","line":720,"missingDoc":false,"filters":["'wpmu_signup_blog_notification'","'wpmu_signup_blog_notification_email'","'wpmu_signup_blog_notification_subject'"],"uses":{"network_site_url":[728],"is_subdomain_install":[727],"esc_url":[732,744,754],"get_site_option":[733,736,736],"esc_html":[736],"get_option":[737],"sprintf":[738,748],"__":[740,750],"wp_mail":[756]},"used_by":{"wpmu_signup_blog":[657]}},"wpmu_signup_user":{"doc":"\/**\n * Record user signup information for future activation.\n *\n * This function is used when user registration is open but\n * new site registration is not.\n *\n * @since MU\n * @uses wpmu_signup_user_notification()\n *\n * @param string $user The user's requested login name.\n * @param string $user_email The user's email address.\n * @param array $meta By default, this is an empty array.\n *\/","file":"ms-functions.php","line":673,"missingDoc":false,"filters":[],"uses":{"preg_replace":[677],"sanitize_user":[677],"sanitize_email":[678],"substr":[679],"md5":[679],"time":[679],"rand":[679],"serialize":[680],"insert":[682],"current_time":[688],"wpmu_signup_user_notification":[693]},"used_by":[]},"wpmu_signup_user_notification":{"doc":"\/**\n * Notify user of signup success.\n *\n * This is the notification function used when no new site has\n * been requested.\n *\n * Filter 'wpmu_signup_user_notification' to bypass this function or\n * replace it with your own notification behavior.\n *\n * Filter 'wpmu_signup_user_notification_email' and\n * 'wpmu_signup_user_notification_subject' to change the content\n * and subject line of the email sent to newly registered users.\n *\n * @since MU\n *\n * @param string $user The user's login name.\n * @param string $user_email The user's email address.\n * @param array $meta By default, an empty array.\n * @param string $key The activation key created in wpmu_signup_user()\n * @return bool\n *\/","file":"ms-functions.php","line":781,"missingDoc":false,"filters":["'wpmu_signup_user_notification'","'wpmu_signup_user_notification_email'","'wpmu_signup_user_notification_subject'"],"uses":{"get_site_option":[786,789,789],"esc_html":[789],"get_option":[790],"sprintf":[791,799],"__":[793,801],"site_url":[796],"wp_mail":[807]},"used_by":{"wpmu_signup_user":[693]}},"wp_mail":{"doc":"\/**\n * Send mail, similar to PHP's mail\n *\n * A true return value does not automatically mean that the user received the\n * email successfully. It just only means that the method used was able to\n * process the request without any errors.\n *\n * Using the two 'wp_mail_from' and 'wp_mail_from_name' hooks allow from\n * creating a from address like 'Name <email@address.com>' when both are set. If\n * just 'wp_mail_from' is set, then just the email address will be used with no\n * name.\n *\n * The default content type is 'text\/plain' which does not allow using HTML.\n * However, you can set the content type of the email by using the\n * 'wp_mail_content_type' filter.\n *\n * The default charset is based on the charset used on the blog. The charset can\n * be set using the 'wp_mail_charset' filter.\n *\n * @since 1.2.1\n * @uses apply_filters() Calls 'wp_mail' hook on an array of all of the parameters.\n * @uses apply_filters() Calls 'wp_mail_from' hook to get the from email address.\n * @uses apply_filters() Calls 'wp_mail_from_name' hook to get the from address name.\n * @uses apply_filters() Calls 'wp_mail_content_type' hook to get the email content type.\n * @uses apply_filters() Calls 'wp_mail_charset' hook to get the email charset\n * @uses do_action_ref_array() Calls 'phpmailer_init' hook on the reference to\n *\t\tphpmailer object.\n * @uses PHPMailer\n *\n * @param string|array $to Array or comma-separated list of email addresses to send message.\n * @param string $subject Email subject\n * @param string $message Message contents\n * @param string|array $headers Optional. Additional headers.\n * @param string|array $attachments Optional. Files to attach.\n * @return bool Whether the email contents were sent successfully.\n *\/","file":"pluggable.php","line":214,"missingDoc":false,"filters":["'wp_mail'","'wp_mail_from'","'wp_mail_from_name'","'wp_mail_content_type'","'wp_mail_charset'","'phpmailer_init'"],"uses":{"extract":[216],"compact":[216],"explode":[219,237,257,281,294,297,345],"str_replace":[219,237,252,269,273,284,286],"is_array":[218,234,344],"is_object":[224],"is_a":[224],"preg_split":[251],"trim":[251,252,257,260,261,270,274,276,282,284,286,290,301,301],"stripos":[250,285,283,433],"strpos":[249,268,272,266,280],"strtolower":[263,331],"substr":[268,272,333,332],"array_merge":[294,297],"ClearAddresses":[309],"ClearAllRecipients":[310],"ClearAttachments":[311],"ClearBCCs":[312],"ClearCCs":[313],"ClearCustomHeaders":[314],"ClearReplyTos":[315],"count":[352,374,392],"preg_match":[351,373,391],"AddAddress":[357],"AddCc":[379],"AddBcc":[397],"IsMail":[405],"IsHTML":[418],"get_bloginfo":[422],"AddCustomHeader":[430,434],"sprintf":[430,434],"AddAttachment":[440],"Send":[451]},"used_by":{"wpmu_signup_blog_notification":[756],"wpmu_signup_user_notification":[807],"newblog_notify_siteadmin":[1034],"newuser_notify_siteadmin":[1068],"wpmu_welcome_notification":[1259],"wpmu_welcome_user_notification":[1307],"wp_notify_postauthor":[1078],"wp_notify_moderator":[1161],"wp_password_change_notification":[1183],"wp_new_user_notification":[1211,1220]}},"wpmu_activate_signup":{"doc":"\/**\n * Activate a signup.\n *\n * Hook to 'wpmu_activate_user' or 'wpmu_activate_blog' for events\n * that should happen only when users or sites are self-created (since\n * those actions are not called when users and sites are created\n * by a Super Admin).\n *\n * @since MU\n * @uses wp_generate_password()\n * @uses wpmu_welcome_user_notification()\n * @uses add_user_to_blog()\n * @uses add_new_user_to_blog()\n * @uses wpmu_create_user()\n * @uses wpmu_create_blog()\n * @uses wpmu_welcome_notification()\n *\n * @param string $key The activation key provided to the user.\n * @return array An array containing information about the activated user and\/or blog\n *\/","file":"ms-functions.php","line":831,"missingDoc":false,"filters":["'wpmu_activate_user'","'wpmu_activate_blog'"],"uses":{"get_row":[834],"prepare":[834],"__":[837,841,843,859,867],"maybe_unserialize":[846],"escape":[847,848],"wp_generate_password":[849],"username_exists":[851],"wpmu_create_user":[854],"current_time":[861],"update":[864,884,889],"wpmu_welcome_user_notification":[869],"add_new_user_to_blog":[871],"wpmu_create_blog":[876],"add_data":[883],"get_error_code":[882],"is_wp_error":[879],"wpmu_welcome_notification":[890]},"used_by":[]},"wpmu_create_user":{"doc":"\/**\n * Create a user.\n *\n * This function runs when a user self-registers as well as when\n * a Super Admin creates a new user. Hook to 'wpmu_new_user' for events\n * that should affect all new users, but only on Multisite (otherwise\n * use 'user_register').\n *\n * @since MU\n * @uses wp_create_user()\n *\n * @param string $user_name The new user's login name.\n * @param string $password The new user's password.\n * @param string $email The new user's email address.\n * @return mixed Returns false on failure, or int $user_id on success\n *\/","file":"ms-functions.php","line":912,"missingDoc":false,"filters":["'wpmu_new_user'"],"uses":{"preg_replace":[913],"sanitize_user":[913],"wp_create_user":[915],"is_wp_error":[916],"delete_user_option":[920,921]},"used_by":{"wpmu_activate_signup":[854]}},"wpmu_welcome_user_notification":{"doc":"\/**\n * Notify a user that her account activation has been successful.\n *\n * Filter 'wpmu_welcome_user_notification' to disable or bypass.\n *\n * Filter 'update_welcome_user_email' and 'update_welcome_user_subject' to\n * modify the content and subject line of the notification email.\n *\n * @since MU\n *\n * @param int $user_id\n * @param string $password\n * @param array $meta Optional. Not used in the default function, but is passed along to hooks for customization.\n * @return bool\n *\/","file":"ms-functions.php","line":1278,"missingDoc":false,"filters":["'wpmu_welcome_user_notification'","'update_welcome_user_email'","'update_welcome_user_subject'"],"uses":{"get_site_option":[1284,1294,1299,1299],"get_userdata":[1286],"str_replace":[1289,1290,1291,1292],"wp_login_url":[1292],"esc_html":[1299],"get_option":[1300],"sprintf":[1306],"__":[1306],"wp_mail":[1307]},"used_by":{"wpmu_activate_signup":[869]}},"add_new_user_to_blog":{"doc":"\/**\n * Add a newly created user to the appropriate blog\n *\n * @since MU\n *\n * @param int $user_id\n * @param string $email\n * @param array $meta\n *\/","file":"ms-functions.php","line":1718,"missingDoc":false,"filters":[],"uses":{"remove_user_from_blog":[1723],"add_user_to_blog":[1724],"update_user_meta":[1725]},"used_by":{"wpmu_activate_signup":[871]}},"wpmu_create_blog":{"doc":"\/**\n * Create a site.\n *\n * This function runs when a user self-registers a new site as well\n * as when a Super Admin creates a new site. Hook to 'wpmu_new_blog'\n * for events that should affect all new sites.\n *\n * On subdirectory installs, $domain is the same as the main site's\n * domain, and the path is the subdirectory name (eg 'example.com'\n * and '\/blog1\/'). On subdomain installs, $domain is the new subdomain +\n * root domain (eg 'blog1.example.com'), and $path is '\/'.\n *\n * @since MU\n * @uses domain_exists()\n * @uses insert_blog()\n * @uses wp_install_defaults()\n * @uses add_user_to_blog()\n *\n * @param string $domain The new site's domain.\n * @param string $path The new site's path.\n * @param string $title The new site's title.\n * @param int $user_id The user ID of the new site's admin.\n * @param array $meta Optional. Used to set initial site options.\n * @param int $site_id Optional. Only relevant on multi-network installs.\n * @return mixed Returns WP_Error object on failure, int $blog_id on success\n *\/","file":"ms-functions.php","line":954,"missingDoc":false,"filters":["'wpmu_new_blog'"],"uses":{"preg_replace":[955],"sanitize_user":[955],"str_replace":[958],"is_subdomain_install":[957],"strip_tags":[960],"__":[968,974],"domain_exists":[967],"define":[971],"defined":[970],"insert_blog":[973],"switch_to_blog":[976],"install_blog":[977],"wp_install_defaults":[978],"add_user_to_blog":[980],"update_blog_status":[984],"update_option":[986,990],"is_array":[982],"add_option":[989],"get_site_option":[989],"update_user_meta":[993],"is_super_admin":[992],"get_user_meta":[992],"restore_current_blog":[995]},"used_by":{"wpmu_activate_signup":[876]}},"wpmu_welcome_notification":{"doc":"\/**\n * Notify a user that her blog activation has been successful.\n *\n * Filter 'wpmu_welcome_notification' to disable or bypass.\n *\n * Filter 'update_welcome_email' and 'update_welcome_subject' to\n * modify the content and subject line of the notification email.\n *\n * @since MU\n *\n * @param int $blog_id\n * @param int $user_id\n * @param string $password\n * @param string $title The new blog's title\n * @param array $meta Optional. Not used in the default function, but is passed along to hooks for customization.\n * @return bool\n *\/","file":"ms-functions.php","line":1214,"missingDoc":false,"filters":["'wpmu_welcome_notification'","'update_welcome_email'","'update_welcome_subject'"],"uses":{"stripslashes":[1220,1222,1258],"get_site_option":[1220,1246,1251,1251],"__":[1222,1258],"get_blogaddress_by_id":[1236],"get_userdata":[1237],"str_replace":[1239,1240,1241,1242,1243],"esc_html":[1251],"get_option":[1252],"sprintf":[1258],"wp_mail":[1259]},"used_by":{"wpmu_activate_signup":[890]}},"delete_user_option":{"doc":"\/**\n * Delete user option with global blog capability.\n *\n * User options are just like user metadata except that they have support for\n * global blog options. If the 'global' parameter is false, which it is by default\n * it will prepend the WordPress table prefix to the option name.\n *\n * @since 3.0.0\n * @uses $wpdb WordPress database object for queries\n *\n * @param int $user_id User ID\n * @param string $option_name User option name.\n * @param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific).\n * @return unknown\n *\/","file":"user.php","line":302,"missingDoc":false,"filters":[],"uses":{"delete_user_meta":[307]},"used_by":{"wpmu_create_user":[920,921]}},"newblog_notify_siteadmin":{"doc":"\/**\n * Notifies the network admin that a new site has been activated.\n *\n * Filter 'newblog_notify_siteadmin' to change the content of\n * the notification email.\n *\n * @since MU\n *\n * @param int $blog_id The new site's ID.\n * @return bool\n *\/","file":"ms-functions.php","line":1012,"missingDoc":false,"filters":["'newblog_notify_siteadmin'"],"uses":{"get_site_option":[1013,1016],"is_email":[1017],"esc_url":[1020],"network_admin_url":[1020],"switch_to_blog":[1022],"get_option":[1023],"site_url":[1024],"restore_current_blog":[1025],"sprintf":[1027,1034],"__":[1027,1034],"wp_mail":[1034]},"used_by":[]},"newuser_notify_siteadmin":{"doc":"\/**\n * Notifies the network admin that a new user has been activated.\n *\n * Filter 'newuser_notify_siteadmin' to change the content of\n * the notification email.\n *\n * @since MU\n * @uses apply_filters() Filter newuser_notify_siteadmin to change the content of the email message\n *\n * @param int $user_id The new user's ID.\n * @return bool\n *\/","file":"ms-functions.php","line":1050,"missingDoc":false,"filters":["'newuser_notify_siteadmin'"],"uses":{"get_site_option":[1051,1054],"is_email":[1056],"get_userdata":[1059],"esc_url":[1061],"network_admin_url":[1061],"sprintf":[1062,1068],"__":[1062,1068],"wp_mail":[1068]},"used_by":[]},"install_blog_defaults":{"doc":"\/**\n * Set blog defaults.\n *\n * This function creates a row in the wp_blogs table.\n *\n * @since MU\n * @deprecated MU\n * @deprecated Use wp_install_defaults()\n * @uses wp_install_defaults()\n *\n * @param int $blog_id Ignored in this function.\n * @param int $user_id\n *\/","file":"ms-functions.php","line":1185,"missingDoc":false,"filters":[],"uses":{"suppress_errors":[1190,1194],"wp_install_defaults":[1192]},"used_by":[]},"get_current_site":{"doc":"\/**\n * Get the current site info.\n *\n * Returns an object containing the ID, domain, path, and site_name\n * of the site being viewed.\n *\n * @since MU\n *\n * @return object\n *\/","file":"ms-functions.php","line":1321,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"get_user_id_from_string":{"doc":"\/**\n * Get a numeric user ID from either an email address or a login.\n *\n * @since MU\n * @uses is_email()\n *\n * @param string $string\n * @return int\n *\/","file":"ms-functions.php","line":1335,"missingDoc":false,"filters":[],"uses":{"get_user_by":[1338,1344],"is_numeric":[1341],"is_email":[1337]},"used_by":{"is_user_spammy":[1753]}},"get_most_recent_post_of_user":{"doc":"\/**\n * Get a user's most recent post.\n *\n * Walks through each of a user's blogs to find the post with\n * the most recent post_date_gmt.\n *\n * @since MU\n * @uses get_blogs_of_user()\n *\n * @param int $user_id\n * @return array Contains the blog_id, post_id, post_date_gmt, and post_gmt_ts\n *\/","file":"ms-functions.php","line":1364,"missingDoc":false,"filters":[],"uses":{"get_blogs_of_user":[1367],"get_blog_prefix":[1373],"get_row":[1374],"prepare":[1374],"strtotime":[1378]},"used_by":[]},"get_dirsize":{"doc":"\/**\n * Get the size of a directory.\n *\n * A helper function that is used primarily to check whether\n * a blog has exceeded its allowed upload space.\n *\n * @since MU\n * @uses recurse_dirsize()\n *\n * @param string $directory\n * @return int\n *\/","file":"ms-functions.php","line":1411,"missingDoc":false,"filters":[],"uses":{"get_transient":[1412],"is_array":[1413,1416],"recurse_dirsize":[1419],"set_transient":[1421]},"used_by":{"get_space_used":[1947]}},"recurse_dirsize":{"doc":"\/**\n * Get the size of a directory recursively.\n *\n * Used by get_dirsize() to get a directory's size when it contains\n * other directories.\n *\n * @since MU\n *\n * @param string $directory\n * @return int\n *\/","file":"ms-functions.php","line":1436,"missingDoc":false,"filters":[],"uses":{"untrailingslashit":[1439],"file_exists":[1441],"is_dir":[1441,1450],"is_readable":[1441],"readdir":[1445],"filesize":[1449],"recurse_dirsize":[1451],"is_file":[1448],"closedir":[1457],"opendir":[1444]},"used_by":{"get_dirsize":[1419],"recurse_dirsize":[1451]}},"check_upload_mimes":{"doc":"\/**\n * Check an array of MIME types against a whitelist.\n *\n * WordPress ships with a set of allowed upload filetypes,\n * which is defined in wp-includes\/functions.php in\n * get_allowed_mime_types(). This function is used to filter\n * that list against the filetype whitelist provided by Multisite\n * Super Admins at wp-admin\/network\/settings.php.\n *\n * @since MU\n *\n * @param array $mimes\n * @return array\n *\/","file":"ms-functions.php","line":1476,"missingDoc":false,"filters":[],"uses":{"explode":[1477],"get_site_option":[1477],"strpos":[1480]},"used_by":[]},"update_posts_count":{"doc":"\/**\n * Update a blog's post count.\n *\n * WordPress MS stores a blog's post count as an option so as\n * to avoid extraneous COUNTs when a blog's details are fetched\n * with get_blog_details(). This function is called when posts\n * are published to make sure the count stays current.\n *\n * @since MU\n *\/","file":"ms-functions.php","line":1497,"missingDoc":false,"filters":[],"uses":{"update_option":[1499],"get_var":[1499]},"used_by":[]},"wpmu_log_new_registrations":{"doc":"\/**\n * Logs user registrations.\n *\n * @since MU\n *\n * @param int $blog_id\n * @param int $user_id\n *\/","file":"ms-functions.php","line":1510,"missingDoc":false,"filters":[],"uses":{"get_userdata":[1512],"insert":[1513],"preg_replace":[1513],"current_time":[1513]},"used_by":[]},"global_terms":{"doc":"\/**\n * Maintains a canonical list of terms by syncing terms created for each blog with the global terms table.\n *\n * @since 3.0.0\n *\n * @see term_id_filter\n *\n * @param int $term_id An ID for a term on the current blog.\n * @return int An ID from the global terms table mapped from $term_id.\n *\/","file":"ms-functions.php","line":1526,"missingDoc":false,"filters":[],"uses":{"global_terms_enabled":[1530],"intval":[1542],"get_row":[1543,1561],"prepare":[1543,1545,1547,1561],"get_var":[1545,1547,1554,1555],"insert":[1549,1557],"max":[1556],"mt_rand":[1556],"global_terms":[1563],"update_option":[1570],"get_option":[1569],"update":[1572,1573,1574],"clean_term_cache":[1576]},"used_by":{"global_terms":[1563]}},"redirect_this_site":{"doc":"\/**\n * Ensure that the current site's domain is listed in the allowed redirect host list.\n *\n * @see wp_validate_redirect()\n * @since MU\n *\n * @return array The current site's domain\n *\/","file":"ms-functions.php","line":1592,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"upload_is_file_too_big":{"doc":"\/**\n * Check whether an upload is too big.\n *\n * @since MU\n *\n * @param array $upload\n * @return mixed If the upload is under the size limit, $upload is returned. Otherwise returns an error message.\n *\/","file":"ms-functions.php","line":1605,"missingDoc":false,"filters":[],"uses":{"is_array":[1606],"defined":[1606],"get_site_option":[1606,1610,1609],"sprintf":[1610],"__":[1610],"strlen":[1609]},"used_by":[]},"signup_nonce_fields":{"doc":"\/**\n * Add a nonce field to the signup page.\n *\n * @since MU\n * @uses wp_nonce_field()\n *\/","file":"ms-functions.php","line":1621,"missingDoc":false,"filters":[],"uses":{"mt_rand":[1622],"wp_nonce_field":[1624]},"used_by":[]},"signup_nonce_check":{"doc":"\/**\n * Process the signup nonce created in signup_nonce_fields().\n *\n * @since MU\n * @uses wp_create_nonce()\n *\n * @param array $result\n * @return array\n *\/","file":"ms-functions.php","line":1636,"missingDoc":false,"filters":[],"uses":{"strpos":[1637],"wp_die":[1641],"__":[1641],"wp_create_nonce":[1640]},"used_by":[]},"maybe_redirect_404":{"doc":"\/**\n * Correct 404 redirects when NOBLOGREDIRECT is defined.\n *\n * @since MU\n *\/","file":"ms-functions.php","line":1651,"missingDoc":false,"filters":["'blog_redirect_404'"],"uses":{"network_home_url":[1655],"wp_redirect":[1656],"is_main_site":[1653],"is_404":[1653],"defined":[1653]},"used_by":[]},"maybe_add_existing_user_to_blog":{"doc":"\/**\n * Add a new user to a blog by visiting \/newbloguser\/username\/.\n *\n * This will only work when the user's details are saved as an option\n * keyed as 'new_user_x', where 'x' is the username of the user to be\n * added, as when a user is invited through the regular WP Add User interface.\n *\n * @since MU\n * @uses add_existing_user_to_blog()\n *\/","file":"ms-functions.php","line":1671,"missingDoc":false,"filters":[],"uses":{"strpos":[1672],"explode":[1675],"array_pop":[1676,1679],"get_option":[1681],"delete_option":[1683],"wp_die":[1686,1688],"sprintf":[1686,1688],"__":[1686,1688,1688],"home_url":[1686,1688],"is_wp_error":[1685],"add_existing_user_to_blog":[1685],"admin_url":[1688]},"used_by":[]},"add_existing_user_to_blog":{"doc":"\/**\n * Add a user to a blog based on details from maybe_add_existing_user_to_blog().\n *\n * @since MU\n * @uses add_user_to_blog()\n *\n * @param array $details\n *\/","file":"ms-functions.php","line":1699,"missingDoc":false,"filters":["'added_existing_user'"],"uses":{"add_user_to_blog":[1703],"is_array":[1702]},"used_by":{"maybe_add_existing_user_to_blog":[1685]}},"fix_phpmailer_messageid":{"doc":"\/**\n * Correct From host on outgoing mail to match the site domain\n *\n * @since MU\n *\/","file":"ms-functions.php","line":1734,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"is_user_spammy":{"doc":"\/**\n * Check to see whether a user is marked as a spammer, based on username\n *\n * @since MU\n * @uses get_current_user_id()\n * @uses get_user_id_from_string()\n *\n * @param string $username\n * @return bool\n *\/","file":"ms-functions.php","line":1749,"missingDoc":false,"filters":[],"uses":{"get_current_user_id":[1751],"get_user_id_from_string":[1753],"get_userdata":[1755]},"used_by":[]},"update_blog_public":{"doc":"\/**\n * Update this blog's 'public' setting in the global blogs table.\n *\n * Public blogs have a setting of 1, private blogs are 0.\n *\n * @since MU\n * @uses update_blog_status()\n *\n * @param int $old_value\n * @param int $value The new public value\n * @return bool\n *\/","file":"ms-functions.php","line":1772,"missingDoc":false,"filters":["'update_blog_public'"],"uses":{"update_blog_status":[1775]},"used_by":[]},"get_dashboard_blog":{"doc":"\/**\n * Get the \"dashboard blog\", the blog where users without a blog edit their profile data.\n *\n * @since MU\n * @uses get_blog_details()\n *\n * @return int\n *\/","file":"ms-functions.php","line":1787,"missingDoc":false,"filters":[],"uses":{"get_blog_details":[1789,1791],"get_site_option":[1788]},"used_by":[]},"is_user_option_local":{"doc":"\/**\n * Check whether a usermeta key has to do with the current blog.\n *\n * @since MU\n * @uses wp_get_current_user()\n *\n * @param string $key\n * @param int $user_id Optional. Defaults to current user.\n * @param int $blog_id Optional. Defaults to current blog.\n * @return bool\n *\/","file":"ms-functions.php","line":1805,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[1808],"get_blog_prefix":[1814]},"used_by":[]},"users_can_register_signup_filter":{"doc":"\/**\n * Check whether users can self-register, based on Network settings.\n *\n * @since MU\n *\n * @return bool\n *\/","file":"ms-functions.php","line":1829,"missingDoc":false,"filters":[],"uses":{"get_site_option":[1830]},"used_by":[]},"welcome_user_msg_filter":{"doc":"\/**\n * Ensure that the welcome message is not empty. Currently unused.\n *\n * @since MU\n *\n * @param string $text\n * @return string\n *\/","file":"ms-functions.php","line":1846,"missingDoc":false,"filters":[],"uses":{"remove_filter":[1848],"__":[1849],"update_site_option":[1861]},"used_by":[]},"update_site_option":{"doc":"\/**\n * Update the value of a site option that was already added.\n *\n * @see update_option()\n * @since 2.8.0\n * @package WordPress\n * @subpackage Option\n *\n * @uses apply_filters() Calls 'pre_update_site_option_$option' hook to allow overwriting the\n * \toption value to be stored.\n * @uses do_action() Calls 'update_site_option_$option' and 'update_site_option' hooks on success.\n *\n * @param string $option Name of option. Expected to not be SQL-escaped.\n * @param mixed $value Option value. Expected to not be SQL-escaped.\n * @return bool False if value was not updated and true if value was updated.\n *\/","file":"option.php","line":898,"missingDoc":false,"filters":["'pre_update_site_option_' . $option","\"update_site_option_{$option}\"","'update_site_option'"],"uses":{"get_site_option":[901],"add_site_option":[908],"update_option":[911],"sanitize_option":[913],"wp_cache_set":[915],"maybe_serialize":[918],"update":[919],"is_multisite":[910]},"used_by":{"welcome_user_msg_filter":[1861],"wp_update_network_counts":[1929,1932],"set_site_transient":[1047,1048],"wp_salt":[1364,1373]}},"force_ssl_content":{"doc":"\/**\n * Whether to force SSL on content.\n *\n * @since 2.8.5\n *\n * @param string|bool $force\n * @return bool True if forced, false if not forced.\n *\/","file":"ms-functions.php","line":1875,"missingDoc":false,"filters":[],"uses":[],"used_by":{"filter_SSL":[1901]}},"filter_SSL":{"doc":"\/**\n * Formats a URL to use https.\n *\n * Useful as a filter.\n *\n * @since 2.8.5\n *\n * @param string URL\n * @return string URL with https as the scheme\n *\/","file":"ms-functions.php","line":1897,"missingDoc":false,"filters":[],"uses":{"get_bloginfo":[1899],"is_string":[1898],"set_url_scheme":[1902],"force_ssl_content":[1901],"is_ssl":[1901]},"used_by":[]},"wp_schedule_update_network_counts":{"doc":"\/**\n * Schedule update of the network-wide counts for the current network.\n *\n * @since 3.1.0\n *\/","file":"ms-functions.php","line":1912,"missingDoc":false,"filters":[],"uses":{"is_main_site":[1913],"wp_schedule_event":[1917],"time":[1917],"wp_next_scheduled":[1916],"defined":[1916]},"used_by":[]},"wp_update_network_counts":{"doc":"\/**\n *  Update the network-wide counts for the current network.\n *\n *  @since 3.1.0\n *\/","file":"ms-functions.php","line":1925,"missingDoc":false,"filters":[],"uses":{"get_var":[1928,1931],"prepare":[1928],"update_site_option":[1929,1932]},"used_by":[]},"get_space_used":{"doc":"\/**\n * Returns the space used by the current blog.\n *\n * @since 3.5.0\n *\n * @return int Used space in megabytes\n *\/","file":"ms-functions.php","line":1942,"missingDoc":false,"filters":["'pre_get_space_used'"],"uses":{"wp_upload_dir":[1946],"get_dirsize":[1947]},"used_by":{"get_upload_space_available":[1984]}},"get_space_allowed":{"doc":"\/**\n * Returns the upload quota for the current blog.\n *\n * @since MU\n *\n * @return int Quota in megabytes\n *\/","file":"ms-functions.php","line":1960,"missingDoc":false,"filters":[],"uses":{"get_option":[1961],"get_site_option":[1964],"is_numeric":[1963,1966]},"used_by":{"get_upload_space_available":[1980]}},"get_upload_space_available":{"doc":"\/**\n * Determines if there is any upload space left in the current blog's quota.\n *\n * @since 3.0.0\n *\n * @return int of upload space available in bytes\n *\/","file":"ms-functions.php","line":1979,"missingDoc":false,"filters":[],"uses":{"get_space_allowed":[1980],"get_site_option":[1981],"get_space_used":[1984]},"used_by":{"is_upload_space_available":[2002],"upload_size_limit_filter":[2015]}},"upload_size_limit_filter":{"doc":"\/**\n * @since 3.0.0\n *\n * @return int of upload size limit in bytes\n *\/","file":"ms-functions.php","line":2010,"missingDoc":false,"filters":[],"uses":{"get_site_option":[2011,2012],"min":[2013,2015],"get_upload_space_available":[2015]},"used_by":[]},"ms_site_check":{"doc":"\/**\n * Checks status of current blog.\n *\n * Checks if the blog is deleted, inactive, archived, or spammed.\n *\n * Dies with a default message if the blog does not pass the check.\n *\n * To change the default message when a blog does not pass the check,\n * use the wp-content\/blog-deleted.php, blog-inactive.php and\n * blog-suspended.php drop-ins.\n *\n * @return bool|string Returns true on success, or drop-in file to include.\n *\/","file":"ms-load.php","line":71,"missingDoc":false,"filters":["'ms_site_check'"],"uses":{"get_blog_details":[74],"is_super_admin":[82],"wp_die":[89,96,103],"__":[89,96,103],"file_exists":[86,93,100],"sprintf":[96],"str_replace":[96],"get_site_option":[96]},"used_by":[]},"get_current_site_name":{"doc":"\/**\n * Sets current site name.\n *\n * @access private\n * @since 3.0.0\n * @return object $current_site object with site_name\n *\/","file":"ms-load.php","line":116,"missingDoc":false,"filters":[],"uses":{"wp_cache_get":[119],"get_var":[121],"prepare":[121],"ucfirst":[123],"wp_cache_set":[124]},"used_by":{"wpmu_current_site":[173],"__main":[114]}},"wpmu_current_site":{"doc":"\/**\n * Sets current_site object.\n *\n * @access private\n * @since 3.0.0\n * @return object $current_site object\n *\/","file":"ms-load.php","line":137,"missingDoc":false,"filters":[],"uses":{"defined":[144,149,147,143,143,210],"substr":[153,154,175,174,179,200],"wp_load_core_site_options":[158,170],"wp_cache_get":[163],"get_results":[167],"get_var":[172],"prepare":[172,182,184,188,190,201,207],"get_current_site_name":[173],"wp_cache_set":[176],"count":[168,218],"strpos":[179,200],"get_row":[182,184,188,190,201,207],"is_subdomain_install":[199],"wp_load_translations_early":[216],"wp_die":[219,221],"sprintf":[219],"__":[219,221]},"used_by":{"__main":[48]}},"wp_load_core_site_options":{"doc":"\/**\n * Loads and caches certain often requested site options if is_multisite() and a persistent cache is not being used.\n *\n * @since 3.0.0\n * @package WordPress\n * @subpackage Option\n *\n * @param int $site_id Optional site ID for which to query the options. Defaults to the current site.\n *\/","file":"option.php","line":168,"missingDoc":false,"filters":[],"uses":{"is_multisite":[171],"defined":[171],"implode":[179],"get_results":[180],"prepare":[180],"maybe_unserialize":[185],"wp_cache_set":[187]},"used_by":{"wpmu_current_site":[158,170]}},"ms_not_installed":{"doc":"\/**\n * Displays a failure message.\n *\n * Used when a blog's tables do not exist. Checks for a missing $wpdb->site table as well.\n *\n * @access private\n * @since 3.0.0\n *\/","file":"ms-load.php","line":232,"missingDoc":false,"filters":[],"uses":{"wp_load_translations_early":[235],"__":[237,241,242,244,246,247,248,249],"is_admin":[239],"sprintf":[244,246],"rtrim":[246],"get_var":[243],"tables":[250],"wp_die":[257]},"used_by":{"__main":[104]}},"Walker_Nav_Menu::start_lvl":{"doc":"\/**\n * @see Walker::start_lvl()\n * @since 3.0.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param int $depth Depth of page. Used for padding.\n *\/","file":"nav-menu-template.php","line":40,"missingDoc":false,"filters":[],"uses":{"str_repeat":[41]},"used_by":[]},"Walker_Nav_Menu::end_lvl":{"doc":"\/**\n * @see Walker::end_lvl()\n * @since 3.0.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param int $depth Depth of page. Used for padding.\n *\/","file":"nav-menu-template.php","line":52,"missingDoc":false,"filters":[],"uses":{"str_repeat":[53]},"used_by":[]},"Walker_Nav_Menu::start_el":{"doc":"\/**\n * @see Walker::start_el()\n * @since 3.0.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $item Menu item data object.\n * @param int $depth Depth of menu item. Used for padding.\n * @param int $current_page Menu item ID.\n * @param object $args\n *\/","file":"nav-menu-template.php","line":67,"missingDoc":false,"filters":["'nav_menu_css_class'","'nav_menu_item_id'","'the_title'","'walker_nav_menu_start_el'"],"uses":{"str_repeat":[68],"join":[75],"array_filter":[75],"esc_attr":[76,79,83,84,85,86]},"used_by":[]},"Walker_Nav_Menu::end_el":{"doc":"\/**\n * @see Walker::end_el()\n * @since 3.0.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $item Page data object. Not used.\n * @param int $depth Depth of page. Not Used.\n *\/","file":"nav-menu-template.php","line":105,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wp_get_nav_menu_items":{"doc":"\/**\n * Returns all menu items of a navigation menu.\n *\n * @since 3.0.0\n *\n * @param string $menu menu name, id, or slug\n * @param string $args\n * @return mixed $items array of menu items, else false.\n *\/","file":"nav-menu.php","line":470,"missingDoc":false,"filters":["'wp_get_nav_menu_items'"],"uses":{"wp_get_nav_menu_object":[473],"get_objects_in_term":[480],"wp_parse_args":[487],"implode":[489],"count":[488],"get_posts":[493,516],"is_wp_error":[495],"is_array":[495],"get_post_meta":[504,505,506],"array_keys":[515,522],"get_terms":[523],"array_map":[529],"array_filter":[532],"is_admin":[531],"usort":[536]},"used_by":{"wp_nav_menu":[158,167],"wp_update_nav_menu_item":[304],"_wp_auto_add_pages_to_menu":[774]}},"_wp_menu_item_classes_by_context":{"doc":"\/**\n * Add the class property classes for the current context, if applicable.\n *\n * @access private\n * @since 3.0\n *\n * @param array $menu_items The current menu item objects to which to add the class property information.\n *\/","file":"nav-menu-template.php","line":253,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[256],"get_option":[265],"_get_term_hierarchy":[270,296],"wp_get_object_terms":[271],"array_merge":[273],"is_array":[272],"is_taxonomy_hierarchical":[269,295],"get_object_taxonomies":[268],"is_post_type_hierarchical":[267,424],"array_filter":[315,407,408,409],"home_url":[317,384,397],"get_post_meta":[348,378],"in_array":[349,379,384,372,329,425,433,444,448,452,457,459],"untrailingslashit":[366,369,370,384,384,397],"set_url_scheme":[367],"strpos":[368,368],"substr":[368],"preg_replace":[370],"is_front_page":[393],"array_unique":[405,407,408,409,463],"intval":[444]},"used_by":{"wp_nav_menu":[198]}},"walk_nav_menu_tree":{"doc":"\/**\n * Retrieve the HTML list content for nav menu items.\n *\n * @uses Walker_Nav_Menu to create HTML list content.\n * @since 3.0.0\n * @see Walker::walk() for parameters and return description.\n *\/","file":"nav-menu-template.php","line":474,"missingDoc":false,"filters":[],"uses":{"call_user_func_array":[478]},"used_by":{"wp_nav_menu":[208]}},"_get_term_hierarchy":{"doc":"\/**\n * Retrieves children of taxonomy as Term IDs.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @access private\n * @since 2.3.0\n *\n * @uses update_option() Stores all of the children in \"$taxonomy_children\"\n *\t option. That is the name of the taxonomy, immediately followed by '_children'.\n *\n * @param string $taxonomy Taxonomy Name\n * @return array Empty if $taxonomy isn't hierarchical or returns children as Term IDs.\n *\/","file":"taxonomy.php","line":2763,"missingDoc":false,"filters":[],"uses":{"is_taxonomy_hierarchical":[2764],"get_option":[2766],"is_array":[2768],"get_terms":[2771],"update_option":[2776]},"used_by":{"_wp_menu_item_classes_by_context":[270,296],"get_term_children":[1013],"get_terms":[1229,1235,1413],"clean_term_cache":[2629],"_get_term_children":[2803],"_pad_term_counts":[2860]}},"_nav_menu_item_id_use_once":{"doc":"\/**\n * Prevents a menu item ID from being used more than once.\n *\n * @since 3.0.1\n * @access private\n *\/","file":"nav-menu-template.php","line":487,"missingDoc":false,"filters":[],"uses":{"in_array":[489]},"used_by":[]},"is_nav_menu":{"doc":"\/**\n * Check if the given ID is a navigation menu.\n *\n * Returns true if it is; false otherwise.\n *\n * @since 3.0.0\n *\n * @param int|string $menu The menu to check (id, slug, or name)\n * @return bool Whether the menu exists.\n *\/","file":"nav-menu.php","line":49,"missingDoc":false,"filters":[],"uses":{"wp_get_nav_menu_object":[53],"is_wp_error":[57]},"used_by":[]},"register_nav_menus":{"doc":"\/**\n * Register navigation menus for a theme.\n *\n * @since 3.0.0\n *\n * @param array $locations Associative array of menu location identifiers (like a slug) and descriptive text.\n *\/","file":"nav-menu.php","line":73,"missingDoc":false,"filters":[],"uses":{"add_theme_support":[76],"array_merge":[78]},"used_by":{"register_nav_menu":[107]}},"unregister_nav_menu":{"doc":"\/**\n * Unregisters a navigation menu for a theme.\n *\n * @param array $location the menu location identifier\n *\n * @return bool True on success, false on failure.\n *\/","file":"nav-menu.php","line":88,"missingDoc":false,"filters":[],"uses":{"is_array":[91]},"used_by":[]},"register_nav_menu":{"doc":"\/**\n * Register a navigation menu for a theme.\n *\n * @since 3.0.0\n *\n * @param string $location Menu location identifier, like a slug.\n * @param string $description Menu location descriptive text.\n *\/","file":"nav-menu.php","line":106,"missingDoc":false,"filters":[],"uses":{"register_nav_menus":[107]},"used_by":[]},"has_nav_menu":{"doc":"\/**\n * Whether a registered nav menu location has a menu assigned to it.\n *\n * @since 3.0.0\n * @param string $location Menu location identifier.\n * @return bool Whether location has a menu.\n *\/","file":"nav-menu.php","line":140,"missingDoc":false,"filters":[],"uses":{"get_nav_menu_locations":[141]},"used_by":[]},"is_nav_menu_item":{"doc":"\/**\n * Determine whether the given ID is a nav menu item.\n *\n * @since 3.0.0\n *\n * @param int $menu_item_id The ID of the potential nav menu item.\n * @return bool Whether the given ID is that of a nav menu item.\n *\/","file":"nav-menu.php","line":153,"missingDoc":false,"filters":[],"uses":{"is_wp_error":[154],"get_post_type":[154]},"used_by":{"wp_update_nav_menu_item":[274],"wp_get_associated_nav_menu_items":[694]}},"wp_create_nav_menu":{"doc":"\/**\n * Create a Navigation Menu.\n *\n * @since 3.0.0\n *\n * @param string $menu_name Menu Name\n * @return mixed Menu object on success|WP_Error on failure\n *\/","file":"nav-menu.php","line":165,"missingDoc":false,"filters":[],"uses":{"wp_update_nav_menu_object":[166]},"used_by":[]},"wp_update_nav_menu_object":{"doc":"\/**\n * Save the properties of a menu or create a new menu with those properties.\n *\n * @since 3.0.0\n *\n * @param int $menu_id The ID of the menu or \"0\" to create a new menu.\n * @param array $menu_data The array of menu data.\n * @return int|error object The menu's ID or WP_Error object.\n *\/","file":"nav-menu.php","line":206,"missingDoc":false,"filters":["'wp_create_nav_menu'","'wp_update_nav_menu'"],"uses":{"wp_get_nav_menu_object":[209],"get_term_by":[219,230],"sprintf":[226,233],"__":[226,233],"esc_html":[226,233],"is_wp_error":[222,237,229,252],"wp_insert_term":[235],"wp_update_term":[250]},"used_by":{"wp_create_nav_menu":[166]}},"wp_delete_nav_menu":{"doc":"\/**\n * Delete a Navigation Menu.\n *\n * @since 3.0.0\n *\n * @param string $menu name|id|slug\n * @return mixed Menu object on success|WP_Error on failure\n *\/","file":"nav-menu.php","line":177,"missingDoc":false,"filters":["'wp_delete_nav_menu'"],"uses":{"wp_get_nav_menu_object":[178],"get_objects_in_term":[182],"wp_delete_post":[185],"wp_delete_term":[189],"is_wp_error":[191]},"used_by":[]},"get_objects_in_term":{"doc":"\/**\n * Retrieve object_ids of valid taxonomy and term.\n *\n * The strings of $taxonomies must exist before this function will continue. On\n * failure of finding a valid taxonomy, it will return an WP_Error class, kind\n * of like Exceptions in PHP 5, except you can't catch them. Even so, you can\n * still test for the WP_Error class and get the error message.\n *\n * The $terms aren't checked the same as $taxonomies, but still need to exist\n * for $object_ids to be returned.\n *\n * It is possible to change the order that object_ids is returned by either\n * using PHP sort family functions or using the database by using $args with\n * either ASC or DESC array. The value should be in the key named 'order'.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wpdb\n * @uses wp_parse_args() Creates an array from string $args.\n *\n * @param int|array $term_ids Term id or array of term ids of terms that will be used\n * @param string|array $taxonomies String of taxonomy name or Array of string values of taxonomy names\n * @param array|string $args Change the order of the object_ids, either ASC or DESC\n * @return WP_Error|array If the taxonomy does not exist, then WP_Error will be returned. On success\n *\tthe array can be empty meaning that there are no $object_ids found or it will return the $object_ids found.\n *\/","file":"taxonomy.php","line":507,"missingDoc":false,"filters":[],"uses":{"is_array":[510,513],"__":[518],"taxonomy_exists":[517],"wp_parse_args":[522],"extract":[523],"strtolower":[525],"array_map":[527],"implode":[529,530],"get_col":[532]},"used_by":{"wp_delete_nav_menu":[182],"wp_get_nav_menu_items":[480]}},"wp_update_nav_menu_item":{"doc":"\/**\n * Save the properties of a menu item or create a new one.\n *\n * @since 3.0.0\n *\n * @param int $menu_id The ID of the menu. Required. If \"0\", makes the menu item a draft orphan.\n * @param int $menu_item_db_id The ID of the menu item. If \"0\", creates a new menu item.\n * @param array $menu_item_data The menu item's data.\n * @return int The menu item's database ID or WP_Error object on failure.\n *\/","file":"nav-menu.php","line":269,"missingDoc":false,"filters":["'wp_update_nav_menu_item'"],"uses":{"__":[275],"is_nav_menu_item":[274],"wp_get_nav_menu_object":[277],"is_wp_error":[279,361],"wp_parse_args":[299],"wp_get_nav_menu_items":[304],"array_pop":[305],"count":[306],"get_post_field":[309],"get_term_field":[321,322],"get_post":[325],"intval":[354],"is_object_in_term":[353],"wp_insert_post":[360],"update_post_meta":[372,373,374,375,376,380,381,382,385],"sanitize_key":[372,375,376],"strval":[373,374],"array_map":[378,379],"explode":[378,379],"implode":[379],"esc_url_raw":[382],"time":[385],"get_post_meta":[386],"delete_post_meta":[387],"wp_update_post":[393]},"used_by":{"_wp_auto_add_pages_to_menu":[781]}},"_sort_nav_menu_items":{"doc":"\/**\n * Sort menu items by the desired key.\n *\n * @since 3.0.0\n * @access private\n *\n * @param object $a The first object to compare\n * @param object $b The second object to compare\n * @return int -1, 0, or 1 if $a is considered to be respectively less than, equal to, or greater than $b.\n *\/","file":"nav-menu.php","line":425,"missingDoc":false,"filters":[],"uses":{"strcmp":[442]},"used_by":[]},"_is_valid_nav_menu_item":{"doc":"\/**\n * Returns if a menu item is valid. Bug #13958\n *\n * @since 3.2.0\n * @access private\n *\n * @param object $menu_item The menu item to check\n * @return bool false if invalid, else true.\n *\/","file":"nav-menu.php","line":454,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wp_setup_nav_menu_item":{"doc":"\/**\n * Decorates a menu item object with the shared navigation menu item properties.\n *\n * Properties:\n * - db_id: \t\tThe DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist).\n * - object_id:\t\tThe DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories.\n * - type:\t\tThe family of objects originally represented, such as \"post_type\" or \"taxonomy.\"\n * - object:\t\tThe type of object originally represented, such as \"category,\" \"post\", or \"attachment.\"\n * - type_label:\tThe singular label used to describe this type of menu item.\n * - post_parent:\tThe DB ID of the original object's parent object, if any (0 otherwise).\n * - menu_item_parent: \tThe DB ID of the nav_menu_item that is this item's menu parent, if any. 0 otherwise.\n * - url:\t\tThe URL to which this menu item points.\n * - title:\t\tThe title of this menu item.\n * - target: \t\tThe target attribute of the link element for this menu item.\n * - attr_title:\tThe title attribute of the link element for this menu item.\n * - classes:\t\tThe array of class attribute values for the link element of this menu item.\n * - xfn:\t\tThe XFN relationship expressed in the link of this menu item.\n * - description:\tThe description of this menu item.\n *\n * @since 3.0.0\n *\n * @param object $menu_item The menu item to modify.\n * @return object $menu_item The menu item with standard menu item properties.\n *\/","file":"nav-menu.php","line":570,"missingDoc":false,"filters":["'nav_menu_attr_title'","'nav_menu_description'","'nav_menu_attr_title'","'nav_menu_description'","'wp_setup_nav_menu_item'"],"uses":{"get_post_meta":[574,575,576,577,614,617,624,625],"get_post_type_object":[580,632],"get_permalink":[588,637],"get_post":[590],"get_taxonomy":[595,653],"get_term_link":[603,658],"is_wp_error":[604,607],"get_term_field":[606,661],"__":[612],"wp_trim_words":[622]},"used_by":[]},"wp_get_associated_nav_menu_items":{"doc":"\/**\n * Get the menu items associated with a particular object.\n *\n * @since 3.0.0\n *\n * @param int $object_id The ID of the original object.\n * @param string $object_type The type of object, such as \"taxonomy\" or \"post_type.\"\n * @return array The array of menu item IDs; empty array if none;\n *\/","file":"nav-menu.php","line":679,"missingDoc":false,"filters":[],"uses":{"query":[684],"get_post_meta":[695],"is_nav_menu_item":[694],"array_unique":[702]},"used_by":{"_wp_delete_post_menu_item":[717],"_wp_delete_tax_menu_item":[736]}},"_wp_delete_post_menu_item":{"doc":"\/**\n * Callback for handling a menu item when its original object is deleted.\n *\n * @since 3.0.0\n * @access private\n *\n * @param int $object_id The ID of the original object being trashed.\n *\n *\/","file":"nav-menu.php","line":714,"missingDoc":false,"filters":[],"uses":{"wp_get_associated_nav_menu_items":[717],"wp_delete_post":[720]},"used_by":[]},"_wp_delete_tax_menu_item":{"doc":"\/**\n * Callback for handling a menu item when its original object is deleted.\n *\n * @since 3.0.0\n * @access private\n *\n * @param int $object_id The ID of the original object being trashed.\n *\n *\/","file":"nav-menu.php","line":733,"missingDoc":false,"filters":[],"uses":{"wp_get_associated_nav_menu_items":[736],"wp_delete_post":[739]},"used_by":[]},"_wp_auto_add_pages_to_menu":{"doc":"\/**\n * Automatically add newly published page objects to menus with that as an option.\n *\n * @since 3.0.0\n * @access private\n *\n * @param string $new_status The new status of the post object.\n * @param string $old_status The old status of the post object.\n * @param object $post The post object being transitioned from one status to another.\n * @return void\n *\/","file":"nav-menu.php","line":754,"missingDoc":false,"filters":[],"uses":{"get_option":[759],"is_array":[760,763,775],"wp_get_nav_menu_items":[774],"wp_update_nav_menu_item":[781]},"used_by":[]},"wp_protect_special_option":{"doc":"\/**\n * Protect WordPress special option from being modified.\n *\n * Will die if $option is in protected list. Protected options are 'alloptions'\n * and 'notoptions' options.\n *\n * @since 2.2.0\n * @package WordPress\n * @subpackage Option\n *\n * @param string $option Option name.\n *\/","file":"option.php","line":106,"missingDoc":false,"filters":[],"uses":{"wp_die":[109],"sprintf":[109],"__":[109],"esc_html":[109],"in_array":[108]},"used_by":{"update_option":[222],"add_option":[303],"delete_option":[363]}},"form_option":{"doc":"\/**\n * Print option value after sanitizing for forms.\n *\n * @uses attr Sanitizes value.\n * @since 1.5.0\n * @package WordPress\n * @subpackage Option\n *\n * @param string $option Option name.\n *\/","file":"option.php","line":122,"missingDoc":false,"filters":[],"uses":{"esc_attr":[123],"get_option":[123]},"used_by":[]},"wp_user_settings":{"doc":"\/**\n * Saves and restores user interface settings stored in a cookie.\n *\n * Checks if the current user-settings cookie is updated and stores it. When no\n * cookie exists (different browser used), adds the last saved cookie restoring\n * the settings.\n *\n * @package WordPress\n * @subpackage Option\n * @since 2.7.0\n *\/","file":"option.php","line":532,"missingDoc":false,"filters":[],"uses":{"is_admin":[534],"defined":[537],"wp_get_current_user":[540],"is_super_admin":[543],"in_array":[544],"get_current_blog_id":[544],"array_keys":[544],"get_blogs_of_user":[544],"get_user_option":[548,557],"preg_replace":[551,558],"update_user_option":[561,562],"time":[562,568,569,569],"strpos":[553],"setcookie":[568,569]},"used_by":[]},"update_user_option":{"doc":"\/**\n * Update user option with global blog capability.\n *\n * User options are just like user metadata except that they have support for\n * global blog options. If the 'global' parameter is false, which it is by default\n * it will prepend the WordPress table prefix to the option name.\n *\n * Deletes the user option if $newvalue is empty.\n *\n * @since 2.0.0\n * @uses $wpdb WordPress database object for queries\n *\n * @param int $user_id User ID\n * @param string $option_name User option name.\n * @param mixed $newvalue User option value.\n * @param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific).\n * @return unknown\n *\/","file":"user.php","line":273,"missingDoc":false,"filters":[],"uses":{"delete_user_meta":[282],"is_null":[281],"is_scalar":[281],"update_user_meta":[284]},"used_by":{"wp_user_settings":[561,562],"wp_set_all_user_settings":[719,720],"delete_all_user_settings":[736]}},"get_all_user_settings":{"doc":"\/**\n * Retrieve all user interface settings.\n *\n * @package WordPress\n * @subpackage Option\n * @since 2.7.0\n *\n * @return array the last saved user settings or empty array.\n *\/","file":"option.php","line":664,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[667],"is_array":[670],"preg_replace":[675],"parse_str":[678,683],"strpos":[677],"get_user_option":[681],"is_string":[682]},"used_by":{"get_user_setting":[586],"set_user_setting":[610],"delete_user_setting":[639]}},"set_user_setting":{"doc":"\/**\n * Add or update user interface setting.\n *\n * Both $name and $value can contain only ASCII letters, numbers and underscores.\n * This function has to be used before any output has started as it calls setcookie().\n *\n * @package WordPress\n * @subpackage Option\n * @since 2.8.0\n *\n * @param string $name The name of the setting.\n * @param string $value The value for the setting.\n * @return bool true if set successfully\/false if not.\n *\/","file":"option.php","line":605,"missingDoc":false,"filters":[],"uses":{"headers_sent":[607],"get_all_user_settings":[610],"preg_replace":[611],"wp_set_all_user_settings":[618]},"used_by":[]},"wp_set_all_user_settings":{"doc":"\/**\n * Private. Set all user interface settings.\n *\n * @package WordPress\n * @subpackage Option\n * @since 2.8.0\n *\n * @param unknown $all\n * @return bool\n *\/","file":"option.php","line":699,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[702],"is_super_admin":[705],"in_array":[706],"get_current_blog_id":[706],"array_keys":[706],"get_blogs_of_user":[706],"preg_replace":[713],"rtrim":[717],"update_user_option":[719,720],"time":[720]},"used_by":{"set_user_setting":[618],"delete_user_setting":[650]}},"delete_user_setting":{"doc":"\/**\n * Delete user interface settings.\n *\n * Deleting settings would reset them to the defaults.\n * This function has to be used before any output has started as it calls setcookie().\n *\n * @package WordPress\n * @subpackage Option\n * @since 2.7.0\n *\n * @param mixed $names The name or array of names of the setting to be deleted.\n * @return bool true if deleted successfully\/false if not.\n *\/","file":"option.php","line":634,"missingDoc":false,"filters":[],"uses":{"headers_sent":[636],"get_all_user_settings":[639],"wp_set_all_user_settings":[650]},"used_by":[]},"delete_all_user_settings":{"doc":"\/**\n * Delete the user settings of the current user.\n *\n * @package WordPress\n * @subpackage Option\n * @since 2.7.0\n *\/","file":"option.php","line":732,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[733],"update_user_option":[736],"setcookie":[737],"time":[737]},"used_by":[]},"delete_site_option":{"doc":"\/**\n * Removes site option by name.\n *\n * @see delete_option()\n * @package WordPress\n * @subpackage Option\n * @since 2.8.0\n *\n * @uses do_action() Calls 'pre_delete_site_option_$option' hook before option is deleted.\n * @uses do_action() Calls 'delete_site_option' and 'delete_site_option_$option'\n * \thooks on success.\n *\n * @param string $option Name of option to remove. Expected to not be SQL-escaped.\n * @return bool True, if succeed. False, if failure.\n *\/","file":"option.php","line":855,"missingDoc":false,"filters":["'pre_delete_site_option_' . $option","\"delete_site_option_{$option}\"","'delete_site_option'"],"uses":{"delete_option":[863],"get_row":[865],"prepare":[865],"is_null":[866],"wp_cache_delete":[869],"delete":[871],"is_multisite":[862]},"used_by":{"delete_site_transient":[953,955],"get_site_transient":[999,1000]}},"delete_site_transient":{"doc":"\/**\n * Delete a site transient.\n *\n * @since 2.9.0\n * @package WordPress\n * @subpackage Transient\n *\n * @uses do_action() Calls 'delete_site_transient_$transient' hook before transient is deleted.\n * @uses do_action() Calls 'deleted_site_transient' hook on success.\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped.\n * @return bool True if successful, false otherwise\n *\/","file":"option.php","line":944,"missingDoc":false,"filters":["'delete_site_transient_' . $transient","'deleted_site_transient'"],"uses":{"wp_cache_delete":[949],"delete_site_option":[953,955]},"used_by":{"wp_clean_themes_cache":[115]}},"get_site_transient":{"doc":"\/**\n * Get the value of a site transient.\n *\n * If the transient does not exist or does not have a value, then the return value\n * will be false.\n *\n * @see get_transient()\n * @since 2.9.0\n * @package WordPress\n * @subpackage Transient\n *\n * @uses apply_filters() Calls 'pre_site_transient_$transient' hook before checking the transient.\n * \tAny value other than false will \"short-circuit\" the retrieval of the transient\n *\tand return the returned value.\n * @uses apply_filters() Calls 'site_transient_$option' hook, after checking the transient, with\n * \tthe transient value.\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped.\n * @return mixed Value of transient\n *\/","file":"option.php","line":982,"missingDoc":false,"filters":["'pre_site_transient_' . $transient","'site_transient_' . $transient"],"uses":{"wp_cache_get":[990],"get_site_option":[997,1005],"delete_site_option":[999,1000],"time":[998],"in_array":[995]},"used_by":{"get_theme_roots":[288,291],"search_theme_directories":[352,426],"wp_version_check":[30],"wp_update_plugins":[148],"wp_update_themes":[240],"wp_get_update_data":[337,343],"_maybe_update_core":[371],"_maybe_update_plugins":[392],"_maybe_update_themes":[408]}},"set_site_transient":{"doc":"\/**\n * Set\/update the value of a site transient.\n *\n * You do not need to serialize values, if the value needs to be serialize, then\n * it will be serialized before it is set.\n *\n * @see set_transient()\n * @since 2.9.0\n * @package WordPress\n * @subpackage Transient\n *\n * @uses apply_filters() Calls 'pre_set_site_transient_$transient' hook to allow overwriting the\n * \ttransient value to be stored.\n * @uses do_action() Calls 'set_site_transient_$transient' and 'setted_site_transient' hooks on success.\n *\n * @param string $transient Transient name. Expected to not be SQL-escaped.\n * @param mixed $value Transient value. Expected to not be SQL-escaped.\n * @param int $expiration Time until expiration in seconds, default 0\n * @return bool False if value was not set and true if value was set.\n *\/","file":"option.php","line":1031,"missingDoc":false,"filters":["'pre_set_site_transient_' . $transient","'set_site_transient_' . $transient","'setted_site_transient'"],"uses":{"wp_cache_set":[1037],"add_site_option":[1043,1044],"time":[1043,1047],"update_site_option":[1047,1048],"get_site_option":[1041]},"used_by":{"search_theme_directories":[427],"wp_version_check":[47,120],"wp_update_plugins":[195,217],"wp_update_themes":[302,323]}},"set_current_user":{"doc":"\/**\n * Changes the current user by ID or name.\n *\n * Set $id to null and specify a name if you do not know a user's ID.\n *\n * @since 2.0.1\n * @see wp_set_current_user() An alias of wp_set_current_user()\n * @deprecated 3.0.0\n * @deprecated Use wp_set_current_user()\n *\n * @param int|null $id User ID.\n * @param string $name Optional. The user's username\n * @return object returns wp_set_current_user()\n *\/","file":"pluggable-deprecated.php","line":33,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[34],"wp_set_current_user":[35]},"used_by":[]},"get_userdatabylogin":{"doc":"\/**\n * Retrieve user info by login name.\n *\n * @since 0.71\n * @deprecated 3.3.0\n * @deprecated Use get_user_by('login')\n *\n * @param string $user_login User's username\n * @return bool|object False on failure, User DB row object\n *\/","file":"pluggable-deprecated.php","line":50,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[51],"get_user_by":[52]},"used_by":[]},"get_user_by_email":{"doc":"\/**\n * Retrieve user info by email.\n *\n * @since 2.5\n * @deprecated 3.3.0\n * @deprecated Use get_user_by('email')\n *\n * @param string $email User's email address\n * @return bool|object False on failure, User DB row object\n *\/","file":"pluggable-deprecated.php","line":67,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[68],"get_user_by":[69]},"used_by":[]},"wp_setcookie":{"doc":"\/**\n * Sets a cookie for a user who just logged in. This function is deprecated.\n *\n * @since 1.5\n * @deprecated 2.5\n * @deprecated Use wp_set_auth_cookie()\n * @see wp_set_auth_cookie()\n *\n * @param string $username The user's username\n * @param string $password Optional. The user's password\n * @param bool $already_md5 Optional. Whether the password has already been through MD5\n * @param string $home Optional. Will be used instead of COOKIEPATH if set\n * @param string $siteurl Optional. Will be used instead of SITECOOKIEPATH if set\n * @param bool $remember Optional. Remember that the user is logged in\n *\/","file":"pluggable-deprecated.php","line":89,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[90],"get_user_by":[91],"wp_set_auth_cookie":[92]},"used_by":[]},"wp_set_auth_cookie":{"doc":"\/**\n * Sets the authentication cookies based User ID.\n *\n * The $remember parameter increases the time that the cookie will be kept. The\n * default the cookie is kept without remembering is two days. When $remember is\n * set, the cookies will be kept for 14 days or two weeks.\n *\n * @since 2.5\n *\n * @param int $user_id User ID\n * @param bool $remember Whether to remember the user\n *\/","file":"pluggable.php","line":652,"missingDoc":false,"filters":["'auth_cookie_expiration'","'auth_cookie_expiration'","'secure_auth_cookie'","'secure_logged_in_cookie'","'set_auth_cookie'","'set_logged_in_cookie'"],"uses":{"time":[654,656],"is_ssl":[661],"wp_generate_auth_cookie":[674,675],"setcookie":[680,681,682,684]},"used_by":{"wp_setcookie":[92],"wp_signon":[63],"wp_update_user":[1485]}},"wp_clearcookie":{"doc":"\/**\n * Clears the authentication cookie, logging the user out. This function is deprecated.\n *\n * @since 1.5\n * @deprecated 2.5\n * @deprecated Use wp_clear_auth_cookie()\n * @see wp_clear_auth_cookie()\n *\/","file":"pluggable-deprecated.php","line":107,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[108],"wp_clear_auth_cookie":[109]},"used_by":[]},"wp_clear_auth_cookie":{"doc":"\/**\n * Removes all of the cookies associated with authentication.\n *\n * @since 2.5\n *\/","file":"pluggable.php","line":694,"missingDoc":false,"filters":["'clear_auth_cookie'"],"uses":{"setcookie":[697,698,699,700,701,702,705,706,707,708,711,712,713,714],"time":[697,698,699,700,701,702,705,706,707,708,711,712,713,714]},"used_by":{"wp_clearcookie":[109],"wp_logout":[499],"wp_update_user":[1484]}},"wp_get_cookie_login":{"doc":"\/**\n * Gets the user cookie login. This function is deprecated.\n *\n * This function is deprecated and should no longer be extended as it won't be\n * used anywhere in WordPress. Also, plugins shouldn't use it either.\n *\n * @since 2.0.3\n * @deprecated 2.5\n * @deprecated No alternative\n *\n * @return bool Always returns false\n *\/","file":"pluggable-deprecated.php","line":128,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[129]},"used_by":[]},"wp_login":{"doc":"\/**\n * Checks a users login information and logs them in if it checks out. This function is deprecated.\n *\n * Use the global $error to get the reason why the login failed. If the username\n * is blank, no error will be set, so assume blank username on that case.\n *\n * Plugins extending this function should also provide the global $error and set\n * what the error is, so that those checking the global for why there was a\n * failure can utilize it later.\n *\n * @since 1.2.2\n * @deprecated Use wp_signon()\n * @global string $error Error when false is returned\n *\n * @param string $username User's username\n * @param string $password User's password\n * @param bool $deprecated Not used\n * @return bool False on login failure, true on successful check\n *\/","file":"pluggable-deprecated.php","line":156,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[157],"wp_authenticate":[160],"is_wp_error":[162],"get_error_message":[165]},"used_by":[]},"wp_atom_server::__call":{"doc":"","file":"pluggable-deprecated.php","line":184,"missingDoc":true,"filters":[],"uses":{"_deprecated_function":[185]},"used_by":[]},"wp_atom_server::__callStatic":{"doc":"","file":"pluggable-deprecated.php","line":188,"missingDoc":true,"filters":[],"uses":{"_deprecated_function":[189]},"used_by":[]},"setup_userdata":{"doc":"\/**\n * Set up global user vars.\n *\n * Used by wp_set_current_user() for back compat. Might be deprecated in the future.\n *\n * @since 2.0.4\n * @global string $userdata User description.\n * @global string $user_login The user username for logging in\n * @global int $user_level The level of the user\n * @global int $user_ID The ID of the user\n * @global string $user_email The email address of the user\n * @global string $user_url The url in the user's profile\n * @global string $user_identity The display name of the user\n *\n * @param int $for_user_id Optional. User ID to set up global data.\n *\/","file":"user.php","line":960,"missingDoc":false,"filters":[],"uses":{"get_current_user_id":[964],"get_userdata":[965]},"used_by":{"wp_set_current_user":[35]}},"get_currentuserinfo":{"doc":"\/**\n * Populate global variables with information about the currently logged in user.\n *\n * Will set the current user, if the current user is not set. The current user\n * will be set to the logged in person. If no user is logged in, then it will\n * set the current user to 0, which is invalid and won't have any permissions.\n *\n * @since 0.71\n * @uses $current_user Checks if the current user is set\n * @uses wp_validate_auth_cookie() Retrieves current logged in user.\n *\n * @return bool|null False on XMLRPC Request and invalid auth cookie. Null when current user set\n *\/","file":"pluggable.php","line":74,"missingDoc":false,"filters":[],"uses":{"wp_set_current_user":[85,91,96,102,107],"is_object":[82],"defined":[95],"is_blog_admin":[101],"is_network_admin":[101],"wp_validate_auth_cookie":[101,100]},"used_by":{"wp_get_current_user":[54]}},"wp_validate_auth_cookie":{"doc":"\/**\n * Validates authentication cookie.\n *\n * The checks include making sure that the authentication cookie is set and\n * pulling in the contents (if $cookie is not used).\n *\n * Makes sure the cookie is not expired. Verifies the hash in cookie is what is\n * should be and compares the two.\n *\n * @since 2.5\n *\n * @param string $cookie Optional. If used, will validate contents instead of cookie's\n * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @return bool|int False if invalid cookie, User ID if valid.\n *\/","file":"pluggable.php","line":520,"missingDoc":false,"filters":["'auth_cookie_malformed'","'auth_cookie_expired'","'auth_cookie_bad_username'","'auth_cookie_bad_hash'","'auth_cookie_valid'"],"uses":{"wp_parse_auth_cookie":[521],"extract":[526],"defined":[531],"time":[535,556],"get_user_by":[540],"substr":[546],"wp_hash":[548],"hash_hmac":[549]},"used_by":{"get_currentuserinfo":[101,100],"auth_redirect":[765],"wp_authenticate_cookie":[123]}},"cache_users":{"doc":"\/**\n * Retrieve info for user lists to prevent multiple queries by get_userdata()\n *\n * @since 3.0.0\n *\n * @param array $user_ids User ID numbers list\n *\/","file":"pluggable.php","line":156,"missingDoc":false,"filters":[],"uses":{"_get_non_cached_ids":[159],"implode":[164],"get_results":[166],"update_user_caches":[170],"update_meta_cache":[173]},"used_by":{"WP_User_Query::query":[556]}},"wp_logout":{"doc":"\/**\n * Log the current user out.\n *\n * @since 2.5.0\n *\/","file":"pluggable.php","line":498,"missingDoc":false,"filters":["'wp_logout'"],"uses":{"wp_clear_auth_cookie":[499]},"used_by":[]},"wp_parse_auth_cookie":{"doc":"\/**\n * Parse a cookie into its components\n *\n * @since 2.7\n *\n * @param string $cookie\n * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @return array Authentication cookie components\n *\/","file":"pluggable.php","line":602,"missingDoc":false,"filters":[],"uses":{"is_ssl":[615],"explode":[629],"count":[630],"compact":[635]},"used_by":{"wp_validate_auth_cookie":[521]}},"wp_hash":{"doc":"\/**\n * Get hash of given string.\n *\n * @since 2.0.3\n * @uses wp_salt() Get WordPress salt\n *\n * @param string $data Plain text to hash\n * @return string Hash of $data\n *\/","file":"pluggable.php","line":1394,"missingDoc":false,"filters":[],"uses":{"wp_salt":[1395],"hash_hmac":[1397]},"used_by":{"wp_validate_auth_cookie":[548],"wp_generate_auth_cookie":[583],"wp_verify_nonce":[1265,1268],"wp_create_nonce":[1292]}},"wp_generate_auth_cookie":{"doc":"\/**\n * Generate authentication cookie contents.\n *\n * @since 2.5\n * @uses apply_filters() Calls 'auth_cookie' hook on $cookie contents, User ID\n *\t\tand expiration of cookie.\n *\n * @param int $user_id User ID\n * @param int $expiration Cookie expiration in seconds\n * @param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in\n * @return string Authentication cookie contents\n *\/","file":"pluggable.php","line":578,"missingDoc":false,"filters":["'auth_cookie'"],"uses":{"get_userdata":[579],"substr":[581],"wp_hash":[583],"hash_hmac":[584]},"used_by":{"wp_set_auth_cookie":[674,675]}},"check_admin_referer":{"doc":"\/**\n * Makes sure that a user was referred from another admin page.\n *\n * To avoid security exploits.\n *\n * @since 1.2.0\n * @uses do_action() Calls 'check_admin_referer' on $action.\n *\n * @param string $action Action nonce\n * @param string $query_arg where to look for nonce in $_REQUEST (since 2.5)\n *\/","file":"pluggable.php","line":806,"missingDoc":false,"filters":["'check_admin_referer'"],"uses":{"_doing_it_wrong":[808],"__":[808],"strtolower":[810,811],"admin_url":[810],"wp_get_referer":[811],"wp_verify_nonce":[812],"wp_nonce_ays":[814],"strpos":[813]},"used_by":[]},"wp_verify_nonce":{"doc":"\/**\n * Verify that correct nonce was used with time limit.\n *\n * The user is given an amount of time to use the token, so therefore, since the\n * UID and $action remain the same, the independent variable is the time.\n *\n * @since 2.0.3\n *\n * @param string $nonce Nonce that was used in the form to verify\n * @param string|int $action Should give context to what is taking place and be the same when nonce was created.\n * @return bool Whether the nonce check passed or failed.\n *\/","file":"pluggable.php","line":1256,"missingDoc":false,"filters":["'nonce_user_logged_out'"],"uses":{"wp_get_current_user":[1257],"wp_nonce_tick":[1262],"substr":[1265,1268],"wp_hash":[1265,1268]},"used_by":{"check_admin_referer":[812],"check_ajax_referer":[837],"_show_post_preview":[5250]}},"wp_sanitize_redirect":{"doc":"\/**\n * Sanitizes a URL for use in a redirect.\n *\n * @since 2.3\n *\n * @return string redirect-sanitized URL\n **\/","file":"pluggable.php","line":889,"missingDoc":false,"filters":[],"uses":{"preg_replace":[890],"wp_kses_no_null":[891],"_deep_replace":[895]},"used_by":{"wp_redirect":[872],"wp_safe_redirect":[920]}},"wp_safe_redirect":{"doc":"\/**\n * Performs a safe (local) redirect, using wp_redirect().\n *\n * Checks whether the $location is using an allowed host, if it has an absolute\n * path. A plugin can therefore set or remove allowed host(s) to or from the\n * list.\n *\n * If the host is not allowed, then the redirect is to wp-admin on the siteurl\n * instead. This prevents malicious redirects which redirect to another host,\n * but only used in a few places.\n *\n * @since 2.3\n * @uses wp_validate_redirect() To validate the redirect is to an allowed host.\n *\n * @return void Does not return anything\n **\/","file":"pluggable.php","line":917,"missingDoc":false,"filters":[],"uses":{"wp_sanitize_redirect":[920],"wp_validate_redirect":[922],"admin_url":[922],"wp_redirect":[924]},"used_by":[]},"wp_validate_redirect":{"doc":"\/**\n * Validates a URL for use in a redirect.\n *\n * Checks whether the $location is using an allowed host, if it has an absolute\n * path. A plugin can therefore set or remove allowed host(s) to or from the\n * list.\n *\n * If the host is not allowed, then the redirect is to $default supplied\n *\n * @since 2.8.1\n * @uses apply_filters() Calls 'allowed_redirect_hosts' on an array containing\n *\t\tWordPress host string and $location host string.\n *\n * @param string $location The redirect to validate\n * @param string $default The value to return if $location is not allowed\n * @return string redirect-sanitized URL\n **\/","file":"pluggable.php","line":946,"missingDoc":false,"filters":["'allowed_redirect_hosts'"],"uses":{"substr":[948,952],"strpos":[952],"parse_url":[954,968],"home_url":[968],"in_array":[972],"strtolower":[972]},"used_by":{"wp_safe_redirect":[922]}},"wp_password_change_notification":{"doc":"\/**\n * Notify the blog admin of a user changing password, normally via email.\n *\n * @since 2.7\n *\n * @param object $user User Object\n *\/","file":"pluggable.php","line":1175,"missingDoc":false,"filters":[],"uses":{"sprintf":[1179,1183],"__":[1179,1183],"wp_specialchars_decode":[1182],"get_option":[1182,1183,1178],"wp_mail":[1183]},"used_by":[]},"wp_new_user_notification":{"doc":"\/**\n * Notify the blog admin of a new user, normally via email.\n *\n * @since 2.0\n *\n * @param int $user_id User ID\n * @param string $plaintext_pass Optional. The user's plaintext password\n *\/","file":"pluggable.php","line":1197,"missingDoc":false,"filters":[],"uses":{"get_userdata":[1198],"stripslashes":[1200,1201],"wp_specialchars_decode":[1205],"get_option":[1205,1211],"sprintf":[1207,1208,1209,1211,1216,1217,1220],"__":[1207,1208,1209,1211,1216,1217,1220],"wp_mail":[1211,1220],"wp_login_url":[1218]},"used_by":[]},"wp_nonce_tick":{"doc":"\/**\n * Get the time-dependent variable for nonce creation.\n *\n * A nonce has a lifespan of two ticks. Nonces in their second tick may be\n * updated, e.g. by autosave.\n *\n * @since 2.5\n *\n * @return int\n *\/","file":"pluggable.php","line":1236,"missingDoc":false,"filters":["'nonce_life'"],"uses":{"ceil":[1239],"time":[1239]},"used_by":{"wp_verify_nonce":[1262],"wp_create_nonce":[1290]}},"wp_salt":{"doc":"\/**\n * Get salt to add to hashes.\n *\n * Salts are created using secret keys. Secret keys are located in two places:\n * in the database and in the wp-config.php file. The secret key in the database\n * is randomly generated and will be appended to the secret keys in wp-config.php.\n *\n * The secret keys in wp-config.php should be updated to strong, random keys to maximize\n * security. Below is an example of how the secret key constants are defined.\n * Do not paste this example directly into wp-config.php. Instead, have a\n * {@link https:\/\/api.wordpress.org\/secret-key\/1.1\/salt\/ secret key created} just\n * for you.\n *\n * <code>\n * define('AUTH_KEY',         ' Xakm<o xQy rw4EMsLKM-?!T+,PFF})H4lzcW57AF0U@N@< >M%G4Yt>f`z]MON');\n * define('SECURE_AUTH_KEY',  'LzJ}op]mr|6+![P}Ak:uNdJCJZd>(Hx.-Mh#Tz)pCIU#uGEnfFz|f ;;eU%\/U^O~');\n * define('LOGGED_IN_KEY',    '|i|Ux`9<p-h$aFf(qnT:sDO:D1P^wZ$$\/Ra@miTJi9G;ddp_<q}6H1)o|a +&JCM');\n * define('NONCE_KEY',        '%:R{[P|,s.KuMltH5}cI;\/k<Gx~j!f0I)m_sIyu+&NJZ)-iO>z7X>QYR0Z_XnZ@|');\n * define('AUTH_SALT',        'eZyT)-Naw]F8CwA*VaW#q*|.)g@o}||wf~@C-YSt}(dh_r6EbI#A,y|nU2{B#JBW');\n * define('SECURE_AUTH_SALT', '!=oLUTXh,QW=H `}`L|9\/^4-3 STz},T(w}W<I`.JjPi)<Bmf1v,HpGe}T1:Xt7n');\n * define('LOGGED_IN_SALT',   '+XSqHc;@Q*K_b|Z?NC[3H!!EONbh.n<+=uKR:>*c(u`g~EJBf#8u#R{mUEZrozmm');\n * define('NONCE_SALT',       'h`GXHhD>SLWVfg1(1(N{;.V!MoE(SfbA_ksP@&`+AycHcAV$+?@3q+rxV{%^VyKT');\n * <\/code>\n *\n * Salting passwords helps against tools which has stored hashed values of\n * common dictionary strings. The added values makes it harder to crack.\n *\n * @since 2.5\n *\n * @link https:\/\/api.wordpress.org\/secret-key\/1.1\/salt\/ Create secrets for wp-config.php\n *\n * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce)\n * @return string Salt value\n *\/","file":"pluggable.php","line":1331,"missingDoc":false,"filters":["'salt'","'salt'"],"uses":{"defined":[1341,1350,1352,1358],"constant":[1343,1359,1358,1358],"strtoupper":[1357],"get_site_option":[1361,1370],"wp_generate_password":[1363,1372],"update_site_option":[1364,1373],"hash_hmac":[1376],"in_array":[1355]},"used_by":{"wp_hash":[1395]}},"wp_hash_password":{"doc":"\/**\n * Create a hash (encrypt) of a plain text password.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * @since 2.5\n * @global object $wp_hasher PHPass object\n * @uses PasswordHash::HashPassword\n *\n * @param string $password Plain text user password to hash\n * @return string The hash string of the password\n *\/","file":"pluggable.php","line":1415,"missingDoc":false,"filters":[],"uses":{"HashPassword":[1424]},"used_by":{"wp_check_password":[1458],"wp_set_password":[1571],"wp_insert_user":[1300],"wp_update_user":[1471]}},"wp_check_password":{"doc":"\/**\n * Checks the plaintext password against the encrypted Password.\n *\n * Maintains compatibility between old version and the new cookie authentication\n * protocol using PHPass library. The $hash parameter is the encrypted password\n * and the function compares the plain text password when encrypted similarly\n * against the already encrypted password to see if they match.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * @since 2.5\n * @global object $wp_hasher PHPass object used for checking the password\n *\tagainst the $hash + $password\n * @uses PasswordHash::CheckPassword\n *\n * @param string $password Plaintext user's password\n * @param string $hash Hash of the user's password to check against.\n * @return bool False, if the $password does not match the hashed password\n *\/","file":"pluggable.php","line":1449,"missingDoc":false,"filters":["'check_password'","'check_password'"],"uses":{"md5":[1454],"wp_set_password":[1457],"wp_hash_password":[1458],"strlen":[1453],"CheckPassword":[1472]},"used_by":{"wp_authenticate_username_password":[109]}},"wp_set_password":{"doc":"\/**\n * Updates the user's password with a new encrypted one.\n *\n * For integration with other applications, this function can be overwritten to\n * instead use the other package password checking algorithm.\n *\n * @since 2.5\n * @uses $wpdb WordPress database object for queries\n * @uses wp_hash_password() Used to encrypt the user's password before passing to the database\n *\n * @param string $password The plaintext new user password\n * @param int $user_id User ID\n *\/","file":"pluggable.php","line":1568,"missingDoc":false,"filters":[],"uses":{"wp_hash_password":[1571],"update":[1572],"wp_cache_delete":[1574]},"used_by":{"wp_check_password":[1457]}},"wp_rand":{"doc":"\/**\n * Generates a random number\n *\n * @since 2.6.2\n *\n * @param int $min Lower limit for the generated number\n * @param int $max Upper limit for the generated number\n * @return int A random number between min and max\n *\/","file":"pluggable.php","line":1517,"missingDoc":false,"filters":[],"uses":{"get_transient":[1526],"defined":[1523,1531],"md5":[1527,1530],"uniqid":[1527],"microtime":[1527],"mt_rand":[1527],"sha1":[1528,1529],"set_transient":[1532],"strlen":[1522],"substr":[1536,1539],"abs":[1541,1550],"hexdec":[1541],"intval":[1550]},"used_by":{"wp_generate_password":[1499]}},"wp_text_diff":{"doc":"\/**\n * Displays a human readable HTML representation of the difference between two strings.\n *\n * The Diff is available for getting the changes between versions. The output is\n * HTML, so the primary use is for displaying the changes. If the two strings\n * are equivalent, then an empty string will be returned.\n *\n * The arguments supported and can be changed are listed below.\n *\n * 'title' : Default is an empty string. Titles the diff in a manner compatible\n *\t\twith the output.\n * 'title_left' : Default is an empty string. Change the HTML to the left of the\n *\t\ttitle.\n * 'title_right' : Default is an empty string. Change the HTML to the right of\n *\t\tthe title.\n *\n * @since 2.6\n * @see wp_parse_args() Used to change defaults to user defined settings.\n * @uses Text_Diff\n * @uses WP_Text_Diff_Renderer_Table\n *\n * @param string $left_string \"old\" (left) version of string\n * @param string $right_string \"new\" (right) version of string\n * @param string|array $args Optional. Change 'title', 'title_left', and 'title_right' defaults.\n * @return string Empty string if strings are equivalent or HTML with differences.\n *\/","file":"pluggable.php","line":1704,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[1706],"class_exists":[1708],"normalize_whitespace":[1711,1712],"explode":[1714,1715],"render":[1719]},"used_by":[]},"_wp_filter_build_unique_id":{"doc":"\/**\n * Build Unique ID for storage and retrieval.\n *\n * The old way to serialize the callback caused issues and this function is the\n * solution. It works by checking for objects and creating an a new property in\n * the class to keep track of the object and new objects of the same class that\n * need to be added.\n *\n * It also allows for the removal of actions and filters for objects after they\n * change class properties. It is possible to include the property $wp_filter_id\n * in your class and set it to \"null\" or a number to bypass the workaround.\n * However this will prevent you from adding new classes and any new classes\n * will overwrite the previous hook by the same class.\n *\n * Functions and static method callbacks are just returned as strings and\n * shouldn't have any speed penalty.\n *\n * @package WordPress\n * @subpackage Plugin\n * @access private\n * @since 2.2.3\n * @link http:\/\/trac.wordpress.org\/ticket\/3875\n *\n * @global array $wp_filter Storage for all of the filters and actions\n * @param string $tag Used in counting how many hooks were applied\n * @param callback $function Used for creating unique id\n * @param int|bool $priority Used in counting how many hooks were applied. If === false and $function is an object reference, we return the unique id only if it already has one, false otherwise.\n * @return string|bool Unique ID for usage as array key or false if $priority === false and $function is an object reference, and it does not already have a unique id.\n *\/","file":"plugin.php","line":753,"missingDoc":false,"filters":[],"uses":{"is_string":[757,785],"is_object":[760,767],"spl_object_hash":[770],"get_class":[772],"count":[776],"function_exists":[769]},"used_by":{"add_filter":[68],"has_filter":[96],"remove_filter":[261]}},"apply_filters":{"doc":"\/**\n * Call the functions added to a filter hook.\n *\n * The callback functions attached to filter hook $tag are invoked by calling\n * this function. This function can be used to create a new filter hook by\n * simply calling this function with the name of the new hook specified using\n * the $tag parameter.\n *\n * The function allows for additional arguments to be added and passed to hooks.\n * <code>\n * function example_hook($string, $arg1, $arg2)\n * {\n *\t\t\/\/Do stuff\n *\t\treturn $string;\n * }\n * $value = apply_filters('example_filter', 'filter me', 'arg1', 'arg2');\n * <\/code>\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 0.71\n * @global array $wp_filter Stores all of the filters\n * @global array $merged_filters Merges the filter hooks using this function.\n * @global array $wp_current_filter stores the list of current filters with the current one last\n *\n * @param string $tag The name of the filter hook.\n * @param mixed $value The value on which the filters hooked to <tt>$tag<\/tt> are applied on.\n * @param mixed $var,... Additional variables passed to the functions hooked to <tt>$tag<\/tt>.\n * @return mixed The filtered value after all hooked functions are applied to it.\n *\/","file":"plugin.php","line":137,"missingDoc":false,"filters":[],"uses":{"func_get_args":[145,167],"_wp_call_all_hook":[146],"array_pop":[151,178],"ksort":[160],"reset":[164],"next":[176],"call_user_func_array":[173],"array_slice":[173],"is_null":[171],"current":[170]},"used_by":[]},"_wp_call_all_hook":{"doc":"\/**\n * Calls the 'all' hook, which will process the functions hooked into it.\n *\n * The 'all' hook passes all of the arguments or parameters that were used for\n * the hook, which this function was called for.\n *\n * This function is used internally for apply_filters(), do_action(), and\n * do_action_ref_array() and is not meant to be used from outside those\n * functions. This function does not check for the existence of the all hook, so\n * it will fail unless the all hook exists prior to this function call.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 2.5\n * @access private\n *\n * @uses $wp_filter Used to process all of the functions in the 'all' hook\n *\n * @param array $args The collected parameters from the hook that was called.\n * @param string $hook Optional. The hook name that was used to call the 'all' hook.\n *\/","file":"plugin.php","line":712,"missingDoc":false,"filters":[],"uses":{"reset":[715],"next":[721],"call_user_func_array":[719],"is_null":[718],"current":[717]},"used_by":{"apply_filters":[146],"apply_filters_ref_array":[207],"do_action":[375],"do_action_ref_array":[464]}},"remove_all_filters":{"doc":"\/**\n * Remove all of the hooks from a filter.\n *\n * @since 2.7\n *\n * @param string $tag The filter to remove hooks from.\n * @param int $priority The priority number to remove.\n * @return bool True when finished.\n *\/","file":"plugin.php","line":284,"missingDoc":false,"filters":[],"uses":[],"used_by":{"remove_all_actions":[543]}},"do_action":{"doc":"\/**\n * Execute functions hooked on a specific action hook.\n *\n * This function invokes all functions attached to action hook $tag. It is\n * possible to create new action hooks by simply calling this function,\n * specifying the name of the new hook using the <tt>$tag<\/tt> parameter.\n *\n * You can pass extra arguments to the hooks, much like you can with\n * apply_filters().\n *\n * @see apply_filters() This function works similar with the exception that\n * nothing is returned and only the functions or methods are called.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 1.2\n * @global array $wp_filter Stores all of the filters\n * @global array $wp_actions Increments the amount of times action was triggered.\n *\n * @param string $tag The name of the action to be executed.\n * @param mixed $arg,... Optional additional arguments which are passed on to the functions hooked to the action.\n * @return null Will return null if $tag does not exist in $wp_filter array\n *\/","file":"plugin.php","line":360,"missingDoc":false,"filters":[],"uses":{"func_get_args":[374],"_wp_call_all_hook":[375],"array_pop":[380,410],"is_array":[388],"count":[388],"is_object":[388],"func_num_args":[392],"func_get_arg":[393],"ksort":[397],"reset":[401],"next":[408],"call_user_func_array":[406],"array_slice":[406],"is_null":[405],"current":[404]},"used_by":[]},"do_action_ref_array":{"doc":"\/**\n * Execute functions hooked on a specific action hook, specifying arguments in an array.\n *\n * @see do_action() This function is identical, but the arguments passed to the\n * functions hooked to <tt>$tag<\/tt> are supplied using an array.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 2.1\n * @global array $wp_filter Stores all of the filters\n * @global array $wp_actions Increments the amount of times action was triggered.\n *\n * @param string $tag The name of the action to be executed.\n * @param array $args The arguments supplied to the functions hooked to <tt>$tag<\/tt>\n * @return null Will return null if $tag does not exist in $wp_filter array\n *\/","file":"plugin.php","line":449,"missingDoc":false,"filters":[],"uses":{"func_get_args":[463],"_wp_call_all_hook":[464],"array_pop":[469,491],"ksort":[478],"reset":[482],"next":[489],"call_user_func_array":[487],"array_slice":[487],"is_null":[486],"current":[485]},"used_by":[]},"remove_all_actions":{"doc":"\/**\n * Remove all of the hooks from an action.\n *\n * @since 2.7\n *\n * @param string $tag The action to remove hooks from.\n * @param int $priority The priority number to remove them from.\n * @return bool True when finished.\n *\/","file":"plugin.php","line":542,"missingDoc":false,"filters":[],"uses":{"remove_all_filters":[543]},"used_by":[]},"plugin_dir_path":{"doc":"\/**\n * Gets the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in\n * @package WordPress\n * @subpackage Plugin\n * @since 2.8\n *\n * @param string $file The filename of the plugin (__FILE__)\n * @return string the filesystem path of the directory that contains the plugin\n *\/","file":"plugin.php","line":586,"missingDoc":false,"filters":[],"uses":{"trailingslashit":[587],"dirname":[587]},"used_by":[]},"plugin_dir_url":{"doc":"\/**\n * Gets the URL directory path (with trailing slash) for the plugin __FILE__ passed in\n * @package WordPress\n * @subpackage Plugin\n * @since 2.8\n *\n * @param string $file The filename of the plugin (__FILE__)\n * @return string the URL path of the directory that contains the plugin\n *\/","file":"plugin.php","line":599,"missingDoc":false,"filters":[],"uses":{"trailingslashit":[600],"plugins_url":[600]},"used_by":[]},"register_activation_hook":{"doc":"\/**\n * Set the activation hook for a plugin.\n *\n * When a plugin is activated, the action 'activate_PLUGINNAME' hook is\n * activated. In the name of this hook, PLUGINNAME is replaced with the name of\n * the plugin, including the optional subdirectory. For example, when the plugin\n * is located in wp-content\/plugins\/sampleplugin\/sample.php, then the name of\n * this hook will become 'activate_sampleplugin\/sample.php'. When the plugin\n * consists of only one file and is (as by default) located at\n * wp-content\/plugins\/sample.php the name of this hook will be\n * 'activate_sample.php'.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 2.0\n *\n * @param string $file The filename of the plugin including the path.\n * @param callback $function the function hooked to the 'activate_PLUGIN' action.\n *\/","file":"plugin.php","line":622,"missingDoc":false,"filters":[],"uses":{"plugin_basename":[623],"add_action":[624]},"used_by":[]},"register_deactivation_hook":{"doc":"\/**\n * Set the deactivation hook for a plugin.\n *\n * When a plugin is deactivated, the action 'deactivate_PLUGINNAME' hook is\n * deactivated. In the name of this hook, PLUGINNAME is replaced with the name\n * of the plugin, including the optional subdirectory. For example, when the\n * plugin is located in wp-content\/plugins\/sampleplugin\/sample.php, then\n * the name of this hook will become 'activate_sampleplugin\/sample.php'.\n *\n * When the plugin consists of only one file and is (as by default) located at\n * wp-content\/plugins\/sample.php the name of this hook will be\n * 'activate_sample.php'.\n *\n * @package WordPress\n * @subpackage Plugin\n * @since 2.0\n *\n * @param string $file The filename of the plugin including the path.\n * @param callback $function the function hooked to the 'activate_PLUGIN' action.\n *\/","file":"plugin.php","line":647,"missingDoc":false,"filters":[],"uses":{"plugin_basename":[648],"add_action":[649]},"used_by":[]},"register_uninstall_hook":{"doc":"\/**\n * Set the uninstallation hook for a plugin.\n *\n * Registers the uninstall hook that will be called when the user clicks on the\n * uninstall link that calls for the plugin to uninstall itself. The link won't\n * be active unless the plugin hooks into the action.\n *\n * The plugin should not run arbitrary code outside of functions, when\n * registering the uninstall hook. In order to run using the hook, the plugin\n * will have to be included, which means that any code laying outside of a\n * function will be run during the uninstall process. The plugin should not\n * hinder the uninstall process.\n *\n * If the plugin can not be written without running code within the plugin, then\n * the plugin should create a file named 'uninstall.php' in the base plugin\n * folder. This file will be called, if it exists, during the uninstall process\n * bypassing the uninstall hook. The plugin, when using the 'uninstall.php'\n * should always check for the 'WP_UNINSTALL_PLUGIN' constant, before\n * executing.\n *\n * @since 2.7\n *\n * @param string $file\n * @param callback $callback The callback to run when the hook is called. Must be a static method or function.\n *\/","file":"plugin.php","line":677,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[679],"__":[679],"is_array":[678],"is_object":[678],"get_option":[686],"plugin_basename":[687],"update_option":[688]},"used_by":[]},"Translation_Entry::Translation_Entry":{"doc":"\/**\n * @param array $args associative array, support following keys:\n * \t- singular (string) -- the string to translate, if omitted and empty entry will be created\n * \t- plural (string) -- the plural form of the string, setting this will set {@link $is_plural} to true\n * \t- translations (array) -- translations of the string and possibly -- its plural forms\n * \t- context (string) -- a string differentiating two equal strings used in different contexts\n * \t- translator_comments (string) -- comments left by translators\n * \t- extracted_comments (string) -- comments left by developers\n * \t- references (array) -- places in the code this strings is used, in relative_to_root_path\/file.php:linenum form\n * \t- flags (array) -- flags like php-format\n *\/","file":"pomo\/entry.php","line":43,"missingDoc":false,"filters":[],"uses":{"is_array":[53,54,55]},"used_by":[]},"Translation_Entry::key":{"doc":"\/**\n * Generates a unique key for this entry\n *\n * @return string|bool the key or false if the entry is empty\n *\/","file":"pomo\/entry.php","line":63,"missingDoc":false,"filters":[],"uses":{"is_null":[64,66],"chr":[66]},"used_by":[]},"Translation_Entry::merge_with":{"doc":"","file":"pomo\/entry.php","line":69,"missingDoc":true,"filters":[],"uses":{"array_unique":[70,71],"array_merge":[70,71]},"used_by":[]},"MO::import_from_file":{"doc":"\/**\n * Fills up with the entries from MO file $filename\n *\n * @param string $filename MO file to load\n *\/","file":"pomo\/mo.php","line":23,"missingDoc":false,"filters":[],"uses":{"is_resource":[25],"import_from_reader":[27]},"used_by":[]},"MO::export_to_file":{"doc":"","file":"pomo\/mo.php","line":30,"missingDoc":true,"filters":[],"uses":{"fopen":[31],"export_to_file_handle":[33],"fclose":[34]},"used_by":[]},"MO::export":{"doc":"","file":"pomo\/mo.php","line":38,"missingDoc":true,"filters":[],"uses":{"fopen":[39],"export_to_file_handle":[41],"rewind":[42],"stream_get_contents":[43]},"used_by":[]},"MO::is_entry_good_for_export":{"doc":"","file":"pomo\/mo.php","line":46,"missingDoc":true,"filters":[],"uses":{"array_filter":[51]},"used_by":[]},"MO::export_to_file_handle":{"doc":"","file":"pomo\/mo.php","line":58,"missingDoc":true,"filters":[],"uses":{"array_filter":[59],"ksort":[60],"count":[63],"fwrite":[69,74,81,86,93,97,98],"pack":[69,74,81,86,93],"fseek":[71],"chr":[76,79,88,91],"export_original":[79,80],"strlen":[80,86,87,92],"export_headers":[85],"export_translations":[91,92]},"used_by":[]},"MO::export_original":{"doc":"","file":"pomo\/mo.php","line":102,"missingDoc":true,"filters":[],"uses":{"chr":[105,106],"is_null":[106]},"used_by":[]},"MO::export_translations":{"doc":"","file":"pomo\/mo.php","line":110,"missingDoc":true,"filters":[],"uses":{"implode":[112],"chr":[112]},"used_by":[]},"MO::export_headers":{"doc":"","file":"pomo\/mo.php","line":115,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"MO::get_byteorder":{"doc":"","file":"pomo\/mo.php","line":123,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"MO::import_from_reader":{"doc":"","file":"pomo\/mo.php","line":140,"missingDoc":true,"filters":[],"uses":{"readint32":[141],"setEndian":[145],"read":[149,172,181],"strlen":[150,173,182],"unpack":[154,198,199],"is_array":[155],"extract":[158],"seekto":[165,192],"str_split":[186,187],"read_all":[194],"close":[195],"substr":[206,207],"set_headers":[210],"make_headers":[210],"make_entry":[212],"key":[213]},"used_by":[]},"MO::make_entry":{"doc":"\/**\n * Build a Translation_Entry from original string and translation strings,\n * found in a MO file\n *\n * @static\n * @param string $original original string to translate from MO file. Might contain\n * \t0x04 as context separator or 0x00 as singular\/plural separator\n * @param string $translation translation string from MO file. Might contain\n * \t0x00 as a plural translations separator\n *\/","file":"pomo\/mo.php","line":229,"missingDoc":false,"filters":[],"uses":{"explode":[232,238,245],"chr":[232,238,245]},"used_by":[]},"MO::select_plural_form":{"doc":"","file":"pomo\/mo.php","line":249,"missingDoc":true,"filters":[],"uses":{"gettext_select_plural_form":[250]},"used_by":[]},"MO::get_plural_forms_count":{"doc":"","file":"pomo\/mo.php","line":253,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"PO::export_headers":{"doc":"\/**\n * Exports headers to a PO entry\n *\n * @return string msgid\/msgstr PO entry for this PO file headers, doesn't contain newline at the end\n *\/","file":"pomo\/po.php","line":29,"missingDoc":false,"filters":[],"uses":{"prepend_each_line":[36],"rtrim":[36,39]},"used_by":[]},"PO::export_entries":{"doc":"\/**\n * Exports all entries to PO format\n *\n * @return string sequence of mgsgid\/msgstr PO strings, doesn't containt newline at the end\n *\/","file":"pomo\/po.php","line":47,"missingDoc":false,"filters":[],"uses":{"implode":[49],"array_map":[49]},"used_by":[]},"PO::export":{"doc":"\/**\n * Exports the whole PO file as a string\n *\n * @param bool $include_headers whether to include the headers in the export\n * @return string ready for inclusion in PO file string for headers and all the enrtries\n *\/","file":"pomo\/po.php","line":58,"missingDoc":false,"filters":[],"uses":{"export_headers":[61],"export_entries":[64]},"used_by":[]},"PO::export_to_file":{"doc":"\/**\n * Same as {@link export}, but writes the result to a file\n *\n * @param string $filename where to write the PO string\n * @param bool $include_headers whether to include tje headers in the export\n * @return bool true on success, false on error\n *\/","file":"pomo\/po.php","line":75,"missingDoc":false,"filters":[],"uses":{"fopen":[76],"export":[78],"fwrite":[79],"fclose":[81]},"used_by":[]},"PO::set_comment_before_headers":{"doc":"\/**\n * Text to include as a comment before the start of the PO contents\n *\n * Doesn't need to include # in the beginning of lines, these are added automatically\n *\/","file":"pomo\/po.php","line":89,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"PO::poify":{"doc":"\/**\n * Formats a string in PO-style\n *\n * @static\n * @param string $string the string to format\n * @return string the poified string\n *\/","file":"pomo\/po.php","line":100,"missingDoc":false,"filters":[],"uses":{"str_replace":[111,120],"array_keys":[111],"array_values":[111],"implode":[113],"explode":[113],"strpos":[115],"substr_count":[116],"substr":[116],"strlen":[116]},"used_by":[]},"PO::unpoify":{"doc":"\/**\n * Gives back the original string from a PO-formatted string\n *\n * @static\n * @param string $string PO-formatted string\n * @return string enascaped string\n *\/","file":"pomo\/po.php","line":131,"missingDoc":false,"filters":[],"uses":{"array_map":[133,134],"explode":[133],"preg_match_all":[138]},"used_by":[]},"PO::prepend_each_line":{"doc":"\/**\n * Inserts $with in the beginning of every new line of $string and\n * returns the modified string\n *\n * @static\n * @param string $string prepend lines in this string\n * @param string $with prepend lines with this string\n *\/","file":"pomo\/po.php","line":163,"missingDoc":false,"filters":[],"uses":{"var_export":[164],"explode":[165],"count":[167],"substr":[167,170],"implode":[168],"array_map":[168],"create_function":[168]},"used_by":[]},"PO::comment_block":{"doc":"\/**\n * Prepare a text as a comment -- wraps the lines and prepends #\n * and a special character to each line\n *\n * @access private\n * @param string $text the comment text\n * @param string $char character to denote a special PO comment,\n * \tlike :, default is a space\n *\/","file":"pomo\/po.php","line":183,"missingDoc":false,"filters":[],"uses":{"wordwrap":[184]},"used_by":[]},"PO::export_entry":{"doc":"\/**\n * Builds a string from the entry for inclusion in PO file\n *\n * @static\n * @param object &$entry the entry to convert to po string\n * @return string|bool PO-style formatted string for the entry or\n * \tfalse if the entry is empty\n *\/","file":"pomo\/po.php","line":196,"missingDoc":false,"filters":[],"uses":{"is_null":[197,203],"implode":[201,202,215]},"used_by":[]},"PO::import_from_file":{"doc":"","file":"pomo\/po.php","line":218,"missingDoc":true,"filters":[],"uses":{"fopen":[219],"read_entry":[223],"set_headers":[226],"make_headers":[226],"add_entry":[228]},"used_by":[]},"PO::read_entry":{"doc":"","file":"pomo\/po.php","line":241,"missingDoc":true,"filters":[],"uses":{"create_function":[247,340],"feof":[252],"trim":[264],"add_comment_to_entry":[277],"preg_match":[278,289,300,307,313,320,265],"array_filter":[340]},"used_by":[]},"PO::read_line":{"doc":"","file":"pomo\/po.php","line":346,"missingDoc":true,"filters":[],"uses":{"fgets":[357],"substr":[358],"rtrim":[358]},"used_by":[]},"PO::add_comment_to_entry":{"doc":"","file":"pomo\/po.php","line":364,"missingDoc":true,"filters":[],"uses":{"substr":[365,366],"trim":[366,370,374],"array_merge":[368,372],"preg_split":[368,372]},"used_by":[]},"PO::trim_quotes":{"doc":"","file":"pomo\/po.php","line":378,"missingDoc":true,"filters":[],"uses":{"substr":[379,379,380,380]},"used_by":[]},"POMO_Reader::POMO_Reader":{"doc":"","file":"pomo\/streams.php","line":17,"missingDoc":true,"filters":[],"uses":{"ini_get":[18],"function_exists":[18]},"used_by":[]},"POMO_Reader::setEndian":{"doc":"\/**\n * Sets the endianness of the file.\n *\n * @param $endian string 'big' or 'little'\n *\/","file":"pomo\/streams.php","line":27,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"POMO_Reader::readint32":{"doc":"\/**\n * Reads a 32bit Integer from the Stream\n *\n * @return mixed The integer, corresponding to the next 32 bits from\n * \tthe stream of false if there are not enough bytes or on error\n *\/","file":"pomo\/streams.php","line":37,"missingDoc":false,"filters":[],"uses":{"read":[38],"strlen":[39],"unpack":[42],"array_shift":[43]},"used_by":[]},"POMO_Reader::readint32array":{"doc":"\/**\n * Reads an array of 32-bit Integers from the Stream\n *\n * @param integer count How many elements should be read\n * @return mixed Array of integers or false if there isn't\n * \tenough data or on error\n *\/","file":"pomo\/streams.php","line":53,"missingDoc":false,"filters":[],"uses":{"read":[54],"strlen":[55],"unpack":[58]},"used_by":[]},"POMO_Reader::substr":{"doc":"","file":"pomo\/streams.php","line":62,"missingDoc":true,"filters":[],"uses":{"mb_substr":[64],"substr":[66]},"used_by":[]},"POMO_Reader::strlen":{"doc":"","file":"pomo\/streams.php","line":70,"missingDoc":true,"filters":[],"uses":{"mb_strlen":[72],"strlen":[74]},"used_by":[]},"POMO_Reader::str_split":{"doc":"","file":"pomo\/streams.php","line":78,"missingDoc":true,"filters":[],"uses":{"strlen":[80],"substr":[83],"str_split":[86],"function_exists":[79]},"used_by":[]},"POMO_Reader::pos":{"doc":"","file":"pomo\/streams.php","line":91,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"POMO_Reader::is_resource":{"doc":"","file":"pomo\/streams.php","line":95,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"POMO_Reader::close":{"doc":"","file":"pomo\/streams.php","line":99,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"POMO_FileReader::POMO_FileReader":{"doc":"","file":"pomo\/streams.php","line":107,"missingDoc":true,"filters":[],"uses":{"fopen":[109]},"used_by":[]},"POMO_FileReader::read":{"doc":"","file":"pomo\/streams.php","line":112,"missingDoc":true,"filters":[],"uses":{"fread":[113]},"used_by":[]},"POMO_FileReader::seekto":{"doc":"","file":"pomo\/streams.php","line":116,"missingDoc":true,"filters":[],"uses":{"fseek":[117]},"used_by":[]},"POMO_FileReader::is_resource":{"doc":"","file":"pomo\/streams.php","line":124,"missingDoc":true,"filters":[],"uses":{"is_resource":[125]},"used_by":[]},"POMO_FileReader::feof":{"doc":"","file":"pomo\/streams.php","line":128,"missingDoc":true,"filters":[],"uses":{"feof":[129]},"used_by":[]},"POMO_FileReader::close":{"doc":"","file":"pomo\/streams.php","line":132,"missingDoc":true,"filters":[],"uses":{"fclose":[133]},"used_by":[]},"POMO_FileReader::read_all":{"doc":"","file":"pomo\/streams.php","line":136,"missingDoc":true,"filters":[],"uses":{"feof":[138],"read":[139]},"used_by":[]},"POMO_StringReader::POMO_StringReader":{"doc":"","file":"pomo\/streams.php","line":154,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"POMO_StringReader::read":{"doc":"","file":"pomo\/streams.php","line":161,"missingDoc":true,"filters":[],"uses":{"substr":[162],"strlen":[164,164]},"used_by":[]},"POMO_StringReader::seekto":{"doc":"","file":"pomo\/streams.php","line":168,"missingDoc":true,"filters":[],"uses":{"strlen":[170,170]},"used_by":[]},"POMO_StringReader::length":{"doc":"","file":"pomo\/streams.php","line":174,"missingDoc":true,"filters":[],"uses":{"strlen":[175]},"used_by":[]},"POMO_StringReader::read_all":{"doc":"","file":"pomo\/streams.php","line":178,"missingDoc":true,"filters":[],"uses":{"substr":[179],"strlen":[179]},"used_by":[]},"POMO_CachedFileReader::POMO_CachedFileReader":{"doc":"","file":"pomo\/streams.php","line":190,"missingDoc":true,"filters":[],"uses":{"file_get_contents":[192]},"used_by":[]},"POMO_CachedIntFileReader::POMO_CachedIntFileReader":{"doc":"","file":"pomo\/streams.php","line":205,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Translations::add_entry":{"doc":"\/**\n * Add entry to the PO structure\n *\n * @param object &$entry\n * @return bool true on success, false if the entry doesn't have a key\n *\/","file":"pomo\/translations.php","line":23,"missingDoc":false,"filters":[],"uses":{"is_array":[24],"key":[27]},"used_by":[]},"Translations::add_entry_or_merge":{"doc":"","file":"pomo\/translations.php","line":33,"missingDoc":true,"filters":[],"uses":{"is_array":[34],"key":[37],"merge_with":[40]},"used_by":[]},"Translations::set_header":{"doc":"\/**\n * Sets $header PO header to $value\n *\n * If the header already exists, it will be overwritten\n *\n * TODO: this should be out of this class, it is gettext specific\n *\n * @param string $header header name, without trailing :\n * @param string $value header value, without trailing \\n\n *\/","file":"pomo\/translations.php","line":56,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Translations::set_headers":{"doc":"","file":"pomo\/translations.php","line":60,"missingDoc":true,"filters":[],"uses":{"set_header":[62]},"used_by":[]},"Translations::get_header":{"doc":"","file":"pomo\/translations.php","line":66,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Translations::translate_entry":{"doc":"","file":"pomo\/translations.php","line":70,"missingDoc":true,"filters":[],"uses":{"key":[71]},"used_by":[]},"Translations::translate":{"doc":"","file":"pomo\/translations.php","line":75,"missingDoc":true,"filters":[],"uses":{"translate_entry":[77]},"used_by":[]},"Translations::select_plural_form":{"doc":"\/**\n * Given the number of items, returns the 0-based index of the plural form to use\n *\n * Here, in the base Translations class, the common logic for English is implemented:\n * \t0 if there is one element, 1 otherwise\n *\n * This function should be overrided by the sub-classes. For example MO\/PO can derive the logic\n * from their headers.\n *\n * @param integer $count number of items\n *\/","file":"pomo\/translations.php","line":92,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Translations::get_plural_forms_count":{"doc":"","file":"pomo\/translations.php","line":96,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Translations::translate_plural":{"doc":"","file":"pomo\/translations.php","line":100,"missingDoc":true,"filters":[],"uses":{"translate_entry":[102],"select_plural_form":[103],"get_plural_forms_count":[104],"is_array":[106]},"used_by":[]},"Translations::merge_with":{"doc":"\/**\n * Merge $other in the current object.\n *\n * @param Object &$other Another Translation object, whose translations will be merged in this one\n * @return void\n **\/","file":"pomo\/translations.php","line":119,"missingDoc":false,"filters":[],"uses":{"key":[121]},"used_by":[]},"Translations::merge_originals_with":{"doc":"","file":"pomo\/translations.php","line":125,"missingDoc":true,"filters":[],"uses":{"key":[128,130,127],"merge_with":[130]},"used_by":[]},"Gettext_Translations::gettext_select_plural_form":{"doc":"\/**\n * The gettext implementation of select_plural_form.\n *\n * It lives in this class, because there are more than one descendand, which will use it and\n * they can't share it effectively.\n *\n *\/","file":"pomo\/translations.php","line":143,"missingDoc":false,"filters":[],"uses":{"nplurals_and_expression_from_header":[145],"get_header":[145],"make_plural_form_function":[147],"is_null":[144],"call_user_func":[149]},"used_by":[]},"Gettext_Translations::nplurals_and_expression_from_header":{"doc":"","file":"pomo\/translations.php","line":152,"missingDoc":true,"filters":[],"uses":{"trim":[155],"parenthesize_plural_exression":[155],"preg_match":[153]},"used_by":[]},"Gettext_Translations::make_plural_form_function":{"doc":"\/**\n * Makes a function, which will return the right translation index, according to the\n * plural forms header\n *\/","file":"pomo\/translations.php","line":166,"missingDoc":false,"filters":[],"uses":{"str_replace":[167],"create_function":[171]},"used_by":[]},"Gettext_Translations::parenthesize_plural_exression":{"doc":"\/**\n * Adds parantheses to the inner parts of ternary operators in\n * plural expressions, because PHP evaluates ternary oerators from left to right\n *\n * @param string $expression the expression without parentheses\n * @return string the expression with parentheses added\n *\/","file":"pomo\/translations.php","line":181,"missingDoc":false,"filters":[],"uses":{"strlen":[185],"str_repeat":[196],"rtrim":[203]},"used_by":[]},"Gettext_Translations::make_headers":{"doc":"","file":"pomo\/translations.php","line":206,"missingDoc":true,"filters":[],"uses":{"str_replace":[209],"explode":[210,212],"trim":[214,214]},"used_by":[]},"Gettext_Translations::set_header":{"doc":"","file":"pomo\/translations.php","line":219,"missingDoc":true,"filters":[],"uses":{"nplurals_and_expression_from_header":[222],"get_header":[222],"make_plural_form_function":[224]},"used_by":[]},"NOOP_Translations::add_entry":{"doc":"","file":"pomo\/translations.php","line":238,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"NOOP_Translations::set_header":{"doc":"","file":"pomo\/translations.php","line":242,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"NOOP_Translations::set_headers":{"doc":"","file":"pomo\/translations.php","line":245,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"NOOP_Translations::get_header":{"doc":"","file":"pomo\/translations.php","line":248,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"NOOP_Translations::translate_entry":{"doc":"","file":"pomo\/translations.php","line":252,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"NOOP_Translations::translate":{"doc":"","file":"pomo\/translations.php","line":256,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"NOOP_Translations::select_plural_form":{"doc":"","file":"pomo\/translations.php","line":260,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"NOOP_Translations::get_plural_forms_count":{"doc":"","file":"pomo\/translations.php","line":264,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"NOOP_Translations::translate_plural":{"doc":"","file":"pomo\/translations.php","line":268,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"NOOP_Translations::merge_with":{"doc":"","file":"pomo\/translations.php","line":272,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"the_content":{"doc":"\/**\n * Display the post content.\n *\n * @since 0.71\n *\n * @param string $more_link_text Optional. Content for when there is more text.\n * @param bool $stripteaser Optional. Strip teaser content before the more text. Default is false.\n *\/","file":"post-template.php","line":164,"missingDoc":false,"filters":["'the_content'"],"uses":{"get_the_content":[165],"str_replace":[167]},"used_by":[]},"_convert_urlencoded_to_entities":{"doc":"\/**\n * Preview fix for javascript bug with foreign languages\n *\n * @since 3.1.0\n * @access private\n * @param array $match Match array from preg_replace_callback\n * @return string\n *\/","file":"post-template.php","line":238,"missingDoc":false,"filters":[],"uses":{"base_convert":[239]},"used_by":[]},"the_excerpt":{"doc":"\/**\n * Display the post excerpt.\n *\n * @since 0.71\n * @uses apply_filters() Calls 'the_excerpt' hook on post excerpt.\n *\/","file":"post-template.php","line":248,"missingDoc":false,"filters":["'the_excerpt'"],"uses":{"get_the_excerpt":[249]},"used_by":[]},"has_excerpt":{"doc":"\/**\n * Whether post has excerpt.\n *\n * @since 2.3.0\n *\n * @param int $id Optional. Post ID.\n * @return bool\n *\/","file":"post-template.php","line":281,"missingDoc":false,"filters":[],"uses":{"get_post":[282]},"used_by":[]},"post_class":{"doc":"\/**\n * Display the classes for the post div.\n *\n * @since 2.7.0\n *\n * @param string|array $class One or more classes to add to the class list.\n * @param int $post_id An optional post ID.\n *\/","file":"post-template.php","line":294,"missingDoc":false,"filters":[],"uses":{"join":[296],"get_post_class":[296]},"used_by":[]},"get_post_class":{"doc":"\/**\n * Retrieve the classes for the post div as an array.\n *\n * The class names are add are many. If the post is a sticky, then the 'sticky'\n * class name. The class 'hentry' is always added to each post. For each\n * category, the class will be added with 'category-' with category slug is\n * added. The tags are the same way as the categories with 'tag-' before the tag\n * slug. All classes are passed through the filter, 'post_class' with the list\n * of classes, followed by $class parameter value, with the post ID as the last\n * parameter.\n *\n * @since 2.7.0\n *\n * @param string|array $class One or more classes to add to the class list.\n * @param int $post_id An optional post ID.\n * @return array Array of classes.\n *\/","file":"post-template.php","line":316,"missingDoc":false,"filters":["'post_class'"],"uses":{"get_post":[317],"is_admin":[325],"get_post_format":[332],"sanitize_html_class":[335,356,365],"is_wp_error":[334],"post_type_supports":[331],"post_password_required":[341],"is_sticky":[345],"is_home":[345],"is_paged":[345],"get_the_category":[353],"is_object_in_taxonomy":[352,361],"get_the_tags":[362],"preg_split":[371],"is_array":[370],"array_merge":[372],"array_map":[375]},"used_by":{"post_class":[296]}},"body_class":{"doc":"\/**\n * Display the classes for the body element.\n *\n * @since 2.8.0\n *\n * @param string|array $class One or more classes to add to the class list.\n *\/","file":"post-template.php","line":387,"missingDoc":false,"filters":[],"uses":{"join":[389],"get_body_class":[389]},"used_by":{"__main":[40]}},"get_body_class":{"doc":"\/**\n * Retrieve the classes for the body element as an array.\n *\n * @since 2.8.0\n *\n * @param string|array $class One or more classes to add to the class list.\n * @return array Array of classes.\n *\/","file":"post-template.php","line":400,"missingDoc":false,"filters":["'body_class'"],"uses":{"is_rtl":[405],"is_front_page":[408],"is_home":[410],"is_archive":[412,453],"is_date":[414,537],"is_search":[416,541],"is_paged":[420],"is_attachment":[422,447],"is_404":[424],"get_queried_object_id":[428,489],"get_queried_object":[429,458,465,472,479],"sanitize_html_class":[433,441,456,461,468,475,481,482,504],"get_post_format":[438],"is_wp_error":[440],"post_type_supports":[437],"get_post_mime_type":[448],"str_replace":[451,504],"get_query_var":[456],"is_category":[464,533],"is_tag":[471,535],"is_tax":[478],"is_author":[457,539],"is_post_type_archive":[454,543],"is_page":[486,531],"get_post":[491],"get_var":[495],"prepare":[495],"get_page_template_slug":[504],"is_page_template":[502],"is_single":[427,529],"is_user_logged_in":[510],"is_admin_bar_showing":[513],"get_theme_mod":[518],"get_background_image":[518],"get":[521,524],"preg_split":[549],"is_array":[548],"array_merge":[550],"array_map":[556]},"used_by":{"body_class":[389]}},"is_date":{"doc":"\/**\n * Is the query for an existing date archive?\n *\n * @see WP_Query::is_date()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":321,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[325],"__":[325],"is_date":[329]},"used_by":{"get_body_class":[414,537],"is_date":[329],"__main":[39]}},"get_post_mime_type":{"doc":"\/**\n * Retrieve the mime type of an attachment based on the ID.\n *\n * This function can be used with any post type, but it makes more sense with\n * attachments.\n *\n * @since 2.0.0\n *\n * @param int $ID Optional. Post ID.\n * @return bool|string False on failure or returns the mime type\n *\/","file":"post.php","line":747,"missingDoc":false,"filters":[],"uses":{"get_post":[748],"is_object":[750]},"used_by":{"get_body_class":[448]}},"is_page_template":{"doc":"\/**\n * Whether currently in a page template.\n *\n * This template tag allows you to determine if you are in a page template.\n * You can optionally provide a template name and then the check will be\n * specific to that template.\n *\n * @since 2.5.0\n * @uses $wp_query\n *\n * @param string $template The specific template name if specific matching is required.\n * @return bool False on failure, true if success.\n *\/","file":"post-template.php","line":1246,"missingDoc":false,"filters":[],"uses":{"is_page":[1247],"get_page_template_slug":[1250],"get_queried_object_id":[1250]},"used_by":{"get_body_class":[502]}},"get_background_image":{"doc":"\/**\n * Retrieve background image for custom background.\n *\n * @since 3.0.0\n *\n * @return string\n *\/","file":"theme.php","line":1108,"missingDoc":false,"filters":[],"uses":{"get_theme_mod":[1109],"get_theme_support":[1109]},"used_by":{"get_body_class":[518],"background_image":[1118],"_custom_background_cb":[1149],"_delete_attachment_theme_mod":[1592]}},"_wp_link_page":{"doc":"\/**\n * Helper function for wp_link_pages().\n *\n * @since 3.1.0\n * @access private\n *\n * @param int $i Page number.\n * @return string Link.\n *\/","file":"post-template.php","line":694,"missingDoc":false,"filters":[],"uses":{"get_post":[696],"get_permalink":[699,702,704,706],"add_query_arg":[702],"get_option":[703,703,701],"trailingslashit":[704,706],"user_trailingslashit":[704,706],"in_array":[701],"esc_url":[709]},"used_by":{"wp_link_pages":[654,666,671]}},"post_custom":{"doc":"\/**\n * Retrieve post custom meta data field.\n *\n * @since 1.5.0\n *\n * @param string $key Meta data key name.\n * @return bool|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist.\n *\/","file":"post-template.php","line":724,"missingDoc":false,"filters":[],"uses":{"get_post_custom":[725],"count":[729]},"used_by":[]},"the_meta":{"doc":"\/**\n * Display list of post custom fields.\n *\n * @internal This will probably change at some point...\n * @since 1.2.0\n * @uses apply_filters() Calls 'the_meta_key' on list item HTML content, with key and value as separate parameters.\n *\/","file":"post-template.php","line":742,"missingDoc":false,"filters":["'the_meta_key'"],"uses":{"trim":[746],"is_protected_meta":[747],"array_map":[749],"get_post_custom_values":[749],"implode":[750],"get_post_custom_keys":[743]},"used_by":[]},"get_post_custom_values":{"doc":"\/**\n * Retrieve values for a custom post field.\n *\n * The parameters must not be considered optional. All of the post meta fields\n * will be retrieved and only the meta field key values returned.\n *\n * @since 1.2.0\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/get_post_custom_values\n *\n * @param string $key Meta field key.\n * @param int $post_id Post ID\n * @return array Meta field values.\n *\/","file":"post.php","line":1892,"missingDoc":false,"filters":[],"uses":{"get_post_custom":[1896]},"used_by":{"the_meta":[749]}},"get_pages":{"doc":"\/**\n * Retrieve a list of pages.\n *\n * The defaults that can be overridden are the following: 'child_of',\n * 'sort_order', 'sort_column', 'post_title', 'hierarchical', 'exclude',\n * 'include', 'meta_key', 'meta_value','authors', 'number', and 'offset'.\n *\n * @since 1.5.0\n * @uses $wpdb\n *\n * @param mixed $args Optional. Array or string of options that overrides defaults.\n * @return array List of pages matching defaults or $args\n *\/","file":"post.php","line":3621,"missingDoc":false,"filters":["'get_pages'","'get_pages'","'get_pages'"],"uses":{"wp_parse_args":[3636],"extract":[3637],"get_post_types":[3642],"in_array":[3643,3759,3787,3825],"explode":[3648,3757],"is_array":[3647,3655,3655,3663],"array_diff":[3649],"get_post_stati":[3649],"md5":[3653],"serialize":[3653],"compact":[3653],"array_keys":[3653],"array_map":[3657,3834],"wp_cache_get":[3654],"wp_parse_id_list":[3674,3689],"prepare":[3678,3680,3693,3695,3719,3721,3737,3739,3744,3747,3750],"preg_split":[3704],"get_user_by":[3710],"intval":[3709],"stripslashes":[3734,3735],"array_shift":[3747],"implode":[3749,3784],"count":[3746,3805,3823],"trim":[3758],"strpos":[3775],"strtoupper":[3786],"get_results":[3797],"sanitize_post":[3807],"update_post_cache":[3811],"get_page_children":[3814,3818],"wp_cache_set":[3831]},"used_by":{"wp_dropdown_pages":[781],"wp_list_pages":[838]}},"walk_page_dropdown_tree":{"doc":"\/**\n * Retrieve HTML dropdown (select) content for page list.\n *\n * @uses Walker_PageDropdown to create HTML dropdown content.\n * @since 2.1.0\n * @see Walker_PageDropdown::walk() for parameters and return description.\n *\/","file":"post-template.php","line":960,"missingDoc":false,"filters":[],"uses":{"func_get_args":[961],"call_user_func_array":[967]},"used_by":{"wp_dropdown_pages":[793]}},"walk_page_tree":{"doc":"\/**\n * Retrieve HTML list content for page list.\n *\n * @uses Walker_Page to create HTML list content.\n * @since 2.1.0\n * @see Walker_Page::walk() for parameters and return description.\n *\/","file":"post-template.php","line":943,"missingDoc":false,"filters":[],"uses":{"call_user_func_array":[950]},"used_by":{"wp_list_pages":[847]}},"wp_page_menu":{"doc":"\/**\n * Display or retrieve list of pages with optional home link.\n *\n * The arguments are listed below and part of the arguments are for {@link\n * wp_list_pages()} function. Check that function for more info on those\n * arguments.\n *\n * <ul>\n * <li><strong>sort_column<\/strong> - How to sort the list of pages. Defaults\n * to page title. Use column for posts table.<\/li>\n * <li><strong>menu_class<\/strong> - Class to use for the div ID which contains\n * the page list. Defaults to 'menu'.<\/li>\n * <li><strong>echo<\/strong> - Whether to echo list or return it. Defaults to\n * echo.<\/li>\n * <li><strong>link_before<\/strong> - Text before show_home argument text.<\/li>\n * <li><strong>link_after<\/strong> - Text after show_home argument text.<\/li>\n * <li><strong>show_home<\/strong> - If you set this argument, then it will\n * display the link to the home page. The show_home argument really just needs\n * to be set to the value of the text of the link.<\/li>\n * <\/ul>\n *\n * @since 2.7.0\n *\n * @param array|string $args\n * @return string html menu\n *\/","file":"post-template.php","line":887,"missingDoc":false,"filters":["'wp_page_menu_args'","'wp_page_menu'"],"uses":{"wp_parse_args":[889],"__":[899],"is_front_page":[903],"is_paged":[903],"home_url":[905],"esc_attr":[905,924],"get_option":[913,907],"str_replace":[919],"wp_list_pages":[919]},"used_by":[]},"Walker_Page::start_lvl":{"doc":"\/**\n * @see Walker::start_lvl()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param int $depth Depth of page. Used for padding.\n * @param array $args\n *\/","file":"post-template.php","line":1001,"missingDoc":false,"filters":[],"uses":{"str_repeat":[1002]},"used_by":[]},"Walker_Page::end_lvl":{"doc":"\/**\n * @see Walker::end_lvl()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param int $depth Depth of page. Used for padding.\n * @param array $args\n *\/","file":"post-template.php","line":1014,"missingDoc":false,"filters":[],"uses":{"str_repeat":[1015]},"used_by":[]},"Walker_Page::start_el":{"doc":"\/**\n * @see Walker::start_el()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $page Page data object.\n * @param int $depth Depth of page. Used for padding.\n * @param int $current_page Page ID.\n * @param array $args\n *\/","file":"post-template.php","line":1029,"missingDoc":false,"filters":["'page_css_class'","'the_title'"],"uses":{"str_repeat":[1031],"extract":[1035],"get_post":[1038],"in_array":[1039],"get_option":[1045],"implode":[1049],"get_permalink":[1051],"mysql2date":[1059]},"used_by":[]},"Walker_Page::end_el":{"doc":"\/**\n * @see Walker::end_el()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $page Page data object. Not used.\n * @param int $depth Depth of page. Not Used.\n * @param array $args\n *\/","file":"post-template.php","line":1072,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Walker_PageDropdown::start_el":{"doc":"\/**\n * @see Walker::start_el()\n * @since 2.1.0\n *\n * @param string $output Passed by reference. Used to append additional content.\n * @param object $page Page data object.\n * @param int $depth Depth of page in reference to parent pages. Used for padding.\n * @param array $args Uses 'selected' argument for selected page to set selected HTML attribute for option element.\n * @param int $id\n *\/","file":"post-template.php","line":1111,"missingDoc":false,"filters":["'list_pages'"],"uses":{"str_repeat":[1112],"esc_html":[1119]},"used_by":[]},"the_attachment_link":{"doc":"\/**\n * Display an attachment page link using an image or icon.\n *\n * @since 2.0.0\n *\n * @param int $id Optional. Post ID.\n * @param bool $fullsize Optional, default is false. Whether to use full size.\n * @param bool $deprecated Deprecated. Not used.\n * @param bool $permalink Optional, default is false. Whether to include permalink.\n *\/","file":"post-template.php","line":1138,"missingDoc":false,"filters":[],"uses":{"_deprecated_argument":[1140],"wp_get_attachment_link":[1143,1145]},"used_by":[]},"prepend_attachment":{"doc":"\/**\n * Wrap attachment in <<p>> element before content.\n *\n * @since 2.0.0\n * @uses apply_filters() Calls 'prepend_attachment' hook on HTML content.\n *\n * @param string $content\n * @return string\n *\/","file":"post-template.php","line":1195,"missingDoc":false,"filters":["'prepend_attachment'"],"uses":{"get_post":[1196],"wp_get_attachment_link":[1203]},"used_by":[]},"wp_post_revision_title":{"doc":"\/**\n * Retrieve formatted date timestamp of a revision (linked to that revisions's page).\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @uses date_i18n()\n *\n * @param int|object $revision Revision ID or revision object.\n * @param bool $link Optional, default is true. Link to revisions's page?\n * @return string i18n formatted datetimestamp or localized 'Current Revision'.\n *\/","file":"post-template.php","line":1296,"missingDoc":false,"filters":[],"uses":{"get_post":[1297],"in_array":[1300],"_x":[1304],"__":[1306,1308],"date_i18n":[1310],"strtotime":[1310],"current_user_can":[1311],"get_edit_post_link":[1311],"sprintf":[1315,1317],"wp_is_post_autosave":[1316],"wp_is_post_revision":[1314]},"used_by":{"wp_list_post_revisions":[1388]}},"wp_is_post_revision":{"doc":"\/**\n * Determines if the specified post is a revision.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @param int|object $post Post ID or post object.\n * @return bool|int False if not a revision, ID of revision's parent otherwise.\n *\/","file":"post.php","line":5030,"missingDoc":false,"filters":[],"uses":{"wp_get_post_revision":[5031]},"used_by":{"wp_post_revision_title":[1314],"add_post_meta":[1752],"delete_post_meta":[1776],"update_post_meta":[1819]}},"wp_list_post_revisions":{"doc":"\/**\n * Display list of a post's revisions.\n *\n * Can output either a UL with edit links or a TABLE with diff interface, and\n * restore action links.\n *\n * Second argument controls parameters:\n *   (bool)   parent : include the parent (the \"Current Revision\") in the list.\n *   (string) format : 'list' or 'form-table'. 'list' outputs UL, 'form-table'\n *                     outputs TABLE with UI.\n *   (int)    right  : what revision is currently being viewed - used in\n *                     form-table format.\n *   (int)    left   : what revision is currently being diffed against right -\n *                     used in form-table format.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @uses wp_get_post_revisions()\n * @uses wp_post_revision_title()\n * @uses get_edit_post_link()\n * @uses get_the_author_meta()\n *\n * @todo split into two functions (list, form-table) ?\n *\n * @param int|object $post_id Post ID or post object.\n * @param string|array $args See description {@link wp_parse_args()}.\n * @return null\n *\/","file":"post-template.php","line":1352,"missingDoc":false,"filters":[],"uses":{"get_post":[1353],"extract":[1357],"wp_parse_args":[1357],"wp_get_post_autosave":[1361],"wp_get_post_revisions":[1368],"_x":[1374],"array_unshift":[1377],"current_user_can":[1381,1383],"wp_is_post_autosave":[1385],"wp_post_revision_title":[1388],"get_the_author_meta":[1389],"wp_nonce_url":[1401],"add_query_arg":[1401],"__":[1401],"sprintf":[1413],"esc_attr_e":[1424],"esc_attr":[1426],"_ex":[1440,1441,1442],"_e":[1443,1444]},"used_by":[]},"wp_get_post_autosave":{"doc":"\/**\n * Retrieve the autosaved data of the specified post.\n *\n * Returns a post object containing the information that was autosaved for the\n * specified post.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @param int $post_id The post ID.\n * @return object|bool The autosaved data or false on failure or when no autosave exists.\n *\/","file":"post.php","line":4982,"missingDoc":false,"filters":[],"uses":{"get_post":[4984],"add_action":[4997],"query":[4998],"remove_action":[4999],"is_array":[5001],"is_object":[5001]},"used_by":{"wp_list_post_revisions":[1361],"_set_preview":[5231]}},"has_post_thumbnail":{"doc":"\/**\n * Check if post has an image attached.\n *\n * @since 2.9.0\n *\n * @param int $post_id Optional. Post ID.\n * @return bool Whether post has an image attached.\n *\/","file":"post-thumbnail-template.php","line":20,"missingDoc":false,"filters":[],"uses":{"get_post_thumbnail_id":[21]},"used_by":[]},"the_post_thumbnail":{"doc":"\/**\n * Display Post Thumbnail.\n *\n * @since 2.9.0\n *\n * @param string|array $size Optional. Image size. Defaults to 'post-thumbnail', which theme sets using set_post_thumbnail_size( $width, $height, $crop_flag );.\n * @param string|array $attr Optional. Query string or array of attributes.\n *\/","file":"post-thumbnail-template.php","line":45,"missingDoc":false,"filters":[],"uses":{"get_the_post_thumbnail":[46]},"used_by":[]},"get_the_post_thumbnail":{"doc":"\/**\n * Retrieve Post Thumbnail.\n *\n * @since 2.9.0\n *\n * @param int $post_id Optional. Post ID.\n * @param string $size Optional. Image size. Defaults to 'post-thumbnail'.\n * @param string|array $attr Optional. Query string or array of attributes.\n *\/","file":"post-thumbnail-template.php","line":85,"missingDoc":false,"filters":["'post_thumbnail_size'","'begin_fetch_post_thumbnail_html'","'end_fetch_post_thumbnail_html'","'post_thumbnail_html'"],"uses":{"get_the_ID":[86],"get_post_thumbnail_id":[87],"update_post_thumbnail_cache":[92],"in_the_loop":[91],"wp_get_attachment_image":[93]},"used_by":{"the_post_thumbnail":[46]}},"update_post_thumbnail_cache":{"doc":"\/**\n * Update cache for thumbnails in the current loop\n *\n * @since 3.2\n *\n * @param object $wp_query Optional. A WP_Query instance. Defaults to the $wp_query global.\n *\/","file":"post-thumbnail-template.php","line":56,"missingDoc":false,"filters":[],"uses":{"get_post_thumbnail_id":[65],"_prime_post_caches":[70]},"used_by":{"get_the_post_thumbnail":[92]}},"in_the_loop":{"doc":"\/**\n * Whether the caller is in the Loop.\n *\n * @since 2.0.0\n * @uses $wp_query\n *\n * @return bool True if caller is within loop, false if loop hasn't started or ended.\n *\/","file":"query.php","line":754,"missingDoc":false,"filters":[],"uses":[],"used_by":{"get_the_post_thumbnail":[91]}},"create_initial_post_types":{"doc":"\/**\n * Creates the initial post types when 'init' action is fired.\n *\n * @since 2.9.0\n *\/","file":"post.php","line":19,"missingDoc":false,"filters":[],"uses":{"register_post_type":[20,36,53,78,96],"_x":[22,38,55,56,57,110,117,124,131,138,145],"__":[58,59,80,81,98,99],"register_post_status":[109,116,123,130,137,144,152,158],"_n_noop":[113,120,127,134,141,148]},"used_by":[]},"register_post_type":{"doc":"\/**\n * Register a post type. Do not use before init.\n *\n * A function for creating or modifying a post type based on the\n * parameters given. The function will accept an array (second optional\n * parameter), along with a string for the post type name.\n *\n * Optional $args contents:\n *\n * - label - Name of the post type shown in the menu. Usually plural. If not set, labels['name'] will be used.\n * - labels - An array of labels for this post type.\n *     * If not set, post labels are inherited for non-hierarchical types and page labels for hierarchical ones.\n *     * You can see accepted values in {@link get_post_type_labels()}.\n * - description - A short descriptive summary of what the post type is. Defaults to blank.\n * - public - Whether a post type is intended for use publicly either via the admin interface or by front-end users.\n *     * Defaults to false.\n *     * While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are\n *       inherited from public, each does not rely on this relationship and controls a very specific intention.\n * - exclude_from_search - Whether to exclude posts with this post type from front end search results.\n *     * If not set, the the opposite of public's current value is used.\n * - publicly_queryable - Whether queries can be performed on the front end for the post type as part of parse_request().\n *     * ?post_type={post_type_key}\n *     * ?{post_type_key}={single_post_slug}\n *     * ?{post_type_query_var}={single_post_slug}\n *     * If not set, the default is inherited from public.\n * - show_ui - Whether to generate a default UI for managing this post type in the admin.\n *     * If not set, the default is inherited from public.\n * - show_in_nav_menus - Makes this post type available for selection in navigation menus.\n *     * If not set, the default is inherited from public.\n * - show_in_menu - Where to show the post type in the admin menu.\n *     * If true, the post type is shown in its own top level menu.\n *     * If false, no menu is shown\n *     * If a string of an existing top level menu (eg. 'tools.php' or 'edit.php?post_type=page'), the post type will\n *       be placed as a sub menu of that.\n *     * show_ui must be true.\n *     * If not set, the default is inherited from show_ui\n * - show_in_admin_bar - Makes this post type available via the admin bar.\n *     * If not set, the default is inherited from show_in_menu\n * - menu_position - The position in the menu order the post type should appear.\n *     * show_in_menu must be true\n *     * Defaults to null, which places it at the bottom of its area.\n * - menu_icon - The url to the icon to be used for this menu. Defaults to use the posts icon.\n * - capability_type - The string to use to build the read, edit, and delete capabilities. Defaults to 'post'.\n *     * May be passed as an array to allow for alternative plurals when using this argument as a base to construct the\n *       capabilities, e.g. array('story', 'stories').\n * - capabilities - Array of capabilities for this post type.\n *     * By default the capability_type is used as a base to construct capabilities.\n *     * You can see accepted values in {@link get_post_type_capabilities()}.\n * - map_meta_cap - Whether to use the internal default meta capability handling. Defaults to false.\n * - hierarchical - Whether the post type is hierarchical (e.g. page). Defaults to false.\n * - supports - An alias for calling add_post_type_support() directly. Defaults to title and editor.\n *     * See {@link add_post_type_support()} for documentation.\n * - register_meta_box_cb - Provide a callback function that will be called when setting up the\n *     meta boxes for the edit form. Do remove_meta_box() and add_meta_box() calls in the callback.\n * - taxonomies - An array of taxonomy identifiers that will be registered for the post type.\n *     * Default is no taxonomies.\n *     * Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type().\n * - has_archive - True to enable post type archives. Default is false.\n *     * Will generate the proper rewrite rules if rewrite is enabled.\n * - rewrite - Triggers the handling of rewrites for this post type. Defaults to true, using $post_type as slug.\n *     * To prevent rewrite, set to false.\n *     * To specify rewrite rules, an array can be passed with any of these keys\n *         * 'slug' => string Customize the permastruct slug. Defaults to $post_type key\n *         * 'with_front' => bool Should the permastruct be prepended with WP_Rewrite::$front. Defaults to true.\n *         * 'feeds' => bool Should a feed permastruct be built for this post type. Inherits default from has_archive.\n *         * 'pages' => bool Should the permastruct provide for pagination. Defaults to true.\n *         * 'ep_mask' => const Assign an endpoint mask.\n *             * If not specified and permalink_epmask is set, inherits from permalink_epmask.\n *             * If not specified and permalink_epmask is not set, defaults to EP_PERMALINK\n * - query_var - Sets the query_var key for this post type. Defaults to $post_type key\n *     * If false, a post type cannot be loaded at ?{query_var}={post_slug}\n *     * If specified as a string, the query ?{query_var_string}={post_slug} will be valid.\n * - can_export - Allows this post type to be exported. Defaults to true.\n * - delete_with_user - Whether to delete posts of this type when deleting a user.\n *     * If true, posts of this type belonging to the user will be moved to trash when then user is deleted.\n *     * If false, posts of this type belonging to the user will *not* be trashed or deleted.\n *     * If not set (the default), posts are trashed if post_type_supports('author'). Otherwise posts are not trashed or deleted.\n * - _builtin - true if this post type is a native or \"built-in\" post_type. THIS IS FOR INTERNAL USE ONLY!\n * - _edit_link - URL segement to use for edit link of this post type. THIS IS FOR INTERNAL USE ONLY!\n *\n * @since 2.9.0\n * @uses $wp_post_types Inserts new post type object into the list\n *\n * @param string $post_type Post type key, must not exceed 20 characters\n * @param array|string $args See optional args description above.\n * @return object|WP_Error the registered post type object, or an error object\n *\/","file":"post.php","line":1213,"missingDoc":false,"filters":["'registered_post_type'"],"uses":{"is_array":[1216,1274,1294],"wp_parse_args":[1231],"sanitize_key":[1234],"__":[1238],"strlen":[1237],"in_array":[1265],"get_post_type_capabilities":[1271],"add_post_type_support":[1278,1282],"sanitize_title_with_dashes":[1289],"add_query_var":[1290],"add_rewrite_tag":[1312,1314],"substr":[1319],"add_rewrite_rule":[1323,1326,1327,1330],"trim":[1325],"implode":[1325],"add_permastruct":[1333],"is_admin":[1293],"get_option":[1293],"add_action":[1337,1344],"get_post_type_labels":[1339],"register_taxonomy_for_object_type":[1347]},"used_by":{"create_initial_post_types":[20,36,53,78,96]}},"register_post_status":{"doc":"\/**\n * Register a post status. Do not use before init.\n *\n * A simple function for creating or modifying a post status based on the\n * parameters given. The function will accept an array (second optional\n * parameter), along with a string for the post status name.\n *\n *\n * Optional $args contents:\n *\n * label - A descriptive name for the post status marked for translation. Defaults to $post_status.\n * public - Whether posts of this status should be shown in the front end of the site. Defaults to true.\n * exclude_from_search - Whether to exclude posts with this post status from search results. Defaults to false.\n * show_in_admin_all_list - Whether to include posts in the edit listing for their post type\n * show_in_admin_status_list - Show in the list of statuses with post counts at the top of the edit\n *                             listings, e.g. All (12) | Published (9) | My Custom Status (2) ...\n *\n * Arguments prefixed with an _underscore shouldn't be used by plugins and themes.\n *\n * @package WordPress\n * @subpackage Post\n * @since 3.0.0\n * @uses $wp_post_statuses Inserts new post status object into the list\n *\n * @param string $post_status Name of the post status.\n * @param array|string $args See above description.\n *\/","file":"post.php","line":922,"missingDoc":false,"filters":[],"uses":{"is_array":[925],"wp_parse_args":[942],"sanitize_key":[945]},"used_by":{"create_initial_post_types":[109,116,123,130,137,144,152,158]}},"update_attached_file":{"doc":"\/**\n * Update attachment file path based on attachment ID.\n *\n * Used to update the file path of the attachment, which uses post meta name\n * '_wp_attached_file' to store the path of the attachment.\n *\n * @since 2.1.0\n * @uses apply_filters() Calls 'update_attached_file' on file path and attachment ID.\n *\n * @param int $attachment_id Attachment ID\n * @param string $file File path for the attachment\n * @return bool False on failure, true on success.\n *\/","file":"post.php","line":208,"missingDoc":false,"filters":["'update_attached_file'"],"uses":{"get_post":[209],"update_post_meta":[214],"delete_post_meta":[216],"_wp_relative_upload_path":[213]},"used_by":{"wp_insert_attachment":[4042]}},"_wp_relative_upload_path":{"doc":"\/**\n * Return relative path to an uploaded file.\n *\n * The path is relative to the current upload dir.\n *\n * @since 2.9.0\n * @uses apply_filters() Calls '_wp_relative_upload_path' on file path.\n *\n * @param string $path Full path to the file\n * @return string relative path on success, unchanged path on failure.\n *\/","file":"post.php","line":230,"missingDoc":false,"filters":["'_wp_relative_upload_path'"],"uses":{"wp_upload_dir":[233],"str_replace":[235],"ltrim":[236],"strpos":[234]},"used_by":{"update_attached_file":[213]}},"sanitize_post":{"doc":"\/**\n * Sanitize every post field.\n *\n * If the context is 'raw', then the post object or array will get minimal santization of the int fields.\n *\n * @since 2.3.0\n * @uses sanitize_post_field() Used to sanitize the fields.\n *\n * @param object|WP_Post|array $post The Post Object or Array\n * @param string $context Optional, default is 'display'. How to sanitize post fields.\n * @return object|WP_Post|array The now sanitized Post Object or Array (will be the same type as $post)\n *\/","file":"post.php","line":1941,"missingDoc":false,"filters":[],"uses":{"sanitize_post_field":[1949,1958],"array_keys":[1948,1957],"get_object_vars":[1948],"is_object":[1942]},"used_by":{"get_post":[394],"WP_Post::get_instance":[585,588],"WP_Post::filter":[660],"wp_insert_post":[2713],"get_pages":[3807],"wp_insert_attachment":[3921],"_set_preview":[5236]}},"WP_Post::get_instance":{"doc":"","file":"post.php","line":570,"missingDoc":true,"filters":[],"uses":{"wp_cache_get":[577],"get_row":[580],"prepare":[580],"sanitize_post":[585,588],"wp_cache_add":[586]},"used_by":[]},"WP_Post::__construct":{"doc":"","file":"post.php","line":594,"missingDoc":true,"filters":[],"uses":{"get_object_vars":[595]},"used_by":[]},"WP_Post::__isset":{"doc":"","file":"post.php","line":599,"missingDoc":true,"filters":[],"uses":{"metadata_exists":[612]},"used_by":[]},"WP_Post::__get":{"doc":"","file":"post.php","line":615,"missingDoc":true,"filters":[],"uses":{"get_post_meta":[617,645],"__isset":[616],"get_the_terms":[622,632],"is_object_in_taxonomy":[621,631],"wp_list_pluck":[627,637],"get_post_ancestors":[643],"sanitize_post_field":[648]},"used_by":[]},"get_post_ancestors":{"doc":"\/**\n * Retrieve ancestors of a post.\n *\n * @since 2.5.0\n *\n * @param int|object $post Post ID or post object\n * @return array Ancestor IDs or empty array if none are found.\n *\/","file":"post.php","line":683,"missingDoc":false,"filters":[],"uses":{"get_post":[687,696],"in_array":[698]},"used_by":{"WP_Post::__get":[643],"get_ancestors":[3240]}},"sanitize_post_field":{"doc":"\/**\n * Sanitize post field based on context.\n *\n * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The\n * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display'\n * when calling filters.\n *\n * @since 2.3.0\n * @uses apply_filters() Calls 'edit_$field' and '{$field_no_prefix}_edit_pre' passing $value and\n *  $post_id if $context == 'edit' and field name prefix == 'post_'.\n *\n * @uses apply_filters() Calls 'edit_post_$field' passing $value and $post_id if $context == 'db'.\n * @uses apply_filters() Calls 'pre_$field' passing $value if $context == 'db' and field name prefix == 'post_'.\n * @uses apply_filters() Calls '{$field}_pre' passing $value if $context == 'db' and field name prefix != 'post_'.\n *\n * @uses apply_filters() Calls '$field' passing $value, $post_id and $context if $context == anything\n *  other than 'raw', 'edit' and 'db' and field name prefix == 'post_'.\n * @uses apply_filters() Calls 'post_$field' passing $value if $context == anything other than 'raw',\n *  'edit' and 'db' and field name prefix != 'post_'.\n *\n * @param string $field The Post Object field name.\n * @param mixed $value The Post Object value.\n * @param int $post_id Post ID.\n * @param string $context How to sanitize post fields. Looks for 'raw', 'edit', 'db', 'display',\n *               'attribute' and 'js'.\n * @return mixed Sanitized value.\n *\/","file":"post.php","line":1991,"missingDoc":false,"filters":["\"edit_{$field}\"","\"{$field_no_prefix}_edit_pre\"","\"edit_post_{$field}\"","\"pre_{$field}\"","\"{$field_no_prefix}_save_pre\"","\"pre_post_{$field}\"","\"{$field}_pre\"","\"post_{$field}\""],"uses":{"in_array":[1993,1998,2023],"array_map":[1999],"str_replace":[2009],"strpos":[2007],"format_to_edit":[2025,2027],"user_can_richedit":[2025],"esc_attr":[2029,2048],"esc_js":[2050]},"used_by":{"WP_Post::__get":[648],"get_post_field":[733],"set_post_type":[1666],"sanitize_post":[1949,1958]}},"WP_Post::filter":{"doc":"","file":"post.php","line":653,"missingDoc":true,"filters":[],"uses":{"sanitize_post":[660]},"used_by":[]},"WP_Post::to_array":{"doc":"","file":"post.php","line":663,"missingDoc":true,"filters":[],"uses":{"get_object_vars":[664],"__get":[668],"__isset":[667]},"used_by":[]},"has_post_format":{"doc":"\/**\n * Check if a post has a particular format\n *\n * @since 3.1.0\n * @uses has_term()\n *\n * @param string $format The format to check for\n * @param object|id $post The post to check. If not supplied, defaults to the current post if used in the loop.\n * @return bool True if the post has the format, false otherwise.\n *\/","file":"post.php","line":791,"missingDoc":false,"filters":[],"uses":{"has_term":[792],"sanitize_key":[792]},"used_by":[]},"get_post_format_slugs":{"doc":"\/**\n * Retrieves an array of post format slugs.\n *\n * @since 3.1.0\n *\n * @return array The array of post format slugs.\n *\/","file":"post.php","line":5346,"missingDoc":false,"filters":[],"uses":{"array_keys":[5347],"get_post_format_strings":[5347],"array_combine":[5348]},"used_by":{"set_post_format":[812],"_post_format_request":[5441],"add_theme_support":[1262]}},"wp_set_post_terms":{"doc":"\/**\n * Set the terms for a post.\n *\n * @since 2.8.0\n * @uses wp_set_object_terms() Sets the tags for the post.\n *\n * @param int $post_id Post ID.\n * @param string $tags The tags to set for the post, separated by commas.\n * @param string $taxonomy Taxonomy name. Defaults to 'post_tag'.\n * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags.\n * @return mixed Array of affected term IDs. WP_Error or false on failure.\n *\/","file":"post.php","line":3193,"missingDoc":false,"filters":[],"uses":{"_x":[3203],"str_replace":[3205],"explode":[3206],"trim":[3206],"is_array":[3202],"array_unique":[3212],"array_map":[3212],"is_taxonomy_hierarchical":[3211],"wp_set_object_terms":[3215]},"used_by":{"set_post_format":[818],"wp_insert_post":[2916],"wp_set_post_tags":[3178],"wp_set_post_categories":[3244],"wp_insert_attachment":[4037]}},"get_post_status":{"doc":"\/**\n * Retrieve the post status based on the Post ID.\n *\n * If the post ID is of an attachment, then the parent post status will be given\n * instead.\n *\n * @since 2.0.0\n *\n * @param int $ID Post ID\n * @return string|bool Post status or false on failure.\n *\/","file":"post.php","line":832,"missingDoc":false,"filters":[],"uses":{"get_post":[833],"is_object":[835],"get_post_status":[848]},"used_by":{"get_post_status":[848],"wp_delete_post":[2311],"wp_set_post_categories":[3233],"WP_Query::get_posts":[2700]}},"get_post_stati":{"doc":"\/**\n * Get a list of all registered post status objects.\n *\n * @package WordPress\n * @subpackage Post\n * @since 3.0.0\n * @uses $wp_post_statuses\n * @see register_post_status\n * @see get_post_status_object\n *\n * @param array|string $args An array of key => value arguments to match against the post status objects.\n * @param string $output The type of output to return, either post status 'names' or 'objects'. 'names' is the default.\n * @param string $operator The logical operation to perform. 'or' means only one element\n *  from the array needs to match; 'and' means all elements must match. The default is 'and'.\n * @return array A list of post status names or objects\n *\/","file":"post.php","line":1024,"missingDoc":false,"filters":[],"uses":{"wp_filter_object_list":[1029]},"used_by":{"wp_count_posts":[2145],"get_pages":[3649],"WP_Query::get_posts":[2446,2449,2490,2499,2506]}},"get_post_type_capabilities":{"doc":"\/**\n * Builds an object with all post type capabilities out of a post type object\n *\n * Post type capabilities use the 'capability_type' argument as a base, if the\n * capability is not set in the 'capabilities' argument array or if the\n * 'capabilities' argument is not supplied.\n *\n * The capability_type argument can optionally be registered as an array, with\n * the first value being singular and the second plural, e.g. array('story, 'stories')\n * Otherwise, an 's' will be added to the value for the plural form. After\n * registration, capability_type will always be a string of the singular value.\n *\n * By default, seven keys are accepted as part of the capabilities array:\n *\n * - edit_post, read_post, and delete_post are meta capabilities, which are then\n *   generally mapped to corresponding primitive capabilities depending on the\n *   context, which would be the post being edited\/read\/deleted and the user or\n *   role being checked. Thus these capabilities would generally not be granted\n *   directly to users or roles.\n *\n * - edit_posts - Controls whether objects of this post type can be edited.\n * - edit_others_posts - Controls whether objects of this type owned by other users\n *   can be edited. If the post type does not support an author, then this will\n *   behave like edit_posts.\n * - publish_posts - Controls publishing objects of this post type.\n * - read_private_posts - Controls whether private objects can be read.\n *\n * These four primitive capabilities are checked in core in various locations.\n * There are also seven other primitive capabilities which are not referenced\n * directly in core, except in map_meta_cap(), which takes the three aforementioned\n * meta capabilities and translates them into one or more primitive capabilities\n * that must then be checked against the user or role, depending on the context.\n *\n * - read - Controls whether objects of this post type can be read.\n * - delete_posts - Controls whether objects of this post type can be deleted.\n * - delete_private_posts - Controls whether private objects can be deleted.\n * - delete_published_posts - Controls whether published objects can be deleted.\n * - delete_others_posts - Controls whether objects owned by other users can be\n *   can be deleted. If the post type does not support an author, then this will\n *   behave like delete_posts.\n * - edit_private_posts - Controls whether private objects can be edited.\n * - edit_published_posts - Controls whether published objects can be edited.\n *\n * These additional capabilities are only used in map_meta_cap(). Thus, they are\n * only assigned by default if the post type is registered with the 'map_meta_cap'\n * argument set to true (default is false).\n *\n * @see map_meta_cap()\n * @since 3.0.0\n *\n * @param object $args Post type registration arguments\n * @return object object with all the capabilities as member variables\n *\/","file":"post.php","line":1408,"missingDoc":false,"filters":[],"uses":{"is_array":[1409],"array_merge":[1438,1441],"_post_type_meta_capabilities":[1449]},"used_by":{"register_post_type":[1271]}},"add_post_type_support":{"doc":"\/**\n * Register support of certain features for a post type.\n *\n * All features are directly associated with a functional area of the edit screen, such as the\n * editor or a meta box: 'title', 'editor', 'comments', 'revisions', 'trackbacks', 'author',\n * 'excerpt', 'page-attributes', 'thumbnail', and 'custom-fields'.\n *\n * Additionally, the 'revisions' feature dictates whether the post type will store revisions,\n * and the 'comments' feature dictates whether the comments count will show on the edit screen.\n *\n * @since 3.0.0\n * @param string $post_type The post type for which to add the feature\n * @param string|array $feature the feature being added, can be an array of feature strings or a single string\n *\/","file":"post.php","line":1578,"missingDoc":false,"filters":[],"uses":{"array_slice":[1586],"func_get_args":[1586],"func_num_args":[1583]},"used_by":{"register_post_type":[1278,1282]}},"add_rewrite_tag":{"doc":"\/**\n * Add a new rewrite tag (like %postname%).\n *\n * The $query parameter is optional. If it is omitted you must ensure that\n * you call this on, or before, the 'init' hook. This is because $query defaults\n * to \"$tag=\", and for this to work a new query var has to be added.\n *\n * @see WP_Rewrite::add_rewrite_tag()\n * @since 2.1.0\n *\n * @param string $tag Name of the new rewrite tag.\n * @param string $regex Regular expression to substitute the tag for in rewrite rules.\n * @param string $query String to append to the rewritten query. Must end in '='. Optional.\n *\/","file":"rewrite.php","line":38,"missingDoc":false,"filters":[],"uses":{"strlen":[40,40],"trim":[46],"add_query_var":[47],"add_rewrite_tag":[51]},"used_by":{"register_post_type":[1312,1314],"add_rewrite_tag":[51],"WP_Rewrite::page_rewrite_rules":[864],"register_taxonomy":[358]}},"add_rewrite_rule":{"doc":"\/**\n * Add a straight rewrite rule.\n *\n * @see WP_Rewrite::add_rule() for long description.\n * @since 2.1.0\n *\n * @param string $regex Regular Expression to match request against.\n * @param string $redirect Page to redirect to.\n * @param string $after Optional, default is 'bottom'. Where to add rule, can also be 'top'.\n *\/","file":"rewrite.php","line":19,"missingDoc":false,"filters":[],"uses":{"add_rule":[21]},"used_by":{"register_post_type":[1323,1326,1327,1330]}},"add_permastruct":{"doc":"\/**\n * Add permalink structure.\n *\n * @see WP_Rewrite::add_permastruct()\n * @since 3.0.0\n *\n * @param string $name Name for permalink structure.\n * @param string $struct Permalink structure.\n * @param array $args Optional configuration for building the rules from the permalink structure,\n *     see {@link WP_Rewrite::add_permastruct()} for full details.\n *\/","file":"rewrite.php","line":65,"missingDoc":false,"filters":[],"uses":{"is_array":[69],"func_get_arg":[72],"func_num_args":[71],"add_permastruct":[74]},"used_by":{"register_post_type":[1333],"add_permastruct":[74],"register_taxonomy":[359]}},"get_post_type_labels":{"doc":"\/**\n * Builds an object with all post type labels out of a post type object\n *\n * Accepted keys of the label array in the post type object:\n * - name - general name for the post type, usually plural. The same and overridden by $post_type_object->label. Default is Posts\/Pages\n * - singular_name - name for one object of this post type. Default is Post\/Page\n * - add_new - Default is Add New for both hierarchical and non-hierarchical types. When internationalizing this string, please use a {@link http:\/\/codex.wordpress.org\/I18n_for_WordPress_Developers#Disambiguation_by_context gettext context} matching your post type. Example: <code>_x('Add New', 'product');<\/code>\n * - add_new_item - Default is Add New Post\/Add New Page\n * - edit_item - Default is Edit Post\/Edit Page\n * - new_item - Default is New Post\/New Page\n * - view_item - Default is View Post\/View Page\n * - search_items - Default is Search Posts\/Search Pages\n * - not_found - Default is No posts found\/No pages found\n * - not_found_in_trash - Default is No posts found in Trash\/No pages found in Trash\n * - parent_item_colon - This string isn't used on non-hierarchical types. In hierarchical ones the default is Parent Page:\n * - all_items - String for the submenu. Default is All Posts\/All Pages\n * - menu_name - Default is the same as <code>name<\/code>\n *\n * Above, the first default value is for non-hierarchical post types (like posts) and the second one is for hierarchical post types (like pages).\n *\n * @since 3.0.0\n * @param object $post_type_object\n * @return object object with all the labels as member variables\n *\/","file":"post.php","line":1494,"missingDoc":false,"filters":["\"post_type_labels_{$post_type}\""],"uses":{"_x":[1496,1496,1497,1497,1498,1498],"__":[1499,1499,1500,1500,1501,1501,1502,1502,1503,1503,1504,1504,1505,1505,1506,1507,1507],"_get_custom_object_labels":[1511]},"used_by":{"register_post_type":[1339]}},"register_taxonomy_for_object_type":{"doc":"\/**\n * Add an already registered taxonomy to an object type.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 3.0.0\n * @uses $wp_taxonomies Modifies taxonomy object\n *\n * @param string $taxonomy Name of taxonomy object\n * @param string $object_type Name of the object type\n * @return bool True if successful, false if not\n *\/","file":"taxonomy.php","line":460,"missingDoc":false,"filters":[],"uses":{"get_post_type_object":[466],"in_array":[469]},"used_by":{"register_post_type":[1347]}},"_get_custom_object_labels":{"doc":"\/**\n * Builds an object with custom-something object (post type, taxonomy) labels out of a custom-something object\n *\n * @access private\n * @since 3.0.0\n *\/","file":"post.php","line":1523,"missingDoc":false,"filters":[],"uses":{"array_merge":[1543]},"used_by":{"get_post_type_labels":[1511],"get_taxonomy_labels":[445]}},"_add_post_type_submenus":{"doc":"\/**\n * Adds submenus for post types.\n *\n * @access private\n * @since 3.1.0\n *\/","file":"post.php","line":1553,"missingDoc":false,"filters":[],"uses":{"get_post_type_object":[1555],"add_submenu_page":[1559],"get_post_types":[1554]},"used_by":[]},"remove_post_type_support":{"doc":"\/**\n * Remove support for a feature from a post type.\n *\n * @since 3.0.0\n * @param string $post_type The post type for which to remove the feature\n * @param string $feature The feature being removed\n *\/","file":"post.php","line":1597,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"set_post_type":{"doc":"\/**\n * Updates the post type for the post ID.\n *\n * The page or post cache will be cleaned for the post ID.\n *\n * @since 2.5.0\n *\n * @uses $wpdb\n *\n * @param int $post_id Post ID to change post type. Not actually optional.\n * @param string $post_type Optional, default is post. Supported values are 'post' or 'page' to\n *  name a few.\n * @return int Amount of rows changed. Should be 1 for success and 0 for failure.\n *\/","file":"post.php","line":1663,"missingDoc":false,"filters":[],"uses":{"sanitize_post_field":[1666],"update":[1667],"clean_post_cache":[1669]},"used_by":[]},"delete_post_meta_by_key":{"doc":"\/**\n * Delete everything from post meta matching meta key.\n *\n * @since 2.3.0\n * @uses $wpdb\n *\n * @param string $post_meta_key Key to search for when deleting.\n * @return bool Whether the post meta key was deleted from the database\n *\/","file":"post.php","line":1834,"missingDoc":false,"filters":[],"uses":{"delete_metadata":[1835]},"used_by":[]},"wp_count_posts":{"doc":"\/**\n * Count number of posts of a post type and is user has permissions to view.\n *\n * This function provides an efficient method of finding the amount of post's\n * type a blog has. Another method is to count the amount of items in\n * get_posts(), but that method has a lot of overhead with doing so. Therefore,\n * when developing for 2.5+, use this function instead.\n *\n * The $perm parameter checks for 'readable' value and if the user can read\n * private posts, it will display that for the user that is signed in.\n *\n * @since 2.5.0\n * @link http:\/\/codex.wordpress.org\/Template_Tags\/wp_count_posts\n *\n * @param string $type Optional. Post type to retrieve count\n * @param string $perm Optional. 'readable' or empty.\n * @return object Number of posts for each status\n *\/","file":"post.php","line":2121,"missingDoc":false,"filters":[],"uses":{"wp_get_current_user":[2124],"get_post_type_object":[2130],"current_user_can":[2131],"is_user_logged_in":[2129],"wp_cache_get":[2138],"get_results":[2142],"prepare":[2142],"get_post_stati":[2145],"wp_cache_set":[2152]},"used_by":[]},"wp_count_attachments":{"doc":"\/**\n * Count number of attachments for the mime type(s).\n *\n * If you set the optional mime_type parameter, then an array will still be\n * returned, but will only have the item you are looking for. It does not give\n * you the number of attachments that are children of a post. You can get that\n * by counting the number of children that post has.\n *\n * @since 2.5.0\n *\n * @param string|array $mime_type Optional. Array or comma-separated list of MIME patterns.\n * @return array Number of posts for each mime type.\n *\/","file":"post.php","line":2170,"missingDoc":false,"filters":[],"uses":{"wp_post_mime_type_where":[2173],"get_results":[2174],"get_var":[2180]},"used_by":[]},"wp_post_mime_type_where":{"doc":"\/**\n * Convert MIME types into SQL.\n *\n * @since 2.5.0\n *\n * @param string|array $post_mime_types List of mime types or comma separated string of mime types.\n * @param string $table_alias Optional. Specify a table alias, if needed.\n * @return string The SQL AND clause for mime searching.\n *\/","file":"post.php","line":2249,"missingDoc":false,"filters":[],"uses":{"array_map":[2253],"explode":[2253],"is_string":[2252],"preg_replace":[2255,2258,2259,2266,2271],"strpos":[2256,2267,2276],"substr":[2258,2259],"str_replace":[2263],"in_array":[2273],"join":[2282]},"used_by":{"wp_count_attachments":[2173],"WP_Query::get_posts":[2332]}},"wp_match_mime_types":{"doc":"\/**\n * Check a MIME-Type against a list.\n *\n * If the wildcard_mime_types parameter is a string, it must be comma separated\n * list. If the real_mime_types is a string, it is also comma separated to\n * create the list.\n *\n * @since 2.5.0\n *\n * @param string|array $wildcard_mime_types e.g. audio\/mpeg or image (same as image\/*) or\n *  flash (same as *flash*).\n * @param string|array $real_mime_types post_mime_type values\n * @return array array(wildcard=>array(real types))\n *\/","file":"post.php","line":2216,"missingDoc":false,"filters":[],"uses":{"array_map":[2219,2221],"explode":[2219,2221],"is_string":[2218,2220],"str_replace":[2224],"strpos":[2226],"asort":[2231],"preg_match":[2235],"array_search":[2235]},"used_by":{"wp_mime_type_icon":[4385]}},"wp_trash_post":{"doc":"\/**\n * Moves a post or page to the Trash\n *\n * If trash is disabled, the post or page is permanently deleted.\n *\n * @since 2.9.0\n * @uses do_action() on 'trash_post' before trashing\n * @uses do_action() on 'trashed_post' after trashing\n * @uses wp_delete_post() if trash is disabled\n *\n * @param int $post_id Post ID.\n * @return mixed False on failure\n *\/","file":"post.php","line":2397,"missingDoc":false,"filters":["'wp_trash_post'","'trashed_post'"],"uses":{"wp_delete_post":[2399],"get_post":[2401],"add_post_meta":[2409,2410],"time":[2410],"wp_insert_post":[2413],"wp_trash_post_comments":[2415]},"used_by":{"wp_delete_post":[2312],"wp_delete_attachment":[4086]}},"wp_delete_object_term_relationships":{"doc":"\/**\n * Will unlink the object from the taxonomy or taxonomies.\n *\n * Will remove all relationships between the object and any terms in\n * a particular taxonomy or taxonomies. Does not remove the term or\n * taxonomy itself.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n * @uses $wpdb\n *\n * @param int $object_id The term Object Id that refers to the term\n * @param string|array $taxonomies List of Taxonomy Names or single Taxonomy name.\n *\/","file":"taxonomy.php","line":1720,"missingDoc":false,"filters":["'delete_term_relationships'","'deleted_term_relationships'"],"uses":{"is_array":[1725],"wp_get_object_terms":[1729],"implode":[1730],"query":[1732],"prepare":[1732],"wp_update_term_count":[1734]},"used_by":{"wp_delete_post":[2322],"wp_delete_attachment":[4106,4107]}},"wp_delete_post_revision":{"doc":"\/**\n * Deletes a revision.\n *\n * Deletes the row from the posts table corresponding to the specified revision.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @uses wp_get_post_revision()\n * @uses wp_delete_post()\n *\n * @param int|object $revision_id Revision ID or revision object.\n * @return mixed Null or WP_Error if error, deleted post if success.\n *\/","file":"post.php","line":5185,"missingDoc":false,"filters":["'wp_delete_post_revision'"],"uses":{"wp_get_post_revision":[5186],"wp_delete_post":[5189],"is_wp_error":[5190]},"used_by":{"wp_delete_post":[2353],"wp_save_post_revision":[4963]}},"wp_trash_post_comments":{"doc":"\/**\n * Moves comments for a post to the trash\n *\n * @since 2.9.0\n * @uses do_action() on 'trash_post_comments' before trashing\n * @uses do_action() on 'trashed_post_comments' after trashing\n *\n * @param int $post Post ID or object.\n * @return mixed False on failure\n *\/","file":"post.php","line":2467,"missingDoc":false,"filters":["'trash_post_comments'","'trashed_post_comments'"],"uses":{"get_post":[2470],"get_results":[2478],"prepare":[2478],"add_post_meta":[2486],"update":[2489],"clean_comment_cache":[2491],"array_keys":[2491]},"used_by":{"wp_trash_post":[2415]}},"wp_untrash_post":{"doc":"\/**\n * Restores a post or page from the Trash\n *\n * @since 2.9.0\n * @uses do_action() on 'untrash_post' before undeletion\n * @uses do_action() on 'untrashed_post' after undeletion\n *\n * @param int $post_id Post ID.\n * @return mixed False on failure\n *\/","file":"post.php","line":2432,"missingDoc":false,"filters":["'untrash_post'","'untrashed_post'"],"uses":{"get_post":[2433],"get_post_meta":[2441],"delete_post_meta":[2445,2446],"wp_insert_post":[2448],"wp_untrash_post_comments":[2450]},"used_by":[]},"wp_untrash_post_comments":{"doc":"\/**\n * Restore comments for a post from the trash\n *\n * @since 2.9.0\n * @uses do_action() on 'untrash_post_comments' before trashing\n * @uses do_action() on 'untrashed_post_comments' after trashing\n *\n * @param int $post Post ID or object.\n * @return mixed False on failure\n *\/","file":"post.php","line":2508,"missingDoc":false,"filters":["'untrash_post_comments'","'untrashed_post_comments'"],"uses":{"get_post":[2511],"get_post_meta":[2517],"implode":[2533],"query":[2534],"clean_comment_cache":[2537],"array_keys":[2537],"delete_post_meta":[2539]},"used_by":{"wp_untrash_post":[2450]}},"wp_get_post_terms":{"doc":"\/**\n * Retrieve the terms for a post.\n *\n * There is only one default for this function, called 'fields' and by default\n * is set to 'all'. There are other defaults that can be overridden in\n * {@link wp_get_object_terms()}.\n *\n * @package WordPress\n * @subpackage Post\n * @since 2.8.0\n *\n * @uses wp_get_object_terms() Gets the tags for returning. Args can be found here\n *\n * @param int $post_id Optional. The Post ID\n * @param string $taxonomy The taxonomy for which to retrieve terms. Defaults to post_tag.\n * @param array $args Optional. Overwrite the defaults\n * @return array List of post tags.\n *\/","file":"post.php","line":2607,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[2611],"wp_get_object_terms":[2613]},"used_by":{"wp_get_post_tags":[2586]}},"wp_unique_post_slug":{"doc":"\/**\n * Computes a unique slug for the post, when given the desired slug and some post details.\n *\n * @since 2.8.0\n *\n * @global wpdb $wpdb\n * @global WP_Rewrite $wp_rewrite\n * @param string $slug the desired slug (post_name)\n * @param integer $post_ID\n * @param string $post_status no uniqueness checks are made if the post is still draft or pending\n * @param string $post_type\n * @param integer $post_parent\n * @return string unique slug for the post, based on $post_name (with a -1, -2, etc. suffix)\n *\/","file":"post.php","line":3086,"missingDoc":false,"filters":["'wp_unique_post_slug_is_bad_attachment_slug'","'wp_unique_post_slug_is_bad_hierarchical_slug'","'wp_unique_post_slug_is_bad_flat_slug'","'wp_unique_post_slug'"],"uses":{"in_array":[3087,3104,3113,3121,3135],"is_array":[3095],"get_post_types":[3098],"get_var":[3102,3108,3119,3125,3133,3139],"prepare":[3102,3108,3119,3125,3133,3139],"substr":[3107,3124,3138],"strlen":[3107,3124,3138],"implode":[3118],"esc_sql":[3118],"preg_match":[3121]},"used_by":{"wp_insert_post":[2860],"wp_insert_attachment":[3958]}},"wp_set_post_tags":{"doc":"\/**\n * Set the tags for a post.\n *\n * @since 2.3.0\n * @uses wp_set_object_terms() Sets the tags for the post.\n *\n * @param int $post_id Post ID.\n * @param string $tags The tags to set for the post, separated by commas.\n * @param bool $append If true, don't delete existing tags, just add on. If false, replace the tags with the new tags.\n * @return mixed Array of affected term IDs. WP_Error or false on failure.\n *\/","file":"post.php","line":3177,"missingDoc":false,"filters":[],"uses":{"wp_set_post_terms":[3178]},"used_by":{"wp_insert_post":[2907],"wp_add_post_tags":[3163],"wp_insert_attachment":[4028]}},"wp_transition_post_status":{"doc":"\/**\n * Transition the post status of a post.\n *\n * Calls hooks to transition post status.\n *\n * The first is 'transition_post_status' with new status, old status, and post data.\n *\n * The next action called is 'OLDSTATUS_to_NEWSTATUS' the 'NEWSTATUS' is the\n * $new_status parameter and the 'OLDSTATUS' is $old_status parameter; it has the\n * post data.\n *\n * The final action is named 'NEWSTATUS_POSTTYPE', 'NEWSTATUS' is from the $new_status\n * parameter and POSTTYPE is post_type post data.\n *\n * @since 2.3.0\n * @link http:\/\/codex.wordpress.org\/Post_Status_Transitions\n *\n * @uses do_action() Calls 'transition_post_status' on $new_status, $old_status and\n *  $post if there is a status change.\n * @uses do_action() Calls '{$old_status}_to_{$new_status}' on $post if there is a status change.\n * @uses do_action() Calls '{$new_status}_{$post->post_type}' on post ID and $post.\n *\n * @param string $new_status Transition to this post status.\n * @param string $old_status Previous post status.\n * @param object $post Post data.\n *\/","file":"post.php","line":3273,"missingDoc":false,"filters":["'transition_post_status'","\"{$old_status}_to_{$new_status}\"","\"{$new_status}_{$post->post_type}\""],"uses":[],"used_by":{"wp_insert_post":[2942],"wp_publish_post":[3033]}},"wp_publish_post":{"doc":"\/**\n * Publish a post by transitioning the post status.\n *\n * @since 2.1.0\n * @uses $wpdb\n * @uses do_action() Calls 'edit_post', 'save_post', and 'wp_insert_post' on post_id and post data.\n *\n * @param mixed $post Post ID or object.\n *\/","file":"post.php","line":3018,"missingDoc":false,"filters":["'edit_post'","'save_post'","'wp_insert_post'"],"uses":{"get_post":[3021],"update":[3027],"clean_post_cache":[3029],"wp_transition_post_status":[3033]},"used_by":{"check_and_publish_future_post":[3069]}},"check_and_publish_future_post":{"doc":"\/**\n * Publish future post and make sure post ID has future post status.\n *\n * Invoked by cron 'publish_future_post' event. This safeguard prevents cron\n * from publishing drafts, etc.\n *\n * @since 2.5.0\n *\n * @param int $post_id Post ID.\n * @return null Nothing is returned. Which can mean that no action is required or post was published.\n *\/","file":"post.php","line":3051,"missingDoc":false,"filters":[],"uses":{"get_post":[3053],"strtotime":[3061],"wp_clear_scheduled_hook":[3064],"wp_schedule_single_event":[3065],"time":[3063],"wp_publish_post":[3069]},"used_by":[]},"wp_add_post_tags":{"doc":"\/**\n * Adds tags to a post.\n *\n * @uses wp_set_post_tags() Same first two parameters, but the last parameter is always set to true.\n *\n * @package WordPress\n * @subpackage Post\n * @since 2.3.0\n *\n * @param int $post_id Post ID\n * @param string $tags The tags to set for the post, separated by commas.\n * @return bool|null Will return false if $post_id is not an integer or is 0. Will return null otherwise\n *\/","file":"post.php","line":3162,"missingDoc":false,"filters":[],"uses":{"wp_set_post_tags":[3163]},"used_by":[]},"wp_set_object_terms":{"doc":"\/**\n * Create Term and Taxonomy Relationships.\n *\n * Relates an object (post, link etc) to a term and taxonomy type. Creates the\n * term and taxonomy relationship if it doesn't already exist. Creates a term if\n * it doesn't exist (using the slug).\n *\n * A relationship means that the term is grouped in or belongs to the taxonomy.\n * A term has no meaning until it is given context by defining which taxonomy it\n * exists under.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n * @uses $wpdb\n *\n * @param int $object_id The object to relate to.\n * @param array|int|string $terms The slug or id of the term, will replace all existing\n * related terms in this taxonomy.\n * @param array|string $taxonomy The context in which to relate the term to the object.\n * @param bool $append If false will delete difference of terms.\n * @return array|WP_Error Affected Term IDs\n *\/","file":"taxonomy.php","line":2170,"missingDoc":false,"filters":["'add_term_relationship'","'added_term_relationship'","'delete_term_relationships'","'deleted_term_relationships'","'set_object_terms'"],"uses":{"__":[2176,2238],"taxonomy_exists":[2175],"is_array":[2178],"wp_get_object_terms":[2182,2232],"strlen":[2191],"trim":[2191],"is_int":[2196],"wp_insert_term":[2198],"term_exists":[2194],"is_wp_error":[2200],"get_var":[2206],"prepare":[2206,2222,2235],"insert":[2209],"wp_update_term_count":[2215,2224],"array_diff":[2218],"implode":[2220],"query":[2222,2237],"get_taxonomy":[2228],"in_array":[2234],"join":[2237],"wp_cache_delete":[2241]},"used_by":{"wp_set_post_terms":[3215],"wp_delete_term":[1817]}},"trackback_url_list":{"doc":"\/**\n * Do trackbacks for a list of URLs.\n *\n * @since 1.0.0\n *\n * @param string $tb_list Comma separated list of URLs\n * @param int $post_id Post ID\n *\/","file":"post.php","line":3377,"missingDoc":false,"filters":[],"uses":{"get_post":[3380],"extract":[3383],"strip_tags":[3386],"substr":[3389],"strlen":[3388],"explode":[3392],"trim":[3394],"trackback":[3395],"stripslashes":[3395]},"used_by":[]},"get_all_page_ids":{"doc":"\/**\n * Get a list of page IDs.\n *\n * @since 2.0.0\n * @uses $wpdb\n *\n * @return array List of page IDs.\n *\/","file":"post.php","line":3412,"missingDoc":false,"filters":[],"uses":{"wp_cache_get":[3415],"get_col":[3417],"wp_cache_add":[3418],"is_array":[3416]},"used_by":[]},"get_page":{"doc":"\/**\n * Retrieves page data given a page ID or page object.\n *\n * Use get_post() instead of get_page().\n *\n * @since 1.5.1\n * @deprecated 3.5.0\n *\n * @param mixed $page Page object or page ID. Passed by reference.\n * @param string $output What to output. OBJECT, ARRAY_A, or ARRAY_N.\n * @param string $filter How the return value should be filtered.\n * @return WP_Post|null WP_Post on success or null on failure\n *\/","file":"post.php","line":3437,"missingDoc":false,"filters":[],"uses":{"get_post":[3438]},"used_by":[]},"get_page_by_title":{"doc":"\/**\n * Retrieve a page given its title.\n *\n * @since 2.1.0\n * @uses $wpdb\n *\n * @param string $page_title Page title\n * @param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT.\n * @param string $post_type Optional. Post type. Default page.\n * @return WP_Post|null WP_Post on success or null on failure\n *\/","file":"post.php","line":3507,"missingDoc":false,"filters":[],"uses":{"get_var":[3509],"prepare":[3509],"get_post":[3511]},"used_by":[]},"get_page_children":{"doc":"\/**\n * Retrieve child pages from list of pages matching page ID.\n *\n * Matches against the pages parameter against the page ID. Also matches all\n * children for the same to retrieve all children of a page. Does not make any\n * SQL queries to get the children.\n *\n * @since 1.5.1\n *\n * @param int $page_id Page ID.\n * @param array $pages List of pages' objects.\n * @return array\n *\/","file":"post.php","line":3529,"missingDoc":false,"filters":[],"uses":{"array_merge":[3535],"get_page_children":[3534]},"used_by":{"get_page_children":[3534],"get_pages":[3814,3818]}},"get_page_hierarchy":{"doc":"\/**\n * Order the pages with children under parents in a flat list.\n *\n * It uses auxiliary structure to hold parent-children relationships and\n * runs in O(N) complexity\n *\n * @since 2.0.0\n *\n * @param array $pages Posts array.\n * @param int $page_id Parent page ID.\n * @return array A list arranged by hierarchy. Children immediately follow their parents.\n *\/","file":"post.php","line":3553,"missingDoc":false,"filters":[],"uses":{"intval":[3561],"_page_traverse_name":[3566]},"used_by":{"WP_Rewrite::page_uri_index":[825]}},"_page_traverse_name":{"doc":"\/**\n * function to traverse and return all the nested children post names of a root page.\n * $children contains parent-children relations\n *\n * @since 2.9.0\n *\/","file":"post.php","line":3577,"missingDoc":false,"filters":[],"uses":{"_page_traverse_name":[3581]},"used_by":{"get_page_hierarchy":[3566],"_page_traverse_name":[3581]}},"wp_check_for_changed_slugs":{"doc":"\/**\n * Checked for changed slugs for published post objects and save the old slug.\n *\n * The function is used when a post object of any type is updated,\n * by comparing the current and previous post objects.\n *\n * If the slug was changed and not already part of the old slugs then it will be\n * added to the post meta field ('_wp_old_slug') for storing old slugs for that\n * post.\n *\n * The most logically usage of this function is redirecting changed post objects, so\n * that those that linked to an changed post will be redirected to the new post.\n *\n * @since 2.1.0\n *\n * @param int $post_id Post ID.\n * @param object $post The Post Object\n * @param object $post_before The Previous Post Object\n * @return int Same as $post_id\n *\/","file":"post.php","line":4421,"missingDoc":false,"filters":[],"uses":{"is_post_type_hierarchical":[4427],"get_post_meta":[4430],"add_post_meta":[4434],"in_array":[4433,4437],"delete_post_meta":[4438]},"used_by":[]},"get_posts_by_author_sql":{"doc":"\/**\n * Retrieve the post SQL based on capability, author, and type.\n *\n * @see get_private_posts_cap_sql() for full description.\n *\n * @since 3.0.0\n * @param string $post_type Post type.\n * @param bool $full Optional. Returns a full WHERE statement instead of just an 'andalso' term.\n * @param int $post_author Optional. Query posts having a single author ID.\n * @param bool $public_only Optional. Only return public posts. Skips cap checks for $current_user.  Default is false.\n * @return string SQL WHERE code that can be added to a query.\n *\/","file":"post.php","line":4472,"missingDoc":false,"filters":["'pub_priv_sql_capability'"],"uses":{"get_post_type_object":[4476],"prepare":[4486,4488],"is_user_logged_in":[4501],"current_user_can":[4498]},"used_by":{"get_private_posts_cap_sql":[4457],"count_user_posts":[155],"count_many_users_posts":[180],"WP_User_Query::prepare_query":[424]}},"get_lastpostdate":{"doc":"\/**\n * Retrieve the date that the last post was published.\n *\n * The server timezone is the default and is the difference between GMT and\n * server time. The 'blog' value is the date when the last post was posted. The\n * 'gmt' is when the last post was posted in GMT formatted date.\n *\n * @since 0.71\n *\n * @uses apply_filters() Calls 'get_lastpostdate' filter\n *\n * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'.\n * @return string The date of the last post.\n *\/","file":"post.php","line":4531,"missingDoc":false,"filters":["'get_lastpostdate'"],"uses":{"_get_last_post_time":[4532]},"used_by":{"get_lastpostmodified":[4551]}},"_get_last_post_time":{"doc":"\/**\n * Retrieve latest post date data based on timezone.\n *\n * @access private\n * @since 3.1.0\n *\n * @param string $timezone The location to get the time. Can be 'gmt', 'blog', or 'server'.\n * @param string $field Field to check. Can be 'date' or 'modified'.\n * @return string The date.\n *\/","file":"post.php","line":4568,"missingDoc":false,"filters":[],"uses":{"in_array":[4571],"strtolower":[4574],"wp_cache_get":[4578],"date":[4581],"get_post_types":[4583],"array_walk":[4584],"implode":[4585],"get_var":[4589,4592,4595],"wp_cache_set":[4600]},"used_by":{"get_lastpostdate":[4532],"get_lastpostmodified":[4549]}},"update_post_caches":{"doc":"\/**\n * Call major cache updating functions for list of Post objects.\n *\n * @package WordPress\n * @subpackage Cache\n * @since 1.5.0\n *\n * @uses $wpdb\n * @uses update_post_cache()\n * @uses update_object_term_cache()\n * @uses update_postmeta_cache()\n *\n * @param array $posts Array of Post objects\n * @param string $post_type The post type of the posts in $posts. Default is 'post'.\n * @param bool $update_term_cache Whether to update the term cache. Default is true.\n * @param bool $update_meta_cache Whether to update the meta cache. Default is true.\n *\/","file":"post.php","line":4685,"missingDoc":false,"filters":[],"uses":{"update_post_cache":[4690],"array_unique":[4706],"is_array":[4700],"update_object_term_cache":[4712],"update_postmeta_cache":[4716]},"used_by":{"_prime_post_caches":[5559],"WP_Query::get_posts":[2782]}},"update_object_term_cache":{"doc":"\/**\n * Updates the cache for Term ID(s).\n *\n * Will only update the cache for terms not already cached.\n *\n * The $object_ids expects that the ids be separated by commas, if it is a\n * string.\n *\n * It should be noted that update_object_term_cache() is very time extensive. It\n * is advised that the function is not called very often or at least not for a\n * lot of terms that exist in a lot of taxonomies. The amount of time increases\n * for each term and it also increases for each taxonomy the term belongs to.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n * @uses wp_get_object_terms() Used to get terms from the database to update\n *\n * @param string|array $object_ids Single or list of term object ID(s)\n * @param array|string $object_type The taxonomy object type\n * @return null|bool Null value is given with empty $object_ids. False if\n *\/","file":"taxonomy.php","line":2678,"missingDoc":false,"filters":[],"uses":{"explode":[2683],"is_array":[2682],"array_map":[2685],"get_object_taxonomies":[2687],"wp_cache_get":[2692],"wp_get_object_terms":[2702],"wp_cache_add":[2720]},"used_by":{"update_post_caches":[4712]}},"update_postmeta_cache":{"doc":"\/**\n * Updates metadata cache for list of post IDs.\n *\n * Performs SQL query to retrieve the metadata for the post IDs and updates the\n * metadata cache for the posts. Therefore, the functions, which call this\n * function, do not need to perform SQL queries on their own.\n *\n * @package WordPress\n * @subpackage Cache\n * @since 2.1.0\n *\n * @uses $wpdb\n *\n * @param array $post_ids List of post IDs.\n * @return bool|array Returns false if there is nothing to update or an array of metadata.\n *\/","file":"post.php","line":4735,"missingDoc":false,"filters":[],"uses":{"update_meta_cache":[4736]},"used_by":{"update_post_caches":[4716]}},"clean_attachment_cache":{"doc":"\/**\n * Will clean the attachment in the cache.\n *\n * Cleaning means delete from the cache. Optionally will clean the term\n * object cache associated with the attachment ID.\n *\n * This function will not run if $_wp_suspend_cache_invalidation is not empty. See\n * wp_suspend_cache_invalidation().\n *\n * @package WordPress\n * @subpackage Cache\n * @since 3.0.0\n *\n * @uses do_action() Calls 'clean_attachment_cache' on $id.\n *\n * @param int $id The attachment ID in the cache to clean\n * @param bool $clean_terms optional. Whether to clean terms cache\n *\/","file":"post.php","line":4757,"missingDoc":false,"filters":["'clean_attachment_cache'"],"uses":{"wp_cache_delete":[4765,4766],"clean_object_term_cache":[4769]},"used_by":[]},"_transition_post_status":{"doc":"\/**\n * Hook for managing future post transitions to published.\n *\n * @since 2.3.0\n * @access private\n * @uses $wpdb\n * @uses do_action() Calls 'private_to_published' on post ID if this is a 'private_to_published' call.\n * @uses wp_clear_scheduled_hook() with 'publish_future_post' and post ID.\n *\n * @param string $new_status New post status\n * @param string $old_status Previous post status\n * @param object $post Object type containing the post information\n *\/","file":"post.php","line":4791,"missingDoc":false,"filters":["'private_to_published'"],"uses":{"update":[4797],"get_permalink":[4797],"get_the_guid":[4796],"wp_cache_delete":[4804,4805],"wp_clear_scheduled_hook":[4810]},"used_by":[]},"_future_post_hook":{"doc":"\/**\n * Hook used to schedule publication for a post marked for the future.\n *\n * The $post properties used and must exist are 'ID' and 'post_date_gmt'.\n *\n * @since 2.3.0\n * @access private\n *\n * @param int $deprecated Not used. Can be set to null. Never implemented.\n *   Not marked as deprecated with _deprecated_argument() as it conflicts with\n *   wp_transition_post_status() and the default filter for _future_post_hook().\n * @param object $post Object type containing the post information\n *\/","file":"post.php","line":4826,"missingDoc":false,"filters":[],"uses":{"wp_clear_scheduled_hook":[4827],"wp_schedule_single_event":[4828],"strtotime":[4828],"get_gmt_from_date":[4828]},"used_by":[]},"_publish_post_hook":{"doc":"\/**\n * Hook to schedule pings and enclosures when a post is published.\n *\n * @since 2.3.0\n * @access private\n * @uses $wpdb\n * @uses XMLRPC_REQUEST constant.\n * @uses do_action() Calls 'xmlprc_publish_post' on post ID if XMLRPC_REQUEST is defined.\n *\n * @param int $post_id The ID in the database table of the post being published\n *\/","file":"post.php","line":4842,"missingDoc":false,"filters":["'xmlrpc_publish_post'"],"uses":{"defined":[4845,4848],"add_post_meta":[4852,4853],"get_option":[4851],"wp_schedule_single_event":[4855],"time":[4855]},"used_by":[]},"_wp_post_revision_fields":{"doc":"\/**\n * Determines which fields of posts are to be saved in revisions.\n *\n * Does two things. If passed a post *array*, it will return a post array ready\n * to be inserted into the posts table as a post revision. Otherwise, returns\n * an array whose keys are the post fields to be saved for post revisions.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n * @access private\n * @uses apply_filters() Calls '_wp_post_revision_fields' on 'title', 'content' and 'excerpt' fields.\n *\n * @param array $post Optional a post array to be processed for insertion as a post revision.\n * @param bool $autosave optional Is the revision an autosave?\n * @return array Post array ready to be inserted as a post revision or array of fields that can be versioned.\n *\/","file":"post.php","line":4875,"missingDoc":false,"filters":["'_wp_post_revision_fields'"],"uses":{"__":[4881,4882,4883],"is_array":[4894],"array_intersect":[4898],"array_keys":[4898,4898]},"used_by":{"_wp_put_post_revision":[5078],"wp_restore_post_revision":[5147]}},"wp_save_post_revision":{"doc":"\/**\n * Saves an already existing post as a post revision.\n *\n * Typically used immediately prior to post updates.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @uses _wp_put_post_revision()\n *\n * @param int $post_id The ID of the post to save as a revision.\n * @return mixed Null or 0 if error, new revision ID, if success.\n *\/","file":"post.php","line":4925,"missingDoc":false,"filters":[],"uses":{"defined":[4927],"get_post":[4934],"post_type_supports":[4940],"_wp_put_post_revision":[4943],"is_numeric":[4946],"wp_get_post_revisions":[4950],"count":[4953],"array_slice":[4958],"strpos":[4961],"wp_delete_post_revision":[4963]},"used_by":[]},"_wp_put_post_revision":{"doc":"\/**\n * Inserts post data into the posts table as a post revision.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @uses wp_insert_post()\n *\n * @param int|object|array $post Post ID, post object OR post array.\n * @param bool $autosave Optional. Is the revision an autosave?\n * @return mixed Null or 0 if error, new revision ID if success.\n *\/","file":"post.php","line":5067,"missingDoc":false,"filters":["'_wp_put_post_revision'"],"uses":{"get_object_vars":[5069],"is_array":[5070],"get_post":[5071],"is_object":[5068],"__":[5076],"_wp_post_revision_fields":[5078],"add_magic_quotes":[5079],"wp_insert_post":[5081],"is_wp_error":[5082]},"used_by":{"wp_save_post_revision":[4943]}},"_wp_get_post_autosave_hack":{"doc":"\/**\n * Internally used to hack WP_Query into submission.\n *\n * @package WordPress\n * @subpackage Post_Revisions\n * @since 2.6.0\n *\n * @param object $query WP_Query object\n *\/","file":"post.php","line":5016,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"_set_preview":{"doc":"","file":"post.php","line":5226,"missingDoc":true,"filters":[],"uses":{"is_object":[5228,5233],"wp_get_post_autosave":[5231],"sanitize_post":[5236]},"used_by":[]},"_show_post_preview":{"doc":"","file":"post.php","line":5245,"missingDoc":true,"filters":[],"uses":{"wp_die":[5251],"__":[5251],"wp_verify_nonce":[5250],"add_filter":[5253]},"used_by":[]},"wp_get_post_parent_id":{"doc":"\/**\n * Returns the post's parent's post_ID\n *\n * @since 3.1.0\n *\n * @param int $post_id\n *\n * @return int|bool false on error\n *\/","file":"post.php","line":5266,"missingDoc":false,"filters":[],"uses":{"get_post":[5267],"is_wp_error":[5268]},"used_by":[]},"wp_check_post_hierarchy_for_loops":{"doc":"\/**\n * Checks the given subset of the post hierarchy for hierarchy loops.\n * Prevents loops from forming and breaks those that it finds.\n *\n * Attached to the wp_insert_post_parent filter.\n *\n * @since 3.1.0\n * @uses wp_find_hierarchy_loop()\n *\n * @param int $post_parent ID of the parent for the post we're checking.\n * @param int $post_ID ID of the post we're checking.\n *\n * @return int The new post_parent for the post.\n *\/","file":"post.php","line":5287,"missingDoc":false,"filters":[],"uses":{"wp_find_hierarchy_loop":[5302],"wp_update_post":[5311],"array_keys":[5310]},"used_by":[]},"get_post_format_string":{"doc":"\/**\n * Returns a pretty, translated version of a post format slug\n *\n * @since 3.1.0\n *\n * @param string $slug A post format slug\n * @return string The translated post format name\n *\/","file":"post.php","line":5359,"missingDoc":false,"filters":[],"uses":{"get_post_format_strings":[5360]},"used_by":{"_post_format_get_term":[5478],"_post_format_get_terms":[5494,5499],"_post_format_wp_get_object_terms":[5517]}},"get_post_format_link":{"doc":"\/**\n * Returns a link to a post format index.\n *\n * @since 3.1.0\n *\n * @param string $format Post format\n * @return string Link\n *\/","file":"post.php","line":5411,"missingDoc":false,"filters":[],"uses":{"get_term_by":[5412],"is_wp_error":[5413],"get_term_link":[5415]},"used_by":[]},"wp_delete_auto_drafts":{"doc":"\/**\n * Deletes auto-drafts for new posts that are > 7 days old\n *\n * @since 3.4.0\n *\/","file":"post.php","line":5423,"missingDoc":false,"filters":[],"uses":{"get_col":[5427],"wp_delete_post":[5429]},"used_by":[]},"_post_format_request":{"doc":"\/**\n * Filters the request to allow for the format prefix.\n *\n * @access private\n * @since 3.1.0\n *\/","file":"post.php","line":5438,"missingDoc":false,"filters":[],"uses":{"get_post_format_slugs":[5441],"get_taxonomy":[5444],"is_admin":[5445]},"used_by":[]},"_post_format_link":{"doc":"\/**\n * Filters the post format term link to remove the format prefix.\n *\n * @access private\n * @since 3.1.0\n *\/","file":"post.php","line":5457,"missingDoc":false,"filters":[],"uses":{"str_replace":[5462,5462,5465],"remove_query_arg":[5464],"add_query_arg":[5465],"get_extra_permastruct":[5461]},"used_by":[]},"_post_format_get_term":{"doc":"\/**\n * Remove the post format prefix from the name property of the term object created by get_term().\n *\n * @access private\n * @since 3.1.0\n *\/","file":"post.php","line":5476,"missingDoc":false,"filters":[],"uses":{"get_post_format_string":[5478],"str_replace":[5478]},"used_by":[]},"_post_format_get_terms":{"doc":"\/**\n * Remove the post format prefix from the name property of the term objects created by get_terms().\n *\n * @access private\n * @since 3.1.0\n *\/","file":"post.php","line":5490,"missingDoc":false,"filters":[],"uses":{"get_post_format_string":[5494,5499],"str_replace":[5494,5499],"in_array":[5491]},"used_by":[]},"_post_format_wp_get_object_terms":{"doc":"\/**\n * Remove the post format prefix from the name property of the term objects created by wp_get_object_terms().\n *\n * @access private\n * @since 3.1.0\n *\/","file":"post.php","line":5514,"missingDoc":false,"filters":[],"uses":{"get_post_format_string":[5517],"str_replace":[5517]},"used_by":[]},"_update_term_count_on_transition_post_status":{"doc":"\/**\n * Update the custom taxonomies' term counts when a post's status is changed. For example, default posts term counts (for custom taxonomies) don't include private \/ draft posts.\n *\n * @access private\n * @param string $new_status\n * @param string $old_status\n * @param object $post\n * @since 3.3.0\n *\/","file":"post.php","line":5533,"missingDoc":false,"filters":[],"uses":{"wp_get_object_terms":[5536],"wp_update_term_count":[5537],"get_object_taxonomies":[5535]},"used_by":[]},"wp_update_term_count":{"doc":"\/**\n * Updates the amount of terms in taxonomy.\n *\n * If there is a taxonomy callback applied, then it will be called for updating\n * the count.\n *\n * The default action is to count what the amount of terms have the relationship\n * of term ID. Once that is done, then update the database.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n * @uses $wpdb\n *\n * @param int|array $terms The term_taxonomy_id of the terms\n * @param string $taxonomy The context of the term.\n * @return bool If no terms will return false, and if successful will return true.\n *\/","file":"taxonomy.php","line":2479,"missingDoc":false,"filters":[],"uses":{"wp_update_term_count_now":[2484,2502],"array_keys":[2483],"is_array":[2492],"array_unique":[2498],"array_merge":[2498],"wp_defer_term_counting":[2495]},"used_by":{"_update_term_count_on_transition_post_status":[5537],"wp_delete_object_term_relationships":[1734],"wp_set_object_terms":[2215,2224],"wp_defer_term_counting":[2455]}},"wp_reset_query":{"doc":"\/**\n * Destroy the previous query and set up a new query.\n *\n * This should be used after {@link query_posts()} and before another {@link\n * query_posts()}. This will remove obscure bugs that occur when the previous\n * wp_query object is not destroyed properly before another is set up.\n *\n * @since 2.3.0\n * @uses $wp_query\n *\/","file":"query.php","line":104,"missingDoc":false,"filters":[],"uses":{"wp_reset_postdata":[106]},"used_by":[]},"is_comment_feed":{"doc":"\/**\n * Is the query for a comments feed?\n *\n * @see WP_Query::is_comments_feed()\n * @since 3.0.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":382,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[386],"__":[386],"is_comment_feed":[390]},"used_by":{"is_comment_feed":[390]}},"is_time":{"doc":"\/**\n * Is the query for a specific time?\n *\n * @see WP_Query::is_time()\n * @since 1.5.0\n * @uses $wp_query\n *\n * @return bool\n *\/","file":"query.php","line":644,"missingDoc":false,"filters":[],"uses":{"_doing_it_wrong":[648],"__":[648],"is_time":[652]},"used_by":{"is_time":[652]}},"is_main_query":{"doc":"\/**\n * Is the query the main query?\n *\n * @since 3.3.0\n *\n * @return bool\n *\/","file":"query.php","line":722,"missingDoc":false,"filters":[],"uses":{"is_main_query":[724]},"used_by":{"is_main_query":[724],"WP_Query::get_posts":[2185]}},"WP_Query::init_query_flags":{"doc":"\/**\n * Resets query flags to false.\n *\n * The query flags are what page info WordPress was able to figure out.\n *\n * @since 2.0.0\n * @access private\n *\/","file":"query.php","line":1288,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::init":{"doc":"\/**\n * Initiates object properties and sets default values.\n *\n * @since 1.5.0\n * @access public\n *\/","file":"query.php","line":1324,"missingDoc":false,"filters":[],"uses":{"init_query_flags":[1343]},"used_by":[]},"WP_Query::parse_query_vars":{"doc":"\/**\n * Reparse the query vars.\n *\n * @since 1.5.0\n * @access public\n *\/","file":"query.php","line":1352,"missingDoc":false,"filters":[],"uses":{"parse_query":[1353]},"used_by":[]},"WP_Query::fill_query_vars":{"doc":"\/**\n * Fills in the query variables, which do not exist within the parameter.\n *\n * @since 2.1.0\n * @access public\n *\n * @param array $array Defined query variables.\n * @return array Complete query variables with undefined ones filled in empty.\n *\/","file":"query.php","line":1365,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::parse_query":{"doc":"\/**\n * Parse a query string and set query type booleans.\n *\n * @since 1.5.0\n * @access public\n *\n * @param string|array $query Optional query.\n *\/","file":"query.php","line":1427,"missingDoc":false,"filters":["'parse_query'"],"uses":{"init":[1429],"wp_parse_args":[1430,1612],"fill_query_vars":[1435],"absint":[1442,1443,1444,1445,1446,1447,1448,1449,1453,1454,1455,1456,1464],"preg_replace":[1450,1661],"trim":[1451,1452],"strlen":[1529,1527,1525],"parse_tax_query":[1541],"get_post_type_object":[1569],"is_array":[1568,1651,1658],"intval":[1584],"is_admin":[1594],"str_replace":[1598],"strpos":[1597],"get_option":[1619,1611,1611,1635,1635,1643,1643],"array_diff":[1616],"array_keys":[1616],"get_page_by_path":[1629],"array_map":[1652,1659],"sanitize_key":[1654],"set_404":[1671],"md5":[1673],"serialize":[1673]},"used_by":[]},"WP_Query::parse_tax_query":{"doc":"","file":"query.php","line":1687,"missingDoc":true,"filters":[],"uses":{"is_array":[1688],"wp_basename":[1713],"preg_split":[1719,1727,1737,1790,1796],"array_merge":[1721,1726,1747,1750],"strpos":[1718,1789],"urldecode":[1735],"addslashes_gpc":[1736],"intval":[1741],"abs":[1744],"get_term_children":[1747,1750],"implode":[1753],"array_map":[1757,1767,1777,1816,1824,1833,1842,1851],"array_unique":[1757,1767,1777,1816,1824,1833,1842,1851],"sanitize_term_field":[1792,1798,1802],"preg_match":[1795],"absint":[1808]},"used_by":[]},"get_term_children":{"doc":"\/**\n * Merge all term children into a single array of their IDs.\n *\n * This recursive function will merge all of the children of $term into the same\n * array of term IDs. Only useful for taxonomies which are hierarchical.\n *\n * Will return an empty array if $term does not exist in $taxonomy.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses $wpdb\n * @uses _get_term_hierarchy()\n * @uses get_term_children() Used to get the children of both $taxonomy and the parent $term\n *\n * @param string $term_id ID of Term to get children\n * @param string $taxonomy Taxonomy Name\n * @return array|WP_Error List of Term Objects. WP_Error returned if $taxonomy does not exist\n *\/","file":"taxonomy.php","line":1007,"missingDoc":false,"filters":[],"uses":{"__":[1009],"taxonomy_exists":[1008],"intval":[1011],"_get_term_hierarchy":[1013],"array_merge":[1022],"get_term_children":[1022]},"used_by":{"WP_Query::parse_tax_query":[1747,1750],"WP_Tax_Query::clean_query":[762],"get_term_children":[1022]}},"WP_Query::set_404":{"doc":"\/**\n * Sets the 404 property and saves whether query is feed.\n *\n * @since 2.0.0\n * @access public\n *\/","file":"query.php","line":1869,"missingDoc":false,"filters":[],"uses":{"init_query_flags":[1872]},"used_by":[]},"WP_Query::get":{"doc":"\/**\n * Retrieve query variable.\n *\n * @since 1.5.0\n * @access public\n *\n * @param string $query_var Query variable key.\n * @return mixed\n *\/","file":"query.php","line":1887,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::set":{"doc":"\/**\n * Set query variable.\n *\n * @since 1.5.0\n * @access public\n *\n * @param string $query_var Query variable key.\n * @param mixed $value Query variable value.\n *\/","file":"query.php","line":1903,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::get_posts":{"doc":"\/**\n * Retrieve the posts based on query variables.\n *\n * There are a few filters and actions that can be used to modify the post\n * database query.\n *\n * @since 1.5.0\n * @access public\n * @uses do_action_ref_array() Calls 'pre_get_posts' hook before retrieving posts.\n *\n * @return array List of posts.\n *\/","file":"query.php","line":1919,"missingDoc":false,"filters":["'pre_get_posts'","'posts_selection'","'split_the_query'","'posts_request_ids'"],"uses":{"parse_query":[1922],"fill_query_vars":[1930],"parse_query_vars":[1934],"md5":[1937],"serialize":[1937],"_deprecated_argument":[1958],"__":[1958],"get_option":[1990,2005,2015,2020,2017,2017,2131,2132,2175,2175,2559,2692,2731],"abs":[2010],"trim":[2024],"absint":[2025,2154,2158,2298,2306,2326,2529,2536],"preg_replace":[2050],"substr":[2051,2053,2055,2057,2059,2061],"strlen":[2052,2054,2056,2058,2060],"get_post_type_object":[2085,2113,2400,2413,2416,2419,2422],"strpos":[2089,2294,2314],"sanitize_title_for_query":[2105,2133,2145,2322],"get_page_by_path":[2117,2123],"wp_basename":[2133,2145],"get_post":[2136,2727],"is_object":[2137],"_wp_mysql_week":[2151],"intval":[2153],"implode":[2164,2167,2307,2389],"array_map":[2164,2167,2191,2679,2779],"prepare":[2172],"is_numeric":[2171],"stripslashes":[2184],"urldecode":[2186,2292,2354],"is_main_query":[2185],"preg_match_all":[2190],"esc_sql":[2196],"like_escape":[2196],"is_user_logged_in":[2203,2504,2704],"apply_filters_ref_array":[2209,2523,2524,2555,2556,2557,2558,2559,2585,2586,2587,2588,2589,2590,2591,2594,2604,2605,2606,2607,2608,2609,2610,2613,2630,2683,2686,2687,2688,2690,2692,2727,2772],"parse_tax_query":[2213],"get_sql":[2215,2515],"wp_list_pluck":[2225],"get_taxonomies_for_attachments":[2227],"get_object_taxonomies":[2227],"array_intersect":[2228],"get_post_types":[2226,2406],"in_array":[2235,2246,2360,2450,2445,2737],"wp_list_filter":[2242,2258,2270],"reset":[2260,2272,2784],"get_term_by":[2261,2273],"set":[2263,2264,2275],"addslashes_gpc":[2293,2355],"explode":[2297,2315,2358,2441],"preg_split":[2303],"count":[2317,2319,2316,2565,2635,2643,2695,2733,2777],"get_user_by":[2323],"wp_post_mime_type_where":[2332],"strtoupper":[2336,2336],"is_array":[2397,2409,2440,2732],"join":[2408,2410,2465,2469,2471,2475,2477,2572],"get_post_stati":[2446,2449,2490,2499,2506],"array_merge":[2460],"current_user_can":[2468,2474,2508,2710,2718,2726],"str_replace":[2482],"get_results":[2564,2642,2673,2694],"compact":[2594,2613],"get_col":[2634,2663],"set_found_posts":[2636,2644,2667,2674],"_prime_post_caches":[2668],"get_post_status":[2700],"get_post_status_object":[2701],"current_time":[2715],"array_splice":[2740,2742,2765],"array_search":[2746],"array_diff":[2753],"get_posts":[2757],"update_post_caches":[2782]},"used_by":[]},"WP_Query::set_found_posts":{"doc":"\/**\n * Set up the amount of found posts and the number of pages (if limit clause was used)\n * for the current query.\n *\n * @since 3.5.0\n * @access private\n *\/","file":"query.php","line":2800,"missingDoc":false,"filters":[],"uses":{"is_array":[2805],"get_var":[2809],"apply_filters_ref_array":[2809,2813],"count":[2811],"ceil":[2816]},"used_by":[]},"WP_Query::next_post":{"doc":"\/**\n * Set up the next post and iterate current post index.\n *\n * @since 1.5.0\n * @access public\n *\n * @return WP_Post Next post.\n *\/","file":"query.php","line":2827,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::the_post":{"doc":"\/**\n * Sets up the current post.\n *\n * Retrieves the next post, sets up the post, sets the 'in the loop'\n * property to true.\n *\n * @since 1.5.0\n * @access public\n * @uses $post\n * @uses do_action_ref_array() Calls 'loop_start' if loop has just started\n *\/","file":"query.php","line":2846,"missingDoc":false,"filters":["'loop_start'"],"uses":{"next_post":[2853],"setup_postdata":[2854]},"used_by":[]},"WP_Query::have_posts":{"doc":"\/**\n * Whether there are more posts available in the loop.\n *\n * Calls action 'loop_end', when the loop is complete.\n *\n * @since 1.5.0\n * @access public\n * @uses do_action_ref_array() Calls 'loop_end' if loop is ended\n *\n * @return bool True if posts are available, false if end of loop.\n *\/","file":"query.php","line":2868,"missingDoc":false,"filters":["'loop_end'"],"uses":{"rewind_posts":[2874]},"used_by":[]},"WP_Query::rewind_posts":{"doc":"\/**\n * Rewind the posts and reset post index.\n *\n * @since 1.5.0\n * @access public\n *\/","file":"query.php","line":2887,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::next_comment":{"doc":"\/**\n * Iterate current comment index and return comment object.\n *\n * @since 2.2.0\n * @access public\n *\n * @return object Comment object.\n *\/","file":"query.php","line":2902,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::the_comment":{"doc":"\/**\n * Sets up the current comment.\n *\n * @since 2.2.0\n * @access public\n * @global object $comment Current comment.\n * @uses do_action() Calls 'comment_loop_start' hook when first comment is processed.\n *\/","file":"query.php","line":2917,"missingDoc":false,"filters":["'comment_loop_start'"],"uses":{"next_comment":[2920]},"used_by":[]},"WP_Query::have_comments":{"doc":"\/**\n * Whether there are more comments available.\n *\n * Automatically rewinds comments when finished.\n *\n * @since 2.2.0\n * @access public\n *\n * @return bool True, if more comments. False, if no more posts.\n *\/","file":"query.php","line":2937,"missingDoc":false,"filters":[],"uses":{"rewind_comments":[2941]},"used_by":[]},"WP_Query::rewind_comments":{"doc":"\/**\n * Rewind the comments, resets the comment index and comment to first.\n *\n * @since 2.2.0\n * @access public\n *\/","file":"query.php","line":2953,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::query":{"doc":"\/**\n * Sets up the WordPress query by parsing query string.\n *\n * @since 1.5.0\n * @access public\n *\n * @param string $query URL query string.\n * @return array List of posts.\n *\/","file":"query.php","line":2969,"missingDoc":false,"filters":[],"uses":{"init":[2970],"wp_parse_args":[2971],"get_posts":[2972]},"used_by":[]},"WP_Query::get_queried_object":{"doc":"\/**\n * Retrieve queried object.\n *\n * If queried object is not set, then the queried object will be set from\n * the category, tag, taxonomy, posts page, single post, page, or author\n * query variable. After it is set up, it will be returned.\n *\n * @since 1.5.0\n * @access public\n *\n * @return object\n *\/","file":"query.php","line":2987,"missingDoc":false,"filters":[],"uses":{"wp_list_filter":[2995],"reset":[2997,3000,3002],"get_term":[3000],"get_term_by":[3002],"_make_cat_compat":[3009],"is_wp_error":[3004],"get_post_type_object":[3012],"get":[3012,3021],"get_option":[3014],"get_post":[3015],"is_null":[3017],"get_userdata":[3022]},"used_by":[]},"WP_Query::get_queried_object_id":{"doc":"\/**\n * Retrieve ID of the current queried object.\n *\n * @since 1.5.0\n * @access public\n *\n * @return int\n *\/","file":"query.php","line":3036,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[3037]},"used_by":[]},"WP_Query::__construct":{"doc":"\/**\n * Constructor.\n *\n * Sets up the WordPress query, if parameter is not empty.\n *\n * @since 1.5.0\n * @access public\n *\n * @param string $query URL query string.\n * @return WP_Query\n *\/","file":"query.php","line":3057,"missingDoc":false,"filters":[],"uses":{"query":[3059]},"used_by":[]},"WP_Query::is_archive":{"doc":"\/**\n * Is the query for an existing archive page?\n *\n * Month, Year, Category, Author, Post Type archive...\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3072,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_post_type_archive":{"doc":"\/**\n * Is the query for an existing post type archive page?\n *\n * @since 3.1.0\n *\n * @param mixed $post_types Optional. Post type or array of posts types to check against.\n * @return bool\n *\/","file":"query.php","line":3084,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[3088],"in_array":[3090]},"used_by":[]},"WP_Query::is_attachment":{"doc":"\/**\n * Is the query for an existing attachment page?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3100,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_author":{"doc":"\/**\n * Is the query for an existing author archive page?\n *\n * If the $author parameter is specified, this function will additionally\n * check if the query is for one of the authors specified.\n *\n * @since 3.1.0\n *\n * @param mixed $author Optional. User ID, nickname, nicename, or array of User IDs, nicknames, and nicenames\n * @return bool\n *\/","file":"query.php","line":3115,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[3122],"in_array":[3128,3130,3126]},"used_by":[]},"WP_Query::is_category":{"doc":"\/**\n * Is the query for an existing category archive page?\n *\n * If the $category parameter is specified, this function will additionally\n * check if the query is for one of the categories specified.\n *\n * @since 3.1.0\n *\n * @param mixed $category Optional. Category ID, name, slug, or array of Category IDs, names, and slugs.\n * @return bool\n *\/","file":"query.php","line":3147,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[3154],"in_array":[3160,3162,3158]},"used_by":[]},"WP_Query::is_tag":{"doc":"\/**\n * Is the query for an existing tag archive page?\n *\n * If the $tag parameter is specified, this function will additionally\n * check if the query is for one of the tags specified.\n *\n * @since 3.1.0\n *\n * @param mixed $slug Optional. Tag slug or array of slugs.\n * @return bool\n *\/","file":"query.php","line":3179,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[3186],"in_array":[3190]},"used_by":[]},"WP_Query::is_tax":{"doc":"\/**\n * Is the query for an existing taxonomy archive page?\n *\n * If the $taxonomy parameter is specified, this function will additionally\n * check if the query is for that specific $taxonomy.\n *\n * If the $term parameter is specified in addition to the $taxonomy parameter,\n * this function will additionally check if the query is for one of the terms\n * specified.\n *\n * @since 3.1.0\n *\n * @param mixed $taxonomy Optional. Taxonomy slug or slugs.\n * @param mixed $term. Optional. Term ID, name, slug or array of Term IDs, names, and slugs.\n * @return bool\n *\/","file":"query.php","line":3212,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[3221],"array_intersect":[3222,3234],"array_keys":[3222],"count":[3226,3234],"in_array":[3226]},"used_by":[]},"WP_Query::is_comments_popup":{"doc":"\/**\n * Whether the current URL is within the comments popup window.\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3247,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_date":{"doc":"\/**\n * Is the query for an existing date archive?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3258,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_day":{"doc":"\/**\n * Is the query for an existing day archive?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3269,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_feed":{"doc":"\/**\n * Is the query for a feed?\n *\n * @since 3.1.0\n *\n * @param string|array $feeds Optional feed types to check.\n * @return bool\n *\/","file":"query.php","line":3281,"missingDoc":false,"filters":[],"uses":{"get":[3284],"get_default_feed":[3286],"in_array":[3287]},"used_by":[]},"WP_Query::is_comment_feed":{"doc":"\/**\n * Is the query for a comments feed?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3297,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_front_page":{"doc":"\/**\n * Is the query for the front page of the site?\n *\n * This is for what is displayed at your site's main URL.\n *\n * Depends on the site's \"Front page displays\" Reading Settings 'show_on_front' and 'page_on_front'.\n *\n * If you set a static page for the front page of your site, this function will return\n * true when viewing that page.\n *\n * Otherwise the same as @see WP_Query::is_home()\n *\n * @since 3.1.0\n * @uses is_home()\n * @uses get_option()\n *\n * @return bool True, if front of site.\n *\/","file":"query.php","line":3319,"missingDoc":false,"filters":[],"uses":{"get_option":[3323,3323,3323,3321],"is_page":[3323],"is_home":[3321]},"used_by":[]},"WP_Query::is_home":{"doc":"\/**\n * Is the query for the blog homepage?\n *\n * This is the page which shows the time based blog content of your site.\n *\n * Depends on the site's \"Front page displays\" Reading Settings 'show_on_front' and 'page_for_posts'.\n *\n * If you set a static page for the front page of your site, this function will return\n * true only on the page you set as the \"Posts page\".\n *\n * @see WP_Query::is_front_page()\n *\n * @since 3.1.0\n *\n * @return bool True if blog view homepage.\n *\/","file":"query.php","line":3345,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_month":{"doc":"\/**\n * Is the query for an existing month archive?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3356,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_page":{"doc":"\/**\n * Is the query for an existing single page?\n *\n * If the $page parameter is specified, this function will additionally\n * check if the query is for one of the pages specified.\n *\n * @see WP_Query::is_single()\n * @see WP_Query::is_singular()\n *\n * @since 3.1.0\n *\n * @param mixed $page Page ID, title, slug, or array of such.\n * @return bool\n *\/","file":"query.php","line":3374,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[3381],"in_array":[3387,3389,3385]},"used_by":[]},"WP_Query::is_paged":{"doc":"\/**\n * Is the query for paged result and not for the first page?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3402,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_preview":{"doc":"\/**\n * Is the query for a post or page preview?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3413,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_robots":{"doc":"\/**\n * Is the query for the robots file?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3424,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_search":{"doc":"\/**\n * Is the query for a search?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3435,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_single":{"doc":"\/**\n * Is the query for an existing single post?\n *\n * Works for any post type, except attachments and pages\n *\n * If the $post parameter is specified, this function will additionally\n * check if the query is for one of the Posts specified.\n *\n * @see WP_Query::is_page()\n * @see WP_Query::is_singular()\n *\n * @since 3.1.0\n *\n * @param mixed $post Post ID, title, slug, or array of such.\n * @return bool\n *\/","file":"query.php","line":3455,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[3462],"in_array":[3468,3470,3466]},"used_by":[]},"WP_Query::is_singular":{"doc":"\/**\n * Is the query for an existing single post of any post type (post, attachment, page, ... )?\n *\n * If the $post_types parameter is specified, this function will additionally\n * check if the query is for one of the Posts Types specified.\n *\n * @see WP_Query::is_page()\n * @see WP_Query::is_single()\n *\n * @since 3.1.0\n *\n * @param mixed $post_types Optional. Post Type or array of Post Types\n * @return bool\n *\/","file":"query.php","line":3490,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[3494],"in_array":[3496]},"used_by":[]},"WP_Query::is_time":{"doc":"\/**\n * Is the query for a specific time?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3506,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_trackback":{"doc":"\/**\n * Is the query for a trackback endpoint call?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3517,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_year":{"doc":"\/**\n * Is the query for an existing year archive?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3528,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_404":{"doc":"\/**\n * Is the query a 404 (returns no results)?\n *\n * @since 3.1.0\n *\n * @return bool\n *\/","file":"query.php","line":3539,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Query::is_main_query":{"doc":"\/**\n * Is the query the main query?\n *\n * @since 3.3.0\n *\n * @return bool\n *\/","file":"query.php","line":3550,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wp_old_slug_redirect":{"doc":"\/**\n * Redirect old slugs to the correct permalink.\n *\n * Attempts to find the current slug from the past slugs.\n *\n * @since 2.1.0\n * @uses $wp_query\n * @uses $wpdb\n *\n * @return null If no link is found, null is returned.\n *\/","file":"query.php","line":3567,"missingDoc":false,"filters":[],"uses":{"get_query_var":[3574,3573],"count":[3581],"array_shift":[3583],"is_array":[3580],"is_post_type_hierarchical":[3587],"prepare":[3590,3595,3597,3599],"get_var":[3601],"get_permalink":[3606],"wp_redirect":[3611],"is_404":[3569]},"used_by":[]},"add_feed":{"doc":"\/**\n * Add a new feed type like \/atom1\/.\n *\n * @since 2.1.0\n *\n * @param string $feedname\n * @param callback $function Callback to run on feed display.\n * @return string Feed action name.\n *\/","file":"rewrite.php","line":86,"missingDoc":false,"filters":[],"uses":{"in_array":[88],"remove_action":[92],"add_action":[93]},"used_by":[]},"flush_rewrite_rules":{"doc":"\/**\n * Remove rewrite rules and then recreate rewrite rules.\n *\n * @see WP_Rewrite::flush_rules()\n * @since 3.0.0\n *\n * @param bool $hard Whether to update .htaccess (hard flush) or just update\n * \trewrite_rules transient (soft flush). Default is true (hard).\n *\/","file":"rewrite.php","line":106,"missingDoc":false,"filters":[],"uses":{"flush_rules":[108]},"used_by":[]},"add_rewrite_endpoint":{"doc":"\/**\n * Add an endpoint, like \/trackback\/.\n *\n * Adding an endpoint creates extra rewrite rules for each of the matching\n * places specified by the provided bitmask. For example:\n *\n * <code>\n * add_rewrite_endpoint( 'json', EP_PERMALINK | EP_PAGES );\n * <\/code>\n *\n * will add a new rewrite rule ending with \"json(\/(.*))?\/?$\" for every permastruct\n * that describes a permalink (post) or page. This is rewritten to \"json=$match\"\n * where $match is the part of the URL matched by the endpoint regex (e.g. \"foo\" in\n * \"<permalink>\/json\/foo\/\").\n *\n * A new query var with the same name as the endpoint will also be created.\n *\n * When specifying $places ensure that you are using the EP_* constants (or a\n * combination of them using the bitwise OR operator) as their values are not\n * guaranteed to remain static (especially EP_ALL).\n *\n * Be sure to flush the rewrite rules - flush_rewrite_rules() - when your plugin gets\n * activated and deactivated.\n *\n * @since 2.1.0\n * @see WP_Rewrite::add_endpoint()\n * @global object $wp_rewrite\n *\n * @param string $name Name of the endpoint.\n * @param int $places Endpoint mask describing the places the endpoint should be added.\n *\/","file":"rewrite.php","line":247,"missingDoc":false,"filters":[],"uses":{"add_endpoint":[249]},"used_by":[]},"_wp_filter_taxonomy_base":{"doc":"\/**\n * Filter the URL base for taxonomies.\n *\n * To remove any manually prepended \/index.php\/.\n *\n * @access private\n * @since 2.6.0\n *\n * @param string $base The taxonomy base that we're going to filter\n * @return string\n *\/","file":"rewrite.php","line":263,"missingDoc":false,"filters":[],"uses":{"preg_replace":[265],"trim":[266]},"used_by":[]},"WP_Rewrite::using_permalinks":{"doc":"\/**\n * Whether permalinks are being used.\n *\n * This can be either rewrite module or permalink in the HTTP query string.\n *\n * @since 1.5.0\n * @access public\n *\n * @return bool True, if permalinks are enabled.\n *\/","file":"rewrite.php","line":740,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Rewrite::using_index_permalinks":{"doc":"\/**\n * Whether permalinks are being used and rewrite module is not enabled.\n *\n * Means that permalink links are enabled and index.php is in the URL.\n *\n * @since 1.5.0\n * @access public\n *\n * @return bool\n *\/","file":"rewrite.php","line":754,"missingDoc":false,"filters":[],"uses":{"preg_match":[759]},"used_by":[]},"WP_Rewrite::using_mod_rewrite_permalinks":{"doc":"\/**\n * Whether permalinks are being used and rewrite module is enabled.\n *\n * Using permalinks and index.php is not in the URL.\n *\n * @since 1.5.0\n * @access public\n *\n * @return bool\n *\/","file":"rewrite.php","line":775,"missingDoc":false,"filters":[],"uses":{"using_permalinks":[776],"using_index_permalinks":[776]},"used_by":[]},"WP_Rewrite::preg_index":{"doc":"\/**\n * Index for matches for usage in preg_*() functions.\n *\n * The format of the string is, with empty matches property value, '$NUM'.\n * The 'NUM' will be replaced with the value in the $number parameter. With\n * the matches property not empty, the value of the returned string will\n * contain that value of the matches property. The format then will be\n * '$MATCHES[NUM]', with MATCHES as the value in the property and NUM the\n * value of the $number parameter.\n *\n * @since 1.5.0\n * @access public\n *\n * @param int $number Index number.\n * @return string\n *\/","file":"rewrite.php","line":798,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Rewrite::page_uri_index":{"doc":"\/**\n * Retrieve all page and attachments for pages URIs.\n *\n * The attachments are for those that have pages as parents and will be\n * retrieved.\n *\n * @since 2.5.0\n * @access public\n *\n * @return array Array of page URIs as first element and attachment URIs as second element.\n *\/","file":"rewrite.php","line":821,"missingDoc":false,"filters":[],"uses":{"get_page_hierarchy":[825],"get_results":[825,840],"array_reverse":[832],"get_page_uri":[839,843],"prepare":[840]},"used_by":[]},"WP_Rewrite::page_rewrite_rules":{"doc":"\/**\n * Retrieve all of the rewrite rules for pages.\n *\n * @since 1.5.0\n * @access public\n *\n * @return array\n *\/","file":"rewrite.php","line":862,"missingDoc":false,"filters":[],"uses":{"add_rewrite_tag":[864],"generate_rewrite_rules":[866],"get_page_permastruct":[866]},"used_by":[]},"WP_Rewrite::get_date_permastruct":{"doc":"\/**\n * Retrieve date permalink structure, with year, month, and day.\n *\n * The permalink structure for the date, if not set already depends on the\n * permalink structure. It can be one of three formats. The first is year,\n * month, day; the second is day, month, year; and the last format is month,\n * day, year. These are matched against the permalink structure for which\n * one is used. If none matches, then the default will be used, which is\n * year, month, day.\n *\n * Prevents post ID and date permalinks from overlapping. In the case of\n * post_id, the date permalink will be prepended with front permalink with\n * 'date\/' before the actual permalink to form the complete date permalink\n * structure.\n *\n * @since 1.5.0\n * @access public\n *\n * @return bool|string False on no permalink structure. Date permalink structure.\n *\/","file":"rewrite.php","line":889,"missingDoc":false,"filters":[],"uses":{"strpos":[905],"preg_match_all":[917]},"used_by":[]},"WP_Rewrite::get_year_permastruct":{"doc":"\/**\n * Retrieve the year permalink structure without month and day.\n *\n * Gets the date permalink structure and strips out the month and day\n * permalink structures.\n *\n * @since 1.5.0\n * @access public\n *\n * @return bool|string False on failure. Year structure on success.\n *\/","file":"rewrite.php","line":943,"missingDoc":false,"filters":[],"uses":{"get_date_permastruct":[944],"str_replace":[949,950],"preg_replace":[952]},"used_by":[]},"WP_Rewrite::get_month_permastruct":{"doc":"\/**\n * Retrieve the month permalink structure without day and with year.\n *\n * Gets the date permalink structure and strips out the day permalink\n * structures. Keeps the year permalink structure.\n *\n * @since 1.5.0\n * @access public\n *\n * @return bool|string False on failure. Year\/Month structure on success.\n *\/","file":"rewrite.php","line":968,"missingDoc":false,"filters":[],"uses":{"get_date_permastruct":[969],"str_replace":[974],"preg_replace":[976]},"used_by":[]},"WP_Rewrite::get_day_permastruct":{"doc":"\/**\n * Retrieve the day permalink structure with month and year.\n *\n * Keeps date permalink structure with all year, month, and day.\n *\n * @since 1.5.0\n * @access public\n *\n * @return bool|string False on failure. Year\/Month\/Day structure on success.\n *\/","file":"rewrite.php","line":991,"missingDoc":false,"filters":[],"uses":{"get_date_permastruct":[992]},"used_by":[]},"WP_Rewrite::get_category_permastruct":{"doc":"\/**\n * Retrieve the permalink structure for categories.\n *\n * If the category_base property has no value, then the category structure\n * will have the front property value, followed by 'category', and finally\n * '%category%'. If it does, then the root property will be used, along with\n * the category_base property value.\n *\n * @since 1.5.0\n * @access public\n *\n * @return bool|string False on failure. Category permalink structure.\n *\/","file":"rewrite.php","line":1008,"missingDoc":false,"filters":[],"uses":{"get_extra_permastruct":[1009]},"used_by":[]},"WP_Rewrite::get_tag_permastruct":{"doc":"\/**\n * Retrieve the permalink structure for tags.\n *\n * If the tag_base property has no value, then the tag structure will have\n * the front property value, followed by 'tag', and finally '%tag%'. If it\n * does, then the root property will be used, along with the tag_base\n * property value.\n *\n * @since 2.3.0\n * @access public\n *\n * @return bool|string False on failure. Tag permalink structure.\n *\/","file":"rewrite.php","line":1025,"missingDoc":false,"filters":[],"uses":{"get_extra_permastruct":[1026]},"used_by":[]},"WP_Rewrite::get_extra_permastruct":{"doc":"\/**\n * Retrieve extra permalink structure by name.\n *\n * @since 2.5.0\n * @access public\n *\n * @param string $name Permalink structure name.\n * @return string|bool False if not found. Permalink structure string.\n *\/","file":"rewrite.php","line":1038,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Rewrite::get_author_permastruct":{"doc":"\/**\n * Retrieve the author permalink structure.\n *\n * The permalink structure is front property, author base, and finally\n * '\/%author%'. Will set the author_structure property and then return it\n * without attempting to set the value again.\n *\n * @since 1.5.0\n * @access public\n *\n * @return string|bool False if not found. Permalink structure string.\n *\/","file":"rewrite.php","line":1060,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Rewrite::get_search_permastruct":{"doc":"\/**\n * Retrieve the search permalink structure.\n *\n * The permalink structure is root property, search base, and finally\n * '\/%search%'. Will set the search_structure property and then return it\n * without attempting to set the value again.\n *\n * @since 1.5.0\n * @access public\n *\n * @return string|bool False if not found. Permalink structure string.\n *\/","file":"rewrite.php","line":1086,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Rewrite::get_page_permastruct":{"doc":"\/**\n * Retrieve the page permalink structure.\n *\n * The permalink structure is root property, and '%pagename%'. Will set the\n * page_structure property and then return it without attempting to set the\n * value again.\n *\n * @since 1.5.0\n * @access public\n *\n * @return string|bool False if not found. Permalink structure string.\n *\/","file":"rewrite.php","line":1112,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Rewrite::get_feed_permastruct":{"doc":"\/**\n * Retrieve the feed permalink structure.\n *\n * The permalink structure is root property, feed base, and finally\n * '\/%feed%'. Will set the feed_structure property and then return it\n * without attempting to set the value again.\n *\n * @since 1.5.0\n * @access public\n *\n * @return string|bool False if not found. Permalink structure string.\n *\/","file":"rewrite.php","line":1138,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Rewrite::get_comment_feed_permastruct":{"doc":"\/**\n * Retrieve the comment feed permalink structure.\n *\n * The permalink structure is root property, comment base property, feed\n * base and finally '\/%feed%'. Will set the comment_feed_structure property\n * and then return it without attempting to set the value again.\n *\n * @since 1.5.0\n * @access public\n *\n * @return string|bool False if not found. Permalink structure string.\n *\/","file":"rewrite.php","line":1164,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Rewrite::add_rewrite_tag":{"doc":"\/**\n * Add or update existing rewrite tags (e.g. %postname%).\n *\n * If the tag already exists, replace the existing pattern and query for\n * that tag, otherwise add the new tag.\n *\n * @see WP_Rewrite::$rewritecode\n * @see WP_Rewrite::$rewritereplace\n * @see WP_Rewrite::$queryreplace\n * @since 1.5.0\n * @access public\n *\n * @param string $tag Name of the rewrite tag to add or update.\n * @param string $regex Regular expression to substitute the tag for in rewrite rules.\n * @param string $query String to append to the rewritten query. Must end in '='.\n *\/","file":"rewrite.php","line":1194,"missingDoc":false,"filters":[],"uses":{"array_search":[1195]},"used_by":[]},"WP_Rewrite::generate_rewrite_rules":{"doc":"\/**\n * Generate rewrite rules from a permalink structure.\n *\n * The main WP_Rewrite function for building the rewrite rule list. The\n * contents of the function is a mix of black magic and regular expressions,\n * so best just ignore the contents and move to the parameters.\n *\n * @since 1.5.0\n * @access public\n *\n * @param string $permalink_structure The permalink structure.\n * @param int $ep_mask Endpoint mask defining what endpoints are added to the structure. Default is EP_NONE.\n * @param bool $paged Should archive pagination rules be added for the structure? Default is true.\n * @param bool $feed Should feed rewrite rules be added for the structure? Default is true.\n * @param bool $forcomments Should the feed rules be a query for a comments feed? Default is false.\n * @param bool $walk_dirs Should the 'directories' making up the structure be walked over and rewrite rules\n *                        built for each in turn? Default is true.\n * @param bool $endpoints Should endpoints be applied to the generated rewrite rules? Default is true.\n * @return array Rewrite rule list.\n *\/","file":"rewrite.php","line":1226,"missingDoc":false,"filters":[],"uses":{"trim":[1231,1284],"substr":[1255],"strpos":[1255,1388,1382,1383,1384,1385,1385,1385,1385,1385,1385,1395],"preg_match_all":[1257,1303],"count":[1259,1286],"str_replace":[1272,1279,1300,1411],"preg_index":[1272,1325,1329,1334,1339,1343,1369,1429,1431,1432,1438,1439,1452],"explode":[1285],"preg_replace":[1289],"ltrim":[1297],"is_array":[1306],"get_option":[1334,1331,1361],"array_merge":[1356,1360,1362,1462,1467,1471,1472,1476],"is_post_type_hierarchical":[1397],"get_post_types":[1394],"rtrim":[1409]},"used_by":[]},"WP_Rewrite::generate_rewrite_rule":{"doc":"\/**\n * Generate Rewrite rules with permalink structure and walking directory only.\n *\n * Shorten version of {@link WP_Rewrite::generate_rewrite_rules()} that\n * allows for shorter list of parameters. See the method for longer\n * description of what generating rewrite rules does.\n *\n * @uses WP_Rewrite::generate_rewrite_rules() See for long description and rest of parameters.\n * @since 1.5.0\n * @access public\n *\n * @param string $permalink_structure The permalink structure to generate rules.\n * @param bool $walk_dirs Optional, default is false. Whether to create list of directories to walk over.\n * @return array\n *\/","file":"rewrite.php","line":1496,"missingDoc":false,"filters":[],"uses":{"generate_rewrite_rules":[1497]},"used_by":[]},"WP_Rewrite::rewrite_rules":{"doc":"\/**\n * Construct rewrite matches and queries from permalink structure.\n *\n * Runs the action 'generate_rewrite_rules' with the parameter that is an\n * reference to the current WP_Rewrite instance to further manipulate the\n * permalink structures and rewrite rules. Runs the 'rewrite_rules_array'\n * filter on the full rewrite rule array.\n *\n * There are two ways to manipulate the rewrite rules, one by hooking into\n * the 'generate_rewrite_rules' action and gaining full control of the\n * object or just manipulating the rewrite rule array before it is passed\n * from the function.\n *\n * @since 1.5.0\n * @access public\n *\n * @return array An associate array of matches and queries.\n *\/","file":"rewrite.php","line":1518,"missingDoc":false,"filters":["'post_rewrite_rules'","'date_rewrite_rules'","'root_rewrite_rules'","'comments_rewrite_rules'","'search_rewrite_rules'","'author_rewrite_rules'","'page_rewrite_rules'","$permastructname . '_rewrite_rules'","'tag_rewrite_rules'","'generate_rewrite_rules'","'rewrite_rules_array'"],"uses":{"parse_url":[1525],"home_url":[1525],"is_multisite":[1536],"is_main_site":[1536],"generate_rewrite_rules":[1543,1547,1551,1555,1560,1564,1575,1577,1579],"get_date_permastruct":[1547],"get_search_permastruct":[1559],"get_author_permastruct":[1564],"page_rewrite_rules":[1568],"count":[1574],"is_array":[1573],"array_merge":[1586,1591,1593]},"used_by":[]},"WP_Rewrite::wp_rewrite_rules":{"doc":"\/**\n * Retrieve the rewrite rules.\n *\n * The difference between this method and {@link\n * WP_Rewrite::rewrite_rules()} is that this method stores the rewrite rules\n * in the 'rewrite_rules' option and retrieves it. This prevents having to\n * process all of the permalinks to get the rewrite rules in the form of\n * caching.\n *\n * @since 1.5.0\n * @access public\n *\n * @return array Rewrite rules.\n *\/","file":"rewrite.php","line":1615,"missingDoc":false,"filters":[],"uses":{"get_option":[1616],"rewrite_rules":[1619],"update_option":[1620]},"used_by":[]},"WP_Rewrite::mod_rewrite_rules":{"doc":"\/**\n * Retrieve mod_rewrite formatted rewrite rules to write to .htaccess.\n *\n * Does not actually write to the .htaccess file, but creates the rules for\n * the process that will.\n *\n * Will add the non_wp_rules property rules to the .htaccess file before\n * the WordPress rewrite rules one.\n *\n * @since 1.5.0\n * @access public\n *\n * @return string\n *\/","file":"rewrite.php","line":1640,"missingDoc":false,"filters":["'mod_rewrite_rules'","'rewrite_rules'"],"uses":{"using_permalinks":[1641],"parse_url":[1644,1648],"site_url":[1644],"trailingslashit":[1646,1650],"home_url":[1648],"str_replace":[1662,1683],"rewrite_rules":[1675],"count":[1676],"strpos":[1691]},"used_by":[]},"WP_Rewrite::iis7_url_rewrite_rules":{"doc":"\/**\n * Retrieve IIS7 URL Rewrite formatted rewrite rules to write to web.config file.\n *\n * Does not actually write to the web.config file, but creates the rules for\n * the process that will.\n *\n * @since 2.8.0\n * @access public\n *\n * @return string\n *\/","file":"rewrite.php","line":1721,"missingDoc":false,"filters":["'iis7_url_rewrite_rules'"],"uses":{"using_permalinks":[1723]},"used_by":[]},"WP_Rewrite::add_rule":{"doc":"\/**\n * Add a straight rewrite rule.\n *\n * Any value in the $after parameter that isn't 'bottom' will be placed at\n * the top of the rules.\n *\n * @since 2.1.0\n * @access public\n *\n * @param string $regex Regular expression to match against request.\n * @param string $redirect URL regex redirects to when regex matches request.\n * @param string $after Optional, default is bottom. Location to place rule.\n *\/","file":"rewrite.php","line":1769,"missingDoc":false,"filters":[],"uses":{"strpos":[1771,1771],"strlen":[1771],"substr":[1772],"add_external_rule":[1774],"array_merge":[1777,1779]},"used_by":[]},"WP_Rewrite::add_external_rule":{"doc":"\/**\n * Add a rule that doesn't redirect to index.php.\n *\n * Can redirect to any place.\n *\n * @since 2.1.0\n * @access public\n *\n * @param string $regex Regular expression to match against request.\n * @param string $redirect URL regex redirects to when regex matches request.\n *\/","file":"rewrite.php","line":1795,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Rewrite::add_endpoint":{"doc":"\/**\n * Add an endpoint, like \/trackback\/.\n *\n * See {@link add_rewrite_endpoint()} for full documentation.\n *\n * @see add_rewrite_endpoint()\n * @since 2.1.0\n * @access public\n * @uses WP::add_query_var()\n *\n * @param string $name Name of the endpoint.\n * @param int $places Endpoint mask describing the places the endpoint should be added.\n *\/","file":"rewrite.php","line":1812,"missingDoc":false,"filters":[],"uses":{"add_query_var":[1815]},"used_by":[]},"WP_Rewrite::add_permastruct":{"doc":"\/**\n * Add a new permalink structure.\n *\n * A permalink structure (permastruct) is an abstract definition of a set of rewrite rules; it\n * is an easy way of expressing a set of regular expressions that rewrite to a set of query strings.\n * The new permastruct is added to the {@link WP_Rewrite::$extra_permastructs} array. When the\n * rewrite rules are built by {@link WP_Rewrite::rewrite_rules()} all of these extra permastructs\n * are passed to {@link WP_Rewrite::generate_rewrite_rules()} which transforms them into the\n * regular expressions that many love to hate.\n *\n * The $args parameter gives you control over how {@link WP_Rewrite::generate_rewrite_rules()}\n * works on the new permastruct.\n *\n * @since 2.5.0\n * @access public\n *\n * @param string $name Name for permalink structure.\n * @param string $struct Permalink structure (e.g. category\/%category%)\n * @param array $args Optional configuration for building the rules from the permalink structure:\n *     - with_front (bool) - Should the structure be prepended with WP_Rewrite::$front? Default is true.\n *     - ep_mask (int) - Endpoint mask defining what endpoints are added to the structure. Default is EP_NONE.\n *     - paged (bool) - Should archive pagination rules be added for the structure? Default is true.\n *     - feed (bool) - Should feed rewrite rules be added for the structure? Default is true.\n *     - forcomments (bool) - Should the feed rules be a query for a comments feed? Default is false.\n *     - walk_dirs (bool) - Should the 'directories' making up the structure be walked over and rewrite\n *                          rules built for each in turn? Default is true.\n *     - endpoints (bool) - Should endpoints be applied to the generated rewrite rules? Default is true.\n *\/","file":"rewrite.php","line":1846,"missingDoc":false,"filters":[],"uses":{"is_array":[1848],"func_get_arg":[1851],"func_num_args":[1850],"array_intersect_key":[1862],"wp_parse_args":[1863]},"used_by":[]},"WP_Rewrite::flush_rules":{"doc":"\/**\n * Remove rewrite rules and then recreate rewrite rules.\n *\n * Calls {@link WP_Rewrite::wp_rewrite_rules()} after removing the\n * 'rewrite_rules' option. If the function named 'save_mod_rewrite_rules'\n * exists, it will be called.\n *\n * @since 2.0.1\n * @access public\n * @param bool $hard Whether to update .htaccess (hard flush) or just update rewrite_rules option (soft flush). Default is true (hard).\n *\/","file":"rewrite.php","line":1885,"missingDoc":false,"filters":[],"uses":{"delete_option":[1886],"wp_rewrite_rules":[1887],"save_mod_rewrite_rules":[1889],"function_exists":[1888,1890],"iis7_save_url_rewrite_rules":[1891]},"used_by":[]},"WP_Rewrite::init":{"doc":"\/**\n * Sets up the object's properties.\n *\n * The 'use_verbose_page_rules' object property will be set to true if the\n * permalink structure begins with one of the following: '%postname%', '%category%',\n * '%tag%', or '%author%'.\n *\n * @since 1.5.0\n * @access public\n *\/","file":"rewrite.php","line":1904,"missingDoc":false,"filters":[],"uses":{"get_option":[1906],"substr":[1907,1917],"strpos":[1907],"using_index_permalinks":[1909],"preg_match":[1920]},"used_by":[]},"WP_Rewrite::set_permalink_structure":{"doc":"\/**\n * Set the main permalink structure for the blog.\n *\n * Will update the 'permalink_structure' option, if there is a difference\n * between the current permalink structure and the parameter value. Calls\n * {@link WP_Rewrite::init()} after the option is updated.\n *\n * Fires the 'permalink_structure_changed' action once the init call has\n * processed passing the old and new values\n *\n * @since 1.5.0\n * @access public\n *\n * @param string $permalink_structure Permalink structure.\n *\/","file":"rewrite.php","line":1941,"missingDoc":false,"filters":["'permalink_structure_changed'"],"uses":{"update_option":[1944],"init":[1945]},"used_by":[]},"WP_Rewrite::set_category_base":{"doc":"\/**\n * Set the category base for the category permalink.\n *\n * Will update the 'category_base' option, if there is a difference between\n * the current category base and the parameter value. Calls\n * {@link WP_Rewrite::init()} after the option is updated.\n *\n * @since 1.5.0\n * @access public\n *\n * @param string $category_base Category permalink structure base.\n *\/","file":"rewrite.php","line":1962,"missingDoc":false,"filters":[],"uses":{"update_option":[1964],"init":[1965],"get_option":[1963]},"used_by":[]},"WP_Rewrite::set_tag_base":{"doc":"\/**\n * Set the tag base for the tag permalink.\n *\n * Will update the 'tag_base' option, if there is a difference between the\n * current tag base and the parameter value. Calls\n * {@link WP_Rewrite::init()} after the option is updated.\n *\n * @since 2.3.0\n * @access public\n *\n * @param string $tag_base Tag permalink structure base.\n *\/","file":"rewrite.php","line":1981,"missingDoc":false,"filters":[],"uses":{"update_option":[1983],"init":[1984],"get_option":[1982]},"used_by":[]},"WP_Rewrite::__construct":{"doc":"\/**\n * Constructor - Calls init(), which runs setup.\n *\n * @since 1.5.0\n * @access public\n *\n * @return WP_Rewrite\n *\/","file":"rewrite.php","line":1996,"missingDoc":false,"filters":[],"uses":{"init":[1997]},"used_by":[]},"MagpieRSS::MagpieRSS":{"doc":"","file":"rss.php","line":54,"missingDoc":true,"filters":[],"uses":{"trigger_error":[59,64],"function_exists":[58],"xml_parser_create":[61],"is_resource":[63],"xml_set_object":[71],"xml_set_element_handler":[72],"xml_set_character_data_handler":[75],"xml_parse":[77],"xml_get_error_code":[80],"xml_error_string":[82],"xml_get_current_line_number":[83],"xml_get_current_column_number":[84],"error":[87],"xml_parser_free":[91],"normalize":[93]},"used_by":[]},"MagpieRSS::feed_start_element":{"doc":"","file":"rss.php","line":96,"missingDoc":true,"filters":[],"uses":{"strtolower":[97],"array_change_key_case":[98],"split":[103],"strpos":[102],"in_array":[160],"join":[175],"array_map":[176],"array_keys":[177],"array_values":[178],"append_content":[180],"array_unshift":[182,203],"append":[199]},"used_by":[]},"MagpieRSS::feed_cdata":{"doc":"","file":"rss.php","line":207,"missingDoc":true,"filters":[],"uses":{"append_content":[211],"join":[214],"array_reverse":[214],"append":[215]},"used_by":[]},"MagpieRSS::feed_end_element":{"doc":"","file":"rss.php","line":219,"missingDoc":true,"filters":[],"uses":{"strtolower":[220],"in_array":[236],"append_content":[249,252],"array_shift":[255,258]},"used_by":[]},"MagpieRSS::concat":{"doc":"","file":"rss.php","line":264,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"MagpieRSS::append_content":{"doc":"","file":"rss.php","line":271,"missingDoc":true,"filters":[],"uses":{"concat":[273,276]},"used_by":[]},"MagpieRSS::append":{"doc":"","file":"rss.php","line":281,"missingDoc":true,"filters":[],"uses":{"concat":[288,292,296,300,306,310,314,318]},"used_by":[]},"MagpieRSS::normalize":{"doc":"","file":"rss.php","line":325,"missingDoc":true,"filters":[],"uses":{"count":[329,341],"is_rss":[339],"is_atom":[327]},"used_by":[]},"MagpieRSS::is_rss":{"doc":"","file":"rss.php","line":353,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"MagpieRSS::is_atom":{"doc":"","file":"rss.php","line":362,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"MagpieRSS::map_attrs":{"doc":"","file":"rss.php","line":371,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"MagpieRSS::error":{"doc":"","file":"rss.php","line":375,"missingDoc":true,"filters":[],"uses":{"trigger_error":[381],"error_log":[383]},"used_by":[]},"fetch_rss":{"doc":"\/**\n * Build Magpie object based on RSS from URL.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param string $url URL to retrieve feed\n * @return bool|MagpieRSS false on failure or MagpieRSS object on success.\n *\/","file":"rss.php","line":400,"missingDoc":false,"filters":[],"uses":{"init":[402],"_fetch_remote_file":[412,468],"_response_to_rss":[414,481],"is_success":[413,480],"debug":[432,451,474,484,513],"check_cache":[442],"get":[447,461],"set":[477,487],"substr":[496]},"used_by":{"wp_rss":[877],"get_rss":[918]}},"_fetch_remote_file":{"doc":"\/**\n * Retrieve URL headers and content using WP HTTP Request API.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param string $url URL to retrieve\n * @param array $headers Optional. Headers to send to the URL.\n * @return Snoopy style response\n *\/","file":"rss.php","line":538,"missingDoc":false,"filters":[],"uses":{"wp_remote_request":[539],"array_shift":[541],"is_wp_error":[540],"is_array":[554],"wp_remote_retrieve_headers":[553],"wp_remote_retrieve_response_code":[563,564],"wp_remote_retrieve_body":[566]},"used_by":{"fetch_rss":[412,468]}},"_response_to_rss":{"doc":"\/**\n * Retrieve\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param unknown_type $resp\n * @return unknown\n *\/","file":"rss.php","line":581,"missingDoc":false,"filters":[],"uses":{"explode":[591],"strpos":[590]},"used_by":{"fetch_rss":[414,481]}},"is_success":{"doc":"","file":"rss.php","line":683,"missingDoc":true,"filters":[],"uses":[],"used_by":{"fetch_rss":[413,480]}},"is_info":{"doc":"","file":"rss.php","line":679,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"is_redirect":{"doc":"","file":"rss.php","line":687,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"is_error":{"doc":"","file":"rss.php","line":691,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"is_client_error":{"doc":"","file":"rss.php","line":695,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"is_server_error":{"doc":"","file":"rss.php","line":699,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"RSSCache::RSSCache":{"doc":"","file":"rss.php","line":708,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"RSSCache::set":{"doc":"","file":"rss.php","line":725,"missingDoc":true,"filters":[],"uses":{"file_name":[726],"set_transient":[728]},"used_by":[]},"RSSCache::get":{"doc":"","file":"rss.php","line":739,"missingDoc":true,"filters":[],"uses":{"file_name":[741],"debug":[744],"get_transient":[743]},"used_by":[]},"RSSCache::check_cache":{"doc":"","file":"rss.php","line":760,"missingDoc":true,"filters":[],"uses":{"file_name":[762],"get_transient":[764]},"used_by":[]},"RSSCache::serialize":{"doc":"","file":"rss.php","line":776,"missingDoc":true,"filters":[],"uses":{"serialize":[777]},"used_by":[]},"RSSCache::unserialize":{"doc":"","file":"rss.php","line":783,"missingDoc":true,"filters":[],"uses":{"unserialize":[784]},"used_by":[]},"RSSCache::file_name":{"doc":"","file":"rss.php","line":793,"missingDoc":true,"filters":[],"uses":{"md5":[794]},"used_by":[]},"RSSCache::error":{"doc":"","file":"rss.php","line":801,"missingDoc":true,"filters":[],"uses":{"trigger_error":[808],"error_log":[811]},"used_by":[]},"RSSCache::debug":{"doc":"","file":"rss.php","line":814,"missingDoc":true,"filters":[],"uses":{"error":[816]},"used_by":[]},"parse_w3cdtf":{"doc":"","file":"rss.php","line":822,"missingDoc":true,"filters":[],"uses":{"gmmktime":[832],"preg_match":[827]},"used_by":[]},"wp_rss":{"doc":"\/**\n * Display all RSS items in a HTML ordered list.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param string $url URL of feed to display. Will not auto sense feed URL.\n * @param int $num_items Optional. Number of items to display, default is all.\n *\/","file":"rss.php","line":876,"missingDoc":false,"filters":[],"uses":{"array_slice":[881],"printf":[885],"esc_url":[887],"esc_attr":[888],"strip_tags":[888],"esc_html":[889],"_e":[895],"fetch_rss":[877]},"used_by":[]},"get_rss":{"doc":"\/**\n * Display RSS items in HTML list items.\n *\n * You have to specify which HTML list you want, either ordered or unordered\n * before using the function. You also have to specify how many items you wish\n * to display. You can't display all of them like you can with wp_rss()\n * function.\n *\n * @since 1.5.0\n * @package External\n * @subpackage MagpieRSS\n *\n * @param string $url URL of feed to display. Will not auto sense feed URL.\n * @param int $num_items Optional. Number of items to display, default is all.\n * @return bool False on failure.\n *\/","file":"rss.php","line":917,"missingDoc":false,"filters":[],"uses":{"fetch_rss":[918],"array_slice":[920],"esc_html":[924]},"used_by":[]},"wp_default_scripts":{"doc":"\/**\n * Register all WordPress scripts.\n *\n * Localizes some of them.\n * args order: $scripts->add( 'handle', 'url', 'dependencies', 'query-string', 1 );\n * when last arg === 1 queues the script for the footer\n *\n * @since 2.6.0\n *\n * @param object $scripts WP_Scripts object.\n *\/","file":"script-loader.php","line":50,"missingDoc":false,"filters":[],"uses":{"wp_guess_url":[53],"site_url":[52],"defined":[56,60,253],"get_bloginfo":[57],"add":[62,69,74,76,92,94,96,98,104,109,111,114,115,116,117,118,119,120,121,122,125,128,129,130,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,174,175,176,177,178,179,180,181,182,184,196,198,232,233,234,235,236,239,241,244,248,249,250,251,255,257,260,263,265,267,268,270,272,283,285,287,289,298,300,302,309,311,313,314,315,316,329,330,340,341,342,345,352,354,360,362,370,372,374,397,399,405,407,409,412,414,422,427,433,435,436,444,446,448,450,455,464,471,472,473],"did_action":[63,70,77,99,105,185,242,245,261,273,290,303,317,331,347,355,363,375,401,415,423,428,437,451,456,465],"localize":[63,70,77,99,105,185,242,245,261,273,290,303,317,331,347,355,363,375,401,415,423,428,437,451,456,465],"get_current_user_id":[65],"time":[66],"__":[71,78,79,80,81,82,83,84,85,86,87,88,89,100,101,106,186,187,188,189,190,191,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,274,275,276,279,280,291,292,293,294,295,318,319,320,321,322,323,326,348,349,356,357,366,367,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,402,416,417,418,424,429,430,438,439,440,441,452,457,458,459,460,467,468],"esc_attr":[79,80,81,82,87,88,89,348],"includes_url":[192,193],"ini_get":[201,201],"_x":[278,306,394,419,466],"admin_url":[333],"add_data":[346,400],"is_admin":[344]},"used_by":[]},"wp_default_styles":{"doc":"\/**\n * Assign default styles to $styles object.\n *\n * Nothing is returned, because the $styles parameter is passed by reference.\n * Meaning that whatever object is passed will be updated without having to\n * reassign the variable that was passed back to the same value. This saves\n * memory.\n *\n * Adding default styles is not the only task, it also assigns the base_url\n * property, the default version, and text direction for the object.\n *\n * @since 2.6.0\n *\n * @param object $styles\n *\/","file":"script-loader.php","line":492,"missingDoc":false,"filters":[],"uses":{"wp_guess_url":[495],"site_url":[494],"defined":[498,503],"get_bloginfo":[499],"function_exists":[500],"is_rtl":[500],"add":[509,511,515,518,519,521,522,523,524,525,526,527,528,529,530,531,532,533,534],"add_data":[512,537,539],"in_array":[538]},"used_by":[]},"wp_prototype_before_jquery":{"doc":"\/**\n * Reorder JavaScript scripts array to place prototype before jQuery.\n *\n * @since 2.3.1\n *\n * @param array $js_array JavaScript scripts array\n * @return array Reordered array, if needed.\n *\/","file":"script-loader.php","line":551,"missingDoc":false,"filters":[],"uses":{"array_search":[552,555],"array_splice":[563]},"used_by":[]},"wp_just_in_time_script_localization":{"doc":"\/**\n * Load localized data on print rather than initialization.\n *\n * These localizations require information that may not be loaded even by init.\n *\n * @since 2.5.0\n *\/","file":"script-loader.php","line":575,"missingDoc":false,"filters":[],"uses":{"wp_localize_script":[577],"__":[579,580]},"used_by":[]},"wp_style_loader_src":{"doc":"\/**\n * Administration Screen CSS for changing the styles.\n *\n * If installing the 'wp-admin\/' directory will be replaced with '.\/'.\n *\n * The $_wp_admin_css_colors global manages the Administration Screens CSS\n * stylesheet that is loaded. The option that is set is 'admin_color' and is the\n * color and key for the array. The value for the color key is an object with\n * a 'url' parameter that has the URL path to the CSS file.\n *\n * The query from $src parameter will be appended to the URL that is given from\n * the $_wp_admin_css_colors array value URL.\n *\n * @since 2.6.0\n * @uses $_wp_admin_css_colors\n *\n * @param string $src Source URL.\n * @param string $handle Either 'colors' or 'colors-rtl'.\n * @return string URL path to CSS stylesheet for Administration Screens.\n *\/","file":"script-loader.php","line":605,"missingDoc":false,"filters":[],"uses":{"preg_replace":[607,621],"defined":[606,620],"get_user_option":[611],"parse_url":[617],"wp_parse_str":[624],"add_query_arg":[625]},"used_by":[]},"print_head_scripts":{"doc":"\/**\n * Prints the script queue in the HTML head on admin pages.\n *\n * Postpones the scripts that were queued for the footer.\n * print_footer_scripts() is called in the footer to print these scripts.\n *\n * @since 2.8\n * @see wp_print_scripts()\n *\/","file":"script-loader.php","line":643,"missingDoc":false,"filters":["'wp_print_scripts'","'print_head_scripts'"],"uses":{"did_action":[646],"is_a":[649],"script_concat_settings":[652],"do_head_items":[654],"_print_scripts":[657],"reset":[659]},"used_by":{"wp_print_head_scripts":[733]}},"_print_scripts":{"doc":"\/**\n * @internal use\n *\/","file":"script-loader.php","line":688,"missingDoc":false,"filters":[],"uses":{"defined":[692],"str_split":[705],"implode":[706],"esc_attr":[709],"trim":[695]},"used_by":{"print_head_scripts":[657],"print_footer_scripts":[679]}},"print_footer_scripts":{"doc":"\/**\n * Prints the scripts that were queued for the footer or too late for the HTML head.\n *\n * @since 2.8\n *\/","file":"script-loader.php","line":668,"missingDoc":false,"filters":["'print_footer_scripts'"],"uses":{"is_a":[671],"script_concat_settings":[674],"do_footer_items":[676],"_print_scripts":[679],"reset":[681]},"used_by":{"_wp_footer_scripts":[743]}},"wp_print_head_scripts":{"doc":"\/**\n * Prints the script queue in the HTML head on the front end.\n *\n * Postpones the scripts that were queued for the footer.\n * wp_print_footer_scripts() is called in the footer to print these scripts.\n *\n * @since 2.8\n *\/","file":"script-loader.php","line":724,"missingDoc":false,"filters":["'wp_print_scripts'"],"uses":{"did_action":[725],"is_a":[730],"print_head_scripts":[733]},"used_by":[]},"_wp_footer_scripts":{"doc":"\/**\n * Private, for use in *_footer_scripts hooks\n *\n * @since 3.3.0\n *\/","file":"script-loader.php","line":741,"missingDoc":false,"filters":[],"uses":{"print_late_styles":[742],"print_footer_scripts":[743]},"used_by":[]},"print_late_styles":{"doc":"\/**\n * Prints the styles that were queued too late for the HTML head.\n *\n * @since 3.3.0\n *\/","file":"script-loader.php","line":798,"missingDoc":false,"filters":["'print_late_styles'"],"uses":{"is_a":[801],"do_footer_items":[805],"_print_styles":[808],"reset":[810]},"used_by":{"_wp_footer_scripts":[742]}},"wp_print_footer_scripts":{"doc":"\/**\n * Hooks to print the scripts and styles in the footer.\n *\n * @since 2.8\n *\/","file":"script-loader.php","line":751,"missingDoc":false,"filters":["'wp_print_footer_scripts'"],"uses":[],"used_by":[]},"wp_enqueue_scripts":{"doc":"\/**\n * Wrapper for do_action('wp_enqueue_scripts')\n *\n * Allows plugins to queue scripts for the front end using wp_enqueue_script().\n * Runs first in wp_head() where all is_home(), is_page(), etc. functions are available.\n *\n * @since 2.8\n *\/","file":"script-loader.php","line":763,"missingDoc":false,"filters":["'wp_enqueue_scripts'"],"uses":[],"used_by":[]},"print_admin_styles":{"doc":"\/**\n * Prints the styles queue in the HTML head on admin pages.\n *\n * @since 2.8\n *\/","file":"script-loader.php","line":772,"missingDoc":false,"filters":["'print_admin_styles'"],"uses":{"is_a":[775],"script_concat_settings":[778],"defined":[781],"do_items":[784],"_print_styles":[787],"reset":[789]},"used_by":[]},"_print_styles":{"doc":"\/**\n * @internal use\n *\/","file":"script-loader.php","line":817,"missingDoc":false,"filters":[],"uses":{"defined":[821],"trim":[827],"esc_attr":[828]},"used_by":{"print_admin_styles":[787],"print_late_styles":[808]}},"remove_shortcode":{"doc":"\/**\n * Removes hook for shortcode.\n *\n * @since 2.5\n * @uses $shortcode_tags\n *\n * @param string $tag shortcode tag to remove hook for.\n *\/","file":"shortcodes.php","line":108,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"get_shortcode_regex":{"doc":"\/**\n * Retrieve the shortcode regular expression for searching.\n *\n * The regular expression combines the shortcode tags in the regular expression\n * in a regex class.\n *\n * The regular expression contains 6 different sub matches to help with parsing.\n *\n * 1 - An extra [ to allow for escaping shortcodes with double [[]]\n * 2 - The shortcode name\n * 3 - The shortcode argument list\n * 4 - The self closing \/\n * 5 - The content of a shortcode when it wraps some content.\n * 6 - An extra ] to allow for escaping shortcodes with double [[]]\n *\n * @since 2.5\n * @uses $shortcode_tags\n *\n * @return string The shortcode search regular expression\n *\/","file":"shortcodes.php","line":174,"missingDoc":false,"filters":[],"uses":{"array_keys":[176],"join":[177],"array_map":[177]},"used_by":{"do_shortcode":[150],"strip_shortcodes":[321]}},"do_shortcode_tag":{"doc":"\/**\n * Regular Expression callable for do_shortcode() for calling shortcode hook.\n * @see get_shortcode_regex for details of the match array contents.\n *\n * @since 2.5\n * @access private\n * @uses $shortcode_tags\n *\n * @param array $m Regular expression match array\n * @return mixed False on failure.\n *\/","file":"shortcodes.php","line":223,"missingDoc":false,"filters":[],"uses":{"substr":[228],"shortcode_parse_atts":[232],"call_user_func":[236,239]},"used_by":[]},"strip_shortcode_tag":{"doc":"","file":"shortcodes.php","line":326,"missingDoc":true,"filters":[],"uses":{"substr":[329]},"used_by":[]},"SimplePie_Author::__construct":{"doc":"\/**\n * Constructor, used to input the data\n *\n * @param string $name\n * @param string $link\n * @param string $email\n *\/","file":"SimplePie\/Author.php","line":88,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Author::__toString":{"doc":"\/**\n * String-ified version\n *\n * @return string\n *\/","file":"SimplePie\/Author.php","line":100,"missingDoc":false,"filters":[],"uses":{"md5":[103],"serialize":[103]},"used_by":[]},"SimplePie_Author::get_name":{"doc":"\/**\n * Author's name\n *\n * @return string|null\n *\/","file":"SimplePie\/Author.php","line":111,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Author::get_link":{"doc":"\/**\n * Author's link\n *\n * @return string|null\n *\/","file":"SimplePie\/Author.php","line":128,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Author::get_email":{"doc":"\/**\n * Author's email address\n *\n * @return string|null\n *\/","file":"SimplePie\/Author.php","line":145,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Cache_DB::prepare_simplepie_object_for_cache":{"doc":"\/**\n * Helper for database conversion\n *\n * Converts a given {@see SimplePie} object into data to be stored\n *\n * @param SimplePie $data\n * @return array First item is the serialized data for storage, second item is the unique ID for this item\n *\/","file":"SimplePie\/Cache\/DB.php","line":61,"missingDoc":false,"filters":[],"uses":{"get_items":[63],"get_id":[70,78],"count":[73,73],"serialize":[135]},"used_by":[]},"SimplePie_Cache_File::__construct":{"doc":"\/**\n * Create a new cache object\n *\n * @param string $location Location string (from SimplePie::$cache_location)\n * @param string $name Unique ID for the cache\n * @param string $type Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data\n *\/","file":"SimplePie\/Cache\/File.php","line":89,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Cache_File::save":{"doc":"\/**\n * Save data to the cache\n *\n * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property\n * @return bool Successfulness\n *\/","file":"SimplePie\/Cache\/File.php","line":103,"missingDoc":false,"filters":[],"uses":{"serialize":[112],"file_put_contents":[113],"file_exists":[105,105],"is_writeable":[105,105]},"used_by":[]},"SimplePie_Cache_File::load":{"doc":"\/**\n * Retrieve the data saved to the cache\n *\n * @return array Data for SimplePie::$data\n *\/","file":"SimplePie\/Cache\/File.php","line":123,"missingDoc":false,"filters":[],"uses":{"unserialize":[127],"file_get_contents":[127],"file_exists":[125],"is_readable":[125]},"used_by":[]},"SimplePie_Cache_File::mtime":{"doc":"\/**\n * Retrieve the last modified time for the cache\n *\n * @return int Timestamp\n *\/","file":"SimplePie\/Cache\/File.php","line":137,"missingDoc":false,"filters":[],"uses":{"filemtime":[141],"file_exists":[139]},"used_by":[]},"SimplePie_Cache_File::touch":{"doc":"\/**\n * Set the last modified time to the current time\n *\n * @return bool Success status\n *\/","file":"SimplePie\/Cache\/File.php","line":151,"missingDoc":false,"filters":[],"uses":{"touch":[155],"file_exists":[153]},"used_by":[]},"SimplePie_Cache_File::unlink":{"doc":"\/**\n * Remove the cache\n *\n * @return bool Success status\n *\/","file":"SimplePie\/Cache\/File.php","line":165,"missingDoc":false,"filters":[],"uses":{"unlink":[169],"file_exists":[167]},"used_by":[]},"SimplePie_Cache_Memcache::__construct":{"doc":"\/**\n * Create a new cache object\n *\n * @param string $location Location string (from SimplePie::$cache_location)\n * @param string $name Unique ID for the cache\n * @param string $type Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data\n *\/","file":"SimplePie\/Cache\/Memcache.php","line":88,"missingDoc":false,"filters":[],"uses":{"array_merge":[101],"md5":[102],"addServer":[105]},"used_by":[]},"SimplePie_Cache_Memcache::save":{"doc":"\/**\n * Save data to the cache\n *\n * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property\n * @return bool Successfulness\n *\/","file":"SimplePie\/Cache\/Memcache.php","line":114,"missingDoc":false,"filters":[],"uses":{"set":[120],"serialize":[120]},"used_by":[]},"SimplePie_Cache_Memcache::load":{"doc":"\/**\n * Retrieve the data saved to the cache\n *\n * @return array Data for SimplePie::$data\n *\/","file":"SimplePie\/Cache\/Memcache.php","line":128,"missingDoc":false,"filters":[],"uses":{"get":[130],"unserialize":[134]},"used_by":[]},"SimplePie_Cache_Memcache::mtime":{"doc":"\/**\n * Retrieve the last modified time for the cache\n *\n * @return int Timestamp\n *\/","file":"SimplePie\/Cache\/Memcache.php","line":144,"missingDoc":false,"filters":[],"uses":{"get":[146],"time":[151]},"used_by":[]},"SimplePie_Cache_Memcache::touch":{"doc":"\/**\n * Set the last modified time to the current time\n *\n * @return bool Success status\n *\/","file":"SimplePie\/Cache\/Memcache.php","line":162,"missingDoc":false,"filters":[],"uses":{"get":[164],"set":[168]},"used_by":[]},"SimplePie_Cache_Memcache::unlink":{"doc":"\/**\n * Remove the cache\n *\n * @return bool Success status\n *\/","file":"SimplePie\/Cache\/Memcache.php","line":179,"missingDoc":false,"filters":[],"uses":{"delete":[181]},"used_by":[]},"SimplePie_Cache_MySQL::__construct":{"doc":"\/**\n * Create a new cache object\n *\n * @param string $location Location string (from SimplePie::$cache_location)\n * @param string $name Unique ID for the cache\n * @param string $type Either TYPE_FEED for SimplePie data, or TYPE_IMAGE for image data\n *\/","file":"SimplePie\/Cache\/MySQL.php","line":87,"missingDoc":false,"filters":[],"uses":{"array_merge_recursive":[99],"substr":[102],"query":[116],"fetchColumn":[123],"exec":[130,139],"in_array":[128,137]},"used_by":[]},"SimplePie_Cache_MySQL::save":{"doc":"\/**\n * Save data to the cache\n *\n * @param array|SimplePie $data Data to store in the cache. If passed a SimplePie object, only cache the $data property\n * @return bool Successfulness\n *\/","file":"SimplePie\/Cache\/MySQL.php","line":153,"missingDoc":false,"filters":[],"uses":{"prepare":[166,176,182,195,214,234,255,261,272],"bindValue":[167,177,185,186,187,196,197,198,199,215,235,236,237,238,256,262,263,264,273,274,275],"count":[172,197],"time":[186,199,231,263,275],"execute":[188,200,239,217,168,265,276,257],"fetchColumn":[170,220],"array_keys":[206],"quote":[211],"implode":[214],"array_diff":[225],"get_date":[229],"serialize":[237,262,274],"rowCount":[259]},"used_by":[]},"SimplePie_Cache_MySQL::load":{"doc":"\/**\n * Retrieve the data saved to the cache\n *\n * @return array Data for SimplePie::$data\n *\/","file":"SimplePie\/Cache\/MySQL.php","line":291,"missingDoc":false,"filters":[],"uses":{"prepare":[298,344],"bindValue":[299,345],"unserialize":[302,350],"fetchColumn":[348],"execute":[346,300],"fetch":[300]},"used_by":[]},"SimplePie_Cache_MySQL::mtime":{"doc":"\/**\n * Retrieve the last modified time for the cache\n *\n * @return int Timestamp\n *\/","file":"SimplePie\/Cache\/MySQL.php","line":369,"missingDoc":false,"filters":[],"uses":{"prepare":[376],"bindValue":[377],"execute":[378],"fetchColumn":[378]},"used_by":[]},"SimplePie_Cache_MySQL::touch":{"doc":"\/**\n * Set the last modified time to the current time\n *\n * @return bool Success status\n *\/","file":"SimplePie\/Cache\/MySQL.php","line":393,"missingDoc":false,"filters":[],"uses":{"prepare":[400],"bindValue":[401,402],"time":[401],"execute":[403],"rowCount":[403]},"used_by":[]},"SimplePie_Cache_MySQL::unlink":{"doc":"\/**\n * Remove the cache\n *\n * @return bool Success status\n *\/","file":"SimplePie\/Cache\/MySQL.php","line":418,"missingDoc":false,"filters":[],"uses":{"prepare":[425,427],"bindValue":[426,428],"execute":[429,429]},"used_by":[]},"SimplePie_Cache::__construct":{"doc":"\/**\n * Don't call the constructor. Please.\n *\/","file":"SimplePie\/Cache.php","line":72,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Cache::get_handler":{"doc":"\/**\n * Create a new SimplePie_Cache object\n *\n * @param string $location URL location (scheme is used to determine handler)\n * @param string $filename Unique identifier for cache object\n * @param string $extension 'spi' or 'spc'\n * @return SimplePie_Cache_Base Type of object depends on scheme of `$location`\n *\/","file":"SimplePie\/Cache.php","line":82,"missingDoc":false,"filters":[],"uses":{"explode":[84]},"used_by":[]},"SimplePie_Cache::create":{"doc":"\/**\n * Create a new SimplePie_Cache object\n *\n * @deprecated Use {@see get_handler} instead\n *\/","file":"SimplePie\/Cache.php","line":100,"missingDoc":false,"filters":[],"uses":{"trigger_error":[102]},"used_by":[]},"SimplePie_Cache::register":{"doc":"\/**\n * Register a handler\n *\n * @param string $type DSN type to register for\n * @param string $class Name of handler class. Must implement SimplePie_Cache_Base\n *\/","file":"SimplePie\/Cache.php","line":112,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Cache::parse_URL":{"doc":"\/**\n * Parse a URL into an array\n *\n * @param string $url\n * @return array\n *\/","file":"SimplePie\/Cache.php","line":123,"missingDoc":false,"filters":[],"uses":{"parse_url":[125],"parse_str":[129]},"used_by":[]},"SimplePie_Caption::__construct":{"doc":"\/**\n * Constructor, used to input the data\n *\n * For documentation on all the parameters, see the corresponding\n * properties and their accessors\n *\/","file":"SimplePie\/Caption.php","line":104,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Caption::__toString":{"doc":"\/**\n * String-ified version\n *\n * @return string\n *\/","file":"SimplePie\/Caption.php","line":118,"missingDoc":false,"filters":[],"uses":{"md5":[121],"serialize":[121]},"used_by":[]},"SimplePie_Caption::get_endtime":{"doc":"\/**\n * Get the end time\n *\n * @return string|null Time in the format 'hh:mm:ss.SSS'\n *\/","file":"SimplePie\/Caption.php","line":129,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Caption::get_language":{"doc":"\/**\n * Get the language\n *\n * @link http:\/\/tools.ietf.org\/html\/rfc3066\n * @return string|null Language code as per RFC 3066\n *\/","file":"SimplePie\/Caption.php","line":147,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Caption::get_starttime":{"doc":"\/**\n * Get the start time\n *\n * @return string|null Time in the format 'hh:mm:ss.SSS'\n *\/","file":"SimplePie\/Caption.php","line":164,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Caption::get_text":{"doc":"\/**\n * Get the text of the caption\n *\n * @return string|null\n *\/","file":"SimplePie\/Caption.php","line":181,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Caption::get_type":{"doc":"\/**\n * Get the content type (not MIME type)\n *\n * @return string|null Either 'text' or 'html'\n *\/","file":"SimplePie\/Caption.php","line":198,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Category::__construct":{"doc":"\/**\n * Constructor, used to input the data\n *\n * @param string $term\n * @param string $scheme\n * @param string $label\n *\/","file":"SimplePie\/Category.php","line":88,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Category::__toString":{"doc":"\/**\n * String-ified version\n *\n * @return string\n *\/","file":"SimplePie\/Category.php","line":100,"missingDoc":false,"filters":[],"uses":{"md5":[103],"serialize":[103]},"used_by":[]},"SimplePie_Category::get_term":{"doc":"\/**\n * Get the category identifier\n *\n * @return string|null\n *\/","file":"SimplePie\/Category.php","line":111,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Category::get_scheme":{"doc":"\/**\n * Get the categorization scheme identifier\n *\n * @return string|null\n *\/","file":"SimplePie\/Category.php","line":128,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Category::get_label":{"doc":"\/**\n * Get the human readable label\n *\n * @return string|null\n *\/","file":"SimplePie\/Category.php","line":145,"missingDoc":false,"filters":[],"uses":{"get_term":[153]},"used_by":[]},"SimplePie_Content_Type_Sniffer::__construct":{"doc":"\/**\n * Create an instance of the class with the input file\n *\n * @param SimplePie_Content_Type_Sniffer $file Input file\n *\/","file":"SimplePie\/Content\/Type\/Sniffer.php","line":74,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Content_Type_Sniffer::get_type":{"doc":"\/**\n * Get the Content-Type of the specified file\n *\n * @return string Actual Content-Type\n *\/","file":"SimplePie\/Content\/Type\/Sniffer.php","line":84,"missingDoc":false,"filters":[],"uses":{"text_or_binary":[94],"substr":[99,112,118],"strpos":[97],"trim":[105],"strtolower":[105],"unknown":[110,140],"image":[120],"feed_or_html":[131]},"used_by":[]},"SimplePie_Content_Type_Sniffer::text_or_binary":{"doc":"\/**\n * Sniff text or binary\n *\n * @return string Actual Content-Type\n *\/","file":"SimplePie\/Content\/Type\/Sniffer.php","line":149,"missingDoc":false,"filters":[],"uses":{"preg_match":[158],"substr":[151,152,153,154]},"used_by":[]},"SimplePie_Content_Type_Sniffer::unknown":{"doc":"\/**\n * Sniff unknown\n *\n * @return string Actual Content-Type\n *\/","file":"SimplePie\/Content\/Type\/Sniffer.php","line":173,"missingDoc":false,"filters":[],"uses":{"strspn":[175],"substr":[182,186,190,191,195,199,203,207,176,177,178],"text_or_binary":[213],"strtolower":[176,177,178]},"used_by":[]},"SimplePie_Content_Type_Sniffer::image":{"doc":"\/**\n * Sniff images\n *\n * @return string Actual Content-Type\n *\/","file":"SimplePie\/Content\/Type\/Sniffer.php","line":222,"missingDoc":false,"filters":[],"uses":{"substr":[229,233,237,241,224,225]},"used_by":[]},"SimplePie_Content_Type_Sniffer::feed_or_html":{"doc":"\/**\n * Sniff HTML\n *\n * @return string Actual Content-Type\n *\/","file":"SimplePie\/Content\/Type\/Sniffer.php","line":256,"missingDoc":false,"filters":[],"uses":{"strlen":[258],"strspn":[259,269],"strpos":[283,294,305],"substr":[292,303,314,315,319,280]},"used_by":[]},"SimplePie_Copyright::__construct":{"doc":"\/**\n * Constructor, used to input the data\n *\n * For documentation on all the parameters, see the corresponding\n * properties and their accessors\n *\/","file":"SimplePie\/Copyright.php","line":79,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Copyright::__toString":{"doc":"\/**\n * String-ified version\n *\n * @return string\n *\/","file":"SimplePie\/Copyright.php","line":90,"missingDoc":false,"filters":[],"uses":{"md5":[93],"serialize":[93]},"used_by":[]},"SimplePie_Copyright::get_url":{"doc":"\/**\n * Get the copyright URL\n *\n * @return string|null URL to copyright information\n *\/","file":"SimplePie\/Copyright.php","line":101,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Copyright::get_attribution":{"doc":"\/**\n * Get the attribution text\n *\n * @return string|null\n *\/","file":"SimplePie\/Copyright.php","line":118,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Credit::__construct":{"doc":"\/**\n * Constructor, used to input the data\n *\n * For documentation on all the parameters, see the corresponding\n * properties and their accessors\n *\/","file":"SimplePie\/Credit.php","line":87,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Credit::__toString":{"doc":"\/**\n * String-ified version\n *\n * @return string\n *\/","file":"SimplePie\/Credit.php","line":99,"missingDoc":false,"filters":[],"uses":{"md5":[102],"serialize":[102]},"used_by":[]},"SimplePie_Credit::get_role":{"doc":"\/**\n * Get the role of the person receiving credit\n *\n * @return string|null\n *\/","file":"SimplePie\/Credit.php","line":110,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Credit::get_scheme":{"doc":"\/**\n * Get the organizational scheme\n *\n * @return string|null\n *\/","file":"SimplePie\/Credit.php","line":127,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Credit::get_name":{"doc":"\/**\n * Get the credited person\/entity's name\n *\n * @return string|null\n *\/","file":"SimplePie\/Credit.php","line":144,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Decode_HTML_Entities::__construct":{"doc":"\/**\n * Create an instance of the class with the input data\n *\n * @access public\n * @param string $data Input data\n *\/","file":"SimplePie\/Decode\/HTML\/Entities.php","line":86,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Decode_HTML_Entities::parse":{"doc":"\/**\n * Parse the input data\n *\n * @access public\n * @return string Output data\n *\/","file":"SimplePie\/Decode\/HTML\/Entities.php","line":97,"missingDoc":false,"filters":[],"uses":{"strpos":[99],"consume":[101],"entity":[102]},"used_by":[]},"SimplePie_Decode_HTML_Entities::consume":{"doc":"\/**\n * Consume the next byte\n *\n * @access private\n * @return mixed The next byte, or false, if there is no more data\n *\/","file":"SimplePie\/Decode\/HTML\/Entities.php","line":114,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Decode_HTML_Entities::consume_range":{"doc":"\/**\n * Consume a range of characters\n *\n * @access private\n * @param string $chars Characters to consume\n * @return mixed A series of characters that match the range, or false\n *\/","file":"SimplePie\/Decode\/HTML\/Entities.php","line":134,"missingDoc":false,"filters":[],"uses":{"substr":[138],"strspn":[136]},"used_by":[]},"SimplePie_Decode_HTML_Entities::unconsume":{"doc":"\/**\n * Unconsume one byte\n *\n * @access private\n *\/","file":"SimplePie\/Decode\/HTML\/Entities.php","line":154,"missingDoc":false,"filters":[],"uses":{"substr":[156]},"used_by":[]},"SimplePie_Decode_HTML_Entities::entity":{"doc":"\/**\n * Decode an entity\n *\n * @access private\n *\/","file":"SimplePie\/Decode\/HTML\/Entities.php","line":165,"missingDoc":false,"filters":[],"uses":{"consume":[167,181,218,599],"unconsume":[192,220],"hexdec":[202],"intval":[206],"in_array":[218],"strlen":[223,225,610,610,611,611],"substr_replace":[224,610],"consume_range":[196],"substr":[601]},"used_by":[]},"SimplePie_Enclosure::__construct":{"doc":"\/**\n * Constructor, used to input the data\n *\n * For documentation on all the parameters, see the corresponding\n * properties and their accessors\n *\n * @uses idna_convert If available, this will convert an IDN\n *\/","file":"SimplePie\/Enclosure.php","line":227,"missingDoc":false,"filters":[],"uses":{"encode":[259],"class_exists":[255],"get_handler":[261]},"used_by":[]},"SimplePie_Enclosure::__toString":{"doc":"\/**\n * String-ified version\n *\n * @return string\n *\/","file":"SimplePie\/Enclosure.php","line":269,"missingDoc":false,"filters":[],"uses":{"md5":[272],"serialize":[272]},"used_by":[]},"SimplePie_Enclosure::get_bitrate":{"doc":"\/**\n * Get the bitrate\n *\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":280,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_caption":{"doc":"\/**\n * Get a single caption\n *\n * @param int $key\n * @return SimplePie_Caption|null\n *\/","file":"SimplePie\/Enclosure.php","line":298,"missingDoc":false,"filters":[],"uses":{"get_captions":[300]},"used_by":[]},"SimplePie_Enclosure::get_captions":{"doc":"\/**\n * Get all captions\n *\n * @return array|null Array of {@see SimplePie_Caption} objects\n *\/","file":"SimplePie\/Enclosure.php","line":316,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_category":{"doc":"\/**\n * Get a single category\n *\n * @param int $key\n * @return SimplePie_Category|null\n *\/","file":"SimplePie\/Enclosure.php","line":334,"missingDoc":false,"filters":[],"uses":{"get_categories":[336]},"used_by":[]},"SimplePie_Enclosure::get_categories":{"doc":"\/**\n * Get all categories\n *\n * @return array|null Array of {@see SimplePie_Category} objects\n *\/","file":"SimplePie\/Enclosure.php","line":352,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_channels":{"doc":"\/**\n * Get the number of audio channels\n *\n * @return int|null\n *\/","file":"SimplePie\/Enclosure.php","line":369,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_copyright":{"doc":"\/**\n * Get the copyright information\n *\n * @return SimplePie_Copyright|null\n *\/","file":"SimplePie\/Enclosure.php","line":386,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_credit":{"doc":"\/**\n * Get a single credit\n *\n * @param int $key\n * @return SimplePie_Credit|null\n *\/","file":"SimplePie\/Enclosure.php","line":404,"missingDoc":false,"filters":[],"uses":{"get_credits":[406]},"used_by":[]},"SimplePie_Enclosure::get_credits":{"doc":"\/**\n * Get all credits\n *\n * @return array|null Array of {@see SimplePie_Credit} objects\n *\/","file":"SimplePie\/Enclosure.php","line":422,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_description":{"doc":"\/**\n * Get the description of the enclosure\n *\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":439,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_duration":{"doc":"\/**\n * Get the duration of the enclosure\n *\n * @param string $convert Convert seconds into hh:mm:ss\n * @return string|int|null 'hh:mm:ss' string if `$convert` was specified, otherwise integer (or null if none found)\n *\/","file":"SimplePie\/Enclosure.php","line":457,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_expression":{"doc":"\/**\n * Get the expression\n *\n * @return string Probably one of 'sample', 'full', 'nonstop', 'clip'. Defaults to 'full'\n *\/","file":"SimplePie\/Enclosure.php","line":482,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_extension":{"doc":"\/**\n * Get the file extension\n *\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":499,"missingDoc":false,"filters":[],"uses":{"pathinfo":[506]},"used_by":[]},"SimplePie_Enclosure::get_framerate":{"doc":"\/**\n * Get the framerate (in frames-per-second)\n *\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":517,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_handler":{"doc":"\/**\n * Get the preferred handler\n *\n * @return string|null One of 'flash', 'fmedia', 'quicktime', 'wmedia', 'mp3'\n *\/","file":"SimplePie\/Enclosure.php","line":534,"missingDoc":false,"filters":[],"uses":{"get_real_type":[536]},"used_by":[]},"SimplePie_Enclosure::get_hash":{"doc":"\/**\n * Get a single hash\n *\n * @link http:\/\/www.rssboard.org\/media-rss#media-hash\n * @param int $key\n * @return string|null Hash as per `media:hash`, prefixed with \"$algo:\"\n *\/","file":"SimplePie\/Enclosure.php","line":546,"missingDoc":false,"filters":[],"uses":{"get_hashes":[548]},"used_by":[]},"SimplePie_Enclosure::get_hashes":{"doc":"\/**\n * Get all credits\n *\n * @return array|null Array of strings, see {@see get_hash()}\n *\/","file":"SimplePie\/Enclosure.php","line":564,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_height":{"doc":"\/**\n * Get the height\n *\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":581,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_language":{"doc":"\/**\n * Get the language\n *\n * @link http:\/\/tools.ietf.org\/html\/rfc3066\n * @return string|null Language code as per RFC 3066\n *\/","file":"SimplePie\/Enclosure.php","line":599,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_keyword":{"doc":"\/**\n * Get a single keyword\n *\n * @param int $key\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":617,"missingDoc":false,"filters":[],"uses":{"get_keywords":[619]},"used_by":[]},"SimplePie_Enclosure::get_keywords":{"doc":"\/**\n * Get all keywords\n *\n * @return array|null Array of strings\n *\/","file":"SimplePie\/Enclosure.php","line":635,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_length":{"doc":"\/**\n * Get length\n *\n * @return float Length in bytes\n *\/","file":"SimplePie\/Enclosure.php","line":652,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_link":{"doc":"\/**\n * Get the URL\n *\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":669,"missingDoc":false,"filters":[],"uses":{"urldecode":[673]},"used_by":[]},"SimplePie_Enclosure::get_medium":{"doc":"\/**\n * Get the medium\n *\n * @link http:\/\/www.rssboard.org\/media-rss#media-content\n * @return string|null Should be one of 'image', 'audio', 'video', 'document', 'executable'\n *\/","file":"SimplePie\/Enclosure.php","line":687,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_player":{"doc":"\/**\n * Get the player URL\n *\n * Typically the same as {@see get_permalink()}\n * @return string|null Player URL\n *\/","file":"SimplePie\/Enclosure.php","line":705,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_rating":{"doc":"\/**\n * Get a single rating\n *\n * @param int $key\n * @return SimplePie_Rating|null\n *\/","file":"SimplePie\/Enclosure.php","line":723,"missingDoc":false,"filters":[],"uses":{"get_ratings":[725]},"used_by":[]},"SimplePie_Enclosure::get_ratings":{"doc":"\/**\n * Get all ratings\n *\n * @return array|null Array of {@see SimplePie_Rating} objects\n *\/","file":"SimplePie\/Enclosure.php","line":741,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_restriction":{"doc":"\/**\n * Get a single restriction\n *\n * @param int $key\n * @return SimplePie_Restriction|null\n *\/","file":"SimplePie\/Enclosure.php","line":759,"missingDoc":false,"filters":[],"uses":{"get_restrictions":[761]},"used_by":[]},"SimplePie_Enclosure::get_restrictions":{"doc":"\/**\n * Get all restrictions\n *\n * @return array|null Array of {@see SimplePie_Restriction} objects\n *\/","file":"SimplePie\/Enclosure.php","line":777,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_sampling_rate":{"doc":"\/**\n * Get the sampling rate (in kHz)\n *\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":794,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_size":{"doc":"\/**\n * Get the file size (in MiB)\n *\n * @return float|null File size in mebibytes (1048 bytes)\n *\/","file":"SimplePie\/Enclosure.php","line":811,"missingDoc":false,"filters":[],"uses":{"get_length":[813],"round":[816]},"used_by":[]},"SimplePie_Enclosure::get_thumbnail":{"doc":"\/**\n * Get a single thumbnail\n *\n * @param int $key\n * @return string|null Thumbnail URL\n *\/","file":"SimplePie\/Enclosure.php","line":830,"missingDoc":false,"filters":[],"uses":{"get_thumbnails":[832]},"used_by":[]},"SimplePie_Enclosure::get_thumbnails":{"doc":"\/**\n * Get all thumbnails\n *\n * @return array|null Array of thumbnail URLs\n *\/","file":"SimplePie\/Enclosure.php","line":848,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_title":{"doc":"\/**\n * Get the title\n *\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":865,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_type":{"doc":"\/**\n * Get mimetype of the enclosure\n *\n * @see get_real_type()\n * @return string|null MIME type\n *\/","file":"SimplePie\/Enclosure.php","line":883,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::get_width":{"doc":"\/**\n * Get the width\n *\n * @return string|null\n *\/","file":"SimplePie\/Enclosure.php","line":900,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Enclosure::native_embed":{"doc":"\/**\n * Embed the enclosure using `<embed>`\n *\n * @deprecated Use the second parameter to {@see embed} instead\n *\n * @param array|string $options See first paramter to {@see embed}\n * @return string HTML string to output\n *\/","file":"SimplePie\/Enclosure.php","line":920,"missingDoc":false,"filters":[],"uses":{"embed":[922]},"used_by":[]},"SimplePie_Enclosure::embed":{"doc":"\/**\n * Embed the enclosure using Javascript\n *\n * `$options` is an array or comma-separated key:value string, with the\n * following properties:\n *\n * - `alt` (string): Alternate content for when an end-user does not have\n *    the appropriate handler installed or when a file type is\n *    unsupported. Can be any text or HTML. Defaults to blank.\n * - `altclass` (string): If a file type is unsupported, the end-user will\n *    see the alt text (above) linked directly to the content. That link\n *    will have this value as its class name. Defaults to blank.\n * - `audio` (string): This is an image that should be used as a\n *    placeholder for audio files before they're loaded (QuickTime-only).\n *    Can be any relative or absolute URL. Defaults to blank.\n * - `bgcolor` (string): The background color for the media, if not\n *    already transparent. Defaults to `#ffffff`.\n * - `height` (integer): The height of the embedded media. Accepts any\n *    numeric pixel value (such as `360`) or `auto`. Defaults to `auto`,\n *    and it is recommended that you use this default.\n * - `loop` (boolean): Do you want the media to loop when its done?\n *    Defaults to `false`.\n * - `mediaplayer` (string): The location of the included\n *    `mediaplayer.swf` file. This allows for the playback of Flash Video\n *    (`.flv`) files, and is the default handler for non-Odeo MP3's.\n *    Defaults to blank.\n * - `video` (string): This is an image that should be used as a\n *    placeholder for video files before they're loaded (QuickTime-only).\n *    Can be any relative or absolute URL. Defaults to blank.\n * - `width` (integer): The width of the embedded media. Accepts any\n *    numeric pixel value (such as `480`) or `auto`. Defaults to `auto`,\n *    and it is recommended that you use this default.\n * - `widescreen` (boolean): Is the enclosure widescreen or standard?\n *    This applies only to video enclosures, and will automatically resize\n *    the content appropriately.  Defaults to `false`, implying 4:3 mode.\n *\n * Note: Non-widescreen (4:3) mode with `width` and `height` set to `auto`\n * will default to 480x360 video resolution.  Widescreen (16:9) mode with\n * `width` and `height` set to `auto` will default to 480x270 video resolution.\n *\n * @todo If the dimensions for media:content are defined, use them when width\/height are set to 'auto'.\n * @param array|string $options Comma-separated key:value list, or array\n * @param bool $native Use `<embed>`\n * @return string HTML string to output\n *\/","file":"SimplePie\/Enclosure.php","line":970,"missingDoc":false,"filters":[],"uses":{"get_handler":[983],"get_real_type":[984],"extract":[989],"explode":[993,996,1047],"trim":[999,1000],"is_array":[987],"round":[1061,1065,1095,1099],"intval":[1061,1065,1095,1099],"get_link":[1129,1133,1144,1148,1161,1165,1170,1180,1184,1189],"rawurlencode":[1144,1148],"get_extension":[1144,1148]},"used_by":[]},"SimplePie_Enclosure::get_real_type":{"doc":"\/**\n * Get the real media type\n *\n * Often, feeds lie to us, necessitating a bit of deeper inspection. This\n * converts types to their canonical representations based on the file\n * extension\n *\n * @see get_type()\n * @param bool $find_handler Internal use only, use {@see get_handler()} instead\n * @return string MIME type\n *\/","file":"SimplePie\/Enclosure.php","line":1205,"missingDoc":false,"filters":[],"uses":{"strtolower":[1216,1226],"get_type":[1214],"get_extension":[1226],"in_array":[1224,1353,1357,1361,1365,1349],"array_merge":[1224]},"used_by":[]},"SimplePie_File::__construct":{"doc":"","file":"SimplePie\/File.php","line":68,"missingDoc":true,"filters":[],"uses":{"encode":[74],"class_exists":[70],"ini_get":[82,110,110],"is_array":[85],"curl_init":[92],"curl_setopt":[100,102,103,104,105,106,107,108,109,112,113,119],"version_compare":[98,110],"curl_exec":[116,120],"curl_errno":[117,117,124,122],"curl_error":[124],"curl_getinfo":[129],"curl_close":[130],"explode":[131],"array_pop":[132],"__construct":[143,225],"in_array":[139,221],"parse":[134,235,216],"parse_url":[151],"strtolower":[153,230],"fsockopen":[162],"stream_set_timeout":[170],"extension_loaded":[189],"base64_encode":[196],"fwrite":[203],"stream_get_meta_data":[205,211],"fread":[210],"trim":[230],"function_exists":[255,89],"gzdecode":[255],"gzuncompress":[251],"gzinflate":[247],"fclose":[278],"file_get_contents":[285],"preg_match":[78]},"used_by":[]},"SimplePie_gzdecode::__set":{"doc":"\/**\n * Don't allow anything to be set\n *\n * @param string $name\n * @param mixed $value\n *\/","file":"SimplePie\/gzdecode.php","line":181,"missingDoc":false,"filters":[],"uses":{"trigger_error":[183]},"used_by":[]},"SimplePie_gzdecode::__construct":{"doc":"\/**\n * Set the compressed string and related properties\n *\n * @param string $data\n *\/","file":"SimplePie\/gzdecode.php","line":191,"missingDoc":false,"filters":[],"uses":{"strlen":[194]},"used_by":[]},"SimplePie_gzdecode::parse":{"doc":"\/**\n * Decode the GZIP stream\n *\n * @return bool Successfulness\n *\/","file":"SimplePie\/gzdecode.php","line":202,"missingDoc":false,"filters":[],"uses":{"substr":[207,225,254,262,282,302,319,322,338,348,356],"ord":[213,235,238],"strrev":[229],"current":[227,231,254,319,348,356],"unpack":[227,231,254,319,348,356],"strcspn":[275,295],"crc32":[322],"gzinflate":[338],"sprintf":[358,358],"strlen":[358]},"used_by":[]},"SimplePie_HTTP_Parser::__construct":{"doc":"\/**\n * Create an instance of the class with the input data\n *\n * @param string $data Input data\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":136,"missingDoc":false,"filters":[],"uses":{"strlen":[139]},"used_by":[]},"SimplePie_HTTP_Parser::parse":{"doc":"\/**\n * Parse the input data\n *\n * @return bool true on success, false on failure\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":147,"missingDoc":false,"filters":[],"uses":{"has_data":[149]},"used_by":[]},"SimplePie_HTTP_Parser::has_data":{"doc":"\/**\n * Check whether there is data beyond the pointer\n *\n * @return bool true if there is further data, false if not\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":175,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_HTTP_Parser::is_linear_whitespace":{"doc":"\/**\n * See if the next character is LWS\n *\n * @return bool true if the next character is LWS, false if not\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":185,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_HTTP_Parser::http_version":{"doc":"\/**\n * Parse the HTTP version\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":197,"missingDoc":false,"filters":[],"uses":{"strspn":[201,207],"substr":[202,199],"substr_count":[204],"strpos":[199],"strtoupper":[199]},"used_by":[]},"SimplePie_HTTP_Parser::status":{"doc":"\/**\n * Parse the status code\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":224,"missingDoc":false,"filters":[],"uses":{"substr":[228],"strspn":[226]},"used_by":[]},"SimplePie_HTTP_Parser::reason":{"doc":"\/**\n * Parse the reason phrase\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":241,"missingDoc":false,"filters":[],"uses":{"strcspn":[243],"trim":[244],"substr":[244]},"used_by":[]},"SimplePie_HTTP_Parser::new_line":{"doc":"\/**\n * Deal with a new line, shifting data around as needed\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":252,"missingDoc":false,"filters":[],"uses":{"trim":[254],"strtolower":[257],"substr":[270]},"used_by":[]},"SimplePie_HTTP_Parser::name":{"doc":"\/**\n * Parse a header name\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":289,"missingDoc":false,"filters":[],"uses":{"strcspn":[291],"substr":[301]},"used_by":[]},"SimplePie_HTTP_Parser::linear_whitespace":{"doc":"\/**\n * Parse LWS, replacing consecutive LWS characters with a single space\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":315,"missingDoc":false,"filters":[],"uses":{"has_data":[328],"is_linear_whitespace":[328],"substr":[319],"strspn":[327]},"used_by":[]},"SimplePie_HTTP_Parser::value":{"doc":"\/**\n * See what state to move to while within non-quoted header values\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":335,"missingDoc":false,"filters":[],"uses":{"linear_whitespace":[339],"strtolower":[348],"is_linear_whitespace":[337]},"used_by":[]},"SimplePie_HTTP_Parser::value_char":{"doc":"\/**\n * Parse a header value while outside quotes\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":374,"missingDoc":false,"filters":[],"uses":{"strcspn":[376],"substr":[377]},"used_by":[]},"SimplePie_HTTP_Parser::quote":{"doc":"\/**\n * See what state to move to while within quoted header values\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":385,"missingDoc":false,"filters":[],"uses":{"linear_whitespace":[389],"is_linear_whitespace":[387]},"used_by":[]},"SimplePie_HTTP_Parser::quote_char":{"doc":"\/**\n * Parse a header value while within quotes\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":420,"missingDoc":false,"filters":[],"uses":{"strcspn":[422],"substr":[423]},"used_by":[]},"SimplePie_HTTP_Parser::quote_escaped":{"doc":"\/**\n * Parse an escaped character within quotes\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":431,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_HTTP_Parser::body":{"doc":"\/**\n * Parse the body\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":441,"missingDoc":false,"filters":[],"uses":{"substr":[443]},"used_by":[]},"SimplePie_HTTP_Parser::chunked":{"doc":"\/**\n * Parsed a \"Transfer-Encoding: chunked\" body\n *\/","file":"SimplePie\/HTTP\/Parser.php","line":458,"missingDoc":false,"filters":[],"uses":{"preg_match":[460,471],"trim":[460,479,492],"hexdec":[479],"strlen":[488],"substr":[489,490]},"used_by":[]},"SimplePie_IRI::__toString":{"doc":"\/**\n * Return the entire IRI when you try and read the object as a string\n *\n * @return string\n *\/","file":"SimplePie\/IRI.php","line":138,"missingDoc":false,"filters":[],"uses":{"get_iri":[140]},"used_by":[]},"SimplePie_IRI::__set":{"doc":"\/**\n * Overload __set() to provide access via properties\n *\n * @param string $name Property name\n * @param mixed $value Property value\n *\/","file":"SimplePie\/IRI.php","line":149,"missingDoc":false,"filters":[],"uses":{"call_user_func":[153,164],"substr":[164],"method_exists":[151]},"used_by":[]},"SimplePie_IRI::__get":{"doc":"\/**\n * Overload __get() to provide access via properties\n *\n * @param string $name Property name\n * @return mixed\n *\/","file":"SimplePie\/IRI.php","line":174,"missingDoc":false,"filters":[],"uses":{"get_object_vars":[178],"array_key_exists":[189,194,200],"substr":[200],"trigger_error":[207],"get_class":[207]},"used_by":[]},"SimplePie_IRI::__isset":{"doc":"\/**\n * Overload __isset() to provide access via properties\n *\n * @param string $name Property name\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":227,"missingDoc":false,"filters":[],"uses":{"method_exists":[229]},"used_by":[]},"SimplePie_IRI::__unset":{"doc":"\/**\n * Overload __unset() to provide access via properties\n *\n * @param string $name Property name\n *\/","file":"SimplePie\/IRI.php","line":244,"missingDoc":false,"filters":[],"uses":{"call_user_func":[248],"method_exists":[246]},"used_by":[]},"SimplePie_IRI::__construct":{"doc":"\/**\n * Create a new IRI object, from a specified string\n *\n * @param string $iri\n *\/","file":"SimplePie\/IRI.php","line":257,"missingDoc":false,"filters":[],"uses":{"set_iri":[259]},"used_by":[]},"SimplePie_IRI::absolutize":{"doc":"\/**\n * Create a new IRI object by resolving a relative IRI\n *\n * Returns false if $base is not absolute, otherwise an IRI.\n *\n * @param IRI|string $base (Absolute) Base IRI\n * @param IRI|string $relative Relative IRI\n * @return IRI|false\n *\/","file":"SimplePie\/IRI.php","line":271,"missingDoc":false,"filters":[],"uses":{"strrpos":[317],"substr":[319],"remove_dot_segments":[325],"get_iri":[293],"scheme_normalization":[348],"is_valid":[291,277]},"used_by":[]},"SimplePie_IRI::parse_iri":{"doc":"\/**\n * Parse an IRI into scheme\/authority\/path\/query\/fragment segments\n *\n * @param string $iri\n * @return array\n *\/","file":"SimplePie\/IRI.php","line":364,"missingDoc":false,"filters":[],"uses":{"trim":[366],"preg_match":[367]},"used_by":[]},"SimplePie_IRI::remove_dot_segments":{"doc":"\/**\n * Remove dot segments from a path\n *\n * @param string $input\n * @return string\n *\/","file":"SimplePie\/IRI.php","line":404,"missingDoc":false,"filters":[],"uses":{"strpos":[407,407,414,419,428,444,410],"substr":[412,416,421,430,446],"substr_replace":[431,436,447],"strrpos":[431,436]},"used_by":[]},"SimplePie_IRI::replace_invalid_with_pct_encoding":{"doc":"\/**\n * Replace invalid character with percent encoding\n *\n * @param string $string Input string\n * @param string $extra_chars Valid characters not in iunreserved or\n *                            iprivate (this is ASCII-only)\n * @param bool $iprivate Allow iprivate\n * @return string\n *\/","file":"SimplePie\/IRI.php","line":467,"missingDoc":false,"filters":[],"uses":{"preg_replace_callback":[470],"preg_replace":[473],"strlen":[481],"strspn":[482],"ord":[484,528,583],"substr_replace":[583],"sprintf":[583]},"used_by":[]},"SimplePie_IRI::remove_iunreserved_percent_encoded":{"doc":"\/**\n * Callback function for preg_replace_callback.\n *\n * Removes sequences of percent encoded bytes that represent UTF-8\n * encoded characters in iunreserved\n *\n * @param array $match PCRE match\n * @return string Replacement\n *\/","file":"SimplePie\/IRI.php","line":603,"missingDoc":false,"filters":[],"uses":{"explode":[607],"count":[616],"hexdec":[618,716],"strtoupper":[709,728],"chr":[716]},"used_by":[]},"SimplePie_IRI::scheme_normalization":{"doc":"","file":"SimplePie\/IRI.php","line":735,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_IRI::is_valid":{"doc":"\/**\n * Check if the object represents a valid IRI. This needs to be done on each\n * call as some things change depending on another part of the IRI.\n *\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":769,"missingDoc":false,"filters":[],"uses":{"substr":[776],"strpos":[781,782,782,782]},"used_by":[]},"SimplePie_IRI::set_iri":{"doc":"\/**\n * Set the entire IRI. Returns true on success, false on failure (if there\n * are any invalid characters).\n *\n * @param string $iri\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":800,"missingDoc":false,"filters":[],"uses":{"parse_iri":[826],"set_scheme":[832],"set_authority":[833],"set_path":[834],"set_query":[835],"set_fragment":[836]},"used_by":[]},"SimplePie_IRI::set_scheme":{"doc":"\/**\n * Set the scheme. Returns true on success, false on failure (if there are\n * any invalid characters).\n *\n * @param string $scheme\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":857,"missingDoc":false,"filters":[],"uses":{"preg_match":[863],"strtolower":[870]},"used_by":[]},"SimplePie_IRI::set_authority":{"doc":"\/**\n * Set the authority. Returns true on success, false on failure (if there are\n * any invalid characters).\n *\n * @param string $authority\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":882,"missingDoc":false,"filters":[],"uses":{"substr":[909,910,918,922],"strrpos":[907],"strpos":[916,916],"set_userinfo":[929],"set_host":[930],"set_port":[931]},"used_by":[]},"SimplePie_IRI::set_userinfo":{"doc":"\/**\n * Set the iuserinfo.\n *\n * @param string $iuserinfo\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":948,"missingDoc":false,"filters":[],"uses":{"replace_invalid_with_pct_encoding":[956],"scheme_normalization":[957]},"used_by":[]},"SimplePie_IRI::set_host":{"doc":"\/**\n * Set the ihost. Returns true on success, false on failure (if there are\n * any invalid characters).\n *\n * @param string $ihost\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":970,"missingDoc":false,"filters":[],"uses":{"substr":[977,977,981,979],"replace_invalid_with_pct_encoding":[991],"strlen":[997],"strcspn":[998],"strtolower":[1006],"scheme_normalization":[1014]},"used_by":[]},"SimplePie_IRI::set_port":{"doc":"\/**\n * Set the port. Returns true on success, false on failure (if there are\n * any invalid characters).\n *\n * @param string $port\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":1026,"missingDoc":false,"filters":[],"uses":{"strspn":[1033],"strlen":[1033],"scheme_normalization":[1036]},"used_by":[]},"SimplePie_IRI::set_path":{"doc":"\/**\n * Set the ipath.\n *\n * @param string $ipath\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":1052,"missingDoc":false,"filters":[],"uses":{"replace_invalid_with_pct_encoding":[1068],"remove_dot_segments":[1069],"scheme_normalization":[1075]},"used_by":[]},"SimplePie_IRI::set_query":{"doc":"\/**\n * Set the iquery.\n *\n * @param string $iquery\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":1085,"missingDoc":false,"filters":[],"uses":{"replace_invalid_with_pct_encoding":[1093],"scheme_normalization":[1094]},"used_by":[]},"SimplePie_IRI::set_fragment":{"doc":"\/**\n * Set the ifragment.\n *\n * @param string $ifragment\n * @return bool\n *\/","file":"SimplePie\/IRI.php","line":1105,"missingDoc":false,"filters":[],"uses":{"replace_invalid_with_pct_encoding":[1113],"scheme_normalization":[1114]},"used_by":[]},"SimplePie_IRI::to_uri":{"doc":"\/**\n * Convert an IRI to a URI (or parts thereof)\n *\n * @return string\n *\/","file":"SimplePie\/IRI.php","line":1124,"missingDoc":false,"filters":[],"uses":{"implode":[1129],"range":[1129],"strlen":[1133],"strcspn":[1134],"substr_replace":[1136],"sprintf":[1136],"ord":[1136]},"used_by":[]},"SimplePie_IRI::get_iri":{"doc":"\/**\n * Get the complete IRI\n *\n * @return string\n *\/","file":"SimplePie\/IRI.php","line":1149,"missingDoc":false,"filters":[],"uses":{"is_valid":[1151],"get_iauthority":[1161]},"used_by":[]},"SimplePie_IRI::get_uri":{"doc":"\/**\n * Get the complete URI\n *\n * @return string\n *\/","file":"SimplePie\/IRI.php","line":1190,"missingDoc":false,"filters":[],"uses":{"to_uri":[1192],"get_iri":[1192]},"used_by":[]},"SimplePie_IRI::get_iauthority":{"doc":"\/**\n * Get the complete iauthority\n *\n * @return string\n *\/","file":"SimplePie\/IRI.php","line":1200,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_IRI::get_authority":{"doc":"\/**\n * Get the complete authority\n *\n * @return string\n *\/","file":"SimplePie\/IRI.php","line":1230,"missingDoc":false,"filters":[],"uses":{"get_iauthority":[1232],"to_uri":[1234],"is_string":[1233]},"used_by":[]},"SimplePie_Item::__construct":{"doc":"\/**\n * Create a new item object\n *\n * This is usually used by {@see SimplePie::get_items} and\n * {@see SimplePie::get_item}. Avoid creating this manually.\n *\n * @param SimplePie $feed Parent feed\n * @param array $data Raw data\n *\/","file":"SimplePie\/Item.php","line":91,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Item::set_registry":{"doc":"\/**\n * Set the registry handler\n *\n * This is usually used by {@see SimplePie_Registry::create}\n *\n * @since 1.3\n * @param SimplePie_Registry $registry\n *\/","file":"SimplePie\/Item.php","line":105,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Item::__toString":{"doc":"\/**\n * Get a string representation of the item\n *\n * @return string\n *\/","file":"SimplePie\/Item.php","line":115,"missingDoc":false,"filters":[],"uses":{"md5":[117],"serialize":[117]},"used_by":[]},"SimplePie_Item::__destruct":{"doc":"\/**\n * Remove items that link back to this before destroying this object\n *\/","file":"SimplePie\/Item.php","line":123,"missingDoc":false,"filters":[],"uses":{"version_compare":[125],"gc_enabled":[125],"ini_get":[125]},"used_by":[]},"SimplePie_Item::get_item_tags":{"doc":"\/**\n * Get data for an item-level element\n *\n * This method allows you to get access to ANY element\/attribute that is a\n * sub-element of the item\/entry tag.\n *\n * See {@see SimplePie::get_feed_tags()} for a description of the return value\n *\n * @since 1.0\n * @see http:\/\/simplepie.org\/wiki\/faq\/supported_xml_namespaces\n * @param string $namespace The URL of the XML namespace of the elements you're trying to access\n * @param string $tag Tag name\n * @return array\n *\/","file":"SimplePie\/Item.php","line":145,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Item::get_base":{"doc":"\/**\n * Get the base URL value from the parent feed\n *\n * Uses `<xml:base>`\n *\n * @param array $element\n * @return string\n *\/","file":"SimplePie\/Item.php","line":165,"missingDoc":false,"filters":[],"uses":{"get_base":[167]},"used_by":[]},"SimplePie_Item::sanitize":{"doc":"\/**\n * Sanitize feed data\n *\n * @access private\n * @see SimplePie::sanitize()\n * @param string $data Data to sanitize\n * @param int $type One of the SIMPLEPIE_CONSTRUCT_* constants\n * @param string $base Base URL to resolve URLs against\n * @return string Sanitized data\n *\/","file":"SimplePie\/Item.php","line":180,"missingDoc":false,"filters":[],"uses":{"sanitize":[182]},"used_by":[]},"SimplePie_Item::get_feed":{"doc":"\/**\n * Get the parent feed\n *\n * Note: this may not work as you think for multifeeds!\n *\n * @link http:\/\/simplepie.org\/faq\/typical_multifeed_gotchas#missing_data_from_feed\n * @since 1.0\n * @return SimplePie\n *\/","file":"SimplePie\/Item.php","line":194,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Item::get_id":{"doc":"\/**\n * Get the unique identifier for the item\n *\n * This is usually used when writing code to check for new items in a feed.\n *\n * Uses `<atom:id>`, `<guid>`, `<dc:identifier>` or the `about` attribute\n * for RDF. If none of these are supplied (or `$hash` is true), creates an\n * MD5 hash based on the permalink and title. If either of those are not\n * supplied, creates a hash based on the full feed data.\n *\n * @since Beta 2\n * @param boolean $hash Should we force using a hash instead of the supplied ID?\n * @return string\n *\/","file":"SimplePie\/Item.php","line":213,"missingDoc":false,"filters":[],"uses":{"sanitize":[219,223,227,231,235,239],"get_item_tags":[221,225,229,233,217],"get_permalink":[241,252,250],"get_title":[245,252,250],"md5":[252,256],"serialize":[256]},"used_by":[]},"SimplePie_Item::get_title":{"doc":"\/**\n * Get the title of the item\n *\n * Uses `<atom:title>`, `<title>` or `<dc:title>`\n *\n * @since Beta 2 (previously called `get_item_title` since 0.8)\n * @return string|null\n *\/","file":"SimplePie\/Item.php","line":268,"missingDoc":false,"filters":[],"uses":{"sanitize":[274,278,282,286,290,294,298],"call":[274,278],"get_base":[274,278,282,286,290],"get_item_tags":[276,280,284,288,292,296,272]},"used_by":[]},"SimplePie_Item::get_description":{"doc":"\/**\n * Get the content for the item\n *\n * Prefers summaries over full content , but will return full content if a\n * summary does not exist.\n *\n * To prefer full content instead, use {@see get_content}\n *\n * Uses `<atom:summary>`, `<description>`, `<dc:description>` or\n * `<itunes:subtitle>`\n *\n * @since 0.8\n * @param boolean $description_only Should we avoid falling back to the content?\n * @return string|null\n *\/","file":"SimplePie\/Item.php","line":323,"missingDoc":false,"filters":[],"uses":{"sanitize":[327,331,335,339,343,347,351,355,359],"call":[327,331],"get_base":[327,331,335,339,351],"get_item_tags":[329,333,337,341,345,349,353,357,325],"get_content":[364]},"used_by":[]},"SimplePie_Item::get_content":{"doc":"\/**\n * Get the content for the item\n *\n * Prefers full content over summaries, but will return a summary if full\n * content does not exist.\n *\n * To prefer summaries instead, use {@see get_description}\n *\n * Uses `<atom:content>` or `<content:encoded>` (RSS 1.0 Content Module)\n *\n * @since 1.0\n * @param boolean $content_only Should we avoid falling back to the description?\n * @return string|null\n *\/","file":"SimplePie\/Item.php","line":386,"missingDoc":false,"filters":[],"uses":{"sanitize":[390,394,398],"call":[390,394],"get_base":[390,394,398],"get_item_tags":[392,396,388],"get_description":[402]},"used_by":[]},"SimplePie_Item::get_category":{"doc":"\/**\n * Get a category for the item\n *\n * @since Beta 3 (previously called `get_categories()` since Beta 2)\n * @param int $key The category that you want to return.  Remember that arrays begin with 0, not 1\n * @return SimplePie_Category|null\n *\/","file":"SimplePie\/Item.php","line":417,"missingDoc":false,"filters":[],"uses":{"get_categories":[419]},"used_by":[]},"SimplePie_Item::get_categories":{"doc":"\/**\n * Get all categories for the item\n *\n * Uses `<atom:category>`, `<category>` or `<dc:subject>`\n *\n * @since Beta 3\n * @return array|null List of {@see SimplePie_Category} objects\n *\/","file":"SimplePie\/Item.php","line":438,"missingDoc":false,"filters":[],"uses":{"sanitize":[449,453,457,465,468,478,482],"create":[459,474,478,482],"get_item_tags":[442,461,476,480],"array_unique":[487]},"used_by":[]},"SimplePie_Item::get_author":{"doc":"\/**\n * Get an author for the item\n *\n * @since Beta 2\n * @param int $key The author that you want to return.  Remember that arrays begin with 0, not 1\n * @return SimplePie_Author|null\n *\/","file":"SimplePie\/Item.php","line":502,"missingDoc":false,"filters":[],"uses":{"get_authors":[504]},"used_by":[]},"SimplePie_Item::get_contributor":{"doc":"\/**\n * Get a contributor for the item\n *\n * @since 1.1\n * @param int $key The contrbutor that you want to return.  Remember that arrays begin with 0, not 1\n * @return SimplePie_Author|null\n *\/","file":"SimplePie\/Item.php","line":522,"missingDoc":false,"filters":[],"uses":{"get_contributors":[524]},"used_by":[]},"SimplePie_Item::get_contributors":{"doc":"\/**\n * Get all contributors for the item\n *\n * Uses `<atom:contributor>`\n *\n * @since 1.1\n * @return array|null List of {@see SimplePie_Author} objects\n *\/","file":"SimplePie\/Item.php","line":543,"missingDoc":false,"filters":[],"uses":{"sanitize":[553,557,561,575,579,583],"get_base":[557,579],"create":[565,587],"get_item_tags":[546,568],"array_unique":[593]},"used_by":[]},"SimplePie_Item::get_authors":{"doc":"\/**\n * Get all authors for the item\n *\n * Uses `<atom:author>`, `<author>`, `<dc:creator>` or `<itunes:author>`\n *\n * @since Beta 2\n * @return array|null List of {@see SimplePie_Author} objects\n *\/","file":"SimplePie\/Item.php","line":609,"missingDoc":false,"filters":[],"uses":{"sanitize":[619,623,627,641,645,649,658,662,666,670],"get_base":[623,645],"create":[631,653,658,662,666,670],"get_item_tags":[612,634,656,660,664,668],"array_unique":[675],"get_source":[677],"get_authors":[677,681]},"used_by":[]},"SimplePie_Item::get_copyright":{"doc":"\/**\n * Get the copyright info for the item\n *\n * Uses `<atom:rights>` or `<dc:rights>`\n *\n * @since 1.1\n * @return string\n *\/","file":"SimplePie\/Item.php","line":699,"missingDoc":false,"filters":[],"uses":{"sanitize":[703,707,711],"call":[703],"get_base":[703],"get_item_tags":[705,709,701]},"used_by":[]},"SimplePie_Item::get_date":{"doc":"\/**\n * Get the posting date\/time for the item\n *\n * Uses `<atom:published>`, `<atom:updated>`, `<atom:issued>`,\n * `<atom:modified>`, `<pubDate>` or `<dc:date>`\n *\n * Note: obeys PHP's timezone setting. To get a UTC date\/time, use\n * {@see get_gmdate}\n *\n * @since Beta 2 (previously called `get_item_date` since 0.8)\n *\n * @param string $date_format Supports any PHP date format from {@see http:\/\/php.net\/date} (empty for the raw data)\n * @return int|string|null\n *\/","file":"SimplePie\/Item.php","line":733,"missingDoc":false,"filters":[],"uses":{"get_item_tags":[741,745,749,753,757,761,765,737],"call":[772],"parse":[773],"sanitize":[786],"date":[792]},"used_by":[]},"SimplePie_Item::get_updated_date":{"doc":"\/**\n * Get the update date\/time for the item\n *\n * Uses `<atom:updated>`\n *\n * Note: obeys PHP's timezone setting. To get a UTC date\/time, use\n * {@see get_gmdate}\n *\n * @param string $date_format Supports any PHP date format from {@see http:\/\/php.net\/date} (empty for the raw data)\n * @return int|string|null\n *\/","file":"SimplePie\/Item.php","line":812,"missingDoc":false,"filters":[],"uses":{"get_item_tags":[816],"call":[823],"parse":[824],"sanitize":[837],"date":[843]},"used_by":[]},"SimplePie_Item::get_local_date":{"doc":"\/**\n * Get the localized posting date\/time for the item\n *\n * Returns the date formatted in the localized language. To display in\n * languages other than the server's default, you need to change the locale\n * with {@link http:\/\/php.net\/setlocale setlocale()}. The available\n * localizations depend on which ones are installed on your web server.\n *\n * @since 1.0\n *\n * @param string $date_format Supports any PHP date format from {@see http:\/\/php.net\/strftime} (empty for the raw data)\n * @return int|string|null\n *\/","file":"SimplePie\/Item.php","line":865,"missingDoc":false,"filters":[],"uses":{"sanitize":[869],"get_date":[869,871],"strftime":[873]},"used_by":[]},"SimplePie_Item::get_gmdate":{"doc":"\/**\n * Get the posting date\/time for the item (UTC time)\n *\n * @see get_date\n * @param string $date_format Supports any PHP date format from {@see http:\/\/php.net\/date}\n * @return int|string|null\n *\/","file":"SimplePie\/Item.php","line":888,"missingDoc":false,"filters":[],"uses":{"get_date":[890],"gmdate":[896]},"used_by":[]},"SimplePie_Item::get_updated_gmdate":{"doc":"\/**\n * Get the update date\/time for the item (UTC time)\n *\n * @see get_updated_date\n * @param string $date_format Supports any PHP date format from {@see http:\/\/php.net\/date}\n * @return int|string|null\n *\/","file":"SimplePie\/Item.php","line":906,"missingDoc":false,"filters":[],"uses":{"get_updated_date":[908],"gmdate":[914]},"used_by":[]},"SimplePie_Item::get_permalink":{"doc":"\/**\n * Get the permalink for the item\n *\n * Returns the first link available with a relationship of \"alternate\".\n * Identical to {@see get_link()} with key 0\n *\n * @see get_link\n * @since 0.8\n * @return string|null Permalink URL\n *\/","file":"SimplePie\/Item.php","line":927,"missingDoc":false,"filters":[],"uses":{"get_link":[929,937],"get_enclosure":[930]},"used_by":[]},"SimplePie_Item::get_link":{"doc":"\/**\n * Get a single link for the item\n *\n * @since Beta 3\n * @param int $key The link that you want to return.  Remember that arrays begin with 0, not 1\n * @param string $rel The relationship of the link to return\n * @return string|null Link URL\n *\/","file":"SimplePie\/Item.php","line":953,"missingDoc":false,"filters":[],"uses":{"get_links":[955]},"used_by":[]},"SimplePie_Item::get_links":{"doc":"\/**\n * Get all links for the item\n *\n * Uses `<atom:link>`, `<link>` or `<guid>`\n *\n * @since Beta 2\n * @param string $rel The relationship of links to return\n * @return array|null Links found for the item (strings)\n *\/","file":"SimplePie\/Item.php","line":975,"missingDoc":false,"filters":[],"uses":{"sanitize":[985,994,999,1003,1007,1013],"get_base":[985,994,999,1003,1007,1013],"get_item_tags":[980,989,997,1001,1005,1009],"strtolower":[1011],"trim":[1011],"array_keys":[1017],"array_merge":[1024],"substr":[1032,1034],"call":[1020],"array_unique":[1036]},"used_by":[]},"SimplePie_Item::get_enclosure":{"doc":"\/**\n * Get an enclosure from the item\n *\n * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.\n *\n * @since Beta 2\n * @todo Add ability to prefer one type of content over another (in a media group).\n * @param int $key The enclosure that you want to return.  Remember that arrays begin with 0, not 1\n * @return SimplePie_Enclosure|null\n *\/","file":"SimplePie\/Item.php","line":1059,"missingDoc":false,"filters":[],"uses":{"get_enclosures":[1061]},"used_by":[]},"SimplePie_Item::get_enclosures":{"doc":"\/**\n * Get all available enclosures (podcasts, etc.)\n *\n * Supports the <enclosure> RSS tag, as well as Media RSS and iTunes RSS.\n *\n * At this point, we're pretty much assuming that all enclosures for an item\n * are the same content.  Anything else is too complicated to\n * properly support.\n *\n * @since Beta 2\n * @todo Add support for end-user defined sorting of enclosures by type\/handler (so we can prefer the faster-loading FLV over MP4).\n * @todo If an element exists at a level, but it's value is empty, we should fall back to the value from the parent (if it exists).\n * @return array|null List of SimplePie_Enclosure items\n *\/","file":"SimplePie\/Item.php","line":1086,"missingDoc":false,"filters":[],"uses":{"get_feed":[1108],"sanitize":[1122,1126,1130,1134,1138,1154,1158,1162,1166,1170,1188,1192,1200,1211,1215,1223,1234,1244,1262,1266,1276,1280,1295,1299,1307,1321,1325,1333,1348,1355,1367,1396,1400,1417,1421,1440,1452,1464,1476,1494,1501,1514,1522,1535,1548,1556,1569,1589,1593,1597,1625,1629,1633,1668,1678,1688,1695,1775,1779,1783,1791,1795,1799,1803,1811,1815,1819,1823,1825,1841,1845,1849,1853,1857,1877,1881,1885,1889,1893,1917,1921,1929,1943,1947,1955,1980,1984,1994,1998,2017,2021,2029,2047,2051,2059,2076,2080,2096,2100,2121,2125,2148,2164,2184,2188,2204,2212,2229,2237,2261,2265,2269,2287,2291,2295,2314,2325,2340,2344,2397,2401,2405,2413,2417,2421,2425,2433,2437,2441,2445,2449,2465,2469,2473,2477,2481,2505,2509,2517,2546,2550,2569,2573,2581,2598,2614,2618,2641,2661,2677,2685,2709,2713,2717,2736,2751,2783,2786,2818,2821,2853,2856],"create":[1140,1172,1202,1225,1236,1246,1268,1282,1309,1335,1524,1537,1558,1571,1599,1613,1635,1649,1859,1895,1931,1957,1986,2000,2031,2061,2214,2239,2271,2297,2351,2483,2519,2552,2583,2687,2719,2758,2794,2829,2864,2871],"get_channel_tags":[1143,1204,1227,1270,1312,1351,1409,1460,1472,1497,1540,1561,1616,1638,1672,1691],"get_item_tags":[1111,1181,1256,1286,1344,1360,1388,1448,1436,1490,1527,1506,1602,1580,1662,1684,1733,2763,2798,2833],"array_values":[1177,1252,1340,1432,1486,1576,1654,1863,1899,1962,1966,1970,2035,2065,2110,2135,2157,2173,2218,2243,2275,2301,2318,2329,2487,2524,2528,2532,2587,2628,2650,2691,2723,2740,2874],"array_unique":[1177,1252,1340,1432,1486,1576,1654,1863,1899,1962,1966,1970,2035,2065,2110,2135,2157,2173,2218,2243,2275,2301,2318,2329,2487,2524,2528,2532,2587,2628,2650,2691,2723,2740,2874],"is_array":[1175,1250,1338,1430,1484,1574,1652,1861,1897,1964,1968,1960,1960,2033,2063,2108,2133,2155,2171,2216,2241,2273,2299,2316,2327,2485,2526,2530,2522,2522,2585,2626,2648,2689,2721,2738],"explode":[1367,1440,1452,1464,1476,2148,2164,2641],"array_pop":[1370,1374,1379],"sizeof":[1368,1372,1377,2868],"trim":[1443,1455,1467,1479,2151,2167,2644],"strtolower":[1609,1645],"ceil":[1807,2429,2790,2825,2860],"array_merge":[1962,2524],"get_base":[2783,2818,2853]},"used_by":[]},"SimplePie_Item::get_latitude":{"doc":"\/**\n * Get the latitude coordinates for the item\n *\n * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications\n *\n * Uses `<geo:lat>` or `<georss:point>`\n *\n * @since 1.0\n * @link http:\/\/www.w3.org\/2003\/01\/geo\/ W3C WGS84 Basic Geo\n * @link http:\/\/www.georss.org\/ GeoRSS\n * @return string|null\n *\/","file":"SimplePie\/Item.php","line":2898,"missingDoc":false,"filters":[],"uses":{"get_item_tags":[2904,2900],"preg_match":[2904],"trim":[2904]},"used_by":[]},"SimplePie_Item::get_longitude":{"doc":"\/**\n * Get the longitude coordinates for the item\n *\n * Compatible with the W3C WGS84 Basic Geo and GeoRSS specifications\n *\n * Uses `<geo:long>`, `<geo:lon>` or `<georss:point>`\n *\n * @since 1.0\n * @link http:\/\/www.w3.org\/2003\/01\/geo\/ W3C WGS84 Basic Geo\n * @link http:\/\/www.georss.org\/ GeoRSS\n * @return string|null\n *\/","file":"SimplePie\/Item.php","line":2926,"missingDoc":false,"filters":[],"uses":{"get_item_tags":[2932,2936,2928],"preg_match":[2936],"trim":[2936]},"used_by":[]},"SimplePie_Item::get_source":{"doc":"\/**\n * Get the `<atom:source>` for the item\n *\n * @since 1.1\n * @return SimplePie_Source|null\n *\/","file":"SimplePie\/Item.php","line":2952,"missingDoc":false,"filters":[],"uses":{"create":[2956],"get_item_tags":[2954]},"used_by":[]},"SimplePie_Locator::__construct":{"doc":"","file":"SimplePie\/Locator.php","line":68,"missingDoc":true,"filters":[],"uses":{"set_error_handler":[79],"loadHTML":[80],"restore_error_handler":[81],"class_exists":[75]},"used_by":[]},"SimplePie_Locator::set_registry":{"doc":"","file":"SimplePie\/Locator.php","line":89,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Locator::find":{"doc":"","file":"SimplePie\/Locator.php","line":94,"missingDoc":true,"filters":[],"uses":{"is_feed":[96],"create":[103],"get_type":[104],"get_base":[112],"autodiscovery":[115],"extension":[122,132],"body":[127,137],"get_links":[120]},"used_by":[]},"SimplePie_Locator::is_feed":{"doc":"","file":"SimplePie\/Locator.php","line":145,"missingDoc":true,"filters":[],"uses":{"create":[149],"get_type":[150],"in_array":[151]},"used_by":[]},"SimplePie_Locator::get_base":{"doc":"","file":"SimplePie\/Locator.php","line":170,"missingDoc":true,"filters":[],"uses":{"getElementsByTagName":[178],"call":[183],"trim":[183],"getAttribute":[183],"method_exists":[189],"getLineNo":[189],"hasAttribute":[181]},"used_by":[]},"SimplePie_Locator::autodiscovery":{"doc":"","file":"SimplePie\/Locator.php","line":195,"missingDoc":true,"filters":[],"uses":{"array_merge":[199,200,201],"search_elements_by_tag":[199,200,201],"array_values":[205]},"used_by":[]},"SimplePie_Locator::search_elements_by_tag":{"doc":"","file":"SimplePie\/Locator.php","line":213,"missingDoc":true,"filters":[],"uses":{"getElementsByTagName":[220],"array_unique":[229],"call":[229,234,238,245],"strtolower":[229,245],"getAttribute":[229,234,238,245],"method_exists":[230],"getLineNo":[230],"trim":[234,238],"create":[251],"is_feed":[252],"in_array":[245,245,245,245,245],"hasAttribute":[245,227,227]},"used_by":[]},"SimplePie_Locator::get_links":{"doc":"","file":"SimplePie\/Locator.php","line":264,"missingDoc":true,"filters":[],"uses":{"getElementsByTagName":[271],"trim":[276,282,286],"getAttribute":[276,282,286],"call":[277,282,286,293],"method_exists":[280],"getLineNo":[280],"preg_match":[278],"hasAttribute":[274],"array_unique":[306,307]},"used_by":[]},"SimplePie_Locator::extension":{"doc":"","file":"SimplePie\/Locator.php","line":315,"missingDoc":true,"filters":[],"uses":{"create":[330],"is_feed":[331],"in_array":[323],"strtolower":[323],"strrchr":[323]},"used_by":[]},"SimplePie_Locator::body":{"doc":"","file":"SimplePie\/Locator.php","line":344,"missingDoc":true,"filters":[],"uses":{"create":[358],"is_feed":[359],"preg_match":[352]},"used_by":[]},"SimplePie_Misc::time_hms":{"doc":"","file":"SimplePie\/Misc.php","line":52,"missingDoc":true,"filters":[],"uses":{"floor":[56,63]},"used_by":[]},"SimplePie_Misc::absolutize_url":{"doc":"","file":"SimplePie\/Misc.php","line":80,"missingDoc":true,"filters":[],"uses":{"get_uri":[87]},"used_by":[]},"SimplePie_Misc::get_element":{"doc":"\/**\n * Get a HTML\/XML element from a HTML string\n *\n * @deprecated Use DOMDocument instead (parsing HTML with regex is bad!)\n * @param string $realname Element name (including namespace prefix if applicable)\n * @param string $string HTML document\n * @return array\n *\/","file":"SimplePie\/Misc.php","line":98,"missingDoc":false,"filters":[],"uses":{"preg_quote":[101],"count":[104,121,123],"strlen":[109],"strtolower":[127],"end":[127],"preg_match_all":[119,102]},"used_by":[]},"SimplePie_Misc::element_implode":{"doc":"","file":"SimplePie\/Misc.php","line":135,"missingDoc":true,"filters":[],"uses":{"strtolower":[140],"htmlspecialchars":[141]},"used_by":[]},"SimplePie_Misc::error":{"doc":"","file":"SimplePie\/Misc.php","line":154,"missingDoc":true,"filters":[],"uses":{"function_exists":[175],"ini_get":[180,156],"is_writable":[181],"error_log":[188]},"used_by":[]},"SimplePie_Misc::fix_protocol":{"doc":"","file":"SimplePie\/Misc.php","line":195,"missingDoc":true,"filters":[],"uses":{"file_exists":[204],"strtolower":[213,217],"substr_replace":[215,219]},"used_by":[]},"SimplePie_Misc::parse_url":{"doc":"","file":"SimplePie\/Misc.php","line":227,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Misc::compress_parse_url":{"doc":"","file":"SimplePie\/Misc.php","line":239,"missingDoc":true,"filters":[],"uses":{"get_uri":[247]},"used_by":[]},"SimplePie_Misc::normalize_url":{"doc":"","file":"SimplePie\/Misc.php","line":250,"missingDoc":true,"filters":[],"uses":{"get_uri":[253]},"used_by":[]},"SimplePie_Misc::percent_encoding_normalization":{"doc":"","file":"SimplePie\/Misc.php","line":256,"missingDoc":true,"filters":[],"uses":{"hexdec":[258],"chr":[261],"strtoupper":[265]},"used_by":[]},"SimplePie_Misc::windows_1252_to_utf8":{"doc":"\/**\n * Converts a Windows-1252 encoded string to a UTF-8 encoded string\n *\n * @static\n * @param string $string Windows-1252 encoded string\n * @return string UTF-8 encoded string\n *\/","file":"SimplePie\/Misc.php","line":276,"missingDoc":false,"filters":[],"uses":{"strtr":[280]},"used_by":[]},"SimplePie_Misc::change_encoding":{"doc":"\/**\n * Change a string from one encoding to another\n *\n * @param string $data Raw data in $input encoding\n * @param string $input Encoding of $data\n * @param string $output Encoding you want\n * @return string|boolean False if we can't convert it\n *\/","file":"SimplePie\/Misc.php","line":291,"missingDoc":false,"filters":[],"uses":{"chr":[304],"substr":[307],"strcspn":[307],"function_exists":[316,321]},"used_by":[]},"SimplePie_Misc::change_encoding_mbstring":{"doc":"","file":"SimplePie\/Misc.php","line":332,"missingDoc":true,"filters":[],"uses":{"mb_convert_encoding":[352,362],"in_array":[356],"mb_list_encodings":[356]},"used_by":[]},"SimplePie_Misc::change_encoding_iconv":{"doc":"","file":"SimplePie\/Misc.php","line":370,"missingDoc":true,"filters":[],"uses":{"iconv":[372]},"used_by":[]},"SimplePie_Misc::encoding":{"doc":"\/**\n * Normalize an encoding name\n *\n * This is automatically generated by create.php\n *\n * To generate it, run `php create.php` on the command line, and copy the\n * output to replace this function.\n *\n * @param string $charset Character set to standardise\n * @return string Standardised name\n *\/","file":"SimplePie\/Misc.php","line":386,"missingDoc":false,"filters":[],"uses":{"strtolower":[389],"preg_replace":[389]},"used_by":[]},"SimplePie_Misc::get_curl_version":{"doc":"","file":"SimplePie\/Misc.php","line":1699,"missingDoc":true,"filters":[],"uses":{"substr":[1705,1707,1709,1711],"strcspn":[1707,1711],"is_array":[1701],"curl_version":[1701]},"used_by":[]},"SimplePie_Misc::strip_comments":{"doc":"\/**\n * Strip HTML comments\n *\n * @param string $data Data to strip comments from\n * @return string Comment stripped string\n *\/","file":"SimplePie\/Misc.php","line":1726,"missingDoc":false,"filters":[],"uses":{"strpos":[1729,1732],"substr":[1731],"substr_replace":[1734]},"used_by":[]},"SimplePie_Misc::parse_date":{"doc":"","file":"SimplePie\/Misc.php","line":1744,"missingDoc":true,"filters":[],"uses":{"parse":[1747]},"used_by":[]},"SimplePie_Misc::entities_decode":{"doc":"\/**\n * Decode HTML entities\n *\n * @deprecated Use DOMDocument instead\n * @param string $data Input data\n * @return string Output data\n *\/","file":"SimplePie\/Misc.php","line":1757,"missingDoc":false,"filters":[],"uses":{"parse":[1760]},"used_by":[]},"SimplePie_Misc::uncomment_rfc822":{"doc":"\/**\n * Remove RFC822 comments\n *\n * @param string $data Data to strip comments from\n * @return string Comment stripped string\n *\/","file":"SimplePie\/Misc.php","line":1769,"missingDoc":false,"filters":[],"uses":{"strlen":[1773],"strpos":[1778],"substr":[1780,1818],"strcspn":[1787]},"used_by":[]},"SimplePie_Misc::parse_mime":{"doc":"","file":"SimplePie\/Misc.php","line":1823,"missingDoc":true,"filters":[],"uses":{"trim":[1827,1831],"substr":[1831],"strpos":[1825]},"used_by":[]},"SimplePie_Misc::atom_03_construct_type":{"doc":"","file":"SimplePie\/Misc.php","line":1835,"missingDoc":true,"filters":[],"uses":{"strtolower":[1837,1847],"trim":[1837,1847]},"used_by":[]},"SimplePie_Misc::atom_10_construct_type":{"doc":"","file":"SimplePie\/Misc.php","line":1871,"missingDoc":true,"filters":[],"uses":{"strtolower":[1875],"trim":[1875]},"used_by":[]},"SimplePie_Misc::atom_10_content_construct_type":{"doc":"","file":"SimplePie\/Misc.php","line":1893,"missingDoc":true,"filters":[],"uses":{"strtolower":[1897],"trim":[1897],"in_array":[1909],"substr":[1909,1909]},"used_by":[]},"SimplePie_Misc::is_isegment_nz_nc":{"doc":"","file":"SimplePie\/Misc.php","line":1924,"missingDoc":true,"filters":[],"uses":{"preg_match":[1926]},"used_by":[]},"SimplePie_Misc::space_seperated_tokens":{"doc":"","file":"SimplePie\/Misc.php","line":1929,"missingDoc":true,"filters":[],"uses":{"strlen":[1932],"strspn":[1934,1942],"strcspn":[1939],"substr":[1940]},"used_by":[]},"SimplePie_Misc::codepoint_to_utf8":{"doc":"\/**\n * Converts a unicode codepoint to a UTF-8 character\n *\n * @static\n * @param int $codepoint Unicode codepoint\n * @return string UTF-8 character\n *\/","file":"SimplePie\/Misc.php","line":1955,"missingDoc":false,"filters":[],"uses":{"chr":[1964,1968,1968,1972,1972,1972,1976,1976,1976,1976]},"used_by":[]},"SimplePie_Misc::parse_str":{"doc":"\/**\n * Similar to parse_str()\n *\n * Returns an associative array of name\/value pairs, where the value is an\n * array of values that have used the same name\n *\n * @static\n * @param string $str The input string.\n * @return array\n *\/","file":"SimplePie\/Misc.php","line":1995,"missingDoc":false,"filters":[],"uses":{"explode":[1998,2004],"urldecode":[2005,2005,2009],"strpos":[2002]},"used_by":[]},"SimplePie_Misc::xml_encoding":{"doc":"\/**\n * Detect XML encoding, as per XML 1.0 Appendix F.1\n *\n * @todo Add support for EBCDIC\n * @param string $data XML data\n * @param SimplePie_Registry $registry Class registry\n * @return array Possible encodings\n *\/","file":"SimplePie\/Misc.php","line":2024,"missingDoc":false,"filters":[],"uses":{"substr":[2032,2037,2042,2047,2052,2056,2065,2069,2078,2082,2091,2095,2104,2108,2027],"create":[2056,2069,2082,2095,2108],"parse":[2057,2070,2083,2096,2109],"strpos":[2054,2067,2080,2093,2106]},"used_by":[]},"SimplePie_Misc::output_javascript":{"doc":"","file":"SimplePie\/Misc.php","line":2124,"missingDoc":true,"filters":[],"uses":{"ob_start":[2128],"function_exists":[2126],"header":[2130,2131,2132],"gmdate":[2132],"time":[2132]},"used_by":[]},"SimplePie_Misc::get_build":{"doc":"\/**\n * Get the SimplePie build timestamp\n *\n * Uses the git index if it exists, otherwise uses the modification time\n * of the newest file.\n *\/","file":"SimplePie\/Misc.php","line":2163,"missingDoc":false,"filters":[],"uses":{"dirname":[2165,2165,2182,2184],"filemtime":[2168,2175,2184,2188],"file_exists":[2170,2182,2166],"glob":[2173]},"used_by":[]},"SimplePie_Misc::debug":{"doc":"\/**\n * Format debugging information\n *\/","file":"SimplePie\/Misc.php","line":2195,"missingDoc":false,"filters":[],"uses":{"error":[2201,2199],"curl_version":[2220],"mb_get_info":[2224],"extension_loaded":[2211]},"used_by":[]},"SimplePie_Misc::silence_errors":{"doc":"","file":"SimplePie\/Misc.php","line":2242,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Net_IPv6::uncompress":{"doc":"\/**\n * Uncompresses an IPv6 address\n *\n * RFC 4291 allows you to compress concecutive zero pieces in an address to\n * '::'. This method expects a valid IPv6 address and expands the '::' to\n * the required number of zero pieces.\n *\n * Example:  FF01::101   ->  FF01:0:0:0:0:0:0:101\n *           ::1         ->  0:0:0:0:0:0:0:1\n *\n * @author Alexander Merz <alexander.merz@web.de>\n * @author elfrink at introweb dot nl\n * @author Josh Peck <jmp at joshpeck dot org>\n * @copyright 2003-2005 The PHP Group\n * @license http:\/\/www.opensource.org\/licenses\/bsd-license.php\n * @param string $ip An IPv6 address\n * @return string The uncompressed IPv6 address\n *\/","file":"SimplePie\/Net\/IPv6.php","line":79,"missingDoc":false,"filters":[],"uses":{"explode":[85],"substr_count":[92,100,83],"strpos":[102],"str_repeat":[114,120,126],"str_replace":[115,121,127]},"used_by":[]},"SimplePie_Net_IPv6::compress":{"doc":"\/**\n * Compresses an IPv6 address\n *\n * RFC 4291 allows you to compress concecutive zero pieces in an address to\n * '::'. This method expects a valid IPv6 address and compresses consecutive\n * zero pieces to '::'.\n *\n * Example:  FF01:0:0:0:0:0:0:101   ->  FF01::101\n *           0:0:0:0:0:0:0:1        ->  ::1\n *\n * @see uncompress()\n * @param string $ip An IPv6 address\n * @return string The compressed IPv6 address\n *\/","file":"SimplePie\/Net\/IPv6.php","line":147,"missingDoc":false,"filters":[],"uses":{"preg_replace":[154],"strlen":[165,163],"substr_replace":[170],"preg_match_all":[157],"implode":[175]},"used_by":[]},"SimplePie_Net_IPv6::split_v6_v4":{"doc":"\/**\n * Splits an IPv6 address into the IPv6 and IPv4 representation parts\n *\n * RFC 4291 allows you to represent the last two parts of an IPv6 address\n * using the standard IPv4 representation\n *\n * Example:  0:0:0:0:0:0:13.1.68.3\n *           0:0:0:0:0:FFFF:129.144.52.38\n *\n * @param string $ip An IPv6 address\n * @return array [0] contains the IPv6 represented part, and [1] the IPv4 represented part\n *\/","file":"SimplePie\/Net\/IPv6.php","line":195,"missingDoc":false,"filters":[],"uses":{"strrpos":[199],"substr":[200,201],"strpos":[197]},"used_by":[]},"SimplePie_Net_IPv6::check_ipv6":{"doc":"\/**\n * Checks an IPv6 address\n *\n * Checks if the given IP is a valid IPv6 address\n *\n * @param string $ip An IPv6 address\n * @return bool true if $ip is a valid IPv6 address\n *\/","file":"SimplePie\/Net\/IPv6.php","line":218,"missingDoc":false,"filters":[],"uses":{"explode":[222,223],"strlen":[233],"ltrim":[237],"hexdec":[242],"dechex":[243],"strtolower":[243],"count":[246,224,224,224,224]},"used_by":[]},"SimplePie_Net_IPv6::checkIPv6":{"doc":"\/**\n * Checks if the given IP is a valid IPv6 address\n *\n * @codeCoverageIgnore\n * @deprecated Use {@see SimplePie_Net_IPv6::check_ipv6()} instead\n * @see check_ipv6\n * @param string $ip An IPv6 address\n * @return bool true if $ip is a valid IPv6 address\n *\/","file":"SimplePie\/Net\/IPv6.php","line":272,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Parse_Date::__construct":{"doc":"\/**\n * Create new SimplePie_Parse_Date object, and set self::day_pcre,\n * self::month_pcre, and self::built_in\n *\n * @access private\n *\/","file":"SimplePie\/Parse\/Date.php","line":542,"missingDoc":false,"filters":[],"uses":{"implode":[544,545],"array_keys":[544,545],"get_class_methods":[550],"get_class":[556,548,561],"strtolower":[554],"substr":[554]},"used_by":[]},"SimplePie_Parse_Date::get":{"doc":"\/**\n * Get the object\n *\n * @access public\n *\/","file":"SimplePie\/Parse\/Date.php","line":572,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Parse_Date::parse":{"doc":"\/**\n * Parse a date\n *\n * @final\n * @access public\n * @param string $date Date to parse\n * @return int Timestamp corresponding to date string, or false on failure\n *\/","file":"SimplePie\/Parse\/Date.php","line":590,"missingDoc":false,"filters":[],"uses":{"call_user_func":[594,602]},"used_by":[]},"SimplePie_Parse_Date::add_callback":{"doc":"\/**\n * Add a callback method to parse a date\n *\n * @final\n * @access public\n * @param callback $callback\n *\/","file":"SimplePie\/Parse\/Date.php","line":618,"missingDoc":false,"filters":[],"uses":{"trigger_error":[626],"is_callable":[620]},"used_by":[]},"SimplePie_Parse_Date::date_w3cdtf":{"doc":"\/**\n * Parse a superset of W3C-DTF (allows hyphens and colons to be omitted, as\n * well as allowing any of upper or lower case \"T\", horizontal tabs, or\n * spaces to be used as the time seperator (including more than one))\n *\n * @access protected\n * @return int Timestamp\n *\/","file":"SimplePie\/Parse\/Date.php","line":638,"missingDoc":false,"filters":[],"uses":{"count":[667,672],"round":[693],"pow":[693],"strlen":[693],"gmmktime":[695],"preg_match":[649]},"used_by":[]},"SimplePie_Parse_Date::remove_rfc2822_comments":{"doc":"\/**\n * Remove RFC822 comments\n *\n * @access protected\n * @param string $data Data to strip comments from\n * @return string Comment stripped string\n *\/","file":"SimplePie\/Parse\/Date.php","line":710,"missingDoc":false,"filters":[],"uses":{"strlen":[714],"strpos":[719],"substr":[721,759],"strcspn":[728]},"used_by":[]},"SimplePie_Parse_Date::date_rfc2822":{"doc":"\/**\n * Parse RFC2822's date format\n *\n * @access protected\n * @return int Timestamp\n *\/","file":"SimplePie\/Parse\/Date.php","line":770,"missingDoc":false,"filters":[],"uses":{"strtolower":[806],"strtoupper":[819,821],"gmmktime":[849],"preg_match":[788],"remove_rfc2822_comments":[788]},"used_by":[]},"SimplePie_Parse_Date::date_rfc850":{"doc":"\/**\n * Parse RFC850's date format\n *\n * @access protected\n * @return int Timestamp\n *\/","file":"SimplePie\/Parse\/Date.php","line":863,"missingDoc":false,"filters":[],"uses":{"strtolower":[891],"strtoupper":[896,894],"gmmktime":[914],"preg_match":[876]},"used_by":[]},"SimplePie_Parse_Date::date_asctime":{"doc":"\/**\n * Parse C99's asctime()'s date format\n *\n * @access protected\n * @return int Timestamp\n *\/","file":"SimplePie\/Parse\/Date.php","line":928,"missingDoc":false,"filters":[],"uses":{"strtolower":[955],"gmmktime":[956],"preg_match":[942]},"used_by":[]},"SimplePie_Parse_Date::date_strtotime":{"doc":"\/**\n * Parse dates using strtotime()\n *\n * @access protected\n * @return int Timestamp\n *\/","file":"SimplePie\/Parse\/Date.php","line":970,"missingDoc":false,"filters":[],"uses":{"strtotime":[972]},"used_by":[]},"SimplePie_Parser::set_registry":{"doc":"","file":"SimplePie\/Parser.php","line":73,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Parser::parse":{"doc":"","file":"SimplePie\/Parser.php","line":78,"missingDoc":true,"filters":[],"uses":{"strtoupper":[81],"substr":[94,97,99,102,104,107,109,112,114,92,119,122,117,117],"create":[119],"parse":[120],"strspn":[117],"strpos":[117],"xml_parser_create":[137],"xml_parse_into_struct":[138],"xml_parser_free":[139,163],"xml_parser_create_ns":[146],"xml_parser_set_option":[147,148],"xml_set_object":[149],"xml_set_character_data_handler":[150],"xml_set_element_handler":[151],"xml_get_error_code":[156],"xml_error_string":[157],"xml_parse":[154],"xml_get_current_line_number":[160],"xml_get_current_column_number":[161],"xml_get_current_byte_index":[162],"libxml_clear_errors":[168],"xml":[170],"read":[171],"constant":[176,187,216,218],"tag_close":[185,213],"moveToNextAttribute":[198],"tag_open":[210],"cdata":[219],"libxml_get_last_error":[223]},"used_by":[]},"SimplePie_Parser::get_error_code":{"doc":"","file":"SimplePie\/Parser.php","line":238,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Parser::get_error_string":{"doc":"","file":"SimplePie\/Parser.php","line":243,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Parser::get_current_line":{"doc":"","file":"SimplePie\/Parser.php","line":248,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Parser::get_current_column":{"doc":"","file":"SimplePie\/Parser.php","line":253,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Parser::get_current_byte":{"doc":"","file":"SimplePie\/Parser.php","line":258,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Parser::get_data":{"doc":"","file":"SimplePie\/Parser.php","line":263,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Parser::tag_open":{"doc":"","file":"SimplePie\/Parser.php","line":268,"missingDoc":true,"filters":[],"uses":{"split_ns":[270,275],"call":[281],"end":[281,290,291,300,308,306,322,322,323,323,323,324,324,325,325,326,326,327,327,328,328],"htmlspecialchars":[313],"in_array":[324,325,326,327,328]},"used_by":[]},"SimplePie_Parser::cdata":{"doc":"","file":"SimplePie\/Parser.php","line":335,"missingDoc":true,"filters":[],"uses":{"htmlspecialchars":[339]},"used_by":[]},"SimplePie_Parser::tag_close":{"doc":"","file":"SimplePie\/Parser.php","line":347,"missingDoc":true,"filters":[],"uses":{"end":[354,352,352],"in_array":[352],"count":[359],"array_pop":[360,363,364,365,366,367]},"used_by":[]},"SimplePie_Parser::split_ns":{"doc":"","file":"SimplePie\/Parser.php","line":370,"missingDoc":true,"filters":[],"uses":{"strlen":[380],"substr":[382,383],"strtolower":[384],"strpos":[375]},"used_by":[]},"SimplePie_Rating::__construct":{"doc":"\/**\n * Constructor, used to input the data\n *\n * For documentation on all the parameters, see the corresponding\n * properties and their accessors\n *\/","file":"SimplePie\/Rating.php","line":79,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Rating::__toString":{"doc":"\/**\n * String-ified version\n *\n * @return string\n *\/","file":"SimplePie\/Rating.php","line":90,"missingDoc":false,"filters":[],"uses":{"md5":[93],"serialize":[93]},"used_by":[]},"SimplePie_Rating::get_scheme":{"doc":"\/**\n * Get the organizational scheme for the rating\n *\n * @return string|null\n *\/","file":"SimplePie\/Rating.php","line":101,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Rating::get_value":{"doc":"\/**\n * Get the value of the rating\n *\n * @return string|null\n *\/","file":"SimplePie\/Rating.php","line":118,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Registry::__construct":{"doc":"\/**\n * Constructor\n *\n * No-op\n *\/","file":"SimplePie\/Registry.php","line":104,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Registry::register":{"doc":"\/**\n * Register a class\n *\n * @param string $type See {@see $default} for names\n * @param string $class Class name, must subclass the corresponding default\n * @param bool $legacy Whether to enable legacy support for this class\n * @return bool Successfulness\n *\/","file":"SimplePie\/Registry.php","line":114,"missingDoc":false,"filters":[],"uses":{"is_subclass_of":[116]},"used_by":[]},"SimplePie_Registry::get_class":{"doc":"\/**\n * Get the class registered for a type\n *\n * Where possible, use {@see create()} or {@see call()} instead\n *\n * @param string $type\n * @return string|null\n *\/","file":"SimplePie\/Registry.php","line":139,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Registry::create":{"doc":"\/**\n * Create a new instance of a given type\n *\n * @param string $type\n * @param array $parameters Parameters to pass to the constructor\n * @return object Instance of class\n *\/","file":"SimplePie\/Registry.php","line":160,"missingDoc":false,"filters":[],"uses":{"get_class":[162,171,171],"array_splice":[172],"in_array":[164],"newInstanceArgs":[184],"method_exists":[177,187],"set_registry":[189]},"used_by":[]},"SimplePie_Registry::call":{"doc":"\/**\n * Call a static method for a type\n *\n * @param string $type\n * @param string $method\n * @param array $parameters\n * @return mixed\n *\/","file":"SimplePie\/Registry.php","line":202,"missingDoc":false,"filters":[],"uses":{"get_class":[204],"call_user_func_array":[215,222],"in_array":[206]},"used_by":[]},"SimplePie_Restriction::__construct":{"doc":"\/**\n * Constructor, used to input the data\n *\n * For documentation on all the parameters, see the corresponding\n * properties and their accessors\n *\/","file":"SimplePie\/Restriction.php","line":87,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Restriction::__toString":{"doc":"\/**\n * String-ified version\n *\n * @return string\n *\/","file":"SimplePie\/Restriction.php","line":99,"missingDoc":false,"filters":[],"uses":{"md5":[102],"serialize":[102]},"used_by":[]},"SimplePie_Restriction::get_relationship":{"doc":"\/**\n * Get the relationship\n *\n * @return string|null Either 'allow' or 'deny'\n *\/","file":"SimplePie\/Restriction.php","line":110,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Restriction::get_type":{"doc":"\/**\n * Get the type\n *\n * @return string|null\n *\/","file":"SimplePie\/Restriction.php","line":127,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Restriction::get_value":{"doc":"\/**\n * Get the list of restricted things\n *\n * @return string|null\n *\/","file":"SimplePie\/Restriction.php","line":144,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::__construct":{"doc":"","file":"SimplePie\/Sanitize.php","line":75,"missingDoc":true,"filters":[],"uses":{"set_url_replacements":[78]},"used_by":[]},"SimplePie_Sanitize::remove_div":{"doc":"","file":"SimplePie\/Sanitize.php","line":81,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::set_image_handler":{"doc":"","file":"SimplePie\/Sanitize.php","line":86,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::set_registry":{"doc":"","file":"SimplePie\/Sanitize.php","line":98,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::pass_cache_data":{"doc":"","file":"SimplePie\/Sanitize.php","line":103,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::pass_file_data":{"doc":"","file":"SimplePie\/Sanitize.php","line":121,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::strip_htmltags":{"doc":"","file":"SimplePie\/Sanitize.php","line":139,"missingDoc":true,"filters":[],"uses":{"explode":[149],"is_array":[143]},"used_by":[]},"SimplePie_Sanitize::encode_instead_of_strip":{"doc":"","file":"SimplePie\/Sanitize.php","line":158,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::strip_attributes":{"doc":"","file":"SimplePie\/Sanitize.php","line":163,"missingDoc":true,"filters":[],"uses":{"explode":[173],"is_array":[167]},"used_by":[]},"SimplePie_Sanitize::strip_comments":{"doc":"","file":"SimplePie\/Sanitize.php","line":182,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::set_output_encoding":{"doc":"","file":"SimplePie\/Sanitize.php","line":187,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::set_url_replacements":{"doc":"\/**\n * Set element\/attribute key\/value pairs of HTML attributes\n * containing URLs that need to be resolved relative to the feed\n *\n * Defaults to |a|@href, |area|@href, |blockquote|@cite, |del|@cite,\n * |form|@action, |img|@longdesc, |img|@src, |input|@src, |ins|@cite,\n * |q|@cite\n *\n * @since 1.0\n * @param array|null $element_attribute Element\/attribute key\/value pairs, null for default\n *\/","file":"SimplePie\/Sanitize.php","line":203,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::sanitize":{"doc":"","file":"SimplePie\/Sanitize.php","line":225,"missingDoc":true,"filters":[],"uses":{"trim":[227,349],"preg_match":[232],"base64_decode":[244],"call":[252,310,364,378],"class_exists":[250],"preprocess":[257],"set_error_handler":[259],"loadHTML":[260],"restore_error_handler":[261],"query":[267],"removeChild":[271,341],"strip_tag":[282],"strip_attr":[290],"replace_urls":[298],"getElementsByTagName":[304,345],"call_user_func":[309],"getAttribute":[309],"setAttribute":[314,325],"create":[318],"trigger_error":[329],"save":[323],"load":[312],"hasAttribute":[307],"item":[345,345],"replaceChild":[346],"saveHTML":[349],"preg_replace":[353,354,358],"htmlspecialchars":[373]},"used_by":[]},"SimplePie_Sanitize::preprocess":{"doc":"","file":"SimplePie\/Sanitize.php","line":384,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Sanitize::replace_urls":{"doc":"","file":"SimplePie\/Sanitize.php","line":407,"missingDoc":true,"filters":[],"uses":{"is_array":[409,414],"getElementsByTagName":[416],"call":[423],"getAttribute":[423],"setAttribute":[426],"hasAttribute":[421],"in_array":[414]},"used_by":[]},"SimplePie_Sanitize::do_strip_htmltags":{"doc":"","file":"SimplePie\/Sanitize.php","line":434,"missingDoc":true,"filters":[],"uses":{"htmlspecialchars":[440,441,446],"in_array":[438,449],"strtolower":[438,449]},"used_by":[]},"SimplePie_Sanitize::strip_tag":{"doc":"","file":"SimplePie\/Sanitize.php","line":459,"missingDoc":true,"filters":[],"uses":{"query":[462],"createDocumentFragment":[467,531],"implode":[495],"hasAttributes":[473],"appendChild":[498,505,510,536],"in_array":[470,508,518],"item":[504,535],"replaceChild":[513,539],"removeChild":[522]},"used_by":[]},"SimplePie_Sanitize::strip_attr":{"doc":"","file":"SimplePie\/Sanitize.php","line":544,"missingDoc":true,"filters":[],"uses":{"query":[547],"removeAttribute":[551]},"used_by":[]},"SimplePie_Source::__construct":{"doc":"","file":"SimplePie\/Source.php","line":61,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Source::set_registry":{"doc":"","file":"SimplePie\/Source.php","line":67,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Source::__toString":{"doc":"","file":"SimplePie\/Source.php","line":72,"missingDoc":true,"filters":[],"uses":{"md5":[74],"serialize":[74]},"used_by":[]},"SimplePie_Source::get_source_tags":{"doc":"","file":"SimplePie\/Source.php","line":77,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Source::get_base":{"doc":"","file":"SimplePie\/Source.php","line":89,"missingDoc":true,"filters":[],"uses":{"get_base":[91]},"used_by":[]},"SimplePie_Source::sanitize":{"doc":"","file":"SimplePie\/Source.php","line":94,"missingDoc":true,"filters":[],"uses":{"sanitize":[96]},"used_by":[]},"SimplePie_Source::get_item":{"doc":"","file":"SimplePie\/Source.php","line":99,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"SimplePie_Source::get_title":{"doc":"","file":"SimplePie\/Source.php","line":104,"missingDoc":true,"filters":[],"uses":{"sanitize":[108,112,116,120,124,128,132],"call":[108,112],"get_base":[108,112,116,120,124],"get_source_tags":[110,114,118,122,126,130,106]},"used_by":[]},"SimplePie_Source::get_category":{"doc":"","file":"SimplePie\/Source.php","line":140,"missingDoc":true,"filters":[],"uses":{"get_categories":[142]},"used_by":[]},"SimplePie_Source::get_categories":{"doc":"","file":"SimplePie\/Source.php","line":153,"missingDoc":true,"filters":[],"uses":{"sanitize":[164,168,172,180,183,193,197],"create":[174,189,193,197],"get_source_tags":[157,176,191,195],"array_unique":[202]},"used_by":[]},"SimplePie_Source::get_author":{"doc":"","file":"SimplePie\/Source.php","line":210,"missingDoc":true,"filters":[],"uses":{"get_authors":[212]},"used_by":[]},"SimplePie_Source::get_authors":{"doc":"","file":"SimplePie\/Source.php","line":223,"missingDoc":true,"filters":[],"uses":{"sanitize":[233,237,241,255,259,263,272,276,280],"get_base":[237,259],"create":[245,267,272,276,280],"get_source_tags":[226,248,270,274,278],"array_unique":[285]},"used_by":[]},"SimplePie_Source::get_contributor":{"doc":"","file":"SimplePie\/Source.php","line":293,"missingDoc":true,"filters":[],"uses":{"get_contributors":[295]},"used_by":[]},"SimplePie_Source::get_contributors":{"doc":"","file":"SimplePie\/Source.php","line":306,"missingDoc":true,"filters":[],"uses":{"sanitize":[316,320,324,338,342,346],"get_base":[320,342],"create":[328,350],"get_source_tags":[309,331],"array_unique":[356]},"used_by":[]},"SimplePie_Source::get_link":{"doc":"","file":"SimplePie\/Source.php","line":364,"missingDoc":true,"filters":[],"uses":{"get_links":[366]},"used_by":[]},"SimplePie_Source::get_permalink":{"doc":"\/**\n * Added for parity between the parent-level and the item\/entry-level.\n *\/","file":"SimplePie\/Source.php","line":380,"missingDoc":false,"filters":[],"uses":{"get_link":[382]},"used_by":[]},"SimplePie_Source::get_links":{"doc":"","file":"SimplePie\/Source.php","line":385,"missingDoc":true,"filters":[],"uses":{"sanitize":[397,408,415,419,423],"get_base":[397,408,415,419,423],"get_source_tags":[390,401,413,417,421],"array_keys":[426],"array_merge":[433],"substr":[441,443],"call":[429],"array_unique":[445]},"used_by":[]},"SimplePie_Source::get_description":{"doc":"","file":"SimplePie\/Source.php","line":459,"missingDoc":true,"filters":[],"uses":{"sanitize":[463,467,471,475,479,483,487,491,495],"call":[463,467],"get_base":[463,467,471,475,479,491,495],"get_source_tags":[465,469,473,477,481,485,489,493,461]},"used_by":[]},"SimplePie_Source::get_copyright":{"doc":"","file":"SimplePie\/Source.php","line":503,"missingDoc":true,"filters":[],"uses":{"sanitize":[507,511,515,519,523],"call":[507,511],"get_base":[507,511],"get_source_tags":[509,513,517,521,505]},"used_by":[]},"SimplePie_Source::get_language":{"doc":"","file":"SimplePie\/Source.php","line":531,"missingDoc":true,"filters":[],"uses":{"sanitize":[535,539,543,547],"get_source_tags":[537,541,533]},"used_by":[]},"SimplePie_Source::get_latitude":{"doc":"","file":"SimplePie\/Source.php","line":555,"missingDoc":true,"filters":[],"uses":{"get_source_tags":[561,557],"preg_match":[561],"trim":[561]},"used_by":[]},"SimplePie_Source::get_longitude":{"doc":"","file":"SimplePie\/Source.php","line":571,"missingDoc":true,"filters":[],"uses":{"get_source_tags":[577,581,573],"preg_match":[581],"trim":[581]},"used_by":[]},"SimplePie_Source::get_image_url":{"doc":"","file":"SimplePie\/Source.php","line":591,"missingDoc":true,"filters":[],"uses":{"sanitize":[595,599,603],"get_source_tags":[597,601,593],"get_base":[599,603]},"used_by":[]},"SimplePie_XML_Declaration_Parser::__construct":{"doc":"\/**\n * Create an instance of the class with the input data\n *\n * @access public\n * @param string $data Input data\n *\/","file":"SimplePie\/XML\/Declaration\/Parser.php","line":116,"missingDoc":false,"filters":[],"uses":{"strlen":[119]},"used_by":[]},"SimplePie_XML_Declaration_Parser::parse":{"doc":"\/**\n * Parse the input data\n *\n * @access public\n * @return bool true on success, false on failure\n *\/","file":"SimplePie\/XML\/Declaration\/Parser.php","line":128,"missingDoc":false,"filters":[],"uses":{"has_data":[130]},"used_by":[]},"SimplePie_XML_Declaration_Parser::has_data":{"doc":"\/**\n * Check whether there is data beyond the pointer\n *\n * @access private\n * @return bool true if there is further data, false if not\n *\/","file":"SimplePie\/XML\/Declaration\/Parser.php","line":155,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"SimplePie_XML_Declaration_Parser::skip_whitespace":{"doc":"\/**\n * Advance past any whitespace\n *\n * @return int Number of whitespace characters passed\n *\/","file":"SimplePie\/XML\/Declaration\/Parser.php","line":165,"missingDoc":false,"filters":[],"uses":{"strspn":[167]},"used_by":[]},"SimplePie_XML_Declaration_Parser::get_value":{"doc":"\/**\n * Read value\n *\/","file":"SimplePie\/XML\/Declaration\/Parser.php","line":175,"missingDoc":false,"filters":[],"uses":{"substr":[177,184],"strcspn":[181],"has_data":[182]},"used_by":[]},"SimplePie_XML_Declaration_Parser::before_version_name":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":192,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[194]},"used_by":[]},"SimplePie_XML_Declaration_Parser::version_name":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":204,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[209],"substr":[206]},"used_by":[]},"SimplePie_XML_Declaration_Parser::version_equals":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":218,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[223],"substr":[220]},"used_by":[]},"SimplePie_XML_Declaration_Parser::version_value":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":232,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[236],"has_data":[237],"get_value":[234]},"used_by":[]},"SimplePie_XML_Declaration_Parser::encoding_name":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":252,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[257],"substr":[254]},"used_by":[]},"SimplePie_XML_Declaration_Parser::encoding_equals":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":266,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[271],"substr":[268]},"used_by":[]},"SimplePie_XML_Declaration_Parser::encoding_value":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":280,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[284],"has_data":[285],"get_value":[282]},"used_by":[]},"SimplePie_XML_Declaration_Parser::standalone_name":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":300,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[305],"substr":[302]},"used_by":[]},"SimplePie_XML_Declaration_Parser::standalone_equals":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":314,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[319],"substr":[316]},"used_by":[]},"SimplePie_XML_Declaration_Parser::standalone_value":{"doc":"","file":"SimplePie\/XML\/Declaration\/Parser.php","line":328,"missingDoc":true,"filters":[],"uses":{"skip_whitespace":[347],"has_data":[348],"get_value":[330]},"used_by":[]},"create_initial_taxonomies":{"doc":"\/**\n * Creates the initial taxonomies.\n *\n * This function fires twice: in wp-settings.php before plugins are loaded (for\n * backwards compatibility reasons), and again on the 'init' action. We must avoid\n * registering rewrite rules before the 'init' action.\n *\/","file":"taxonomy.php","line":21,"missingDoc":false,"filters":["'post_format_rewrite_base'"],"uses":{"get_option":[31,31,32,36,36,37],"using_index_permalinks":[32,37],"did_action":[24],"register_taxonomy":[44,54,64,78,107],"__":[68,69,81,82,83,85,86,87,88,89],"_x":[111,112],"current_theme_supports":[118]},"used_by":[]},"register_taxonomy":{"doc":"\/**\n * Create or modify a taxonomy object. Do not use before init.\n *\n * A simple function for creating or modifying a taxonomy object based on the\n * parameters given. The function will accept an array (third optional\n * parameter), along with strings for the taxonomy name and another string for\n * the object type.\n *\n * Nothing is returned, so expect error maybe or use taxonomy_exists() to check\n * whether taxonomy exists.\n *\n * Optional $args contents:\n *\n * label - Name of the taxonomy shown in the menu. Usually plural. If not set, labels['name'] will be used.\n *\n * hierarchical - has some defined purpose at other parts of the API and is a\n * boolean value.\n *\n * update_count_callback - works much like a hook, in that it will be called when the count is updated.\n * \tDefaults to _update_post_term_count() for taxonomies attached to post types, which then confirms\n * \tthat the objects are published before counting them.\n * \tDefaults to _update_generic_term_count() for taxonomies attached to other object types, such as links.\n *\n * rewrite - false to prevent rewrite, or array('slug'=>$slug) to customize\n * permastruct; default will use $taxonomy as slug.\n *\n * query_var - false to prevent queries, or string to customize query var\n * (?$query_var=$term); default will use $taxonomy as query var.\n *\n * public - If the taxonomy should be publicly queryable; \/\/@TODO not implemented.\n * defaults to true.\n *\n * show_ui - If the WordPress UI admin tags UI should apply to this taxonomy;\n * defaults to public.\n *\n * show_in_nav_menus - true makes this taxonomy available for selection in navigation menus.\n * Defaults to public.\n *\n * show_tagcloud - false to prevent the taxonomy being listed in the Tag Cloud Widget;\n * defaults to show_ui which defaults to public.\n *\n * labels - An array of labels for this taxonomy. You can see accepted values in {@link get_taxonomy_labels()}. By default tag labels are used for non-hierarchical types and category labels for hierarchical ones.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n * @uses $wp_taxonomies Inserts new taxonomy object into the list\n * @uses $wp Adds query vars\n *\n * @param string $taxonomy Name of taxonomy object\n * @param array|string $object_type Name of the object type for the taxonomy object.\n * @param array|string $args See above description for the two keys values.\n * @return null|WP_Error WP_Error if errors, otherwise null.\n *\/","file":"taxonomy.php","line":314,"missingDoc":false,"filters":["'registered_taxonomy'"],"uses":{"is_array":[317],"wp_parse_args":[332,346],"__":[335],"strlen":[334],"sanitize_title_with_dashes":[341,347],"add_query_var":[342],"add_rewrite_tag":[358],"add_permastruct":[359],"is_admin":[345],"get_option":[345],"is_null":[362,369],"array_merge":[378],"array_unique":[382],"get_taxonomy_labels":[384],"add_filter":[390]},"used_by":{"create_initial_taxonomies":[44,54,64,78,107]}},"get_taxonomy_labels":{"doc":"\/**\n * Builds an object with all taxonomy labels out of a taxonomy object\n *\n * Accepted keys of the label array in the taxonomy object:\n * - name - general name for the taxonomy, usually plural. The same as and overridden by $tax->label. Default is Tags\/Categories\n * - singular_name - name for one object of this taxonomy. Default is Tag\/Category\n * - search_items - Default is Search Tags\/Search Categories\n * - popular_items - This string isn't used on hierarchical taxonomies. Default is Popular Tags\n * - all_items - Default is All Tags\/All Categories\n * - parent_item - This string isn't used on non-hierarchical taxonomies. In hierarchical ones the default is Parent Category\n * - parent_item_colon - The same as <code>parent_item<\/code>, but with colon <code>:<\/code> in the end\n * - edit_item - Default is Edit Tag\/Edit Category\n * - view_item - Default is View Tag\/View Category\n * - update_item - Default is Update Tag\/Update Category\n * - add_new_item - Default is Add New Tag\/Add New Category\n * - new_item_name - Default is New Tag Name\/New Category Name\n * - separate_items_with_commas - This string isn't used on hierarchical taxonomies. Default is \"Separate tags with commas\", used in the meta box.\n * - add_or_remove_items - This string isn't used on hierarchical taxonomies. Default is \"Add or remove tags\", used in the meta box when JavaScript is disabled.\n * - choose_from_most_used - This string isn't used on hierarchical taxonomies. Default is \"Choose from the most used tags\", used in the meta box.\n *\n * Above, the first default value is for non-hierarchical taxonomies (like tags) and the second one is for hierarchical taxonomies (like categories).\n *\n * @since 3.0.0\n * @param object $tax Taxonomy object\n * @return object object with all the labels as member variables\n *\/","file":"taxonomy.php","line":422,"missingDoc":false,"filters":[],"uses":{"_x":[427,427,428,428],"__":[429,429,430,431,431,432,433,434,434,435,435,436,436,437,437,438,438,439,440,441],"_get_custom_object_labels":[445]},"used_by":{"register_taxonomy":[384]}},"get_tax_sql":{"doc":"\/**\n * Given a taxonomy query, generates SQL to be appended to a main query.\n *\n * @since 3.1.0\n *\n * @see WP_Tax_Query\n *\n * @param array $tax_query A compact tax query\n * @param string $primary_table\n * @param string $primary_id_column\n * @return array\n *\/","file":"taxonomy.php","line":552,"missingDoc":false,"filters":[],"uses":{"get_sql":[554]},"used_by":[]},"WP_Tax_Query::__construct":{"doc":"\/**\n * Constructor.\n *\n * Parses a compact tax query and sets defaults.\n *\n * @since 3.1.0\n * @access public\n *\n * @param array $tax_query A compact tax query:\n *  array(\n *    'relation' => 'OR',\n *    array(\n *      'taxonomy' => 'tax1',\n *      'terms' => array( 'term1', 'term2' ),\n *      'field' => 'slug',\n *    ),\n *    array(\n *      'taxonomy' => 'tax2',\n *      'terms' => array( 'term-a', 'term-b' ),\n *      'field' => 'slug',\n *    ),\n *  )\n *\/","file":"taxonomy.php","line":624,"missingDoc":false,"filters":[],"uses":{"strtoupper":[625],"is_array":[640],"array_merge":[643]},"used_by":[]},"WP_Tax_Query::get_sql":{"doc":"\/**\n * Generates SQL clauses to be appended to a main query.\n *\n * @since 3.1.0\n * @access public\n *\n * @param string $primary_table\n * @param string $primary_id_column\n * @return array\n *\/","file":"taxonomy.php","line":661,"missingDoc":false,"filters":[],"uses":{"count":[667,715],"clean_query":[670],"is_wp_error":[672],"extract":[675],"implode":[689,703,717,731],"compact":[735]},"used_by":[]},"WP_Tax_Query::clean_query":{"doc":"\/**\n * Validates a single query.\n *\n * @since 3.2.0\n * @access private\n *\n * @param array &$query The single query\n *\/","file":"taxonomy.php","line":746,"missingDoc":false,"filters":[],"uses":{"taxonomy_exists":[747],"array_unique":[752],"transform_query":[755,768],"is_wp_error":[757],"array_merge":[762],"get_term_children":[762],"is_taxonomy_hierarchical":[754]},"used_by":[]},"WP_Tax_Query::transform_query":{"doc":"\/**\n * Transforms a single query, from one field to another.\n *\n * @since 3.2.0\n *\n * @param array &$query The single query\n * @param string $resulting_field The resulting field\n *\/","file":"taxonomy.php","line":779,"missingDoc":false,"filters":[],"uses":{"esc_sql":[788],"implode":[793,803,811],"array_map":[793,803,811],"get_col":[794,804,812],"count":[820,820]},"used_by":[]},"get_term_to_edit":{"doc":"\/**\n * Sanitizes Term for editing.\n *\n * Return value is sanitize_term() and usage is for sanitizing the term for\n * editing. Function is for contextual and simplicity.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses sanitize_term() Passes the return value on success\n *\n * @param int|object $id Term ID or Object\n * @param string $taxonomy Taxonomy Name\n * @return mixed|null|WP_Error Will return empty string if $term is not an object.\n *\/","file":"taxonomy.php","line":1078,"missingDoc":false,"filters":[],"uses":{"get_term":[1079],"is_wp_error":[1081],"is_object":[1084],"sanitize_term":[1087]},"used_by":[]},"update_term_cache":{"doc":"\/**\n * Updates Terms to Taxonomy in cache.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @param array $terms List of Term objects to change\n * @param string $taxonomy Optional. Update Term to this taxonomy in cache\n *\/","file":"taxonomy.php","line":2735,"missingDoc":false,"filters":[],"uses":{"wp_cache_add":[2741]},"used_by":{"get_terms":[1403],"wp_get_object_terms":[1975]}},"_get_term_children":{"doc":"\/**\n * Get the subset of $terms that are descendants of $term_id.\n *\n * If $terms is an array of objects, then _get_term_children returns an array of objects.\n * If $terms is an array of IDs, then _get_term_children returns an array of IDs.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @access private\n * @since 2.3.0\n *\n * @param int $term_id The ancestor term: all returned terms should be descendants of $term_id.\n * @param array $terms The set of terms---either an array of term objects or term IDs---from which those that are descendants of $term_id will be chosen.\n * @param string $taxonomy The taxonomy which determines the hierarchy of the terms.\n * @return array The subset of $terms that are descendants of $term_id.\n *\/","file":"taxonomy.php","line":2797,"missingDoc":false,"filters":[],"uses":{"_get_term_hierarchy":[2803],"get_term":[2811],"is_wp_error":[2812],"is_object":[2810],"array_merge":[2830],"_get_term_children":[2829]},"used_by":{"get_terms":[1415,1426],"_get_term_children":[2829]}},"_pad_term_counts":{"doc":"\/**\n * Add count of children to parent count.\n *\n * Recalculates term counts by including items from child terms. Assumes all\n * relevant children are already in the $terms argument.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @access private\n * @since 2.3.0\n * @uses $wpdb\n *\n * @param array $terms List of Term IDs\n * @param string $taxonomy Term Context\n * @return null Will break from function if conditions are not met.\n *\/","file":"taxonomy.php","line":2853,"missingDoc":false,"filters":[],"uses":{"is_taxonomy_hierarchical":[2857],"_get_term_hierarchy":[2860],"get_taxonomy":[2873],"esc_sql":[2874],"get_results":[2875],"implode":[2875,2875],"array_keys":[2875],"count":[2896]},"used_by":{"get_terms":[1420]}},"wp_count_terms":{"doc":"\/**\n * Count how many terms are in Taxonomy.\n *\n * Default $args is 'hide_empty' which can be 'hide_empty=true' or array('hide_empty' => true).\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n *\n * @uses get_terms()\n * @uses wp_parse_args() Turns strings into arrays and merges defaults into an array.\n *\n * @param string $taxonomy Taxonomy name\n * @param array|string $args Overwrite defaults. See get_terms()\n * @return int|WP_Error How many terms are in $taxonomy. WP_Error if $taxonomy does not exist.\n *\/","file":"taxonomy.php","line":1690,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[1692],"get_terms":[1702]},"used_by":[]},"wp_delete_category":{"doc":"\/**\n * Deletes one existing category.\n *\n * @since 2.0.0\n * @uses wp_delete_term()\n *\n * @param int $cat_ID\n * @return mixed Returns true if completes delete action; false if term doesn't exist;\n * \tZero on attempted deletion of default Category; WP_Error object is also a possibility.\n *\/","file":"taxonomy.php","line":1854,"missingDoc":false,"filters":[],"uses":{"wp_delete_term":[1855]},"used_by":[]},"wp_unique_term_slug":{"doc":"\/**\n * Will make slug unique, if it isn't already.\n *\n * The $slug has to be unique global to every taxonomy, meaning that one\n * taxonomy term can't have a matching slug with another taxonomy term. Each\n * slug has to be globally unique for every taxonomy.\n *\n * The way this works is that if the taxonomy that the term belongs to is\n * hierarchical and has a parent, it will append that parent to the $slug.\n *\n * If that still doesn't return an unique slug, then it try to append a number\n * until it finds a number that is truly unique.\n *\n * The only purpose for $term is for appending a parent, if one exists.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 2.3.0\n * @uses $wpdb\n *\n * @param string $slug The string that will be tried for a unique slug\n * @param object $term The term object that the $slug will belong too\n * @return string Will return a true unique slug.\n *\/","file":"taxonomy.php","line":2271,"missingDoc":false,"filters":[],"uses":{"term_exists":[2274,2286],"get_term":[2282],"is_wp_error":[2283],"is_taxonomy_hierarchical":[2279],"prepare":[2297,2299,2306],"get_var":[2306,2301]},"used_by":{"wp_insert_term":[2095,2102,2112],"wp_update_term":[2410]}},"wp_defer_term_counting":{"doc":"\/**\n * Enable or disable term counting.\n *\n * @since 2.5.0\n *\n * @param bool $defer Optional. Enable if true, disable if false.\n * @return bool Whether term counting is enabled or disabled.\n *\/","file":"taxonomy.php","line":2448,"missingDoc":false,"filters":[],"uses":{"wp_update_term_count":[2455],"is_bool":[2451]},"used_by":{"wp_update_term_count":[2495]}},"wp_update_term_count_now":{"doc":"\/**\n * Perform term count update immediately.\n *\n * @since 2.5.0\n *\n * @param array $terms The term_taxonomy_id of terms to update.\n * @param string $taxonomy The context of the term.\n * @return bool Always true when complete.\n *\/","file":"taxonomy.php","line":2514,"missingDoc":false,"filters":[],"uses":{"array_map":[2517],"get_taxonomy":[2519],"call_user_func":[2521],"explode":[2526],"strpos":[2525],"_update_post_term_count":[2531],"_update_generic_term_count":[2534],"array_filter":[2529],"clean_term_cache":[2538]},"used_by":{"wp_update_term_count":[2484,2502]}},"_update_post_term_count":{"doc":"\/**\n * Will update term count based on object types of the current taxonomy.\n *\n * Private function for the default callback for post_tag and category\n * taxonomies.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @access private\n * @since 2.3.0\n * @uses $wpdb\n *\n * @param array $terms List of Term taxonomy IDs\n * @param object $taxonomy Current taxonomy object of terms\n *\/","file":"taxonomy.php","line":2918,"missingDoc":false,"filters":["'edit_term_taxonomy'","'edited_term_taxonomy'"],"uses":{"explode":[2924],"array_unique":[2926],"array_search":[2928],"esc_sql":[2934],"array_filter":[2934],"get_var":[2941,2944],"prepare":[2941,2944],"implode":[2944],"update":[2947],"compact":[2947]},"used_by":{"wp_update_term_count_now":[2531]}},"_update_generic_term_count":{"doc":"\/**\n * Will update term count based on number of objects.\n *\n * Default callback for the link_category taxonomy.\n *\n * @package WordPress\n * @subpackage Taxonomy\n * @since 3.3.0\n * @uses $wpdb\n *\n * @param array $terms List of Term taxonomy IDs\n * @param object $taxonomy Current taxonomy object of terms\n *\/","file":"taxonomy.php","line":2965,"missingDoc":false,"filters":["'edit_term_taxonomy'","'edited_term_taxonomy'"],"uses":{"get_var":[2969],"prepare":[2969],"update":[2972],"compact":[2972]},"used_by":{"wp_update_term_count_now":[2534]}},"get_ancestors":{"doc":"\/**\n * Get an array of ancestor IDs for a given object.\n *\n * @param int $object_id The ID of the object\n * @param string $object_type The type of object for which we'll be retrieving ancestors.\n * @return array of ancestors from lowest to highest in the hierarchy.\n *\/","file":"taxonomy.php","line":3224,"missingDoc":false,"filters":["'get_ancestors'","'get_ancestors'"],"uses":{"get_term":[3234,3237],"is_wp_error":[3235],"in_array":[3235],"post_type_exists":[3239],"get_post_ancestors":[3240],"is_taxonomy_hierarchical":[3233]},"used_by":{"get_term_link":[3025]}},"the_taxonomies":{"doc":"\/**\n * Display the taxonomies of a post with available options.\n *\n * This function can be used within the loop to display the taxonomies for a\n * post without specifying the Post ID. You can also use it outside the Loop to\n * display the taxonomies for a specific post.\n *\n * The available defaults are:\n * 'post' : default is 0. The post ID to get taxonomies of.\n * 'before' : default is empty string. Display before taxonomies list.\n * 'sep' : default is empty string. Separate every taxonomy with value in this.\n * 'after' : default is empty string. Display this after the taxonomies list.\n * 'template' : The template to use for displaying the taxonomy terms.\n *\n * @since 2.5.0\n * @uses get_the_taxonomies()\n *\n * @param array $args Override the defaults.\n *\/","file":"taxonomy.php","line":3066,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[3075],"extract":[3076],"join":[3078],"get_the_taxonomies":[3078]},"used_by":[]},"get_the_taxonomies":{"doc":"\/**\n * Retrieve all taxonomies associated with a post.\n *\n * This function can be used within the loop. It will also return an array of\n * the taxonomies with links to the taxonomy and name.\n *\n * @since 2.5.0\n *\n * @param int $post Optional. Post ID or will use Global Post ID (in loop).\n * @param array $args Override the defaults.\n * @return array\n *\/","file":"taxonomy.php","line":3093,"missingDoc":false,"filters":[],"uses":{"get_post":[3094],"wp_parse_args":[3096],"extract":[3099],"get_taxonomy":[3107],"get_object_term_cache":[3115],"wp_get_object_terms":[3117],"esc_attr":[3122],"get_term_link":[3122],"wp_sprintf":[3125],"get_object_taxonomies":[3106]},"used_by":{"the_taxonomies":[3078]}},"get_post_taxonomies":{"doc":"\/**\n * Retrieve all taxonomies of a post with just the names.\n *\n * @since 2.5.0\n * @uses get_object_taxonomies()\n *\n * @param int $post Optional. Post ID\n * @return array\n *\/","file":"taxonomy.php","line":3139,"missingDoc":false,"filters":[],"uses":{"get_post":[3140],"get_object_taxonomies":[3142]},"used_by":[]},"wp_get_term_taxonomy_parent_id":{"doc":"\/**\n * Returns the term's parent's term_ID\n *\n * @since 3.1.0\n *\n * @param int $term_id\n * @param string $taxonomy\n *\n * @return int|bool false on error\n *\/","file":"taxonomy.php","line":3256,"missingDoc":false,"filters":[],"uses":{"get_term":[3257],"is_wp_error":[3258]},"used_by":[]},"wp_check_term_hierarchy_for_loops":{"doc":"\/**\n * Checks the given subset of the term hierarchy for hierarchy loops.\n * Prevents loops from forming and breaks those that it finds.\n *\n * Attached to the wp_update_term_parent filter.\n *\n * @since 3.1.0\n * @uses wp_find_hierarchy_loop()\n *\n * @param int $parent term_id of the parent for the term we're checking.\n * @param int $term_id The term we're checking.\n * @param string $taxonomy The taxonomy of the term we're checking.\n *\n * @return int The new parent for the term.\n *\/","file":"taxonomy.php","line":3278,"missingDoc":false,"filters":[],"uses":{"wp_find_hierarchy_loop":[3289],"wp_update_term":[3298],"array_keys":[3297]},"used_by":[]},"get_search_template":{"doc":"\/**\n * Retrieve path of search template in current or parent template.\n *\n * @since 1.5.0\n *\n * @return string\n *\/","file":"template.php","line":277,"missingDoc":false,"filters":[],"uses":{"get_query_template":[278]},"used_by":{"__main":[28]}},"get_taxonomy_template":{"doc":"\/**\n * Retrieve path of taxonomy template in current or parent template.\n *\n * Retrieves the taxonomy and term, if term is available. The template is\n * prepended with 'taxonomy-' and followed by both the taxonomy string and\n * the taxonomy string followed by a dash and then followed by the term.\n *\n * The taxonomy and term template is checked and used first, if it exists.\n * Second, just the taxonomy template is checked, and then finally, taxonomy.php\n * template is used. If none of the files exist, then it will fall back on to\n * index.php.\n *\n * @since 2.5.0\n * @uses apply_filters() Calls 'taxonomy_template' filter on found path.\n *\n * @return string\n *\/","file":"template.php","line":165,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[166],"get_query_template":[177]},"used_by":{"__main":[29]}},"get_front_page_template":{"doc":"\/**\n * Retrieve path of front-page template in current or parent template.\n *\n * Looks for 'front-page.php'.\n *\n * @since 3.0.0\n * @uses apply_filters() Calls 'front_page_template' on file path of template.\n *\n * @return string\n *\/","file":"template.php","line":219,"missingDoc":false,"filters":[],"uses":{"get_query_template":[222]},"used_by":{"__main":[30]}},"get_home_template":{"doc":"\/**\n * Retrieve path of home template in current or parent template.\n *\n * This is the template used for the page containing the blog posts\n *\n * Attempts to locate 'home.php' first before falling back to 'index.php'.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'home_template' on file path of home template.\n *\n * @return string\n *\/","file":"template.php","line":203,"missingDoc":false,"filters":[],"uses":{"get_query_template":[206]},"used_by":{"__main":[31]}},"get_attachment_template":{"doc":"\/**\n * Retrieve path of attachment template in current or parent template.\n *\n * The attachment path first checks if the first part of the mime type exists.\n * The second check is for the second part of the mime type. The last check is\n * for both types separated by an underscore. If neither are found then the file\n * 'attachment.php' is checked and returned.\n *\n * Some examples for the 'text\/plain' mime type are 'text.php', 'plain.php', and\n * finally 'text_plain.php'.\n *\n * @since 2.0.0\n *\n * @return string\n *\/","file":"template.php","line":315,"missingDoc":false,"filters":[],"uses":{"explode":[319],"get_query_template":[324,326,322,331]},"used_by":{"__main":[32]}},"get_single_template":{"doc":"\/**\n * Retrieve path of single template in current or parent template.\n *\n * @since 1.5.0\n *\n * @return string\n *\/","file":"template.php","line":288,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[289],"get_query_template":[297]},"used_by":{"__main":[34]}},"get_page_template":{"doc":"\/**\n * Retrieve path of page template in current or parent template.\n *\n * Will first look for the specifically assigned page template\n * The will search for 'page-{slug}.php' followed by 'page-id.php'\n * and finally 'page.php'\n *\n * @since 1.5.0\n *\n * @return string\n *\/","file":"template.php","line":236,"missingDoc":false,"filters":[],"uses":{"get_queried_object_id":[237],"get_page_template_slug":[238],"get_query_var":[239],"get_queried_object":[243],"validate_file":[248],"get_query_template":[256]},"used_by":{"__main":[35]}},"get_category_template":{"doc":"\/**\n * Retrieve path of category template in current or parent template.\n *\n * Works by first retrieving the current slug for example 'category-default.php' and then\n * trying category ID, for example 'category-1.php' and will finally fallback to category.php\n * template, if those files don't exist.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'category_template' on file path of category template.\n *\n * @return string\n *\/","file":"template.php","line":108,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[109],"get_query_template":[119]},"used_by":{"__main":[36]}},"get_tag_template":{"doc":"\/**\n * Retrieve path of tag template in current or parent template.\n *\n * Works by first retrieving the current tag name, for example 'tag-wordpress.php' and then\n * trying tag ID, for example 'tag-1.php' and will finally fallback to tag.php\n * template, if those files don't exist.\n *\n * @since 2.3.0\n * @uses apply_filters() Calls 'tag_template' on file path of tag template.\n *\n * @return string\n *\/","file":"template.php","line":134,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[135],"get_query_template":[145]},"used_by":{"__main":[37]}},"get_author_template":{"doc":"\/**\n * Retrieve path of author template in current or parent template.\n *\n * @since 1.5.0\n *\n * @return string\n *\/","file":"template.php","line":82,"missingDoc":false,"filters":[],"uses":{"get_queried_object":[83],"get_query_template":[93]},"used_by":{"__main":[38]}},"get_date_template":{"doc":"\/**\n * Retrieve path of date template in current or parent template.\n *\n * @since 1.5.0\n *\n * @return string\n *\/","file":"template.php","line":187,"missingDoc":false,"filters":[],"uses":{"get_query_template":[188]},"used_by":{"__main":[39]}},"get_archive_template":{"doc":"\/**\n * Retrieve path of archive template in current or parent template.\n *\n * @since 1.5.0\n *\n * @return string\n *\/","file":"template.php","line":61,"missingDoc":false,"filters":[],"uses":{"array_filter":[62],"get_query_var":[62],"reset":[67],"count":[66],"get_query_template":[72]},"used_by":{"__main":[40]}},"get_comments_popup_template":{"doc":"\/**\n * Retrieve path of comment popup template in current or parent template.\n *\n * Checks for comment popup template in current template, if it exists or in the\n * parent template.\n *\n * @since 1.5.0\n * @uses apply_filters() Calls 'comments_popup_template' filter on path.\n *\n * @return string\n *\/","file":"template.php","line":345,"missingDoc":false,"filters":[],"uses":{"get_query_template":[346]},"used_by":{"__main":[41]}},"get_paged_template":{"doc":"\/**\n * Retrieve path of paged template in current or parent template.\n *\n * @since 1.5.0\n *\n * @return string\n *\/","file":"template.php","line":266,"missingDoc":false,"filters":[],"uses":{"get_query_template":[267]},"used_by":{"__main":[42]}},"get_index_template":{"doc":"\/**\n * Retrieve path of index template in current or parent template.\n *\n * @since 3.0.0\n *\n * @return string\n *\/","file":"template.php","line":39,"missingDoc":false,"filters":[],"uses":{"get_query_template":[40]},"used_by":{"__main":[44]}},"get_404_template":{"doc":"\/**\n * Retrieve path of 404 template in current or parent template.\n *\n * @since 1.5.0\n *\n * @return string\n *\/","file":"template.php","line":50,"missingDoc":false,"filters":[],"uses":{"get_query_template":[51]},"used_by":{"__main":[27]}},"get_query_template":{"doc":"\/**\n * Retrieve path to a template\n *\n * Used to quickly retrieve the path of a template without including the file\n * extension. It will also check the parent theme, if the file exists, with\n * the use of {@link locate_template()}. Allows for more generic template location\n * without the use of the other get_*_template() functions.\n *\n * @since 1.5.0\n *\n * @param string $type Filename without extension.\n * @param array $templates An optional list of template candidates\n * @return string Full path to file.\n *\/","file":"template.php","line":23,"missingDoc":false,"filters":["\"{$type}_template\""],"uses":{"preg_replace":[24],"locate_template":[29]},"used_by":{"get_index_template":[40],"get_404_template":[51],"get_archive_template":[72],"get_author_template":[93],"get_category_template":[119],"get_tag_template":[145],"get_taxonomy_template":[177],"get_date_template":[188],"get_home_template":[206],"get_front_page_template":[222],"get_page_template":[256],"get_paged_template":[267],"get_search_template":[278],"get_single_template":[297],"get_attachment_template":[324,326,322,331],"get_comments_popup_template":[346]}},"Text_Diff_Engine_native::diff":{"doc":"","file":"Text\/Diff\/Engine\/native.php","line":31,"missingDoc":true,"filters":[],"uses":{"array_walk":[33,34],"count":[36,37,86,86],"_compareseq":[86],"_shiftBoundaries":[89,90],"assert":[96,97]},"used_by":[]},"Text_Diff_Engine_native::_diag":{"doc":"\/**\n * Divides the Largest Common Subsequence (LCS) of the sequences (XOFF,\n * XLIM) and (YOFF, YLIM) into NCHUNKS approximately equally sized\n * segments.\n *\n * Returns (LCS, PTS).  LCS is the length of the LCS. PTS is an array of\n * NCHUNKS+1 (X, Y) indexes giving the diving points between sub\n * sequences.  The first sub-sequence is contained in (X0, X1), (Y0, Y1),\n * the second in (X1, X2), (Y1, Y2) and so on.  Note that (X0, Y0) ==\n * (XOFF, YOFF) and (X[NCHUNKS], Y[NCHUNKS]) == (XLIM, YLIM).\n *\n * This function assumes that the first lines of the specified portions of\n * the two files do not match, and likewise that the last lines do not\n * match.  The caller must trim matching lines from the beginning and end\n * of the portions it is going to specify.\n *\/","file":"Text\/Diff\/Engine\/native.php","line":149,"missingDoc":false,"filters":[],"uses":{"reset":[192],"each":[193,201],"_lcsPos":[195,210],"assert":[196,203,211]},"used_by":[]},"Text_Diff_Engine_native::_lcsPos":{"doc":"","file":"Text\/Diff\/Engine\/native.php","line":230,"missingDoc":true,"filters":[],"uses":{"assert":[249]},"used_by":[]},"Text_Diff_Engine_native::_compareseq":{"doc":"\/**\n * Finds LCS of two sequences.\n *\n * The results are recorded in the vectors $this->{x,y}changed[], by\n * storing a 1 in the element for each line that is an insertion or\n * deletion (ie. is not in the LCS).\n *\n * The subsequence of file 0 is (XOFF, XLIM) and likewise for file 1.\n *\n * Note that XLIM, YLIM are exclusive bounds.  All line numbers are\n * origin-0 and discarded lines are not counted.\n *\/","file":"Text\/Diff\/Engine\/native.php","line":269,"missingDoc":false,"filters":[],"uses":{"min":[291],"_diag":[293],"reset":[307],"next":[309],"_compareseq":[310]},"used_by":[]},"Text_Diff_Engine_native::_shiftBoundaries":{"doc":"\/**\n * Adjusts inserts\/deletes of identical lines to join changes as much as\n * possible.\n *\n * We do something when a run of changed lines include a line at one end\n * and has an excluded, identical line at the other.  We are free to\n * choose which identical line is included.  `compareseq' usually chooses\n * the one at the beginning, but usually it is cleaner to consider the\n * following identical line to be the \"change\".\n *\n * This is extracted verbatim from analyze.c (GNU diffutils-2.7).\n *\/","file":"Text\/Diff\/Engine\/native.php","line":328,"missingDoc":false,"filters":[],"uses":{"assert":[333,354,386,390,411,427,431],"count":[334,335]},"used_by":[]},"Text_Diff_Engine_shell::diff":{"doc":"\/**\n * Returns the array of differences.\n *\n * @param array $from_lines lines of text from old file\n * @param array $to_lines   lines of text from new file\n *\n * @return array all changes made (array with Text_Diff_Op_* objects)\n *\/","file":"Text\/Diff\/Engine\/shell.php","line":34,"missingDoc":false,"filters":[],"uses":{"array_walk":[36,37],"tempnam":[42,43],"fopen":[44,47],"fwrite":[45,48],"implode":[45,48],"fclose":[46,49],"shell_exec":[50],"unlink":[51,52],"is_null":[54],"preg_match_all":[67],"assert":[86],"array_push":[87,96,104,112,122],"_getLines":[89,90,98,106,107,114,124,126],"count":[125,127]},"used_by":[]},"Text_Diff_Engine_shell::_getLines":{"doc":"\/**\n * Get lines from either the old or new text\n *\n * @access private\n *\n * @param array &$text_lines Either $from_lines or $to_lines\n * @param int   &$line_no    Current line number\n * @param int   $end         Optional end line, when we want to chop more\n *                           than one line.\n *\n * @return array The chopped lines\n *\/","file":"Text\/Diff\/Engine\/shell.php","line":145,"missingDoc":false,"filters":[],"uses":{"array_push":[151],"array_shift":[151,155]},"used_by":[]},"Text_Diff_Engine_string::diff":{"doc":"\/**\n * Parses a unified or context diff.\n *\n * First param contains the whole diff and the second can be used to force\n * a specific diff type. If the second parameter is 'autodetect', the\n * diff will be examined to find out which type of diff this is.\n *\n * @param string $diff  The diff content.\n * @param string $mode  The diff mode of the content in $diff. One of\n *                      'context', 'unified', or 'autodetect'.\n *\n * @return array  List of all diff operations.\n *\/","file":"Text\/Diff\/Engine\/string.php","line":38,"missingDoc":false,"filters":[],"uses":{"strpos":[44,42,58,59,71,72],"substr":[49],"strlen":[49],"explode":[70],"array_shift":[73,74],"parseContextDiff":[78],"parseUnifiedDiff":[80]},"used_by":[]},"Text_Diff_Engine_string::parseUnifiedDiff":{"doc":"\/**\n * Parses an array containing the unified diff.\n *\n * @param array $diff  Array of lines.\n *\n * @return array  List of all diff operations.\n *\/","file":"Text\/Diff\/Engine\/string.php","line":91,"missingDoc":false,"filters":[],"uses":{"count":[94,123],"substr":[97,101,100,109,108,118,117,120,121]},"used_by":[]},"Text_Diff_Engine_string::parseContextDiff":{"doc":"\/**\n * Parses an array containing the context diff.\n *\n * @param array $diff  Array of lines.\n *\n * @return array  List of all diff operations.\n *\/","file":"Text\/Diff\/Engine\/string.php","line":146,"missingDoc":false,"filters":[],"uses":{"count":[150,191],"substr":[155,158,161,164,173,179,182,186,189,197,205,201,203,202,212,211,219,218,227,231,230,238,237],"strcmp":[172]},"used_by":[]},"Text_Diff_Engine_xdiff::diff":{"doc":"\/**\n *\/","file":"Text\/Diff\/Engine\/xdiff.php","line":20,"missingDoc":false,"filters":[],"uses":{"array_walk":[22,23],"implode":[26,27],"xdiff_string_diff":[30],"count":[30],"explode":[31],"strlen":[43],"substr":[48,52,56]},"used_by":[]},"Text_Diff_Renderer_inline::_blockHeader":{"doc":"","file":"Text\/Diff\/Renderer\/inline.php","line":93,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Renderer_inline::_startBlock":{"doc":"","file":"Text\/Diff\/Renderer\/inline.php","line":98,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Renderer_inline::_lines":{"doc":"","file":"Text\/Diff\/Renderer\/inline.php","line":103,"missingDoc":true,"filters":[],"uses":{"array_walk":[106],"implode":[110,112]},"used_by":[]},"Text_Diff_Renderer_inline::_added":{"doc":"","file":"Text\/Diff\/Renderer\/inline.php","line":116,"missingDoc":true,"filters":[],"uses":{"array_walk":[118],"count":[120],"_lines":[121]},"used_by":[]},"Text_Diff_Renderer_inline::_deleted":{"doc":"","file":"Text\/Diff\/Renderer\/inline.php","line":124,"missingDoc":true,"filters":[],"uses":{"array_walk":[126],"count":[128],"_lines":[129]},"used_by":[]},"Text_Diff_Renderer_inline::_changed":{"doc":"","file":"Text\/Diff\/Renderer\/inline.php","line":132,"missingDoc":true,"filters":[],"uses":{"_deleted":[136,150],"_added":[137,150],"substr":[144,145,146,147,148],"implode":[153,154],"preg_split":[161,162],"_splitOnWords":[168,169],"array_merge":[174],"getParams":[174],"str_replace":[178],"render":[178]},"used_by":[]},"Text_Diff_Renderer_inline::_splitOnWords":{"doc":"","file":"Text\/Diff\/Renderer\/inline.php","line":181,"missingDoc":true,"filters":[],"uses":{"str_replace":[184,194],"strlen":[187],"strspn":[192],"substr":[192,193,194],"strcspn":[193]},"used_by":[]},"Text_Diff_Renderer_inline::_encode":{"doc":"","file":"Text\/Diff\/Renderer\/inline.php","line":201,"missingDoc":true,"filters":[],"uses":{"htmlspecialchars":[203]},"used_by":[]},"Text_Diff_Renderer::Text_Diff_Renderer":{"doc":"\/**\n * Constructor.\n *\/","file":"Text\/Diff\/Renderer.php","line":36,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Renderer::getParams":{"doc":"\/**\n * Get any renderer parameters.\n *\n * @return array  All parameters of this renderer object.\n *\/","file":"Text\/Diff\/Renderer.php","line":51,"missingDoc":false,"filters":[],"uses":{"substr":[56],"get_object_vars":[54]},"used_by":[]},"Text_Diff_Renderer::render":{"doc":"\/**\n * Renders a diff.\n *\n * @param Text_Diff $diff  A Text_Diff object.\n *\n * @return string  The formatted output.\n *\/","file":"Text\/Diff\/Renderer.php","line":70,"missingDoc":false,"filters":[],"uses":{"_startDiff":[79],"getDiff":[81],"count":[91,92,116,117,118,128,131],"array_slice":[100,116],"_block":[104,136],"is_array":[88,114,135],"is_a":[86],"_endDiff":[141]},"used_by":[]},"Text_Diff_Renderer::_block":{"doc":"","file":"Text\/Diff\/Renderer.php","line":144,"missingDoc":true,"filters":[],"uses":{"_startBlock":[146],"_blockHeader":[146],"strtolower":[149],"get_class":[149],"_context":[151],"_added":[155],"_deleted":[159],"_changed":[163],"_endBlock":[168]},"used_by":[]},"Text_Diff_Renderer::_startDiff":{"doc":"","file":"Text\/Diff\/Renderer.php","line":171,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Renderer::_endDiff":{"doc":"","file":"Text\/Diff\/Renderer.php","line":176,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Renderer::_blockHeader":{"doc":"","file":"Text\/Diff\/Renderer.php","line":181,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Renderer::_startBlock":{"doc":"","file":"Text\/Diff\/Renderer.php","line":200,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Renderer::_endBlock":{"doc":"","file":"Text\/Diff\/Renderer.php","line":205,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Renderer::_lines":{"doc":"","file":"Text\/Diff\/Renderer.php","line":210,"missingDoc":true,"filters":[],"uses":{"implode":[212]},"used_by":[]},"Text_Diff_Renderer::_context":{"doc":"","file":"Text\/Diff\/Renderer.php","line":215,"missingDoc":true,"filters":[],"uses":{"_lines":[217]},"used_by":[]},"Text_Diff_Renderer::_added":{"doc":"","file":"Text\/Diff\/Renderer.php","line":220,"missingDoc":true,"filters":[],"uses":{"_lines":[222]},"used_by":[]},"Text_Diff_Renderer::_deleted":{"doc":"","file":"Text\/Diff\/Renderer.php","line":225,"missingDoc":true,"filters":[],"uses":{"_lines":[227]},"used_by":[]},"Text_Diff_Renderer::_changed":{"doc":"","file":"Text\/Diff\/Renderer.php","line":230,"missingDoc":true,"filters":[],"uses":{"_deleted":[232],"_added":[232]},"used_by":[]},"Text_Diff::Text_Diff":{"doc":"\/**\n * Computes diffs between sequences of strings.\n *\n * @param string $engine     Name of the diffing engine to use.  'auto'\n *                           will automatically select the best.\n * @param array $params      Parameters to pass to the diffing engine.\n *                           Normally an array of two arrays, each\n *                           containing the lines from a file.\n *\/","file":"Text\/Diff.php","line":36,"missingDoc":false,"filters":[],"uses":{"is_string":[39],"extension_loaded":[45],"basename":[47],"dirname":[51],"call_user_func_array":[55]},"used_by":[]},"Text_Diff::getDiff":{"doc":"\/**\n * Returns the array of differences.\n *\/","file":"Text\/Diff.php","line":61,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"Text_Diff::countAddedLines":{"doc":"\/**\n * returns the number of new (added) lines in a given diff.\n *\n * @since Text_Diff 1.1.0\n *\n * @return integer The number of new lines\n *\/","file":"Text\/Diff.php","line":73,"missingDoc":false,"filters":[],"uses":{"nfinal":[79],"is_a":[77,78]},"used_by":[]},"Text_Diff::countDeletedLines":{"doc":"\/**\n * Returns the number of deleted (removed) lines in a given diff.\n *\n * @since Text_Diff 1.1.0\n *\n * @return integer The number of deleted lines\n *\/","file":"Text\/Diff.php","line":92,"missingDoc":false,"filters":[],"uses":{"norig":[98],"is_a":[96,97]},"used_by":[]},"Text_Diff::reverse":{"doc":"\/**\n * Computes a reversed diff.\n *\n * Example:\n * <code>\n * $diff = new Text_Diff($lines1, $lines2);\n * $rev = $diff->reverse();\n * <\/code>\n *\n * @return Text_Diff  A Diff object representing the inverse of the\n *                    original diff.  Note that we purposely don't return a\n *                    reference here, since this essentially is a clone()\n *                    method.\n *\/","file":"Text\/Diff.php","line":118,"missingDoc":false,"filters":[],"uses":{"version_compare":[120],"zend_version":[120],"reverse":[127]},"used_by":[]},"Text_Diff::isEmpty":{"doc":"\/**\n * Checks for an empty diff.\n *\n * @return boolean  True if two sequences were identical.\n *\/","file":"Text\/Diff.php","line":137,"missingDoc":false,"filters":[],"uses":{"is_a":[140]},"used_by":[]},"Text_Diff::lcs":{"doc":"\/**\n * Computes the length of the Longest Common Subsequence (LCS).\n *\n * This is mostly for diagnostic purposes.\n *\n * @return integer  The length of the LCS.\n *\/","file":"Text\/Diff.php","line":154,"missingDoc":false,"filters":[],"uses":{"count":[159],"is_a":[158]},"used_by":[]},"Text_Diff::getOriginal":{"doc":"\/**\n * Gets the original set of lines.\n *\n * This reconstructs the $from_lines parameter passed to the constructor.\n *\n * @return array  The original sequence of strings.\n *\/","file":"Text\/Diff.php","line":172,"missingDoc":false,"filters":[],"uses":{"array_splice":[177],"count":[177]},"used_by":[]},"Text_Diff::getFinal":{"doc":"\/**\n * Gets the final set of lines.\n *\n * This reconstructs the $to_lines parameter passed to the constructor.\n *\n * @return array  The sequence of strings.\n *\/","file":"Text\/Diff.php","line":190,"missingDoc":false,"filters":[],"uses":{"array_splice":[195],"count":[195]},"used_by":[]},"Text_Diff::trimNewlines":{"doc":"\/**\n * Removes trailing newlines from a line of text. This is meant to be used\n * with array_walk().\n *\n * @param string $line  The line to trim.\n * @param integer $key  The index of the line in the array. Not used.\n *\/","file":"Text\/Diff.php","line":208,"missingDoc":false,"filters":[],"uses":{"str_replace":[210]},"used_by":[]},"Text_Diff::_getTempDir":{"doc":"\/**\n * Determines the location of the system temporary directory.\n *\n * @static\n *\n * @access protected\n *\n * @return string  A directory name which can be used for temp files.\n *                 Returns false if one could not be found.\n *\/","file":"Text\/Diff.php","line":223,"missingDoc":false,"filters":[],"uses":{"ini_get":[229],"getenv":[233],"strlen":[232,238,247],"count":[238],"array_shift":[239],"is_dir":[240]},"used_by":[]},"Text_Diff::_check":{"doc":"\/**\n * Checks a diff for validity.\n *\n * This is here only for debugging purposes.\n *\/","file":"Text\/Diff.php","line":255,"missingDoc":false,"filters":[],"uses":{"trigger_error":[258,261,266,269,275],"serialize":[257,257,260,260,265,265,268,268],"getOriginal":[257,265],"getFinal":[260,268],"reverse":[264],"get_class":[274,277]},"used_by":[]},"Text_MappedDiff::Text_MappedDiff":{"doc":"\/**\n * Computes a diff between sequences of strings.\n *\n * This can be used to compute things like case-insensitve diffs, or diffs\n * which ignore changes in white-space.\n *\n * @param array $from_lines         An array of strings.\n * @param array $to_lines           An array of strings.\n * @param array $mapped_from_lines  This array should have the same size\n *                                  number of elements as $from_lines.  The\n *                                  elements in $mapped_from_lines and\n *                                  $mapped_to_lines are what is actually\n *                                  compared when computing the diff.\n * @param array $mapped_to_lines    This array should have the same number\n *                                  of elements as $to_lines.\n *\/","file":"Text\/Diff.php","line":307,"missingDoc":false,"filters":[],"uses":{"assert":[310,311],"count":[310,310,311,311,316,319,320,325,326],"array_slice":[319,325],"is_array":[318,324]},"used_by":[]},"Text_Diff_Op::reverse":{"doc":"","file":"Text\/Diff.php","line":344,"missingDoc":true,"filters":[],"uses":{"trigger_error":[346]},"used_by":[]},"Text_Diff_Op::norig":{"doc":"","file":"Text\/Diff.php","line":349,"missingDoc":true,"filters":[],"uses":{"count":[351]},"used_by":[]},"Text_Diff_Op::nfinal":{"doc":"","file":"Text\/Diff.php","line":354,"missingDoc":true,"filters":[],"uses":{"count":[356]},"used_by":[]},"Text_Diff_Op_copy::Text_Diff_Op_copy":{"doc":"","file":"Text\/Diff.php","line":369,"missingDoc":true,"filters":[],"uses":{"is_array":[371]},"used_by":[]},"Text_Diff_Op_copy::reverse":{"doc":"","file":"Text\/Diff.php","line":378,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Op_delete::Text_Diff_Op_delete":{"doc":"","file":"Text\/Diff.php","line":394,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Op_delete::reverse":{"doc":"","file":"Text\/Diff.php","line":400,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Op_add::Text_Diff_Op_add":{"doc":"","file":"Text\/Diff.php","line":416,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Op_add::reverse":{"doc":"","file":"Text\/Diff.php","line":422,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Op_change::Text_Diff_Op_change":{"doc":"","file":"Text\/Diff.php","line":438,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"Text_Diff_Op_change::reverse":{"doc":"","file":"Text\/Diff.php","line":444,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"dynamic_sidebar":{"doc":"\/**\n * Display dynamic sidebar.\n *\n * By default it displays the default sidebar or 'sidebar-1'. The 'sidebar-1' is\n * not named by the theme, the actual name is '1', but 'sidebar-' is added to\n * the registered sidebars for the name. If you named your sidebar 'after-post',\n * then the parameter $index will still be 'after-post', but the lookup will be\n * for 'sidebar-after-post'.\n *\n * It is confusing for the $index parameter, but just know that it should just\n * work. When you register the sidebar in the theme, you will use the same name\n * for this function or \"Pay no heed to the man behind the curtain.\" Just accept\n * it as an oddity of WordPress sidebar register and display.\n *\n * @since 2.2.0\n *\n * @param int|string $index Optional, default is 1. Name or ID of dynamic sidebar.\n * @return bool True, if widget sidebar was found and called. False if not found or not called.\n *\/","file":"widgets.php","line":852,"missingDoc":false,"filters":["'dynamic_sidebar_params'","'dynamic_sidebar'"],"uses":{"sanitize_title":[858,860],"is_int":[855],"wp_get_sidebars_widgets":[867],"array_key_exists":[871],"is_array":[871],"array_merge":[881,882],"is_object":[891],"get_class":[892],"is_string":[889],"ltrim":[894],"sprintf":[895],"call_user_func_array":[904],"is_callable":[903]},"used_by":{"__main":[15]}},"wp_clean_themes_cache":{"doc":"\/**\n * Clears the cache held by get_theme_roots() and WP_Theme.\n *\n * @since 3.5.0\n *\/","file":"theme.php","line":114,"missingDoc":false,"filters":[],"uses":{"delete_site_transient":[115],"search_theme_directories":[116],"cache_delete":[118],"wp_get_themes":[117]},"used_by":[]},"get_locale_stylesheet_uri":{"doc":"\/**\n * Retrieve localized stylesheet URI.\n *\n * The stylesheet directory for the localized stylesheet files are located, by\n * default, in the base theme directory. The name of the locale file will be the\n * locale followed by '.css'. If that does not exist, then the text direction\n * stylesheet will be checked for existence, for example 'ltr.css'.\n *\n * The theme may change the location of the stylesheet directory by either using\n * the 'stylesheet_directory_uri' filter or the 'locale_stylesheet_uri' filter.\n * If you want to change the location of the stylesheet files for the entire\n * WordPress workflow, then change the former. If you just have the locale in a\n * separate folder, then change the latter.\n *\n * @since 2.1.0\n * @uses apply_filters() Calls 'locale_stylesheet_uri' filter on stylesheet URI path and stylesheet directory URI.\n *\n * @return string\n *\/","file":"theme.php","line":217,"missingDoc":false,"filters":["'locale_stylesheet_uri'"],"uses":{"get_stylesheet_directory_uri":[219],"get_stylesheet_directory":[220],"get_locale":[221],"file_exists":[224,222]},"used_by":{"locale_stylesheet":[538]}},"get_theme_roots":{"doc":"\/**\n * Retrieve theme roots.\n *\n * @since 2.9.0\n *\n * @return array|string An array of theme roots keyed by template\/stylesheet or a single theme root if all themes have the same root.\n *\/","file":"theme.php","line":282,"missingDoc":false,"filters":[],"uses":{"count":[285],"get_site_transient":[288,291],"search_theme_directories":[290]},"used_by":{"get_raw_theme_root":[524]}},"register_theme_directory":{"doc":"\/**\n * Register a directory that contains themes.\n *\n * @since 2.9.0\n *\n * @param string $directory Either the full filesystem path to a theme folder or a folder within WP_CONTENT_DIR\n * @return bool\n *\/","file":"theme.php","line":304,"missingDoc":false,"filters":[],"uses":{"file_exists":[311,307]},"used_by":[]},"locale_stylesheet":{"doc":"\/**\n * Display localized stylesheet link element.\n *\n * @since 2.1.0\n *\/","file":"theme.php","line":537,"missingDoc":false,"filters":[],"uses":{"get_locale_stylesheet_uri":[538]},"used_by":[]},"preview_theme":{"doc":"\/**\n * Start preview theme output buffer.\n *\n * Will only preform task if the user has permissions and template and preview\n * query variables exist.\n *\n * @since 2.6.0\n *\/","file":"theme.php","line":552,"missingDoc":false,"filters":[],"uses":{"current_user_can":[556],"show_admin_bar":[561],"preg_replace":[563,571],"validate_file":[565,572],"add_filter":[568,574,578],"get_option":[578],"ob_start":[580]},"used_by":[]},"_preview_theme_template_filter":{"doc":"\/**\n * Private function to modify the current template when previewing a theme\n *\n * @since 2.9.0\n * @access private\n *\n * @return string\n *\/","file":"theme.php","line":592,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"_preview_theme_stylesheet_filter":{"doc":"\/**\n * Private function to modify the current stylesheet when previewing a theme\n *\n * @since 2.9.0\n * @access private\n *\n * @return string\n *\/","file":"theme.php","line":604,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"preview_theme_ob_filter":{"doc":"\/**\n * Callback function for ob_start() to capture all links in the theme.\n *\n * @since 2.6.0\n * @access private\n *\n * @param string $content\n * @return string\n *\/","file":"theme.php","line":617,"missingDoc":false,"filters":[],"uses":{"preg_replace_callback":[618]},"used_by":[]},"preview_theme_ob_filter_callback":{"doc":"\/**\n * Manipulates preview theme links in order to control and maintain location.\n *\n * Callback function for preg_replace_callback() to accept and filter matches.\n *\n * @since 2.6.0\n * @access private\n *\n * @param array $matches\n * @return string\n *\/","file":"theme.php","line":632,"missingDoc":false,"filters":[],"uses":{"preg_replace":[634],"strpos":[633,636,638,638,640,642,647],"home_url":[638],"add_query_arg":[646],"esc_attr":[649]},"used_by":[]},"get_theme_mods":{"doc":"\/**\n * Retrieve all theme modifications.\n *\n * @since 3.1.0\n *\n * @return array Theme modifications.\n *\/","file":"theme.php","line":746,"missingDoc":false,"filters":[],"uses":{"get_option":[747,749,752,748],"get":[751],"wp_get_theme":[751],"update_option":[754],"delete_option":[755],"is_admin":[753]},"used_by":{"get_theme_mod":[777],"set_theme_mod":[797],"remove_theme_mod":[817]}},"remove_theme_mods":{"doc":"\/**\n * Remove theme modifications option for current theme.\n *\n * @since 2.1.0\n *\/","file":"theme.php","line":836,"missingDoc":false,"filters":[],"uses":{"delete_option":[837,843],"get_option":[837,840],"get":[842],"wp_get_theme":[842]},"used_by":{"remove_theme_mod":[825]}},"get_header_textcolor":{"doc":"\/**\n * Retrieve text color for custom header.\n *\n * @since 2.1.0\n *\n * @return string\n *\/","file":"theme.php","line":853,"missingDoc":false,"filters":[],"uses":{"get_theme_mod":[854],"get_theme_support":[854]},"used_by":{"header_textcolor":[863]}},"header_textcolor":{"doc":"\/**\n * Display text color for custom header.\n *\n * @since 2.1.0\n *\/","file":"theme.php","line":862,"missingDoc":false,"filters":[],"uses":{"get_header_textcolor":[863]},"used_by":[]},"display_header_text":{"doc":"\/**\n * Whether to display the header text.\n *\n * @since 3.4.0\n *\n * @return bool\n *\/","file":"theme.php","line":873,"missingDoc":false,"filters":[],"uses":{"current_theme_supports":[874],"get_theme_mod":[877],"get_theme_support":[877]},"used_by":[]},"get_header_image":{"doc":"\/**\n * Retrieve header image for custom header.\n *\n * @since 2.1.0\n *\n * @return string\n *\/","file":"theme.php","line":888,"missingDoc":false,"filters":[],"uses":{"get_theme_mod":[889],"get_theme_support":[889],"get_random_header_image":[895],"is_random_header_image":[894],"esc_url_raw":[897],"set_url_scheme":[897]},"used_by":{"header_image":[989],"_delete_attachment_theme_mod":[1591]}},"get_random_header_image":{"doc":"\/**\n * Get random header image url from registered images in theme.\n *\n * @since 3.2.0\n *\n * @return string Path to header image\n *\/","file":"theme.php","line":948,"missingDoc":false,"filters":[],"uses":{"_get_random_header_data":[949]},"used_by":{"get_header_image":[895],"is_random_header_image":[971,976]}},"is_random_header_image":{"doc":"\/**\n * Check if random header image is in use.\n *\n * Always true if user expressly chooses the option in Appearance > Header.\n * Also true if theme has multiple header images registered, no specific header image\n * is chosen, and theme turns on random headers with add_theme_support().\n *\n * @since 3.2.0\n *\n * @param string $type The random pool to use. any|default|uploaded\n * @return boolean\n *\/","file":"theme.php","line":967,"missingDoc":false,"filters":[],"uses":{"get_theme_mod":[968],"get_theme_support":[968],"get_random_header_image":[971,976]},"used_by":{"get_header_image":[894],"get_custom_header":[1033]}},"_get_random_header_data":{"doc":"\/**\n * Get random header image data from registered images in theme.\n *\n * @since 3.4.0\n *\n * @access private\n *\n * @return string Path to header image\n *\/","file":"theme.php","line":910,"missingDoc":false,"filters":[],"uses":{"get_theme_mod":[915],"get_uploaded_header_images":[919],"current_theme_supports":[924],"array_rand":[932],"sprintf":[934,935],"get_template_directory_uri":[934,935],"get_stylesheet_directory_uri":[934,935]},"used_by":{"get_random_header_image":[949],"get_custom_header":[1034]}},"header_image":{"doc":"\/**\n * Display header image path.\n *\n * @since 2.1.0\n *\/","file":"theme.php","line":988,"missingDoc":false,"filters":[],"uses":{"get_header_image":[989]},"used_by":[]},"get_custom_header":{"doc":"\/**\n * Get the header image data.\n *\n * @since 3.4.0\n *\n * @return object\n *\/","file":"theme.php","line":1030,"missingDoc":false,"filters":[],"uses":{"_get_random_header_data":[1034],"get_theme_mod":[1036],"get_template_directory_uri":[1038],"get_stylesheet_directory_uri":[1038],"vsprintf":[1040,1043,1047],"get_theme_support":[1040,1058,1059],"current_theme_supports":[1037],"is_random_header_image":[1033],"wp_parse_args":[1061]},"used_by":[]},"register_default_headers":{"doc":"\/**\n * Register a selection of default headers to be displayed by the custom header admin UI.\n *\n * @since 3.0.0\n *\n * @param array $headers Array of headers keyed by a string id. The ids point to arrays containing 'url', 'thumbnail_url', and 'description' keys.\n *\/","file":"theme.php","line":1071,"missingDoc":false,"filters":[],"uses":{"array_merge":[1074]},"used_by":[]},"unregister_default_headers":{"doc":"\/**\n * Unregister default headers.\n *\n * This function must be called after register_default_headers() has already added the\n * header you want to remove.\n *\n * @see register_default_headers()\n * @since 3.0.0\n *\n * @param string|array $header The header string id (key of array) to remove, or an array thereof.\n * @return True on success, false on failure.\n *\/","file":"theme.php","line":1089,"missingDoc":false,"filters":[],"uses":{"array_map":[1092],"is_array":[1091]},"used_by":[]},"background_image":{"doc":"\/**\n * Display background image path.\n *\n * @since 3.0.0\n *\/","file":"theme.php","line":1117,"missingDoc":false,"filters":[],"uses":{"get_background_image":[1118]},"used_by":[]},"get_background_color":{"doc":"\/**\n * Retrieve value for custom background color.\n *\n * @since 3.0.0\n *\n * @return string\n *\/","file":"theme.php","line":1128,"missingDoc":false,"filters":[],"uses":{"get_theme_mod":[1129],"get_theme_support":[1129]},"used_by":{"background_color":[1138]}},"background_color":{"doc":"\/**\n * Display background color value.\n *\n * @since 3.0.0\n *\/","file":"theme.php","line":1137,"missingDoc":false,"filters":[],"uses":{"get_background_color":[1138]},"used_by":[]},"_custom_background_cb":{"doc":"\/**\n * Default custom background callback.\n *\n * @since 3.0.0\n * @access protected\n *\/","file":"theme.php","line":1147,"missingDoc":false,"filters":[],"uses":{"set_url_scheme":[1149],"get_background_image":[1149],"get_theme_mod":[1153,1163,1168,1173],"in_array":[1164,1169,1174],"trim":[1182]},"used_by":[]},"add_editor_style":{"doc":"\/**\n * Add callback for custom TinyMCE editor stylesheets.\n *\n * The parameter $stylesheet is the name of the stylesheet, relative to\n * the theme root. It also accepts an array of stylesheets.\n * It is optional and defaults to 'editor-style.css'.\n *\n * This function automatically adds another stylesheet with -rtl prefix, e.g. editor-style-rtl.css.\n * If that file doesn't exist, it is removed before adding the stylesheet(s) to TinyMCE.\n * If an array of stylesheets is passed to add_editor_style(),\n * RTL is only added for the first stylesheet.\n *\n * Since version 3.4 the TinyMCE body has .rtl CSS class.\n * It is a better option to use that class and add any RTL styles to the main stylesheet.\n *\n * @since 3.0.0\n *\n * @param mixed $stylesheet Optional. Stylesheet name or array thereof, relative to theme root.\n * \tDefaults to 'editor-style.css'\n *\/","file":"theme.php","line":1207,"missingDoc":false,"filters":[],"uses":{"add_theme_support":[1209],"is_admin":[1211],"str_replace":[1218],"is_rtl":[1217],"array_merge":[1222]},"used_by":[]},"remove_editor_styles":{"doc":"\/**\n * Removes all visual editor stylesheets.\n *\n * @since 3.1.0\n *\n * @return bool True on success, false if there were no stylesheets to remove.\n *\/","file":"theme.php","line":1232,"missingDoc":false,"filters":[],"uses":{"current_theme_supports":[1233],"_remove_theme_support":[1235],"is_admin":[1236]},"used_by":[]},"_remove_theme_support":{"doc":"\/**\n * Do not use. Removes theme support internally, ignorant of the blacklist.\n *\n * @access private\n * @since 3.1.0\n *\/","file":"theme.php","line":1476,"missingDoc":false,"filters":[],"uses":{"add_theme_support":[1483],"did_action":[1492,1502],"get_theme_support":[1494,1504],"remove_action":[1496,1497,1505,1506]},"used_by":{"remove_editor_styles":[1235],"remove_theme_support":[1467]}},"_custom_header_background_just_in_time":{"doc":"\/**\n * Registers the internal custom header and background routines.\n *\n * @since 3.4.0\n * @access private\n *\/","file":"theme.php","line":1390,"missingDoc":false,"filters":[],"uses":{"add_theme_support":[1395,1409],"get_theme_support":[1397,1411],"add_action":[1399,1412],"is_admin":[1401,1414],"current_theme_supports":[1393,1407]},"used_by":[]},"require_if_theme_supports":{"doc":"\/**\n * Checks a theme's support for a given feature before loading the functions which implement it.\n *\n * @since 2.9.0\n * @param string $feature the feature being checked\n * @param string $include the file containing the functions that implement the feature\n *\/","file":"theme.php","line":1574,"missingDoc":false,"filters":[],"uses":{"current_theme_supports":[1575]},"used_by":[]},"_delete_attachment_theme_mod":{"doc":"\/**\n * Checks an attachment being deleted to see if it's a header or background image.\n *\n * If true it removes the theme modification which would be pointing at the deleted\n * attachment\n *\n * @access private\n * @since 3.0.0\n * @param int $id the attachment id\n *\/","file":"theme.php","line":1589,"missingDoc":false,"filters":[],"uses":{"wp_get_attachment_url":[1590],"get_header_image":[1591],"get_background_image":[1592],"remove_theme_mod":[1595,1598]},"used_by":[]},"check_theme_switched":{"doc":"\/**\n * Checks if a theme has been changed and runs 'after_switch_theme' hook on the next WP load\n *\n * @since 3.3.0\n *\/","file":"theme.php","line":1608,"missingDoc":false,"filters":["'after_switch_theme'","'after_switch_theme'"],"uses":{"wp_get_theme":[1610],"get":[1613],"exists":[1612],"update_option":[1617],"get_option":[1609]},"used_by":[]},"_wp_customize_include":{"doc":"\/**\n * Includes and instantiates the WP_Customize_Manager class.\n *\n * Fires when ?wp_customize=on or on wp-admin\/customize.php.\n *\n * @since 3.4.0\n *\/","file":"theme.php","line":1628,"missingDoc":false,"filters":[],"uses":{"is_admin":[1630],"basename":[1630]},"used_by":[]},"_wp_customize_loader_settings":{"doc":"\/**\n * Adds settings for the customize-loader script.\n *\n * @since 3.4.0\n *\/","file":"theme.php","line":1645,"missingDoc":false,"filters":[],"uses":{"parse_url":[1648,1649],"admin_url":[1648,1658],"home_url":[1649],"strtolower":[1650,1650],"wp_is_mobile":[1653,1654],"preg_match":[1654],"esc_url":[1658],"json_encode":[1663],"get_data":[1665],"add_data":[1669]},"used_by":[]},"wp_customize_support_script":{"doc":"\/**\n * Prints a script to check whether or not the customizer is supported,\n * and apply either the no-customize-support or customize-support class\n * to the body.\n *\n * This function MUST be called inside the body tag.\n *\n * Ideally, call this function immediately after the body tag is opened.\n * This prevents a flash of unstyled content.\n *\n * It is also recommended that you add the \"no-customize-support\" class\n * to the body tag by default.\n *\n * @since 3.4.0\n *\/","file":"theme.php","line":1703,"missingDoc":false,"filters":[],"uses":{"parse_url":[1704,1705],"admin_url":[1704],"home_url":[1705],"strtolower":[1706,1706]},"used_by":[]},"wp_version_check":{"doc":"\/**\n * Check WordPress version against the newest version.\n *\n * The WordPress version, PHP version, and Locale is sent. Checks against the\n * WordPress server at api.wordpress.org server. Will only check if WordPress\n * isn't installing.\n *\n * @package WordPress\n * @since 2.3.0\n * @uses $wp_version Used to check against the newest WordPress version.\n *\n * @return mixed Returns null if update is unsupported. Returns false if check is too soon.\n *\/","file":"update.php","line":22,"missingDoc":false,"filters":["'core_version_check_locale'"],"uses":{"defined":[23,81],"phpversion":[28],"get_site_transient":[30],"is_object":[31],"time":[39,46,118],"get_locale":[43],"set_site_transient":[47,120],"preg_replace":[50],"db_version":[50],"method_exists":[49],"get_user_count":[55],"get_blog_count":[56],"network_site_url":[57],"count_users":[60],"home_url":[64,82,85],"is_multisite":[54],"http_build_query":[78],"wp_remote_get":[89],"is_wp_error":[91],"wp_remote_retrieve_response_code":[91],"trim":[94],"wp_remote_retrieve_body":[94],"maybe_unserialize":[95],"is_array":[97],"array_intersect_key":[105,112],"array_map":[105],"array_fill_keys":[106,112],"esc_url":[108],"esc_html":[110]},"used_by":{"_maybe_update_core":[379]}},"count_users":{"doc":"\/**\n * Count number of users who have each of the user roles.\n *\n * Assumes there are neither duplicated nor orphaned capabilities meta_values.\n * Assumes role names are unique phrases. Same assumption made by WP_User_Query::prepare_query()\n * Using $strategy = 'time' this is CPU-intensive and should handle around 10^7 users.\n * Using $strategy = 'memory' this is memory-intensive and should handle around 10^5 users, but see WP Bug #12257.\n *\n * @since 3.0.0\n * @param string $strategy 'time' or 'memory'\n * @return array Includes a grand total and an array of counts indexed by role strings.\n *\/","file":"user.php","line":874,"missingDoc":false,"filters":[],"uses":{"get_current_blog_id":[878],"get_blog_prefix":[879],"get_names":[888],"like_escape":[893],"implode":[895],"get_row":[898],"get_col":[918],"maybe_unserialize":[921],"is_array":[922],"count":[933]},"used_by":{"wp_version_check":[60]}},"wp_update_plugins":{"doc":"\/**\n * Check plugin versions against the latest versions hosted on WordPress.org.\n *\n * The WordPress version, PHP version, and Locale is sent along with a list of\n * all plugins installed. Checks against the WordPress server at\n * api.wordpress.org. Will only check if WordPress isn't installing.\n *\n * @package WordPress\n * @since 2.3.0\n * @uses $wp_version Used to notify the WordPress version.\n *\n * @return mixed Returns null if update is unsupported. Returns false if check is too soon.\n *\/","file":"update.php","line":136,"missingDoc":false,"filters":[],"uses":{"defined":[139,200],"function_exists":[143],"get_plugins":[146],"get_option":[147],"get_site_transient":[148],"is_object":[149],"time":[153,168,194],"current_filter":[156],"strval":[175,175],"is_array":[179,212],"set_site_transient":[195,217],"compact":[197],"serialize":[201],"get_bloginfo":[202],"wp_remote_post":[205],"is_wp_error":[207],"wp_remote_retrieve_response_code":[207],"maybe_unserialize":[210],"wp_remote_retrieve_body":[210]},"used_by":{"_maybe_update_plugins":[395]}},"wp_update_themes":{"doc":"\/**\n * Check theme versions against the latest versions hosted on WordPress.org.\n *\n * A list of all themes installed in sent to WP. Checks against the\n * WordPress server at api.wordpress.org. Will only check if WordPress isn't\n * installing.\n *\n * @package WordPress\n * @since 2.7.0\n * @uses $wp_version Used to notify the WordPress version.\n *\n * @return mixed Returns null if update is unsupported. Returns false if check is too soon.\n *\/","file":"update.php","line":233,"missingDoc":false,"filters":[],"uses":{"defined":[236,305],"wp_get_themes":[239],"get_site_transient":[240],"is_object":[241],"get_option":[248],"get_stylesheet":[251,253,260],"get":[251,254,255,256,257,258],"get_template":[259],"current_filter":[265],"time":[277,301,316],"strval":[282,282],"is_array":[286,320],"set_site_transient":[302,323],"serialize":[306],"get_bloginfo":[307],"wp_remote_post":[310],"is_wp_error":[312],"wp_remote_retrieve_response_code":[312],"maybe_unserialize":[319],"wp_remote_retrieve_body":[319]},"used_by":{"_maybe_update_themes":[412]}},"_maybe_update_core":{"doc":"","file":"update.php","line":368,"missingDoc":true,"filters":[],"uses":{"get_site_transient":[371],"time":[374],"wp_version_check":[379]},"used_by":[]},"_maybe_update_plugins":{"doc":"\/**\n * Check the last time plugins were run before checking plugin versions.\n *\n * This might have been backported to WordPress 2.6.1 for performance reasons.\n * This is used for the wp-admin to check only so often instead of every page\n * load.\n *\n * @since 2.7.0\n * @access private\n *\/","file":"update.php","line":391,"missingDoc":false,"filters":[],"uses":{"get_site_transient":[392],"time":[393],"wp_update_plugins":[395]},"used_by":[]},"_maybe_update_themes":{"doc":"\/**\n * Check themes versions only after a duration of time.\n *\n * This is for performance reasons to make sure that on the theme version\n * checker is not run on every page load.\n *\n * @since 2.7.0\n * @access private\n *\/","file":"update.php","line":407,"missingDoc":false,"filters":[],"uses":{"get_site_transient":[408],"time":[409],"wp_update_themes":[412]},"used_by":[]},"wp_schedule_update_checks":{"doc":"\/**\n * Schedule core, theme, and plugin update checks.\n *\n * @since 3.1.0\n *\/","file":"update.php","line":420,"missingDoc":false,"filters":[],"uses":{"wp_schedule_event":[422,425,428],"time":[422,425,428],"wp_next_scheduled":[421,424,427],"defined":[421,424,427]},"used_by":[]},"wp_signon":{"doc":"\/**\n * Authenticate user with remember capability.\n *\n * The credentials is an array that has 'user_login', 'user_password', and\n * 'remember' indices. If the credentials is not given, then the log in form\n * will be assumed and used if set.\n *\n * The various authentication cookies will be set by this function and will be\n * set for a longer period depending on if the 'remember' credential is set to\n * true.\n *\n * @since 2.5.0\n *\n * @param array $credentials Optional. User info in order to sign on.\n * @param bool $secure_cookie Optional. Whether to use secure cookie.\n * @return object Either WP_Error on failure, or WP_User on success.\n *\/","file":"user.php","line":25,"missingDoc":false,"filters":["'wp_authenticate'","'secure_signon_cookie'","'wp_login'"],"uses":{"is_ssl":[44],"add_filter":[51],"wp_authenticate":[53],"get_error_codes":[56],"is_wp_error":[55],"wp_set_auth_cookie":[63]},"used_by":[]},"wp_authenticate_username_password":{"doc":"","file":"user.php","line":72,"missingDoc":true,"filters":["'wp_authenticate_user'"],"uses":{"is_a":[73],"add":[79,82],"__":[79,82,90,95,101,110],"get_user_by":[87],"sprintf":[90,110],"wp_lostpassword_url":[90,111],"get_blog_details":[99],"is_object":[100],"is_super_admin":[98],"is_multisite":[92],"is_wp_error":[106],"wp_check_password":[109]},"used_by":[]},"wp_authenticate_cookie":{"doc":"\/**\n * Authenticate the user using the WordPress auth cookie.\n *\/","file":"user.php","line":119,"missingDoc":false,"filters":[],"uses":{"is_a":[120],"wp_validate_auth_cookie":[123],"__":[135]},"used_by":[]},"count_many_users_posts":{"doc":"\/**\n * Number of posts written by a list of users.\n *\n * @since 3.0.0\n *\n * @param array $users Array of user IDs.\n * @param string $post_type Optional. Post type to check. Defaults to post.\n * @param bool $public_only Optional. Only return counts for public posts.  Defaults to false.\n * @return array Amount of posts each user has written.\n *\/","file":"user.php","line":172,"missingDoc":false,"filters":[],"uses":{"is_array":[176],"implode":[179],"array_map":[179],"get_posts_by_author_sql":[180],"get_results":[182]},"used_by":[]},"WP_User_Query::__construct":{"doc":"\/**\n * PHP5 constructor\n *\n * @since 3.1.0\n *\n * @param string|array $args The query variables\n * @return WP_User_Query\n *\/","file":"user.php","line":359,"missingDoc":false,"filters":[],"uses":{"wp_parse_args":[361],"prepare_query":[380],"query":[381]},"used_by":[]},"WP_User_Query::prepare_query":{"doc":"\/**\n * Prepare the query variables\n *\n * @since 3.1.0\n * @access private\n *\/","file":"user.php","line":391,"missingDoc":false,"filters":["'pre_user_query'"],"uses":{"array_unique":[397],"esc_sql":[401],"implode":[402,522,525],"is_array":[396],"in_array":[418,416],"get_posts_by_author_sql":[424],"strtoupper":[439],"prepare":[449,451],"trim":[454,467,495],"ltrim":[456],"rtrim":[457],"array_intersect":[471],"is_numeric":[475],"preg_match":[477],"wp_is_large_network":[477],"strpos":[473],"get_search_sql":[483],"absint":[486],"get_blog_prefix":[489,499],"is_multisite":[497],"parse_query_vars":[510],"get_sql":[513],"wp_parse_id_list":[522,525]},"used_by":[]},"WP_User_Query::query":{"doc":"\/**\n * Execute the query, with the current variables\n *\n * @since 3.1.0\n * @access private\n *\/","file":"user.php","line":538,"missingDoc":false,"filters":["'found_users_query'"],"uses":{"get_results":[544],"get_col":[546],"is_array":[543],"get_var":[550],"cache_users":[556]},"used_by":[]},"WP_User_Query::get":{"doc":"\/**\n * Retrieve query variable.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $query_var Query variable key.\n * @return mixed\n *\/","file":"user.php","line":579,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_User_Query::set":{"doc":"\/**\n * Set query variable.\n *\n * @since 3.5.0\n * @access public\n *\n * @param string $query_var Query variable key.\n * @param mixed $value Query variable value.\n *\/","file":"user.php","line":595,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_User_Query::get_search_sql":{"doc":"","file":"user.php","line":611,"missingDoc":true,"filters":[],"uses":{"esc_sql":[612],"like_escape":[621],"implode":[624]},"used_by":[]},"WP_User_Query::get_results":{"doc":"\/**\n * Return the list of users\n *\n * @since 3.1.0\n * @access public\n *\n * @return array\n *\/","file":"user.php","line":635,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_User_Query::get_total":{"doc":"\/**\n * Return the total number of users for the current query\n *\n * @since 3.1.0\n * @access public\n *\n * @return array\n *\/","file":"user.php","line":647,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"add_user_meta":{"doc":"\/**\n * Add meta data field to a user.\n *\n * Post meta data is called \"Custom Fields\" on the Administration Screens.\n *\n * @since 3.0.0\n * @uses add_metadata()\n * @link http:\/\/codex.wordpress.org\/Function_Reference\/add_user_meta\n *\n * @param int $user_id Post ID.\n * @param string $meta_key Metadata name.\n * @param mixed $meta_value Metadata value.\n * @param bool $unique Optional, default is false. Whether the same key should not be added.\n * @return bool False for failure. True for success.\n *\/","file":"user.php","line":799,"missingDoc":false,"filters":[],"uses":{"add_metadata":[800]},"used_by":[]},"wp_dropdown_users":{"doc":"\/**\n * Create dropdown HTML content of users.\n *\n * The content can either be displayed, which it is by default or retrieved by\n * setting the 'echo' argument. The 'include' and 'exclude' arguments do not\n * need to be used; all users will be displayed in that case. Only one can be\n * used, either 'include' or 'exclude', but not both.\n *\n * The available arguments are as follows:\n * <ol>\n * <li>show_option_all - Text to show all and whether HTML option exists.<\/li>\n * <li>show_option_none - Text for show none and whether HTML option exists.<\/li>\n * <li>hide_if_only_one_author - Don't create the dropdown if there is only one user.<\/li>\n * <li>orderby - SQL order by clause for what order the users appear. Default is 'display_name'.<\/li>\n * <li>order - Default is 'ASC'. Can also be 'DESC'.<\/li>\n * <li>include - User IDs to include.<\/li>\n * <li>exclude - User IDs to exclude.<\/li>\n * <li>multi - Default is 'false'. Whether to skip the ID attribute on the 'select' element. A 'true' value is overridden when id argument is set.<\/li>\n * <li>show - Default is 'display_name'. User table column to display. If the selected item is empty then the user_login will be displayed in parentheses<\/li>\n * <li>echo - Default is '1'. Whether to display or retrieve content.<\/li>\n * <li>selected - Which User ID is selected.<\/li>\n * <li>include_selected - Always include the selected user ID in the dropdown. Default is false.<\/li>\n * <li>name - Default is 'user'. Name attribute of select element.<\/li>\n * <li>id - Default is the value of the 'name' parameter. ID attribute of select element.<\/li>\n * <li>class - Class attribute of select element.<\/li>\n * <li>blog_id - ID of blog (Multisite only). Defaults to ID of current blog.<\/li>\n * <li>who - Which users to query. Currently only 'authors' is supported. Default is all users.<\/li>\n * <\/ol>\n *\n * @since 2.3.0\n * @uses $wpdb WordPress database object for queries\n *\n * @param string|array $args Optional. Override defaults.\n * @return string|null Null on display. String of HTML content on retrieve.\n *\/","file":"user.php","line":1019,"missingDoc":false,"filters":["'wp_dropdown_users'"],"uses":{"is_author":[1029],"get_query_var":[1029],"wp_parse_args":[1031],"extract":[1032],"wp_array_slice_assoc":[1034],"get_users":[1036],"esc_attr":[1040,1044],"selected":[1052,1059,1068],"esc_html":[1063,1070],"get_userdata":[1067],"count":[1039]},"used_by":[]},"validate_username":{"doc":"\/**\n * Checks whether an username is valid.\n *\n * @since 2.0.1\n * @uses apply_filters() Calls 'validate_username' hook on $valid check and $username as parameters\n *\n * @param string $username Username.\n * @return bool Whether username given is valid\n *\/","file":"user.php","line":1230,"missingDoc":false,"filters":["'validate_username'"],"uses":{"sanitize_user":[1231]},"used_by":[]},"wp_insert_user":{"doc":"\/**\n * Insert an user into the database.\n *\n * Can update a current user or insert a new user based on whether the user's ID\n * is present.\n *\n * Can be used to update the user's info (see below), set the user's role, and\n * set the user's preference on whether they want the rich editor on.\n *\n * Most of the $userdata array fields have filters associated with the values.\n * The exceptions are 'rich_editing', 'role', 'jabber', 'aim', 'yim',\n * 'user_registered', and 'ID'. The filters have the prefix 'pre_user_' followed\n * by the field name. An example using 'description' would have the filter\n * called, 'pre_user_description' that can be hooked into.\n *\n * The $userdata array can contain the following fields:\n * 'ID' - An integer that will be used for updating an existing user.\n * 'user_pass' - A string that contains the plain text password for the user.\n * 'user_login' - A string that contains the user's username for logging in.\n * 'user_nicename' - A string that contains a URL-friendly name for the user.\n *\t\tThe default is the user's username.\n * 'user_url' - A string containing the user's URL for the user's web site.\n * 'user_email' - A string containing the user's email address.\n * 'display_name' - A string that will be shown on the site. Defaults to user's\n *\t\tusername. It is likely that you will want to change this, for appearance.\n * 'nickname' - The user's nickname, defaults to the user's username.\n * 'first_name' - The user's first name.\n * 'last_name' - The user's last name.\n * 'description' - A string containing content about the user.\n * 'rich_editing' - A string for whether to enable the rich editor. False\n *\t\tif not empty.\n * 'user_registered' - The date the user registered. Format is 'Y-m-d H:i:s'.\n * 'role' - A string used to set the user's role.\n * 'jabber' - User's Jabber account.\n * 'aim' - User's AOL IM account.\n * 'yim' - User's Yahoo IM account.\n *\n * @since 2.0.0\n * @uses $wpdb WordPress database layer.\n * @uses apply_filters() Calls filters for most of the $userdata fields with the prefix 'pre_user'. See note above.\n * @uses do_action() Calls 'profile_update' hook when updating giving the user's ID\n * @uses do_action() Calls 'user_register' hook when creating a new user giving the user's ID\n *\n * @param mixed $userdata An array of user data or a user object of type stdClass or WP_User.\n * @return int|WP_Error The newly created user's ID or a WP_Error object if the user could not be created.\n *\/","file":"user.php","line":1282,"missingDoc":false,"filters":["'pre_user_login'","'pre_user_nicename'","'pre_user_url'","'pre_user_email'","'pre_user_nickname'","'pre_user_first_name'","'pre_user_last_name'","'pre_user_display_name'","'pre_user_description'","'profile_update'","'user_register'"],"uses":{"get_object_vars":[1286],"is_a":[1287,1285],"to_array":[1288],"extract":[1290],"wp_hash_password":[1300],"sanitize_user":[1303],"trim":[1307],"__":[1310,1313,1328],"username_exists":[1312],"sanitize_title":[1316],"defined":[1327],"email_exists":[1327],"sprintf":[1347],"_x":[1347],"preg_replace":[1369],"gmdate":[1375],"get_var":[1380,1386],"prepare":[1380,1386],"compact":[1392,1396,1399],"stripslashes_deep":[1393],"update":[1396],"insert":[1399],"update_user_meta":[1407],"_get_additional_user_keys":[1405],"set_role":[1411,1413],"get_option":[1413],"wp_cache_delete":[1415,1416]},"used_by":{"wp_update_user":[1478],"wp_create_user":[1512]}},"_get_additional_user_keys":{"doc":"\/**\n * Return a list of meta keys that wp_insert_user() is supposed to set.\n *\n * @since 3.3.0\n * @access private\n *\n * @param object $user WP_User instance.\n * @return array\n *\/","file":"user.php","line":1524,"missingDoc":false,"filters":[],"uses":{"array_merge":[1526],"array_keys":[1526],"_wp_get_user_contactmethods":[1526]},"used_by":{"wp_insert_user":[1405],"wp_update_user":[1461]}},"_wp_get_user_contactmethods":{"doc":"\/**\n * Set up the default contact methods.\n *\n * @since 2.9.0\n * @access private\n *\n * @param object $user User data object (optional).\n * @return array $user_contactmethods Array of contact methods and their labels.\n *\/","file":"user.php","line":1538,"missingDoc":false,"filters":["'user_contactmethods'"],"uses":{"__":[1540,1541,1542]},"used_by":{"_get_additional_user_keys":[1526]}},"WP_Widget::widget":{"doc":"\/** Echo the widget content.\n *\n * Subclasses should over-ride this function to generate their widget code.\n *\n * @param array $args Display arguments including before_title, after_title, before_widget, and after_widget.\n * @param array $instance The settings for the particular instance of the widget\n *\/","file":"widgets.php","line":44,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Widget::update":{"doc":"\/** Update a particular instance.\n *\n * This function should check that $new_instance is set correctly.\n * The newly calculated value of $instance should be returned.\n * If \"false\" is returned, the instance won't be saved\/updated.\n *\n * @param array $new_instance New settings for this instance as input by the user via form()\n * @param array $old_instance Old settings for this instance\n * @return array Settings to save or bool false to cancel saving\n *\/","file":"widgets.php","line":58,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Widget::form":{"doc":"\/** Echo the settings update form\n *\n * @param array $instance Current settings\n *\/","file":"widgets.php","line":66,"missingDoc":false,"filters":[],"uses":{"__":[67]},"used_by":[]},"WP_Widget::WP_Widget":{"doc":"\/**\n * PHP4 constructor\n *\/","file":"widgets.php","line":76,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Widget::__construct":{"doc":"\/**\n * PHP5 constructor\n *\n * @param string $id_base Optional Base ID for the widget, lower case,\n * if left empty a portion of the widget's class name will be used. Has to be unique.\n * @param string $name Name for the widget displayed on the configuration page.\n * @param array $widget_options Optional Passed to wp_register_sidebar_widget()\n *\t - description: shown on the configuration page\n *\t - classname\n * @param array $control_options Optional Passed to wp_register_widget_control()\n *\t - width: required if more than 250px\n *\t - height: currently not used but may be needed in the future\n *\/","file":"widgets.php","line":93,"missingDoc":false,"filters":[],"uses":{"preg_replace":[94],"strtolower":[94,94],"get_class":[94],"wp_parse_args":[97,98]},"used_by":[]},"WP_Widget::get_field_name":{"doc":"\/**\n * Constructs name attributes for use in form() fields\n *\n * This function should be used in form() methods to create name attributes for fields to be saved by update()\n *\n * @param string $field_name Field name\n * @return string Name attribute for $field_name\n *\/","file":"widgets.php","line":109,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Widget::get_field_id":{"doc":"\/**\n * Constructs id attributes for use in form() fields\n *\n * This function should be used in form() methods to create id attributes for fields to be saved by update()\n *\n * @param string $field_name Field name\n * @return string ID attribute for $field_name\n *\/","file":"widgets.php","line":121,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Widget::_register":{"doc":"","file":"widgets.php","line":127,"missingDoc":true,"filters":[],"uses":{"get_settings":[128],"_set":[134,144],"_register_one":[135,145],"is_numeric":[133],"array_keys":[132],"is_array":[131]},"used_by":[]},"WP_Widget::_set":{"doc":"","file":"widgets.php","line":149,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Widget::_get_display_callback":{"doc":"","file":"widgets.php","line":154,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Widget::_get_update_callback":{"doc":"","file":"widgets.php","line":158,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Widget::_get_form_callback":{"doc":"","file":"widgets.php","line":162,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Widget::display_callback":{"doc":"\/** Generate the actual widget content.\n *\tJust finds the instance and calls widget().\n *\tDo NOT over-ride this function. *\/","file":"widgets.php","line":169,"missingDoc":false,"filters":["'widget_display_callback'"],"uses":{"is_numeric":[170],"wp_parse_args":[173],"_set":[174],"get_settings":[175],"widget":[182],"array_key_exists":[177]},"used_by":[]},"WP_Widget::update_callback":{"doc":"\/** Deal with changed settings.\n *\tDo NOT over-ride this function. *\/","file":"widgets.php","line":188,"missingDoc":false,"filters":["'widget_update_callback'"],"uses":{"is_numeric":[191],"wp_parse_args":[194],"get_settings":[195],"wp_get_sidebars_widgets":[201],"is_array":[217],"stripslashes_deep":[227],"_set":[228],"update":[232],"save_settings":[243]},"used_by":[]},"wp_get_sidebars_widgets":{"doc":"\/**\n * Retrieve full list of sidebars and their widgets.\n *\n * Will upgrade sidebar widget list, if needed. Will also save updated list, if\n * needed.\n *\n * @since 2.2.0\n * @access private\n *\n * @param bool $deprecated Not used (deprecated).\n * @return array Upgraded list of widgets to version 3 array format when called from the admin.\n *\/","file":"widgets.php","line":1007,"missingDoc":false,"filters":["'sidebars_widgets'"],"uses":{"_deprecated_argument":[1009],"get_option":[1017,1021],"is_admin":[1015],"is_array":[1024]},"used_by":{"WP_Widget::update_callback":[201],"dynamic_sidebar":[867],"is_active_widget":[936],"is_active_sidebar":[986],"_wp_sidebars_changed":[1168]}},"WP_Widget::form_callback":{"doc":"\/** Generate the control form.\n *\tDo NOT over-ride this function. *\/","file":"widgets.php","line":249,"missingDoc":false,"filters":["'widget_form_callback'","'in_widget_form'"],"uses":{"is_numeric":[250],"wp_parse_args":[253],"get_settings":[254],"_set":[258,261],"form":[270]},"used_by":[]},"WP_Widget::_register_one":{"doc":"\/** Helper function: Registers a single instance. *\/","file":"widgets.php","line":279,"missingDoc":false,"filters":[],"uses":{"wp_register_sidebar_widget":[280],"_get_display_callback":[280],"_register_widget_update_callback":[281],"_get_update_callback":[281],"_register_widget_form_callback":[282],"_get_form_callback":[282]},"used_by":[]},"wp_register_sidebar_widget":{"doc":"\/**\n * Register widget for use in sidebars.\n *\n * The default widget option is 'classname' that can be override.\n *\n * The function can also be used to unregister widgets when $output_callback\n * parameter is an empty string.\n *\n * @since 2.2.0\n *\n * @uses $wp_registered_widgets Uses stored registered widgets.\n * @uses $wp_register_widget_defaults Retrieves widget defaults.\n *\n * @param int|string $id Widget ID.\n * @param string $name Widget display title.\n * @param callback $output_callback Run when widget is called.\n * @param array|string $options Optional. Widget Options.\n * @param mixed $params,... Widget parameters to add to widget.\n * @return null Will return if $output_callback is empty after removing widget.\n *\/","file":"widgets.php","line":615,"missingDoc":false,"filters":["'wp_register_sidebar_widget'"],"uses":{"strtolower":[618],"_get_widget_id_base":[625],"in_array":[626],"is_callable":[626,646],"wp_parse_args":[637],"array_slice":[642],"func_get_args":[642],"array_merge":[644],"did_action":[646]},"used_by":{"WP_Widget::_register_one":[280],"wp_unregister_sidebar_widget":[705]}},"_register_widget_update_callback":{"doc":"","file":"widgets.php","line":774,"missingDoc":true,"filters":[],"uses":{"array_slice":[785],"func_get_args":[785],"array_merge":[788]},"used_by":{"WP_Widget::_register_one":[281]}},"_register_widget_form_callback":{"doc":"","file":"widgets.php","line":792,"missingDoc":true,"filters":[],"uses":{"strtolower":[795],"did_action":[802],"wp_parse_args":[806],"array_slice":[814],"func_get_args":[814],"array_merge":[816]},"used_by":{"WP_Widget::_register_one":[282]}},"WP_Widget::save_settings":{"doc":"","file":"widgets.php","line":285,"missingDoc":true,"filters":[],"uses":{"update_option":[287]},"used_by":[]},"WP_Widget::get_settings":{"doc":"","file":"widgets.php","line":290,"missingDoc":true,"filters":[],"uses":{"get_option":[291,294],"is_array":[296],"wp_convert_widget_settings":[301],"array_key_exists":[299]},"used_by":[]},"wp_convert_widget_settings":{"doc":"\/**\n * Convert the widget settings from single to multi-widget format.\n *\n * @since 2.8.0\n *\n * @return array\n *\/","file":"widgets.php","line":1071,"missingDoc":false,"filters":[],"uses":{"is_numeric":[1080],"array_keys":[1077],"get_option":[1092,1095],"is_admin":[1091,1111,1116],"is_array":[1100],"update_option":[1112,1117]},"used_by":{"WP_Widget::get_settings":[301]}},"WP_Widget_Factory::WP_Widget_Factory":{"doc":"","file":"widgets.php","line":319,"missingDoc":true,"filters":[],"uses":{"add_action":[320]},"used_by":[]},"WP_Widget_Factory::register":{"doc":"","file":"widgets.php","line":323,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Widget_Factory::unregister":{"doc":"","file":"widgets.php","line":327,"missingDoc":true,"filters":[],"uses":[],"used_by":[]},"WP_Widget_Factory::_register_widgets":{"doc":"","file":"widgets.php","line":332,"missingDoc":true,"filters":[],"uses":{"array_keys":[334,335],"array_map":[336],"in_array":[340],"_register":[345]},"used_by":[]},"unregister_widget":{"doc":"\/**\n * Unregister a widget\n *\n * Unregisters a WP_Widget widget. Useful for unregistering default widgets.\n * Run within a function hooked to the widgets_init action.\n *\n * @since 2.8.0\n *\n * @see WP_Widget\n * @see WP_Widget_Factory\n * @uses WP_Widget_Factory\n *\n * @param string $widget_class The name of a class that extends WP_Widget\n *\/","file":"widgets.php","line":448,"missingDoc":false,"filters":[],"uses":{"unregister":[451]},"used_by":[]},"register_sidebars":{"doc":"\/**\n * Creates multiple sidebars.\n *\n * If you wanted to quickly create multiple sidebars for a theme or internally.\n * This function will allow you to do so. If you don't pass the 'name' and\/or\n * 'id' in $args, then they will be built for you.\n *\n * The default for the name is \"Sidebar #\", with '#' being replaced with the\n * number the sidebar is currently when greater than one. If first sidebar, the\n * name will be just \"Sidebar\". The default for id is \"sidebar-\" followed by the\n * number the sidebar creation is currently at. If the id is provided, and multiple\n * sidebars are being defined, the id will have \"-2\" appended, and so on.\n *\n * @since 2.2.0\n *\n * @see register_sidebar() The second parameter is documented by register_sidebar() and is the same here.\n * @uses parse_str() Converts a string to an array to be used in the rest of the function.\n * @uses register_sidebar() Sends single sidebar information [name, id] to this\n *\tfunction to handle building the sidebar.\n *\n * @param int $number Number of sidebars to create.\n * @param string|array $args Builds Sidebar based off of 'name' and 'id' values.\n *\/","file":"widgets.php","line":477,"missingDoc":false,"filters":[],"uses":{"parse_str":[482],"is_string":[481],"sprintf":[488,488],"__":[488,490],"count":[500],"register_sidebar":[505]},"used_by":[]},"register_sidebar":{"doc":"\/**\n * Builds the definition for a single sidebar and returns the ID.\n *\n * Accepts either a string or an array and then parses that against a set\n * of default arguments for the new sidebar. WordPress will automatically\n * generate a sidebar ID and name based on the current number of registered\n * sidebars if those arguments are not included.\n *\n * When allowing for automatic generation of the name and ID parameters, keep\n * in mind that the incrementor for your sidebar can change over time depending\n * on what other plugins and themes are installed.\n *\n * If theme support for 'widgets' has not yet been added when this function is\n * called, it will be automatically enabled through the use of add_theme_support()\n *\n * Arguments passed as a string should be separated by '&':\n *\n *     e.g. 'name=Sidebar&id=my_prefix_sidebar'\n *\n * The same arguments passed as an array:\n *\n *     array(\n *         'name' => 'Sidebar',\n *         'id'   => 'my_prefix_sidebar',\n *     )\n *\n * Arguments:\n *     name          - The name or title of the sidebar displayed in the admin dashboard.\n *     id            - The unique identifier by which the sidebar will be called.\n *     before_widget - HTML content that will be prepended to each widget's HTML output\n *                     when assigned to this sidebar.\n *     after_widget  - HTML content that will be appended to each widget's HTML output\n *                     when assigned to this sidebar.\n *     before_title  - HTML content that will be prepended to the sidebar title when displayed.\n *     after_title   - HTML content that will be appended to the sidebar title when displayed.\n *\n * @since 2.2.0\n * @uses $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID.\n * @uses add_theme_support() to ensure widget support has been added.\n *\n * @param string|array $args Arguments for the sidebar being registered.\n * @return string Sidebar ID added to $wp_registered_sidebars global.\n *\/","file":"widgets.php","line":552,"missingDoc":false,"filters":["'register_sidebar'"],"uses":{"count":[555],"sprintf":[558],"__":[558],"wp_parse_args":[568],"add_theme_support":[572]},"used_by":{"register_sidebars":[505]}},"unregister_sidebar":{"doc":"\/**\n * Removes a sidebar from the list.\n *\n * @since 2.2.0\n *\n * @uses $wp_registered_sidebars Stores the new sidebar in this array by sidebar ID.\n *\n * @param string $name The ID of the sidebar when it was added.\n *\/","file":"widgets.php","line":588,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"_get_widget_id_base":{"doc":"\/**\n * Private\n *\/","file":"widgets.php","line":1154,"missingDoc":false,"filters":[],"uses":{"preg_replace":[1155]},"used_by":{"wp_register_sidebar_widget":[625],"wp_register_widget_control":[731],"is_active_widget":[945]}},"wp_widget_description":{"doc":"\/**\n * Retrieve description for widget.\n *\n * When registering widgets, the options can also include 'description' that\n * describes the widget for display on the widget administration panel or\n * in the theme.\n *\n * @since 2.5.0\n *\n * @param int|string $id Widget ID.\n * @return string Widget description, if available. Null on failure to retrieve description.\n *\/","file":"widgets.php","line":664,"missingDoc":false,"filters":[],"uses":{"is_scalar":[665],"esc_html":[671]},"used_by":[]},"wp_sidebar_description":{"doc":"\/**\n * Retrieve description for a sidebar.\n *\n * When registering sidebars a 'description' parameter can be included that\n * describes the sidebar for display on the widget administration panel.\n *\n * @since 2.9.0\n *\n * @param int|string $id sidebar ID.\n * @return string Sidebar description, if available. Null on failure to retrieve description.\n *\/","file":"widgets.php","line":685,"missingDoc":false,"filters":[],"uses":{"is_scalar":[686],"esc_html":[692]},"used_by":[]},"wp_register_widget_control":{"doc":"\/**\n * Registers widget control callback for customizing options.\n *\n * The options contains the 'height', 'width', and 'id_base' keys. The 'height'\n * option is never used. The 'width' option is the width of the fully expanded\n * control form, but try hard to use the default width. The 'id_base' is for\n * multi-widgets (widgets which allow multiple instances such as the text\n * widget), an id_base must be provided. The widget id will end up looking like\n * {$id_base}-{$unique_number}.\n *\n * @since 2.2.0\n *\n * @param int|string $id Sidebar ID.\n * @param string $name Sidebar display name.\n * @param callback $control_callback Run when sidebar is displayed.\n * @param array|string $options Optional. Widget options. See above long description.\n * @param mixed $params,... Optional. Additional parameters to add to widget.\n *\/","file":"widgets.php","line":727,"missingDoc":false,"filters":[],"uses":{"strtolower":[730],"_get_widget_id_base":[731],"in_array":[739],"is_callable":[739],"did_action":[746],"wp_parse_args":[750],"array_slice":[758],"func_get_args":[758],"array_merge":[760]},"used_by":{"wp_unregister_widget_control":[830]}},"is_dynamic_sidebar":{"doc":"\/**\n * Whether the dynamic sidebar is enabled and used by theme.\n *\n * @since 2.2.0\n *\n * @return bool True, if using widgets. False, if not using widgets.\n *\/","file":"widgets.php","line":963,"missingDoc":false,"filters":[],"uses":{"get_option":[965],"array_key_exists":[969],"count":[967]},"used_by":[]},"is_active_sidebar":{"doc":"\/**\n * Whether a sidebar is in use.\n *\n * @since 2.8\n *\n * @param mixed $index Sidebar name, id or number to check.\n * @return bool true if the sidebar is in use, false otherwise.\n *\/","file":"widgets.php","line":984,"missingDoc":false,"filters":[],"uses":{"is_int":[985],"sanitize_title":[985],"wp_get_sidebars_widgets":[986]},"used_by":[]},"wp_set_sidebars_widgets":{"doc":"\/**\n * Set the sidebar widget option to update sidebars.\n *\n * @since 2.2.0\n * @access private\n *\n * @param array $sidebars_widgets Sidebar widgets and their settings.\n *\/","file":"widgets.php","line":1039,"missingDoc":false,"filters":[],"uses":{"update_option":[1042]},"used_by":{"retrieve_widgets":[1267]}},"wp_get_widget_defaults":{"doc":"\/**\n * Retrieve default registered sidebars list.\n *\n * @since 2.2.0\n * @access private\n *\n * @return array\n *\/","file":"widgets.php","line":1053,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"the_widget":{"doc":"\/**\n * Output an arbitrary widget as a template tag\n *\n * @since 2.8\n *\n * @param string $widget the widget's PHP class name (see default-widgets.php)\n * @param array $instance the widget's instance settings\n * @param array $args the widget's sidebar args\n * @return void\n **\/","file":"widgets.php","line":1132,"missingDoc":false,"filters":["'the_widget'"],"uses":{"is_a":[1136],"sprintf":[1139],"wp_parse_args":[1142,1143],"_set":[1147],"widget":[1148]},"used_by":[]},"_wp_sidebars_changed":{"doc":"\/**\n * Handle sidebars config after theme change\n *\n * @access private\n * @since 3.3.0\n *\/","file":"widgets.php","line":1164,"missingDoc":false,"filters":[],"uses":{"wp_get_sidebars_widgets":[1168],"is_array":[1167],"retrieve_widgets":[1170]},"used_by":[]},"retrieve_widgets":{"doc":"","file":"widgets.php","line":1174,"missingDoc":true,"filters":[],"uses":{"array_keys":[1177,1201],"get_theme_mod":[1180],"remove_theme_mod":[1184],"substr":[1187],"in_array":[1190,1255],"sort":[1202,1203],"array_shift":[1216],"is_array":[1227,1181,1236],"array_merge":[1246,1266],"preg_replace":[1258],"wp_set_sidebars_widgets":[1267]},"used_by":{"_wp_sidebars_changed":[1170]}},"wpdb::__construct":{"doc":"\/**\n * Connects to the database server and selects a database\n *\n * PHP5 style constructor for compatibility with PHP5. Does\n * the actual setting up of the class properties and connection\n * to the database.\n *\n * @link http:\/\/core.trac.wordpress.org\/ticket\/3354\n * @since 2.0.8\n *\n * @param string $dbuser MySQL database user\n * @param string $dbpassword MySQL database password\n * @param string $dbname MySQL database name\n * @param string $dbhost MySQL database host\n *\/","file":"wp-db.php","line":536,"missingDoc":false,"filters":[],"uses":{"register_shutdown_function":[537],"show_errors":[540],"init_charset":[542],"db_connect":[549]},"used_by":[]},"wpdb::__destruct":{"doc":"\/**\n * PHP5 style destructor and will run when database object is destroyed.\n *\n * @see wpdb::__construct()\n * @since 2.0.8\n * @return bool true\n *\/","file":"wp-db.php","line":559,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wpdb::__get":{"doc":"\/**\n * PHP5 style magic getter, used to lazy-load expensive data.\n *\n * @since 3.5.0\n *\n * @param string $name The private member to get, and optionally process\n * @return mixed The private member\n *\/","file":"wp-db.php","line":571,"missingDoc":false,"filters":[],"uses":{"load_col_info":[573]},"used_by":[]},"wpdb::__set":{"doc":"\/**\n * Magic function, for backwards compatibility\n *\n * @since 3.5.0\n *\n * @param string $name  The private member to set\n * @param mixed  $value The value to set\n *\/","file":"wp-db.php","line":586,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wpdb::__isset":{"doc":"\/**\n * Magic function, for backwards compatibility\n *\n * @since 3.5.0\n *\n * @param string $name  The private member to check\n *\n * @return bool If the member is set or not\n *\/","file":"wp-db.php","line":599,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wpdb::__unset":{"doc":"\/**\n * Magic function, for backwards compatibility\n *\n * @since 3.5.0\n *\n * @param string $name  The private member to unset\n *\/","file":"wp-db.php","line":610,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wpdb::init_charset":{"doc":"\/**\n * Set $this->charset and $this->collate\n *\n * @since 3.1.0\n *\/","file":"wp-db.php","line":619,"missingDoc":false,"filters":[],"uses":{"defined":[622,626,630],"function_exists":[620],"is_multisite":[620]},"used_by":[]},"wpdb::set_charset":{"doc":"\/**\n * Sets the connection's character set.\n *\n * @since 3.1.0\n *\n * @param resource $dbh     The resource given by mysql_connect\n * @param string   $charset The character set (optional)\n * @param string   $collate The collation (optional)\n *\/","file":"wp-db.php","line":643,"missingDoc":false,"filters":[],"uses":{"mysql_set_charset":[650],"prepare":[653,655],"mysql_query":[656],"function_exists":[649],"has_cap":[649,648]},"used_by":[]},"wpdb::set_prefix":{"doc":"\/**\n * Sets the table prefix for the WordPress tables.\n *\n * @since 2.5.0\n *\n * @param string $prefix Alphanumeric name for the new prefix.\n * @param bool $set_table_names Optional. Whether the table names, e.g. wpdb::$posts, should be updated or not.\n * @return string|WP_Error Old prefix or WP_Error on error\n *\/","file":"wp-db.php","line":670,"missingDoc":false,"filters":[],"uses":{"preg_match":[672],"is_multisite":[675,686],"tables":[683,691,694],"get_blog_prefix":[689]},"used_by":[]},"wpdb::set_blog_id":{"doc":"\/**\n * Sets blog id.\n *\n * @since 3.0.0\n * @access public\n * @param int $blog_id\n * @param int $site_id Optional.\n * @return string previous blog id\n *\/","file":"wp-db.php","line":709,"missingDoc":false,"filters":[],"uses":{"get_blog_prefix":[716],"tables":[718,721]},"used_by":[]},"wpdb::get_blog_prefix":{"doc":"\/**\n * Gets blog prefix.\n *\n * @uses is_multisite()\n * @since 3.0.0\n * @param int $blog_id Optional.\n * @return string Blog prefix.\n *\/","file":"wp-db.php","line":735,"missingDoc":false,"filters":[],"uses":{"defined":[740],"is_multisite":[736]},"used_by":[]},"wpdb::tables":{"doc":"\/**\n * Returns an array of WordPress tables.\n *\n * Also allows for the CUSTOM_USER_TABLE and CUSTOM_USER_META_TABLE to\n * override the WordPress users and usermeta tables that would otherwise\n * be determined by the prefix.\n *\n * The scope argument can take one of the following:\n *\n * 'all' - returns 'all' and 'global' tables. No old tables are returned.\n * 'blog' - returns the blog-level tables for the queried blog.\n * 'global' - returns the global tables for the installation, returning multisite tables only if running multisite.\n * 'ms_global' - returns the multisite global tables, regardless if current installation is multisite.\n * 'old' - returns tables which are deprecated.\n *\n * @since 3.0.0\n * @uses wpdb::$tables\n * @uses wpdb::$old_tables\n * @uses wpdb::$global_tables\n * @uses wpdb::$ms_global_tables\n * @uses is_multisite()\n *\n * @param string $scope Optional. Can be all, global, ms_global, blog, or old tables. Defaults to all.\n * @param bool $prefix Optional. Whether to include table prefixes. Default true. If blog\n * \tprefix is requested, then the custom users and usermeta tables will be mapped.\n * @param int $blog_id Optional. The blog_id to prefix. Defaults to wpdb::$blogid. Used only when prefix is requested.\n * @return array Table names. When a prefix is requested, the key is the unprefixed table name.\n *\/","file":"wp-db.php","line":777,"missingDoc":false,"filters":[],"uses":{"array_merge":[780,782,790,808],"is_multisite":[781,789],"get_blog_prefix":[806],"in_array":[810],"defined":[817,820]},"used_by":[]},"wpdb::select":{"doc":"\/**\n * Selects a database using the current database connection.\n *\n * The database name will be changed based on the current database\n * connection. On failure, the execution will bail and display an DB error.\n *\n * @since 0.71\n *\n * @param string $db MySQL database name\n * @param resource $dbh Optional link identifier.\n * @return null Always null.\n *\/","file":"wp-db.php","line":839,"missingDoc":false,"filters":[],"uses":{"is_null":[840],"wp_load_translations_early":[845],"bail":[846],"sprintf":[846],"__":[846],"htmlspecialchars":[853,853],"mysql_select_db":[843]},"used_by":[]},"wpdb::_weak_escape":{"doc":"\/**\n * Weak escape, using addslashes()\n *\n * @see addslashes()\n * @since 2.8.0\n * @access private\n *\n * @param string $string\n * @return string\n *\/","file":"wp-db.php","line":868,"missingDoc":false,"filters":[],"uses":{"addslashes":[869]},"used_by":[]},"wpdb::_real_escape":{"doc":"\/**\n * Real escape, using mysql_real_escape_string() or addslashes()\n *\n * @see mysql_real_escape_string()\n * @see addslashes()\n * @since 2.8.0\n * @access private\n *\n * @param  string $string to escape\n * @return string escaped\n *\/","file":"wp-db.php","line":883,"missingDoc":false,"filters":[],"uses":{"mysql_real_escape_string":[885],"addslashes":[887]},"used_by":[]},"wpdb::_escape":{"doc":"\/**\n * Escape data. Works on arrays.\n *\n * @uses wpdb::_escape()\n * @uses wpdb::_real_escape()\n * @since  2.8.0\n * @access private\n *\n * @param  string|array $data\n * @return string|array escaped\n *\/","file":"wp-db.php","line":901,"missingDoc":false,"filters":[],"uses":{"_escape":[905],"_real_escape":[907,910],"is_array":[904,902]},"used_by":[]},"wpdb::escape":{"doc":"\/**\n * Escapes content for insertion into the database using addslashes(), for security.\n *\n * Works on arrays.\n *\n * @since 0.71\n * @param string|array $data to escape\n * @return string|array escaped as query safe string\n *\/","file":"wp-db.php","line":925,"missingDoc":false,"filters":[],"uses":{"escape":[929],"_weak_escape":[931,934],"is_array":[928,926]},"used_by":[]},"wpdb::escape_by_ref":{"doc":"\/**\n * Escapes content by reference for insertion into the database, for security\n *\n * @uses wpdb::_real_escape()\n * @since 2.3.0\n * @param string $string to escape\n * @return void\n *\/","file":"wp-db.php","line":948,"missingDoc":false,"filters":[],"uses":{"_real_escape":[950],"is_float":[949]},"used_by":[]},"wpdb::prepare":{"doc":"\/**\n * Prepares a SQL query for safe execution. Uses sprintf()-like syntax.\n *\n * The following directives can be used in the query format string:\n *   %d (integer)\n *   %f (float)\n *   %s (string)\n *   %% (literal percentage sign - no argument needed)\n *\n * All of %d, %f, and %s are to be left unquoted in the query string and they need an argument passed for them.\n * Literals (%) as parts of the query must be properly written as %%.\n *\n * This function only supports a small subset of the sprintf syntax; it only supports %d (integer), %f (float), and %s (string).\n * Does not support sign, padding, alignment, width or precision specifiers.\n * Does not support argument numbering\/swapping.\n *\n * May be called like {@link http:\/\/php.net\/sprintf sprintf()} or like {@link http:\/\/php.net\/vsprintf vsprintf()}.\n *\n * Both %d and %s should be left unquoted in the query string.\n *\n * <code>\n * wpdb::prepare( \"SELECT * FROM `table` WHERE `column` = %s AND `field` = %d\", 'foo', 1337 )\n * wpdb::prepare( \"SELECT DATE_FORMAT(`field`, '%%c') FROM `table` WHERE `column` = %s\", 'foo' );\n * <\/code>\n *\n * @link http:\/\/php.net\/sprintf Description of syntax.\n * @since 2.3.0\n *\n * @param string $query Query statement with sprintf()-like placeholders\n * @param array|mixed $args The array of variables to substitute into the query's placeholders if being called like\n * \t{@link http:\/\/php.net\/vsprintf vsprintf()}, or the first variable to substitute into the query's placeholders if\n * \tbeing called like {@link http:\/\/php.net\/sprintf sprintf()}.\n * @param mixed $args,... further variables to substitute into the query's placeholders if being called like\n * \t{@link http:\/\/php.net\/sprintf sprintf()}.\n * @return null|false|string Sanitized query string, null if there is no query, false if there is an error and string\n * \tif there was something to prepare\n *\/","file":"wp-db.php","line":990,"missingDoc":false,"filters":[],"uses":{"is_null":[991],"func_get_args":[994],"array_shift":[995],"is_array":[997],"str_replace":[999,1000],"preg_replace":[1001,1002],"array_walk":[1003],"vsprintf":[1004]},"used_by":[]},"wpdb::print_error":{"doc":"\/**\n * Print SQL\/DB error.\n *\n * @since 0.71\n * @global array $EZSQL_ERROR Stores error information of query and error string\n *\n * @param string $str The error to display\n * @return bool False if the showing of errors is disabled.\n *\/","file":"wp-db.php","line":1016,"missingDoc":false,"filters":[],"uses":{"mysql_error":[1020],"wp_load_translations_early":[1026],"sprintf":[1029,1031],"__":[1029,1031],"get_caller":[1028],"error_log":[1033,1043],"defined":[1042,1044],"wp_die":[1045],"htmlspecialchars":[1047,1048],"is_multisite":[1040]},"used_by":[]},"wpdb::show_errors":{"doc":"\/**\n * Enables showing of database errors.\n *\n * This function should be used only to enable showing of errors.\n * wpdb::hide_errors() should be used instead for hiding of errors. However,\n * this function can be used to enable and disable showing of database\n * errors.\n *\n * @since 0.71\n * @see wpdb::hide_errors()\n *\n * @param bool $show Whether to show or hide errors\n * @return bool Old value for showing errors.\n *\/","file":"wp-db.php","line":1071,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wpdb::hide_errors":{"doc":"\/**\n * Disables showing of database errors.\n *\n * By default database errors are not shown.\n *\n * @since 0.71\n * @see wpdb::show_errors()\n *\n * @return bool Whether showing of errors was active\n *\/","file":"wp-db.php","line":1087,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wpdb::suppress_errors":{"doc":"\/**\n * Whether to suppress database errors.\n *\n * By default database errors are suppressed, with a simple\n * call to this function they can be enabled.\n *\n * @since 2.5.0\n * @see wpdb::hide_errors()\n * @param bool $suppress Optional. New value. Defaults to true.\n * @return bool Old value\n *\/","file":"wp-db.php","line":1104,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wpdb::flush":{"doc":"\/**\n * Kill cached query results.\n *\n * @since 0.71\n * @return void\n *\/","file":"wp-db.php","line":1116,"missingDoc":false,"filters":[],"uses":{"mysql_free_result":[1122],"is_resource":[1121]},"used_by":[]},"wpdb::db_connect":{"doc":"\/**\n * Connect to and select database\n *\n * @since 3.0.0\n *\/","file":"wp-db.php","line":1130,"missingDoc":false,"filters":[],"uses":{"defined":[1134,1135],"mysql_connect":[1138,1140],"wp_load_translations_early":[1144],"bail":[1145],"sprintf":[1145],"__":[1145],"htmlspecialchars":[1154],"set_charset":[1159],"select":[1163]},"used_by":[]},"wpdb::query":{"doc":"\/**\n * Perform a MySQL database query, using current database connection.\n *\n * More information can be found on the codex page.\n *\n * @since 0.71\n *\n * @param string $query Database query\n * @return int|false Number of rows affected\/selected or false on error\n *\/","file":"wp-db.php","line":1176,"missingDoc":false,"filters":["'query'"],"uses":{"flush":[1184],"timer_start":[1193],"defined":[1192,1198],"mysql_query":[1195],"timer_stop":[1199],"get_caller":[1199],"print_error":[1203],"mysql_error":[1202],"preg_match":[1209,1212,1207],"mysql_affected_rows":[1210],"mysql_insert_id":[1213],"mysql_fetch_object":[1219]},"used_by":[]},"wpdb::insert":{"doc":"\/**\n * Insert a row into a table.\n *\n * <code>\n * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )\n * wpdb::insert( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )\n * <\/code>\n *\n * @since 2.5.0\n * @see wpdb::prepare()\n * @see wpdb::$field_types\n * @see wp_set_wpdb_vars()\n *\n * @param string $table table name\n * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.\n * \tA format is one of '%d', '%f', '%s' (integer, float, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n * @return int|false The number of rows inserted, or false on error.\n *\/","file":"wp-db.php","line":1252,"missingDoc":false,"filters":[],"uses":{"_insert_replace_helper":[1253]},"used_by":[]},"wpdb::replace":{"doc":"\/**\n * Replace a row into a table.\n *\n * <code>\n * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 'bar' ) )\n * wpdb::replace( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( '%s', '%d' ) )\n * <\/code>\n *\n * @since 3.0.0\n * @see wpdb::prepare()\n * @see wpdb::$field_types\n * @see wp_set_wpdb_vars()\n *\n * @param string $table table name\n * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.\n * \tA format is one of '%d', '%f', '%s' (integer, float, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n * @return int|false The number of rows affected, or false on error.\n *\/","file":"wp-db.php","line":1275,"missingDoc":false,"filters":[],"uses":{"_insert_replace_helper":[1276]},"used_by":[]},"wpdb::_insert_replace_helper":{"doc":"\/**\n * Helper function for insert and replace.\n *\n * Runs an insert or replace query based on $type argument.\n *\n * @access private\n * @since 3.0.0\n * @see wpdb::prepare()\n * @see wpdb::$field_types\n * @see wp_set_wpdb_vars()\n *\n * @param string $table table name\n * @param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n * @param array|string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data.\n * \tA format is one of '%d', '%f', '%s' (integer, float, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n * @param string $type Optional. What type of operation is this? INSERT or REPLACE. Defaults to INSERT.\n * @return int|false The number of rows affected, or false on error.\n *\/","file":"wp-db.php","line":1297,"missingDoc":false,"filters":[],"uses":{"in_array":[1298],"strtoupper":[1298],"array_keys":[1301],"array_shift":[1305],"implode":[1312,1312],"query":[1313],"prepare":[1313]},"used_by":[]},"wpdb::update":{"doc":"\/**\n * Update a row in the table\n *\n * <code>\n * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 'bar' ), array( 'ID' => 1 ) )\n * wpdb::update( 'table', array( 'column' => 'foo', 'field' => 1337 ), array( 'ID' => 1 ), array( '%s', '%d' ), array( '%d' ) )\n * <\/code>\n *\n * @since 2.5.0\n * @see wpdb::prepare()\n * @see wpdb::$field_types\n * @see wp_set_wpdb_vars()\n *\n * @param string $table table name\n * @param array $data Data to update (in column => value pairs). Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).\n * @param array $where A named array of WHERE clauses (in column => value pairs). Multiple clauses will be joined with ANDs. Both $where columns and $where values should be \"raw\".\n * @param array|string $format Optional. An array of formats to be mapped to each of the values in $data. If string, that format will be used for all of the values in $data.\n * \tA format is one of '%d', '%f', '%s' (integer, float, string). If omitted, all values in $data will be treated as strings unless otherwise specified in wpdb::$field_types.\n * @param array|string $where_format Optional. An array of formats to be mapped to each of the values in $where. If string, that format will be used for all of the items in $where. A format is one of '%d', '%f', '%s' (integer, float, string). If omitted, all values in $where will be treated as strings.\n * @return int|false The number of rows updated, or false on error.\n *\/","file":"wp-db.php","line":1337,"missingDoc":false,"filters":[],"uses":{"is_array":[1338,1338],"array_shift":[1345,1356],"array_keys":[1343,1354],"implode":[1364,1364],"query":[1365],"prepare":[1365],"array_merge":[1365],"array_values":[1365,1365]},"used_by":[]},"wpdb::delete":{"doc":"\/**\n * Delete a row in the table\n *\n * <code>\n * wpdb::delete( 'table', array( 'ID' => 1 ) )\n * wpdb::delete( 'table', array( 'ID' => 1 ), array( '%d' ) )\n * <\/code>\n *\n * @since 3.4.0\n * @see wpdb::prepare()\n * @see wpdb::$field_types\n * @see wp_set_wpdb_vars()\n *\n * @param string $table table name\n * @param array $where A named array of WHERE clauses (in column => value pairs). Multiple clauses will be joined with ANDs. Both $where columns and $where values should be \"raw\".\n * @param array|string $where_format Optional. An array of formats to be mapped to each of the values in $where. If string, that format will be used for all of the items in $where. A format is one of '%d', '%f', '%s' (integer, float, string). If omitted, all values in $where will be treated as strings unless otherwise specified in wpdb::$field_types.\n * @return int|false The number of rows updated, or false on error.\n *\/","file":"wp-db.php","line":1386,"missingDoc":false,"filters":[],"uses":{"is_array":[1387],"array_shift":[1396],"array_keys":[1394],"implode":[1406],"query":[1407],"prepare":[1407]},"used_by":[]},"wpdb::get_var":{"doc":"\/**\n * Retrieve one variable from the database.\n *\n * Executes a SQL query and returns the value from the SQL result.\n * If the SQL result contains more than one column and\/or more than one row, this function returns the value in the column and row specified.\n * If $query is null, this function returns the value in the specified column and row from the previous SQL result.\n *\n * @since 0.71\n *\n * @param string|null $query Optional. SQL query. Defaults to null, use the result from the previous query.\n * @param int $x Optional. Column of value to return. Indexed from 0.\n * @param int $y Optional. Row of value to return. Indexed from 0.\n * @return string|null Database query result (as string), or null on failure\n *\/","file":"wp-db.php","line":1425,"missingDoc":false,"filters":[],"uses":{"query":[1428],"array_values":[1432],"get_object_vars":[1432]},"used_by":[]},"wpdb::get_row":{"doc":"\/**\n * Retrieve one row from the database.\n *\n * Executes a SQL query and returns the row from the SQL result.\n *\n * @since 0.71\n *\n * @param string|null $query SQL query.\n * @param string $output Optional. one of ARRAY_A | ARRAY_N | OBJECT constants. Return an associative array (column => value, ...),\n * \ta numerically indexed array (0 => value, ...) or an object ( ->column = value ), respectively.\n * @param int $y Optional. Row to return. Indexed from 0.\n * @return mixed Database query result in format specified by $output or null on failure\n *\/","file":"wp-db.php","line":1452,"missingDoc":false,"filters":[],"uses":{"query":[1455],"get_object_vars":[1465,1467],"array_values":[1467],"print_error":[1469]},"used_by":[]},"wpdb::get_col":{"doc":"\/**\n * Retrieve one column from the database.\n *\n * Executes a SQL query and returns the column from the SQL result.\n * If the SQL result contains more than one column, this function returns the column specified.\n * If $query is null, this function returns the specified column from the previous SQL result.\n *\n * @since 0.71\n *\n * @param string|null $query Optional. SQL query. Defaults to previous query.\n * @param int $x Optional. Column to return. Indexed from 0.\n * @return array Database query result. Array indexed from 0 by SQL result row number.\n *\/","file":"wp-db.php","line":1486,"missingDoc":false,"filters":[],"uses":{"query":[1488],"count":[1492],"get_var":[1493]},"used_by":[]},"wpdb::get_results":{"doc":"\/**\n * Retrieve an entire SQL result set from the database (i.e., many rows)\n *\n * Executes a SQL query and returns the entire SQL result.\n *\n * @since 0.71\n *\n * @param string $query SQL query.\n * @param string $output Optional. Any of ARRAY_A | ARRAY_N | OBJECT | OBJECT_K constants. With one of the first three, return an array of rows indexed from 0 by SQL result row number.\n * \tEach row is an associative array (column => value, ...), a numerically indexed array (0 => value, ...), or an object. ( ->column = value ), respectively.\n * \tWith OBJECT_K, return an associative array of row objects keyed by the value of each row's first column's value. Duplicate keys are discarded.\n * @return mixed Database query results\n *\/","file":"wp-db.php","line":1511,"missingDoc":false,"filters":[],"uses":{"query":[1515],"get_object_vars":[1527,1539,1542],"array_shift":[1528],"array_values":[1539]},"used_by":[]},"wpdb::load_col_info":{"doc":"\/**\n * Load the column metadata from the last query.\n *\n * @since 3.5.0\n *\n * @access protected\n *\/","file":"wp-db.php","line":1558,"missingDoc":false,"filters":[],"uses":{"mysql_num_fields":[1562],"mysql_fetch_field":[1563]},"used_by":[]},"wpdb::get_col_info":{"doc":"\/**\n * Retrieve column metadata from the last query.\n *\n * @since 0.71\n *\n * @param string $info_type Optional. Type one of name, table, def, max_length, not_null, primary_key, multiple_key, unique_key, numeric, blob, type, unsigned, zerofill\n * @param int $col_offset Optional. 0: col name. 1: which table the col's in. 2: col's max length. 3: if the col is numeric. 4: col's type\n * @return mixed Column Results\n *\/","file":"wp-db.php","line":1576,"missingDoc":false,"filters":[],"uses":{"load_col_info":[1577]},"used_by":[]},"wpdb::timer_start":{"doc":"\/**\n * Starts the timer, for debugging purposes.\n *\n * @since 1.5.0\n *\n * @return true\n *\/","file":"wp-db.php","line":1601,"missingDoc":false,"filters":[],"uses":{"microtime":[1602]},"used_by":[]},"wpdb::timer_stop":{"doc":"\/**\n * Stops the debugging timer.\n *\n * @since 1.5.0\n *\n * @return float Total time spent on the query, in seconds\n *\/","file":"wp-db.php","line":1613,"missingDoc":false,"filters":[],"uses":{"microtime":[1614]},"used_by":[]},"wpdb::bail":{"doc":"\/**\n * Wraps errors in a nice header and footer and dies.\n *\n * Will not die if wpdb::$show_errors is false.\n *\n * @since 1.5.0\n *\n * @param string $message The Error message\n * @param string $error_code Optional. A Computer readable string to identify the error.\n * @return false|void\n *\/","file":"wp-db.php","line":1628,"missingDoc":false,"filters":[],"uses":{"class_exists":[1630],"wp_die":[1636]},"used_by":[]},"wpdb::check_database_version":{"doc":"\/**\n * Whether MySQL database is at least the required minimum version.\n *\n * @since 2.5.0\n * @uses $wp_version\n * @uses $required_mysql_version\n *\n * @return WP_Error\n *\/","file":"wp-db.php","line":1648,"missingDoc":false,"filters":[],"uses":{"sprintf":[1652],"__":[1652],"version_compare":[1651],"db_version":[1651]},"used_by":[]},"wpdb::supports_collation":{"doc":"\/**\n * Whether the database supports collation.\n *\n * Called when WordPress is generating the table scheme.\n *\n * @since 2.5.0\n * @deprecated 3.5.0\n * @deprecated Use wpdb::has_cap( 'collation' )\n *\n * @return bool True if collation is supported, false if version does not\n *\/","file":"wp-db.php","line":1666,"missingDoc":false,"filters":[],"uses":{"_deprecated_function":[1667],"has_cap":[1668]},"used_by":[]},"wpdb::get_charset_collate":{"doc":"\/**\n * The database character collate.\n *\n * @since 3.5.0\n *\n * @return string The database character collate.\n *\/","file":"wp-db.php","line":1678,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"wpdb::has_cap":{"doc":"\/**\n * Determine if a database supports a particular feature\n *\n * @since 2.7.0\n * @see   wpdb::db_version()\n *\n * @param string $db_cap the feature\n * @return bool\n *\/","file":"wp-db.php","line":1698,"missingDoc":false,"filters":[],"uses":{"db_version":[1699],"strtolower":[1701],"version_compare":[1705,1707]},"used_by":[]},"wpdb::get_caller":{"doc":"\/**\n * Retrieve the name of the function that called wpdb.\n *\n * Searches up the list of functions until it reaches\n * the one that would most logically had called this method.\n *\n * @since 2.5.0\n *\n * @return string The name of the calling function\n *\/","file":"wp-db.php","line":1723,"missingDoc":false,"filters":[],"uses":{"wp_debug_backtrace_summary":[1724]},"used_by":[]},"wpdb::db_version":{"doc":"\/**\n * The database version number.\n *\n * @since 2.7.0\n *\n * @return false|string false on failure, version number on success\n *\/","file":"wp-db.php","line":1734,"missingDoc":false,"filters":[],"uses":{"preg_replace":[1735],"mysql_get_server_info":[1735]},"used_by":[]},"WP_Text_Diff_Renderer_Table::__construct":{"doc":"\/**\n * Constructor - Call parent constructor with params array.\n *\n * This will set class properties based on the key value pairs in the array.\n *\n * @since 2.6.0\n *\n * @param array $params\n *\/","file":"wp-diff.php","line":71,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Text_Diff_Renderer_Table::_startBlock":{"doc":"\/**\n * @ignore\n *\n * @param string $header\n * @return string\n *\/","file":"wp-diff.php","line":81,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Text_Diff_Renderer_Table::_lines":{"doc":"\/**\n * @ignore\n *\n * @param array $lines\n * @param string $prefix\n *\/","file":"wp-diff.php","line":91,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Text_Diff_Renderer_Table::addedLine":{"doc":"\/**\n * @ignore\n *\n * @param string $line HTML-escape the value.\n * @return string\n *\/","file":"wp-diff.php","line":100,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Text_Diff_Renderer_Table::deletedLine":{"doc":"\/**\n * @ignore\n *\n * @param string $line HTML-escape the value.\n * @return string\n *\/","file":"wp-diff.php","line":110,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Text_Diff_Renderer_Table::contextLine":{"doc":"\/**\n * @ignore\n *\n * @param string $line HTML-escape the value.\n * @return string\n *\/","file":"wp-diff.php","line":120,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Text_Diff_Renderer_Table::emptyLine":{"doc":"\/**\n * @ignore\n *\n * @return string\n *\/","file":"wp-diff.php","line":129,"missingDoc":false,"filters":[],"uses":[],"used_by":[]},"WP_Text_Diff_Renderer_Table::_added":{"doc":"\/**\n * @ignore\n * @access private\n *\n * @param array $lines\n * @param bool $encode\n * @return string\n *\/","file":"wp-diff.php","line":141,"missingDoc":false,"filters":[],"uses":{"htmlspecialchars":[145],"emptyLine":[146],"addedLine":[146]},"used_by":[]},"WP_Text_Diff_Renderer_Table::_deleted":{"doc":"\/**\n * @ignore\n * @access private\n *\n * @param array $lines\n * @param bool $encode\n * @return string\n *\/","file":"wp-diff.php","line":159,"missingDoc":false,"filters":[],"uses":{"htmlspecialchars":[163],"deletedLine":[164],"emptyLine":[164]},"used_by":[]},"WP_Text_Diff_Renderer_Table::_context":{"doc":"\/**\n * @ignore\n * @access private\n *\n * @param array $lines\n * @param bool $encode\n * @return string\n *\/","file":"wp-diff.php","line":177,"missingDoc":false,"filters":[],"uses":{"htmlspecialchars":[181],"contextLine":[183,183]},"used_by":[]},"WP_Text_Diff_Renderer_Table::_changed":{"doc":"\/**\n * Process changed lines to do word-by-word diffs for extra highlighting.\n *\n * (TRAC style) sometimes these lines can actually be deleted or added rows.\n * We do additional processing to figure that out\n *\n * @access private\n * @since 2.6.0\n *\n * @param array $orig\n * @param array $final\n * @return string\n *\/","file":"wp-diff.php","line":201,"missingDoc":false,"filters":[],"uses":{"interleave_changed_lines":[211],"render":[222],"strlen":[227,230],"strip_tags":[227,230],"join":[227],"preg_match_all":[225],"preg_replace":[237,238],"is_numeric":[219,219],"htmlspecialchars":[251,258],"_added":[263],"_deleted":[265],"deletedLine":[267],"addedLine":[267],"array_keys":[242]},"used_by":[]},"WP_Text_Diff_Renderer_Table::interleave_changed_lines":{"doc":"\/**\n * Takes changed blocks and matches which rows in orig turned into which rows in final.\n *\n * Returns\n *\t*_matches ( which rows match with which )\n *\t*_rows ( order of rows in each column interleaved with blank rows as\n *\t\tnecessary )\n *\n * @since 2.6.0\n *\n * @param unknown_type $orig\n * @param unknown_type $final\n * @return unknown\n *\/","file":"wp-diff.php","line":288,"missingDoc":false,"filters":[],"uses":{"compute_string_distance":[294],"array_keys":[293,292,332,333],"asort":[297],"explode":[303],"ksort":[328,329],"array_search":[338,339],"array_splice":[342,346,350],"count":[355,355],"array_push":[358,362]},"used_by":[]},"WP_Text_Diff_Renderer_Table::compute_string_distance":{"doc":"\/**\n * Computes a number that is intended to reflect the \"distance\" between two strings.\n *\n * @since 2.6.0\n *\n * @param string $string1\n * @param string $string2\n * @return int\n *\/","file":"wp-diff.php","line":419,"missingDoc":false,"filters":[],"uses":{"count_chars":[421,422],"array_sum":[425],"array_map":[425],"strlen":[432]},"used_by":[]},"WP_Text_Diff_Renderer_Table::difference":{"doc":"\/**\n * @ignore\n * @since 2.6.0\n *\n * @param int $a\n * @param int $b\n * @return int\n *\/","file":"wp-diff.php","line":443,"missingDoc":false,"filters":[],"uses":{"abs":[444]},"used_by":[]},"WP_Text_Diff_Renderer_inline::_splitOnWords":{"doc":"\/**\n * @ignore\n * @since 2.6.0\n *\n * @param string $string\n * @param string $newlineEscape\n * @return string\n *\/","file":"wp-diff.php","line":465,"missingDoc":false,"filters":[],"uses":{"str_replace":[466,468],"preg_split":[467]},"used_by":[]}}